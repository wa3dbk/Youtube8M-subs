WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.600 

hi<00:00:00.599> in<00:00:01.290> this<00:00:01.560> video<00:00:01.890> we<00:00:02.190> are<00:00:02.280> going<00:00:02.520> to

00:00:02.600 --> 00:00:02.610 
hi in this video we are going to

00:00:02.610 --> 00:00:04.640 
hi in this video we are going to
interface<00:00:03.030> a<00:00:03.060> ps2<00:00:03.689> keyboard<00:00:03.929> with<00:00:04.620> a

00:00:04.640 --> 00:00:04.650 
interface a ps2 keyboard with a

00:00:04.650 --> 00:00:06.140 
interface a ps2 keyboard with a
microcontroller<00:00:05.040> in<00:00:05.490> our<00:00:05.609> nerd<00:00:05.759> kit<00:00:05.970> and

00:00:06.140 --> 00:00:06.150 
microcontroller in our nerd kit and

00:00:06.150 --> 00:00:07.880 
microcontroller in our nerd kit and
along<00:00:06.720> the<00:00:06.870> way<00:00:07.020> we're<00:00:07.410> gonna<00:00:07.500> learn<00:00:07.770> about

00:00:07.880 --> 00:00:07.890 
along the way we're gonna learn about

00:00:07.890 --> 00:00:10.820 
along the way we're gonna learn about
interrupts<00:00:08.510> in<00:00:09.510> my<00:00:09.780> controller<00:00:10.230> programming

00:00:10.820 --> 00:00:10.830 
interrupts in my controller programming

00:00:10.830 --> 00:00:13.190 
interrupts in my controller programming
as<00:00:10.950> in<00:00:11.219> normal<00:00:11.519> programming<00:00:11.940> for<00:00:12.210> PCs<00:00:12.570> there

00:00:13.190 --> 00:00:13.200 
as in normal programming for PCs there

00:00:13.200 --> 00:00:14.780 
as in normal programming for PCs there
is<00:00:13.290> an<00:00:13.380> inherit<00:00:13.769> disconnect<00:00:14.340> between<00:00:14.519> the<00:00:14.759> way

00:00:14.780 --> 00:00:14.790 
is an inherit disconnect between the way

00:00:14.790 --> 00:00:16.490 
is an inherit disconnect between the way
we<00:00:15.030> write<00:00:15.210> code<00:00:15.540> and<00:00:15.839> the<00:00:16.170> way<00:00:16.289> things

00:00:16.490 --> 00:00:16.500 
we write code and the way things

00:00:16.500 --> 00:00:17.870 
we write code and the way things
actually<00:00:16.740> happen<00:00:17.369> in<00:00:17.460> real<00:00:17.670> life

00:00:17.870 --> 00:00:17.880 
actually happen in real life

00:00:17.880 --> 00:00:20.120 
actually happen in real life
when<00:00:18.690> you<00:00:18.779> sit<00:00:18.990> down<00:00:19.020> to<00:00:19.199> write<00:00:19.470> a<00:00:19.529> function<00:00:19.949> or

00:00:20.120 --> 00:00:20.130 
when you sit down to write a function or

00:00:20.130 --> 00:00:21.679 
when you sit down to write a function or
a<00:00:20.160> method<00:00:20.279> you<00:00:21.000> write<00:00:21.150> a<00:00:21.180> sequence<00:00:21.600> of

00:00:21.679 --> 00:00:21.689 
a method you write a sequence of

00:00:21.689 --> 00:00:23.060 
a method you write a sequence of
statements<00:00:21.930> that<00:00:22.380> all<00:00:22.439> happen<00:00:22.859> one<00:00:23.039> after

00:00:23.060 --> 00:00:23.070 
statements that all happen one after

00:00:23.070 --> 00:00:25.340 
statements that all happen one after
each<00:00:23.519> other<00:00:23.730> even<00:00:24.269> with<00:00:24.600> the<00:00:24.689> use<00:00:24.840> of<00:00:24.869> control

00:00:25.340 --> 00:00:25.350 
each other even with the use of control

00:00:25.350 --> 00:00:27.080 
each other even with the use of control
structures<00:00:25.769> and<00:00:26.039> cost<00:00:26.519> to<00:00:26.699> other<00:00:26.820> functions

00:00:27.080 --> 00:00:27.090 
structures and cost to other functions

00:00:27.090 --> 00:00:29.210 
structures and cost to other functions
you<00:00:27.510> can<00:00:27.900> still<00:00:28.109> follow<00:00:28.320> a<00:00:28.500> single<00:00:29.010> path

00:00:29.210 --> 00:00:29.220 
you can still follow a single path

00:00:29.220 --> 00:00:31.070 
you can still follow a single path
through<00:00:29.609> the<00:00:29.730> code<00:00:30.000> starting<00:00:30.660> with<00:00:30.810> a<00:00:30.840> main

00:00:31.070 --> 00:00:31.080 
through the code starting with a main

00:00:31.080 --> 00:00:33.260 
through the code starting with a main
function<00:00:31.289> while<00:00:32.219> this<00:00:32.399> paradigm<00:00:32.910> might<00:00:33.120> be

00:00:33.260 --> 00:00:33.270 
function while this paradigm might be

00:00:33.270 --> 00:00:35.150 
function while this paradigm might be
fine<00:00:33.600> for<00:00:33.930> thinking<00:00:34.200> about<00:00:34.260> simple<00:00:34.739> programs

00:00:35.150 --> 00:00:35.160 
fine for thinking about simple programs

00:00:35.160 --> 00:00:37.340 
fine for thinking about simple programs
and<00:00:35.370> algorithms<00:00:35.910> it<00:00:36.390> doesn't<00:00:36.719> really<00:00:36.960> work

00:00:37.340 --> 00:00:37.350 
and algorithms it doesn't really work

00:00:37.350 --> 00:00:39.170 
and algorithms it doesn't really work
when<00:00:37.680> thinking<00:00:37.950> about<00:00:38.100> larger<00:00:38.760> systems

00:00:39.170 --> 00:00:39.180 
when thinking about larger systems

00:00:39.180 --> 00:00:41.360 
when thinking about larger systems
sometimes<00:00:40.050> systems<00:00:40.500> need<00:00:40.620> to<00:00:40.739> interact<00:00:41.010> with

00:00:41.360 --> 00:00:41.370 
sometimes systems need to interact with

00:00:41.370 --> 00:00:43.459 
sometimes systems need to interact with
each<00:00:41.460> other<00:00:41.579> and<00:00:41.850> your<00:00:42.270> code<00:00:42.600> needs<00:00:42.989> to<00:00:43.110> react

00:00:43.459 --> 00:00:43.469 
each other and your code needs to react

00:00:43.469 --> 00:00:46.060 
each other and your code needs to react
to<00:00:43.739> outside<00:00:43.860> events<00:00:44.430> in<00:00:44.730> an<00:00:45.120> asynchronous<00:00:45.539> way

00:00:46.060 --> 00:00:46.070 
to outside events in an asynchronous way

00:00:46.070 --> 00:00:48.529 
to outside events in an asynchronous way
to<00:00:47.070> accomplish<00:00:47.489> this<00:00:47.579> in<00:00:47.730> my<00:00:47.850> controllers<00:00:48.390> we

00:00:48.529 --> 00:00:48.539 
to accomplish this in my controllers we

00:00:48.539 --> 00:00:50.360 
to accomplish this in my controllers we
have<00:00:48.660> something<00:00:48.960> called<00:00:49.110> an<00:00:49.410> interrupt<00:00:49.649> like

00:00:50.360 --> 00:00:50.370 
have something called an interrupt like

00:00:50.370 --> 00:00:52.130 
have something called an interrupt like
you<00:00:50.550> would<00:00:50.670> expect<00:00:50.760> an<00:00:51.300> interrupt<00:00:51.809> looks<00:00:51.960> much

00:00:52.130 --> 00:00:52.140 
you would expect an interrupt looks much

00:00:52.140 --> 00:00:54.049 
you would expect an interrupt looks much
like<00:00:52.320> a<00:00:52.350> function<00:00:52.800> except<00:00:53.489> it<00:00:53.579> only<00:00:53.699> executes

00:00:54.049 --> 00:00:54.059 
like a function except it only executes

00:00:54.059 --> 00:00:56.000 
like a function except it only executes
when<00:00:54.360> outside<00:00:54.719> events<00:00:54.989> happen<00:00:55.289> so<00:00:55.739> you<00:00:55.800> don't

00:00:56.000 --> 00:00:56.010 
when outside events happen so you don't

00:00:56.010 --> 00:00:57.350 
when outside events happen so you don't
have<00:00:56.129> to<00:00:56.219> call<00:00:56.399> it<00:00:56.550> directly<00:00:56.850> from<00:00:56.940> your<00:00:57.210> main

00:00:57.350 --> 00:00:57.360 
have to call it directly from your main

00:00:57.360 --> 00:00:59.689 
have to call it directly from your main
function<00:00:57.780> think<00:00:58.500> of<00:00:58.620> it<00:00:58.710> this<00:00:58.829> way<00:00:58.890> say<00:00:59.550> I'm

00:00:59.689 --> 00:00:59.699 
function think of it this way say I'm

00:00:59.699 --> 00:01:00.729 
function think of it this way say I'm
trying<00:00:59.940> to<00:01:00.090> add<00:01:00.239> up<00:01:00.390> all<00:01:00.510> these<00:01:00.660> numbers

00:01:00.729 --> 00:01:00.739 
trying to add up all these numbers

00:01:00.739 --> 00:01:06.890 
trying to add up all these numbers
that's<00:01:01.739> my<00:01:01.890> main<00:01:02.100> loop<00:01:02.340> I<00:01:05.810> handle<00:01:06.810> the

00:01:06.890 --> 00:01:06.900 
that's my main loop I handle the

00:01:06.900 --> 00:01:09.560 
that's my main loop I handle the
interrupt<00:01:07.350> and<00:01:07.790> then<00:01:08.790> go<00:01:08.909> right<00:01:09.090> back<00:01:09.270> to<00:01:09.299> my

00:01:09.560 --> 00:01:09.570 
interrupt and then go right back to my

00:01:09.570 --> 00:01:11.450 
interrupt and then go right back to my
main<00:01:09.720> loop<00:01:09.930> there<00:01:10.740> are<00:01:10.830> many<00:01:10.979> different<00:01:11.369> types

00:01:11.450 --> 00:01:11.460 
main loop there are many different types

00:01:11.460 --> 00:01:13.340 
main loop there are many different types
of<00:01:11.670> interrupts<00:01:12.060> available<00:01:12.570> to<00:01:12.659> you<00:01:12.780> on<00:01:12.900> the<00:01:12.930> 18

00:01:13.340 --> 00:01:13.350 
of interrupts available to you on the 18

00:01:13.350 --> 00:01:15.260 
of interrupts available to you on the 18
mega<00:01:13.590> one<00:01:13.740> six<00:01:13.950> eight<00:01:14.070> ship<00:01:14.340> but<00:01:14.790> for<00:01:15.000> the<00:01:15.090> most

00:01:15.260 --> 00:01:15.270 
mega one six eight ship but for the most

00:01:15.270 --> 00:01:16.760 
mega one six eight ship but for the most
part<00:01:15.390> you're<00:01:15.840> going<00:01:16.020> to<00:01:16.140> find<00:01:16.320> yourself<00:01:16.409> using

00:01:16.760 --> 00:01:16.770 
part you're going to find yourself using

00:01:16.770 --> 00:01:18.320 
part you're going to find yourself using
one<00:01:17.009> of<00:01:17.100> two<00:01:17.280> main<00:01:17.520> types<00:01:17.790> of<00:01:17.909> interrupts

00:01:18.320 --> 00:01:18.330 
one of two main types of interrupts

00:01:18.330 --> 00:01:20.330 
one of two main types of interrupts
timer<00:01:18.990> interrupts<00:01:19.560> and<00:01:19.680> pin<00:01:20.130> change

00:01:20.330 --> 00:01:20.340 
timer interrupts and pin change

00:01:20.340 --> 00:01:22.760 
timer interrupts and pin change
interrupts<00:01:20.930> timer<00:01:21.930> interrupts<00:01:22.470> are<00:01:22.590> best

00:01:22.760 --> 00:01:22.770 
interrupts timer interrupts are best

00:01:22.770 --> 00:01:24.320 
interrupts timer interrupts are best
used<00:01:23.009> when<00:01:23.189> you<00:01:23.280> want<00:01:23.430> to<00:01:23.520> fire<00:01:23.729> off<00:01:23.970> a<00:01:24.000> quick

00:01:24.320 --> 00:01:24.330 
used when you want to fire off a quick

00:01:24.330 --> 00:01:26.480 
used when you want to fire off a quick
task<00:01:24.600> at<00:01:24.960> a<00:01:24.990> regular<00:01:25.170> time<00:01:25.380> interval<00:01:25.950> you<00:01:26.460> can

00:01:26.480 --> 00:01:26.490 
task at a regular time interval you can

00:01:26.490 --> 00:01:28.340 
task at a regular time interval you can
choose<00:01:26.850> to<00:01:27.000> fire<00:01:27.180> a<00:01:27.299> timer<00:01:27.570> interrupt<00:01:28.140> when<00:01:28.320> a

00:01:28.340 --> 00:01:28.350 
choose to fire a timer interrupt when a

00:01:28.350 --> 00:01:30.260 
choose to fire a timer interrupt when a
timer<00:01:28.619> overflows<00:01:29.220> or<00:01:29.490> when<00:01:29.970> the<00:01:30.060> timer

00:01:30.260 --> 00:01:30.270 
timer overflows or when the timer

00:01:30.270 --> 00:01:32.660 
timer overflows or when the timer
reaches<00:01:30.689> a<00:01:30.720> particular<00:01:30.930> value<00:01:31.439> the<00:01:32.430> best

00:01:32.660 --> 00:01:32.670 
reaches a particular value the best

00:01:32.670 --> 00:01:34.520 
reaches a particular value the best
example<00:01:33.150> of<00:01:33.240> timer<00:01:33.479> interrupts<00:01:33.990> can<00:01:34.200> be<00:01:34.290> found

00:01:34.520 --> 00:01:34.530 
example of timer interrupts can be found

00:01:34.530 --> 00:01:36.170 
example of timer interrupts can be found
in<00:01:34.680> the<00:01:34.740> crystal<00:01:35.100> real-time<00:01:35.490> clock<00:01:35.759> code<00:01:36.000> in

00:01:36.170 --> 00:01:36.180 
in the crystal real-time clock code in

00:01:36.180 --> 00:01:38.270 
in the crystal real-time clock code in
that<00:01:36.810> example<00:01:37.170> we<00:01:37.409> wanted<00:01:37.680> to<00:01:37.770> have<00:01:37.920> a<00:01:37.950> way<00:01:38.159> of

00:01:38.270 --> 00:01:38.280 
that example we wanted to have a way of

00:01:38.280 --> 00:01:39.620 
that example we wanted to have a way of
telling<00:01:38.549> the<00:01:38.579> real<00:01:38.790> time<00:01:39.119> using<00:01:39.450> a

00:01:39.620 --> 00:01:39.630 
telling the real time using a

00:01:39.630 --> 00:01:41.810 
telling the real time using a
microcontroller<00:01:40.100> since<00:01:41.100> our<00:01:41.220> crystal<00:01:41.640> runs

00:01:41.810 --> 00:01:41.820 
microcontroller since our crystal runs

00:01:41.820 --> 00:01:44.569 
microcontroller since our crystal runs
at<00:01:41.939> a<00:01:42.000> very<00:01:42.180> steady<00:01:42.590> 14.7<00:01:43.590> megahertz<00:01:44.100> we<00:01:44.399> use<00:01:44.549> a

00:01:44.569 --> 00:01:44.579 
at a very steady 14.7 megahertz we use a

00:01:44.579 --> 00:01:46.940 
at a very steady 14.7 megahertz we use a
timer<00:01:44.939> interrupt<00:01:45.509> to<00:01:45.630> fire<00:01:45.810> every<00:01:46.170> one<00:01:46.380> 100th

00:01:46.940 --> 00:01:46.950 
timer interrupt to fire every one 100th

00:01:46.950 --> 00:01:49.399 
timer interrupt to fire every one 100th
of<00:01:47.040> a<00:01:47.130> second<00:01:47.490> the<00:01:48.240> interrupt<00:01:48.720> handler<00:01:49.020> simply

00:01:49.399 --> 00:01:49.409 
of a second the interrupt handler simply

00:01:49.409 --> 00:01:51.170 
of a second the interrupt handler simply
increments<00:01:49.979> a<00:01:50.040> variable<00:01:50.520> every<00:01:50.670> time<00:01:50.939> it<00:01:51.090> is

00:01:51.170 --> 00:01:51.180 
increments a variable every time it is

00:01:51.180 --> 00:01:54.109 
increments a variable every time it is
fired<00:01:51.420> here<00:01:52.320> the<00:01:52.649> timer<00:01:52.950> and<00:01:53.250> incrementing<00:01:54.030> of

00:01:54.109 --> 00:01:54.119 
fired here the timer and incrementing of

00:01:54.119 --> 00:01:55.249 
fired here the timer and incrementing of
the<00:01:54.240> variable<00:01:54.689> is<00:01:54.780> handled<00:01:55.140> completely

00:01:55.249 --> 00:01:55.259 
the variable is handled completely

00:01:55.259 --> 00:01:57.679 
the variable is handled completely
outside<00:01:56.009> of<00:01:56.070> the<00:01:56.189> main<00:01:56.430> code<00:01:56.700> once<00:01:57.540> the

00:01:57.679 --> 00:01:57.689 
outside of the main code once the

00:01:57.689 --> 00:01:59.539 
outside of the main code once the
interrupt<00:01:58.140> is<00:01:58.259> set<00:01:58.439> up<00:01:58.560> it<00:01:58.890> will<00:01:59.009> fire<00:01:59.280> an

00:01:59.539 --> 00:01:59.549 
interrupt is set up it will fire an

00:01:59.549 --> 00:02:01.340 
interrupt is set up it will fire an
increment<00:02:00.000> the<00:02:00.060> variable<00:02:00.450> by<00:02:00.509> itself<00:02:00.540> without

00:02:01.340 --> 00:02:01.350 
increment the variable by itself without

00:02:01.350 --> 00:02:03.410 
increment the variable by itself without
your<00:02:01.500> code<00:02:01.710> having<00:02:01.920> to<00:02:02.100> worry<00:02:02.280> about<00:02:02.369> is<00:02:03.240> it

00:02:03.410 --> 00:02:03.420 
your code having to worry about is it

00:02:03.420 --> 00:02:04.789 
your code having to worry about is it
allows<00:02:03.600> you<00:02:03.780> to<00:02:03.899> run<00:02:04.049> other<00:02:04.229> tasks<00:02:04.770> like

00:02:04.789 --> 00:02:04.799 
allows you to run other tasks like

00:02:04.799 --> 00:02:07.219 
allows you to run other tasks like
updating<00:02:05.250> the<00:02:05.549> LCD<00:02:06.000> or<00:02:06.420> doing<00:02:06.689> whatever<00:02:06.869> else

00:02:07.219 --> 00:02:07.229 
updating the LCD or doing whatever else

00:02:07.229 --> 00:02:09.050 
updating the LCD or doing whatever else
your<00:02:07.409> project<00:02:07.799> requires<00:02:08.099> but<00:02:08.670> now<00:02:08.849> with<00:02:09.030> a

00:02:09.050 --> 00:02:09.060 
your project requires but now with a

00:02:09.060 --> 00:02:10.550 
your project requires but now with a
real-time<00:02:09.479> variable<00:02:09.989> at<00:02:10.140> your<00:02:10.259> disposal

00:02:10.550 --> 00:02:10.560 
real-time variable at your disposal

00:02:10.560 --> 00:02:13.250 
real-time variable at your disposal
check<00:02:11.489> out<00:02:11.640> our<00:02:11.760> real-time<00:02:12.180> clock<00:02:12.510> video<00:02:12.900> for

00:02:13.250 --> 00:02:13.260 
check out our real-time clock video for

00:02:13.260 --> 00:02:13.530 
check out our real-time clock video for
more

00:02:13.530 --> 00:02:13.540 
more

00:02:13.540 --> 00:02:16.199 
more
tails<00:02:13.780> on<00:02:13.989> this<00:02:14.170> project<00:02:14.790> the<00:02:15.790> other<00:02:15.819> often

00:02:16.199 --> 00:02:16.209 
tails on this project the other often

00:02:16.209 --> 00:02:18.000 
tails on this project the other often
use<00:02:16.599> type<00:02:16.810> of<00:02:16.959> interrupts<00:02:17.319> is<00:02:17.500> a<00:02:17.530> pin<00:02:17.799> change

00:02:18.000 --> 00:02:18.010 
use type of interrupts is a pin change

00:02:18.010 --> 00:02:20.039 
use type of interrupts is a pin change
interrupts<00:02:18.489> these<00:02:19.120> types<00:02:19.359> of<00:02:19.480> interrupts<00:02:19.870> are

00:02:20.039 --> 00:02:20.049 
interrupts these types of interrupts are

00:02:20.049 --> 00:02:21.509 
interrupts these types of interrupts are
very<00:02:20.230> useful<00:02:20.680> when<00:02:20.769> communicating<00:02:21.370> with

00:02:21.509 --> 00:02:21.519 
very useful when communicating with

00:02:21.519 --> 00:02:24.000 
very useful when communicating with
outside<00:02:22.000> devices<00:02:22.450> to<00:02:23.019> demonstrate<00:02:23.590> that<00:02:23.769> we

00:02:24.000 --> 00:02:24.010 
outside devices to demonstrate that we

00:02:24.010 --> 00:02:25.740 
outside devices to demonstrate that we
put<00:02:24.189> together<00:02:24.310> a<00:02:24.549> quick<00:02:24.819> little<00:02:25.120> project<00:02:25.569> that

00:02:25.740 --> 00:02:25.750 
put together a quick little project that

00:02:25.750 --> 00:02:28.170 
put together a quick little project that
interfaces<00:02:26.319> a<00:02:26.409> ps2<00:02:26.920> keyboard<00:02:27.159> with<00:02:27.849> our<00:02:28.000> nerd

00:02:28.170 --> 00:02:28.180 
interfaces a ps2 keyboard with our nerd

00:02:28.180 --> 00:02:31.440 
interfaces a ps2 keyboard with our nerd
kit<00:02:28.439> the<00:02:29.439> ps2<00:02:29.980> protocol<00:02:30.489> is<00:02:30.640> very<00:02:30.849> simple<00:02:31.299> and

00:02:31.440 --> 00:02:31.450 
kit the ps2 protocol is very simple and

00:02:31.450 --> 00:02:33.360 
kit the ps2 protocol is very simple and
very<00:02:31.510> easy<00:02:31.989> to<00:02:32.140> interface<00:02:32.650> with<00:02:32.709> a<00:02:32.920> nerd<00:02:33.129> kit

00:02:33.360 --> 00:02:33.370 
very easy to interface with a nerd kit

00:02:33.370 --> 00:02:35.880 
very easy to interface with a nerd kit
here<00:02:34.299> we<00:02:34.569> just<00:02:34.840> chopped<00:02:35.109> off<00:02:35.349> the<00:02:35.560> connector

00:02:35.880 --> 00:02:35.890 
here we just chopped off the connector

00:02:35.890 --> 00:02:37.830 
here we just chopped off the connector
end<00:02:36.189> of<00:02:36.310> the<00:02:36.400> keyboard<00:02:36.790> cable<00:02:37.030> and<00:02:37.299> you<00:02:37.659> can

00:02:37.830 --> 00:02:37.840 
end of the keyboard cable and you can

00:02:37.840 --> 00:02:39.929 
end of the keyboard cable and you can
see<00:02:37.989> there<00:02:38.170> are<00:02:38.290> four<00:02:38.530> wires<00:02:38.939> corresponding

00:02:39.929 --> 00:02:39.939 
see there are four wires corresponding

00:02:39.939 --> 00:02:43.379 
see there are four wires corresponding
to<00:02:40.030> ground<00:02:40.329> power<00:02:41.340> o'clock<00:02:42.340> line<00:02:42.639> and<00:02:42.909> a<00:02:43.209> data

00:02:43.379 --> 00:02:43.389 
to ground power o'clock line and a data

00:02:43.389 --> 00:02:46.679 
to ground power o'clock line and a data
wire<00:02:44.730> the<00:02:45.730> clock<00:02:45.970> and<00:02:46.120> data<00:02:46.299> line<00:02:46.540> are

00:02:46.679 --> 00:02:46.689 
wire the clock and data line are

00:02:46.689 --> 00:02:48.420 
wire the clock and data line are
normally<00:02:47.079> not<00:02:47.230> moving<00:02:47.620> until<00:02:47.950> a<00:02:48.010> keyboard

00:02:48.420 --> 00:02:48.430 
normally not moving until a keyboard

00:02:48.430 --> 00:02:50.759 
normally not moving until a keyboard
wants<00:02:48.639> to<00:02:48.730> send<00:02:48.879> a<00:02:48.970> carrier<00:02:49.209> each<00:02:50.079> key<00:02:50.439> press

00:02:50.759 --> 00:02:50.769 
wants to send a carrier each key press

00:02:50.769 --> 00:02:53.009 
wants to send a carrier each key press
is<00:02:51.010> sent<00:02:51.280> as<00:02:51.430> 11<00:02:51.790> bits<00:02:52.030> read<00:02:52.480> on<00:02:52.599> the<00:02:52.689> falling

00:02:53.009 --> 00:02:53.019 
is sent as 11 bits read on the falling

00:02:53.019 --> 00:02:55.379 
is sent as 11 bits read on the falling
edge<00:02:53.169> of<00:02:53.319> a<00:02:53.439> clock<00:02:53.650> line<00:02:53.889> first<00:02:54.669> or<00:02:54.879> start<00:02:55.180> bit

00:02:55.379 --> 00:02:55.389 
edge of a clock line first or start bit

00:02:55.389 --> 00:02:57.720 
edge of a clock line first or start bit
with<00:02:55.659> a<00:02:55.689> data<00:02:55.930> line<00:02:56.169> low<00:02:56.439> then<00:02:57.040> eight<00:02:57.310> bits<00:02:57.579> of

00:02:57.720 --> 00:02:57.730 
with a data line low then eight bits of

00:02:57.730 --> 00:02:59.429 
with a data line low then eight bits of
the<00:02:57.819> character<00:02:58.269> least<00:02:58.720> significant<00:02:59.260> bit

00:02:59.429 --> 00:02:59.439 
the character least significant bit

00:02:59.439 --> 00:03:01.920 
the character least significant bit
first<00:02:59.470> then<00:03:00.340> a<00:03:00.370> parried<00:03:00.790> a<00:03:00.909> bit<00:03:01.060> and<00:03:01.269> finally<00:03:01.720> a

00:03:01.920 --> 00:03:01.930 
first then a parried a bit and finally a

00:03:01.930 --> 00:03:05.339 
first then a parried a bit and finally a
stop<00:03:02.230> in<00:03:03.239> most<00:03:04.239> keys<00:03:04.510> on<00:03:04.659> the<00:03:04.780> keyboard<00:03:04.959> are

00:03:05.339 --> 00:03:05.349 
stop in most keys on the keyboard are

00:03:05.349 --> 00:03:07.170 
stop in most keys on the keyboard are
represented<00:03:05.919> using<00:03:05.950> an<00:03:06.280> 8-bit<00:03:06.639> scan<00:03:06.939> code

00:03:07.170 --> 00:03:07.180 
represented using an 8-bit scan code

00:03:07.180 --> 00:03:09.390 
represented using an 8-bit scan code
some<00:03:07.930> of<00:03:08.079> the<00:03:08.139> keys<00:03:08.349> are<00:03:08.379> extended<00:03:09.040> keys<00:03:09.250> that

00:03:09.390 --> 00:03:09.400 
some of the keys are extended keys that

00:03:09.400 --> 00:03:11.520 
some of the keys are extended keys that
require<00:03:09.760> more<00:03:10.000> than<00:03:10.180> one<00:03:10.359> byte<00:03:10.569> but<00:03:11.230> for<00:03:11.409> now

00:03:11.520 --> 00:03:11.530 
require more than one byte but for now

00:03:11.530 --> 00:03:13.770 
require more than one byte but for now
we're<00:03:11.950> just<00:03:11.980> going<00:03:12.400> to<00:03:12.430> ignore<00:03:12.609> those<00:03:12.970> we

00:03:13.770 --> 00:03:13.780 
we're just going to ignore those we

00:03:13.780 --> 00:03:15.000 
we're just going to ignore those we
hooked<00:03:13.989> up<00:03:14.139> the<00:03:14.200> keyboard<00:03:14.530> to<00:03:14.919> our

00:03:15.000 --> 00:03:15.010 
hooked up the keyboard to our

00:03:15.010 --> 00:03:16.890 
hooked up the keyboard to our
oscilloscope<00:03:15.340> so<00:03:15.879> you<00:03:15.970> can<00:03:16.150> see<00:03:16.329> the<00:03:16.450> protocol

00:03:16.890 --> 00:03:16.900 
oscilloscope so you can see the protocol

00:03:16.900 --> 00:03:19.619 
oscilloscope so you can see the protocol
working<00:03:17.260> when<00:03:17.979> I<00:03:18.010> press<00:03:18.340> the<00:03:18.489> F<00:03:18.639> key<00:03:18.669> we<00:03:19.449> can

00:03:19.619 --> 00:03:19.629 
working when I press the F key we can

00:03:19.629 --> 00:03:22.080 
working when I press the F key we can
see<00:03:19.780> the<00:03:19.900> clock<00:03:20.229> and<00:03:20.500> data<00:03:20.889> line<00:03:21.220> start<00:03:21.760> moving

00:03:22.080 --> 00:03:22.090 
see the clock and data line start moving

00:03:22.090 --> 00:03:25.020 
see the clock and data line start moving
on<00:03:22.329> each<00:03:23.079> falling<00:03:23.680> edge<00:03:23.889> of<00:03:24.040> the<00:03:24.099> clock<00:03:24.220> the

00:03:25.020 --> 00:03:25.030 
on each falling edge of the clock the

00:03:25.030 --> 00:03:26.879 
on each falling edge of the clock the
data<00:03:25.269> line<00:03:25.540> represents<00:03:26.260> the<00:03:26.379> current<00:03:26.560> bit

00:03:26.879 --> 00:03:26.889 
data line represents the current bit

00:03:26.889 --> 00:03:30.539 
data line represents the current bit
here<00:03:27.790> we<00:03:27.970> can<00:03:28.150> see<00:03:28.389> a<00:03:28.599> zero<00:03:29.290> for<00:03:29.889> the<00:03:29.979> start<00:03:30.310> bit

00:03:30.539 --> 00:03:30.549 
here we can see a zero for the start bit

00:03:30.549 --> 00:03:33.839 
here we can see a zero for the start bit
then<00:03:31.540> a<00:03:31.659> one<00:03:31.959> for<00:03:32.650> the<00:03:32.739> first<00:03:33.040> bit<00:03:33.280> of<00:03:33.310> the<00:03:33.639> data

00:03:33.839 --> 00:03:33.849 
then a one for the first bit of the data

00:03:33.849 --> 00:03:37.020 
then a one for the first bit of the data
then<00:03:34.750> there<00:03:34.959> are<00:03:35.079> 8<00:03:35.349> data<00:03:35.650> bits<00:03:35.849> followed<00:03:36.849> by

00:03:37.020 --> 00:03:37.030 
then there are 8 data bits followed by

00:03:37.030 --> 00:03:40.849 
then there are 8 data bits followed by
one<00:03:37.449> parity<00:03:37.989> bit<00:03:38.199> and<00:03:38.409> finally<00:03:39.370> the<00:03:39.639> stop<00:03:39.909> bit

00:03:40.849 --> 00:03:40.859 
one parity bit and finally the stop bit

00:03:40.859 --> 00:03:43.140 
one parity bit and finally the stop bit
so<00:03:41.859> now<00:03:42.040> it<00:03:42.159> becomes<00:03:42.459> a<00:03:42.549> question<00:03:42.729> of<00:03:43.000> reading

00:03:43.140 --> 00:03:43.150 
so now it becomes a question of reading

00:03:43.150 --> 00:03:45.089 
so now it becomes a question of reading
the<00:03:43.329> clock<00:03:43.599> and<00:03:43.810> data<00:03:43.959> signals<00:03:44.440> directly<00:03:44.620> on

00:03:45.089 --> 00:03:45.099 
the clock and data signals directly on

00:03:45.099 --> 00:03:46.830 
the clock and data signals directly on
our<00:03:45.129> pins<00:03:45.459> of<00:03:45.609> the<00:03:45.639> microcontroller<00:03:45.750> with<00:03:46.750> the

00:03:46.830 --> 00:03:46.840 
our pins of the microcontroller with the

00:03:46.840 --> 00:03:49.080 
our pins of the microcontroller with the
use<00:03:47.019> of<00:03:47.049> pin<00:03:47.379> change<00:03:47.590> interrupts<00:03:48.099> the<00:03:48.790> clock

00:03:49.080 --> 00:03:49.090 
use of pin change interrupts the clock

00:03:49.090 --> 00:03:51.449 
use of pin change interrupts the clock
line<00:03:49.329> is<00:03:49.479> hooked<00:03:49.629> up<00:03:49.810> to<00:03:49.870> PC<00:03:50.319> for<00:03:50.620> which<00:03:51.190> if<00:03:51.370> we

00:03:51.449 --> 00:03:51.459 
line is hooked up to PC for which if we

00:03:51.459 --> 00:03:54.890 
line is hooked up to PC for which if we
check<00:03:51.639> on<00:03:51.760> our<00:03:51.819> datasheet<00:03:52.359> is<00:03:52.659> also<00:03:53.049> pc<00:03:53.500> and<00:03:53.680> 12

00:03:54.890 --> 00:03:54.900 
check on our datasheet is also pc and 12

00:03:54.900 --> 00:03:57.149 
check on our datasheet is also pc and 12
the<00:03:55.900> first<00:03:56.139> step<00:03:56.409> is<00:03:56.620> to<00:03:56.799> write<00:03:56.979> our

00:03:57.149 --> 00:03:57.159 
the first step is to write our

00:03:57.159 --> 00:03:58.949 
the first step is to write our
initialization<00:03:57.849> function<00:03:58.060> to<00:03:58.540> turn<00:03:58.720> on<00:03:58.840> the

00:03:58.949 --> 00:03:58.959 
initialization function to turn on the

00:03:58.959 --> 00:04:01.110 
initialization function to turn on the
interrupt<00:03:59.500> on<00:03:59.590> that<00:03:59.739> pin<00:03:59.949> pin<00:04:00.939> change

00:04:01.110 --> 00:04:01.120 
interrupt on that pin pin change

00:04:01.120 --> 00:04:02.309 
interrupt on that pin pin change
interrupts<00:04:01.599> are<00:04:01.780> explained<00:04:02.169> on<00:04:02.260> the

00:04:02.309 --> 00:04:02.319 
interrupts are explained on the

00:04:02.319 --> 00:04:04.740 
interrupts are explained on the
datasheet<00:04:02.650> starting<00:04:03.159> on<00:04:03.250> page<00:04:03.400> 70<00:04:03.879> the<00:04:04.540> main

00:04:04.740 --> 00:04:04.750 
datasheet starting on page 70 the main

00:04:04.750 --> 00:04:06.270 
datasheet starting on page 70 the main
registers<00:04:05.139> we<00:04:05.290> have<00:04:05.439> to<00:04:05.560> worried<00:04:05.829> about<00:04:06.010> are

00:04:06.270 --> 00:04:06.280 
registers we have to worried about are

00:04:06.280 --> 00:04:07.800 
registers we have to worried about are
the<00:04:06.430> pain<00:04:06.639> change<00:04:06.970> interrupt<00:04:07.479> control

00:04:07.800 --> 00:04:07.810 
the pain change interrupt control

00:04:07.810 --> 00:04:09.899 
the pain change interrupt control
register<00:04:08.260> and<00:04:08.470> then<00:04:08.949> the<00:04:09.040> corresponding<00:04:09.400> pin

00:04:09.899 --> 00:04:09.909 
register and then the corresponding pin

00:04:09.909 --> 00:04:12.089 
register and then the corresponding pin
change<00:04:10.150> mask<00:04:10.540> register<00:04:11.079> there<00:04:11.829> are<00:04:11.949> only

00:04:12.089 --> 00:04:12.099 
change mask register there are only

00:04:12.099 --> 00:04:14.039 
change mask register there are only
three<00:04:12.489> pin<00:04:12.759> change<00:04:13.000> interrupts<00:04:13.540> controlled

00:04:14.039 --> 00:04:14.049 
three pin change interrupts controlled

00:04:14.049 --> 00:04:15.449 
three pin change interrupts controlled
by<00:04:14.169> the<00:04:14.229> pin<00:04:14.470> change<00:04:14.709> interrupt<00:04:15.159> control

00:04:15.449 --> 00:04:15.459 
by the pin change interrupt control

00:04:15.459 --> 00:04:17.819 
by the pin change interrupt control
register<00:04:15.849> the<00:04:16.599> datasheet<00:04:16.930> states<00:04:17.620> that<00:04:17.709> the

00:04:17.819 --> 00:04:17.829 
register the datasheet states that the

00:04:17.829 --> 00:04:20.219 
register the datasheet states that the
pin<00:04:18.070> change<00:04:18.340> interrupt<00:04:18.880> one<00:04:19.120> fires<00:04:19.659> on<00:04:19.900> a<00:04:19.930> pin

00:04:20.219 --> 00:04:20.229 
pin change interrupt one fires on a pin

00:04:20.229 --> 00:04:22.800 
pin change interrupt one fires on a pin
change<00:04:20.560> of<00:04:20.799> PC<00:04:21.459> and<00:04:21.669> fourteen<00:04:22.389> through<00:04:22.630> eight

00:04:22.800 --> 00:04:22.810 
change of PC and fourteen through eight

00:04:22.810 --> 00:04:25.649 
change of PC and fourteen through eight
so<00:04:23.560> we<00:04:23.710> turned<00:04:23.979> that<00:04:24.219> bit<00:04:24.460> high<00:04:24.700> since<00:04:25.389> we<00:04:25.539> will

00:04:25.649 --> 00:04:25.659 
so we turned that bit high since we will

00:04:25.659 --> 00:04:27.060 
so we turned that bit high since we will
want<00:04:25.810> to<00:04:25.900> enable<00:04:26.229> PC<00:04:26.830> and

00:04:27.060 --> 00:04:27.070 
want to enable PC and

00:04:27.070 --> 00:04:30.030 
want to enable PC and
12<00:04:27.630> so<00:04:28.630> now<00:04:28.780> the<00:04:28.840> pin<00:04:29.200> change<00:04:29.440> interrupts<00:04:29.920> is

00:04:30.030 --> 00:04:30.040 
12 so now the pin change interrupts is

00:04:30.040 --> 00:04:32.940 
12 so now the pin change interrupts is
enabled<00:04:30.490> for<00:04:30.790> pin<00:04:30.970> changes<00:04:31.450> on<00:04:31.660> PC<00:04:32.110> and<00:04:32.140> 14

00:04:32.940 --> 00:04:32.950 
enabled for pin changes on PC and 14

00:04:32.950 --> 00:04:35.340 
enabled for pin changes on PC and 14
through<00:04:33.160> 8<00:04:33.340> but<00:04:34.060> we<00:04:34.090> have<00:04:34.300> to<00:04:34.420> set<00:04:34.600> the<00:04:34.630> PC<00:04:35.080> mask

00:04:35.340 --> 00:04:35.350 
through 8 but we have to set the PC mask

00:04:35.350 --> 00:04:37.650 
through 8 but we have to set the PC mask
register<00:04:35.980> to<00:04:36.310> enable<00:04:36.700> the<00:04:36.790> individual<00:04:37.360> pins

00:04:37.650 --> 00:04:37.660 
register to enable the individual pins

00:04:37.660 --> 00:04:39.870 
register to enable the individual pins
to<00:04:37.930> trigger<00:04:38.200> the<00:04:38.380> interrupt<00:04:38.740> since<00:04:39.640> we<00:04:39.760> are

00:04:39.870 --> 00:04:39.880 
to trigger the interrupt since we are

00:04:39.880 --> 00:04:42.150 
to trigger the interrupt since we are
setting<00:04:40.090> pin<00:04:40.450> change<00:04:40.660> interrupt<00:04:41.110> one<00:04:41.350> we<00:04:41.890> set

00:04:42.150 --> 00:04:42.160 
setting pin change interrupt one we set

00:04:42.160 --> 00:04:44.850 
setting pin change interrupt one we set
PC<00:04:42.550> mask<00:04:42.820> 1<00:04:43.150> and<00:04:43.390> turn<00:04:43.900> on<00:04:44.050> the<00:04:44.170> corresponding

00:04:44.850 --> 00:04:44.860 
PC mask 1 and turn on the corresponding

00:04:44.860 --> 00:04:47.450 
PC mask 1 and turn on the corresponding
bit<00:04:45.070> for<00:04:45.790> PC<00:04:46.180> into<00:04:46.510> 12

00:04:47.450 --> 00:04:47.460 
bit for PC into 12

00:04:47.460 --> 00:04:49.890 
bit for PC into 12
now<00:04:48.460> that<00:04:48.700> our<00:04:48.730> interrupts<00:04:49.270> set<00:04:49.600> to<00:04:49.720> fire

00:04:49.890 --> 00:04:49.900 
now that our interrupts set to fire

00:04:49.900 --> 00:04:52.680 
now that our interrupts set to fire
every<00:04:50.320> time<00:04:50.350> PC<00:04:50.980> and<00:04:51.190> 12<00:04:51.520> changes<00:04:52.000> we<00:04:52.510> need<00:04:52.630> to

00:04:52.680 --> 00:04:52.690 
every time PC and 12 changes we need to

00:04:52.690 --> 00:04:54.360 
every time PC and 12 changes we need to
write<00:04:52.930> the<00:04:53.110> interrupt<00:04:53.470> handler<00:04:53.860> that<00:04:54.040> will

00:04:54.360 --> 00:04:54.370 
write the interrupt handler that will

00:04:54.370 --> 00:04:57.180 
write the interrupt handler that will
actually<00:04:54.850> run<00:04:55.000> for<00:04:55.240> that<00:04:56.080> we<00:04:56.380> use<00:04:56.560> the<00:04:56.710> is<00:04:57.010> our

00:04:57.180 --> 00:04:57.190 
actually run for that we use the is our

00:04:57.190 --> 00:04:59.160 
actually run for that we use the is our
notation<00:04:57.400> which<00:04:58.120> takes<00:04:58.330> a<00:04:58.480> vector<00:04:58.690> as<00:04:58.990> its

00:04:59.160 --> 00:04:59.170 
notation which takes a vector as its

00:04:59.170 --> 00:05:01.410 
notation which takes a vector as its
argument<00:04:59.350> the<00:05:00.310> vectors<00:05:00.640> available<00:05:01.120> can<00:05:01.330> be

00:05:01.410 --> 00:05:01.420 
argument the vectors available can be

00:05:01.420 --> 00:05:03.510 
argument the vectors available can be
found<00:05:01.630> in<00:05:01.750> the<00:05:01.840> AVR<00:05:02.290> Lipsy<00:05:02.650> documentation<00:05:03.400> in

00:05:03.510 --> 00:05:03.520 
found in the AVR Lipsy documentation in

00:05:03.520 --> 00:05:08.030 
found in the AVR Lipsy documentation in
this<00:05:04.120> case<00:05:04.360> we<00:05:04.720> want<00:05:04.930> PC<00:05:05.290> in<00:05:05.470> one<00:05:05.800> vector

00:05:08.030 --> 00:05:08.040 
this case we want PC in one vector

00:05:08.040 --> 00:05:10.620 
this case we want PC in one vector
now<00:05:09.040> this<00:05:09.280> interrupt<00:05:09.700> handler<00:05:09.970> will<00:05:10.120> run<00:05:10.360> when

00:05:10.620 --> 00:05:10.630 
now this interrupt handler will run when

00:05:10.630 --> 00:05:13.380 
now this interrupt handler will run when
there<00:05:10.780> is<00:05:10.900> a<00:05:10.930> change<00:05:11.200> on<00:05:11.470> PC<00:05:11.800> and<00:05:11.830> a<00:05:11.980> 12<00:05:12.390> inside

00:05:13.380 --> 00:05:13.390 
there is a change on PC and a 12 inside

00:05:13.390 --> 00:05:15.150 
there is a change on PC and a 12 inside
the<00:05:13.570> handler<00:05:13.930> we<00:05:14.170> have<00:05:14.320> a<00:05:14.350> little<00:05:14.650> logic<00:05:14.860> to

00:05:15.150 --> 00:05:15.160 
the handler we have a little logic to

00:05:15.160 --> 00:05:16.800 
the handler we have a little logic to
actually<00:05:15.490> read<00:05:15.730> the<00:05:15.880> pin<00:05:16.090> and<00:05:16.360> verify<00:05:16.780> that

00:05:16.800 --> 00:05:16.810 
actually read the pin and verify that

00:05:16.810 --> 00:05:19.050 
actually read the pin and verify that
the<00:05:17.050> clock<00:05:17.290> line<00:05:17.500> is<00:05:17.620> currently<00:05:17.980> low<00:05:18.220> then<00:05:19.030> we

00:05:19.050 --> 00:05:19.060 
the clock line is currently low then we

00:05:19.060 --> 00:05:20.760 
the clock line is currently low then we
simply<00:05:19.540> read<00:05:19.780> the<00:05:19.960> current<00:05:20.230> value<00:05:20.590> of<00:05:20.620> the

00:05:20.760 --> 00:05:20.770 
simply read the current value of the

00:05:20.770 --> 00:05:22.770 
simply read the current value of the
data<00:05:21.010> line<00:05:21.280> and<00:05:21.550> read<00:05:22.090> that<00:05:22.330> into<00:05:22.750> our

00:05:22.770 --> 00:05:22.780 
data line and read that into our

00:05:22.780 --> 00:05:26.250 
data line and read that into our
variable<00:05:23.260> after<00:05:23.490> 11<00:05:24.490> bits<00:05:24.730> our<00:05:25.030> KVD<00:05:25.990> data

00:05:26.250 --> 00:05:26.260 
variable after 11 bits our KVD data

00:05:26.260 --> 00:05:29.400 
variable after 11 bits our KVD data
variable<00:05:27.130> will<00:05:27.460> hold<00:05:27.700> the<00:05:27.850> scan<00:05:28.120> code<00:05:28.410> notice

00:05:29.400 --> 00:05:29.410 
variable will hold the scan code notice

00:05:29.410 --> 00:05:31.260 
variable will hold the scan code notice
we<00:05:29.650> also<00:05:29.830> have<00:05:30.010> a<00:05:30.040> variable<00:05:30.370> called<00:05:30.550> car

00:05:31.260 --> 00:05:31.270 
we also have a variable called car

00:05:31.270 --> 00:05:33.690 
we also have a variable called car
waiting<00:05:31.810> this<00:05:32.410> is<00:05:32.620> used<00:05:32.860> by<00:05:33.040> the<00:05:33.100> interrupt

00:05:33.690 --> 00:05:33.700 
waiting this is used by the interrupt

00:05:33.700 --> 00:05:35.790 
waiting this is used by the interrupt
handler<00:05:34.120> to<00:05:34.300> let<00:05:34.450> the<00:05:34.570> main<00:05:34.720> loop<00:05:34.990> know<00:05:35.320> when<00:05:35.770> a

00:05:35.790 --> 00:05:35.800 
handler to let the main loop know when a

00:05:35.800 --> 00:05:37.980 
handler to let the main loop know when a
character<00:05:36.100> is<00:05:36.400> ready<00:05:36.670> to<00:05:36.790> be<00:05:36.910> read<00:05:37.090> when<00:05:37.960> a

00:05:37.980 --> 00:05:37.990 
character is ready to be read when a

00:05:37.990 --> 00:05:39.870 
character is ready to be read when a
character<00:05:38.290> is<00:05:38.590> ready<00:05:38.800> the<00:05:39.190> interrupt<00:05:39.640> handler

00:05:39.870 --> 00:05:39.880 
character is ready the interrupt handler

00:05:39.880 --> 00:05:42.150 
character is ready the interrupt handler
flips<00:05:40.240> this<00:05:40.390> bit<00:05:40.600> too<00:05:40.750> high<00:05:40.930> when<00:05:41.860> the<00:05:41.980> main

00:05:42.150 --> 00:05:42.160 
flips this bit too high when the main

00:05:42.160 --> 00:05:44.250 
flips this bit too high when the main
program<00:05:42.610> reads<00:05:42.910> the<00:05:43.090> character<00:05:43.540> it<00:05:43.780> flipped

00:05:44.250 --> 00:05:44.260 
program reads the character it flipped

00:05:44.260 --> 00:05:46.530 
program reads the character it flipped
it<00:05:44.380> back<00:05:44.530> this<00:05:45.400> is<00:05:45.520> a<00:05:45.550> common<00:05:46.000> technique<00:05:46.120> to

00:05:46.530 --> 00:05:46.540 
it back this is a common technique to

00:05:46.540 --> 00:05:48.270 
it back this is a common technique to
communicate<00:05:47.050> between<00:05:47.170> interrupt<00:05:47.860> handlers

00:05:48.270 --> 00:05:48.280 
communicate between interrupt handlers

00:05:48.280 --> 00:05:50.520 
communicate between interrupt handlers
and<00:05:48.460> the<00:05:48.640> main<00:05:48.820> program<00:05:49.270> there<00:05:50.110> is<00:05:50.230> some<00:05:50.410> other

00:05:50.520 --> 00:05:50.530 
and the main program there is some other

00:05:50.530 --> 00:05:52.470 
and the main program there is some other
logic<00:05:50.800> in<00:05:51.160> the<00:05:51.250> interrupt<00:05:51.700> handler<00:05:52.060> to<00:05:52.240> handle

00:05:52.470 --> 00:05:52.480 
logic in the interrupt handler to handle

00:05:52.480 --> 00:05:54.690 
logic in the interrupt handler to handle
key<00:05:52.690> ups<00:05:52.870> which<00:05:53.530> the<00:05:53.650> keyboard<00:05:54.010> also<00:05:54.190> reports

00:05:54.690 --> 00:05:54.700 
key ups which the keyboard also reports

00:05:54.700 --> 00:05:57.270 
key ups which the keyboard also reports
and<00:05:54.910> special<00:05:55.630> keys<00:05:55.840> like<00:05:56.050> shift<00:05:56.380> enter<00:05:57.100> and

00:05:57.270 --> 00:05:57.280 
and special keys like shift enter and

00:05:57.280 --> 00:05:59.730 
and special keys like shift enter and
backspace<00:05:57.850> not<00:05:58.720> all<00:05:58.870> the<00:05:58.990> keys<00:05:59.200> are<00:05:59.350> actually

00:05:59.730 --> 00:05:59.740 
backspace not all the keys are actually

00:05:59.740 --> 00:06:01.920 
backspace not all the keys are actually
supported<00:06:00.190> in<00:06:00.310> our<00:06:00.400> simple<00:06:00.700> demo<00:06:00.910> program<00:06:01.450> but

00:06:01.920 --> 00:06:01.930 
supported in our simple demo program but

00:06:01.930 --> 00:06:03.870 
supported in our simple demo program but
implementing<00:06:02.380> more<00:06:02.620> functionality<00:06:03.430> would<00:06:03.730> be

00:06:03.870 --> 00:06:03.880 
implementing more functionality would be

00:06:03.880 --> 00:06:07.260 
implementing more functionality would be
a<00:06:03.910> great<00:06:04.150> exercise<00:06:05.250> in<00:06:06.250> this<00:06:06.490> program<00:06:07.060> there

00:06:07.260 --> 00:06:07.270 
a great exercise in this program there

00:06:07.270 --> 00:06:08.880 
a great exercise in this program there
is<00:06:07.300> a<00:06:07.420> little<00:06:07.660> bit<00:06:07.870> of<00:06:07.990> more<00:06:08.170> code<00:06:08.470> that<00:06:08.740> turns

00:06:08.880 --> 00:06:08.890 
is a little bit of more code that turns

00:06:08.890 --> 00:06:10.770 
is a little bit of more code that turns
a<00:06:09.100> scan<00:06:09.370> code<00:06:09.670> into<00:06:10.030> a<00:06:10.060> character<00:06:10.480> that<00:06:10.660> was

00:06:10.770 --> 00:06:10.780 
a scan code into a character that was

00:06:10.780 --> 00:06:13.470 
a scan code into a character that was
pressed<00:06:11.050> the<00:06:11.890> main<00:06:12.130> program<00:06:12.670> only<00:06:12.910> prints<00:06:13.390> the

00:06:13.470 --> 00:06:13.480 
pressed the main program only prints the

00:06:13.480 --> 00:06:15.480 
pressed the main program only prints the
characters<00:06:13.900> to<00:06:14.080> the<00:06:14.200> LCD<00:06:14.530> but<00:06:15.190> you<00:06:15.310> could

00:06:15.480 --> 00:06:15.490 
characters to the LCD but you could

00:06:15.490 --> 00:06:17.070 
characters to the LCD but you could
easily<00:06:15.640> imagine<00:06:16.000> doing<00:06:16.540> more<00:06:16.690> complicated

00:06:17.070 --> 00:06:17.080 
easily imagine doing more complicated

00:06:17.080 --> 00:06:19.410 
easily imagine doing more complicated
things<00:06:17.620> with<00:06:17.680> the<00:06:17.860> keyboard<00:06:18.190> input<00:06:18.460> see<00:06:19.270> our

00:06:19.410 --> 00:06:19.420 
things with the keyboard input see our

00:06:19.420 --> 00:06:21.150 
things with the keyboard input see our
printf<00:06:19.810> and<00:06:19.870> scanf<00:06:19.960> tutorial<00:06:20.740> for<00:06:20.920> more<00:06:21.040> ideas

00:06:21.150 --> 00:06:21.160 
printf and scanf tutorial for more ideas

00:06:21.160 --> 00:06:24.360 
printf and scanf tutorial for more ideas
about<00:06:21.760> how<00:06:21.940> to<00:06:22.000> do<00:06:22.180> input<00:06:22.540> and<00:06:22.690> output<00:06:23.370> now

00:06:24.360 --> 00:06:24.370 
about how to do input and output now

00:06:24.370 --> 00:06:25.860 
about how to do input and output now
that<00:06:24.520> you<00:06:24.610> see<00:06:24.730> how<00:06:24.880> useful<00:06:25.120> interrupts<00:06:25.720> can

00:06:25.860 --> 00:06:25.870 
that you see how useful interrupts can

00:06:25.870 --> 00:06:27.330 
that you see how useful interrupts can
be<00:06:26.020> you<00:06:26.320> need<00:06:26.440> to<00:06:26.500> be<00:06:26.650> aware<00:06:26.860> of<00:06:26.920> some<00:06:27.190> of<00:06:27.250> the

00:06:27.330 --> 00:06:27.340 
be you need to be aware of some of the

00:06:27.340 --> 00:06:29.100 
be you need to be aware of some of the
problems<00:06:27.700> you<00:06:27.760> can<00:06:27.910> cause<00:06:28.090> the<00:06:28.630> biggest<00:06:28.960> thing

00:06:29.100 --> 00:06:29.110 
problems you can cause the biggest thing

00:06:29.110 --> 00:06:31.050 
problems you can cause the biggest thing
to<00:06:29.140> be<00:06:29.350> aware<00:06:29.470> of<00:06:29.650> that<00:06:29.890> you<00:06:29.950> are<00:06:30.070> interrupting

00:06:31.050 --> 00:06:31.060 
to be aware of that you are interrupting

00:06:31.060 --> 00:06:33.450 
to be aware of that you are interrupting
the<00:06:31.150> main<00:06:31.330> code<00:06:31.600> is<00:06:31.870> way<00:06:32.500> to<00:06:32.560> easy<00:06:32.740> to<00:06:33.160> think<00:06:33.280> of

00:06:33.450 --> 00:06:33.460 
the main code is way to easy to think of

00:06:33.460 --> 00:06:34.650 
the main code is way to easy to think of
them<00:06:33.580> as<00:06:33.670> merely<00:06:33.850> running<00:06:34.120> in<00:06:34.390> the<00:06:34.450> background

00:06:34.650 --> 00:06:34.660 
them as merely running in the background

00:06:34.660 --> 00:06:36.450 
them as merely running in the background
that<00:06:35.080> is<00:06:35.410> simply<00:06:35.740> not<00:06:35.770> true

00:06:36.450 --> 00:06:36.460 
that is simply not true

00:06:36.460 --> 00:06:38.400 
that is simply not true
your<00:06:36.760> main<00:06:36.910> loop<00:06:37.120> is<00:06:37.300> pausing<00:06:38.050> for<00:06:38.320> the

00:06:38.400 --> 00:06:38.410 
your main loop is pausing for the

00:06:38.410 --> 00:06:40.309 
your main loop is pausing for the
interrupt<00:06:38.830> handler<00:06:39.010> to<00:06:39.220> run

00:06:40.309 --> 00:06:40.319 
interrupt handler to run

00:06:40.319 --> 00:06:42.330 
interrupt handler to run
the<00:06:41.319> other<00:06:41.470> thing<00:06:41.710> you<00:06:41.800> need<00:06:41.919> to<00:06:41.949> be<00:06:42.099> aware<00:06:42.280> of

00:06:42.330 --> 00:06:42.340 
the other thing you need to be aware of

00:06:42.340 --> 00:06:44.339 
the other thing you need to be aware of
is<00:06:42.550> how<00:06:42.699> long<00:06:43.000> your<00:06:43.300> intro<00:06:43.569> paddlers<00:06:44.020> take<00:06:44.199> to

00:06:44.339 --> 00:06:44.349 
is how long your intro paddlers take to

00:06:44.349 --> 00:06:46.260 
is how long your intro paddlers take to
run<00:06:44.530> if<00:06:44.919> you<00:06:45.069> take<00:06:45.280> too<00:06:45.490> long<00:06:45.699> you're<00:06:46.000> actually

00:06:46.260 --> 00:06:46.270 
run if you take too long you're actually

00:06:46.270 --> 00:06:47.969 
run if you take too long you're actually
gonna<00:06:46.389> start<00:06:46.660> a<00:06:46.750> blocking<00:06:47.319> other<00:06:47.500> interest

00:06:47.969 --> 00:06:47.979 
gonna start a blocking other interest

00:06:47.979 --> 00:06:50.580 
gonna start a blocking other interest
and<00:06:48.129> firing<00:06:48.550> than<00:06:49.030> might<00:06:49.210> have<00:06:49.330> fired<00:06:49.590> you

00:06:50.580 --> 00:06:50.590 
and firing than might have fired you

00:06:50.590 --> 00:06:52.290 
and firing than might have fired you
might<00:06:50.740> even<00:06:50.919> get<00:06:51.099> in<00:06:51.220> to<00:06:51.280> suck<00:06:51.520> in<00:06:51.639> a<00:06:51.699> situation

00:06:52.290 --> 00:06:52.300 
might even get in to suck in a situation

00:06:52.300 --> 00:06:53.939 
might even get in to suck in a situation
where<00:06:52.629> interrupts<00:06:53.050> are<00:06:53.169> firing<00:06:53.349> one<00:06:53.620> after

00:06:53.939 --> 00:06:53.949 
where interrupts are firing one after

00:06:53.949 --> 00:06:54.480 
where interrupts are firing one after
each<00:06:54.099> other

00:06:54.480 --> 00:06:54.490 
each other

00:06:54.490 --> 00:06:56.790 
each other
and<00:06:54.970> your<00:06:55.150> main<00:06:55.300> closed<00:06:55.659> never<00:06:56.289> gets<00:06:56.530> a<00:06:56.620> chance

00:06:56.790 --> 00:06:56.800 
and your main closed never gets a chance

00:06:56.800 --> 00:06:59.399 
and your main closed never gets a chance
to<00:06:56.949> run<00:06:57.220> I<00:06:57.780> hope<00:06:58.780> you<00:06:58.900> have<00:06:58.990> learned<00:06:59.199> a<00:06:59.319> little

00:06:59.399 --> 00:06:59.409 
to run I hope you have learned a little

00:06:59.409 --> 00:07:00.930 
to run I hope you have learned a little
bit<00:06:59.530> more<00:06:59.830> about<00:06:59.979> interrupts<00:07:00.460> and<00:07:00.639> how<00:07:00.819> they

00:07:00.930 --> 00:07:00.940 
bit more about interrupts and how they

00:07:00.940 --> 00:07:02.909 
bit more about interrupts and how they
can<00:07:01.060> be<00:07:01.180> used<00:07:01.389> in<00:07:01.569> different<00:07:01.629> situations<00:07:02.409> our

00:07:02.909 --> 00:07:02.919 
can be used in different situations our

00:07:02.919 --> 00:07:04.200 
can be used in different situations our
website<00:07:03.310> has<00:07:03.430> more<00:07:03.580> information<00:07:04.120> about

00:07:04.200 --> 00:07:04.210 
website has more information about

00:07:04.210 --> 00:07:05.640 
website has more information about
potential<00:07:04.720> pitfalls<00:07:05.139> that<00:07:05.199> you<00:07:05.289> will<00:07:05.470> come

00:07:05.640 --> 00:07:05.650 
potential pitfalls that you will come

00:07:05.650 --> 00:07:07.589 
potential pitfalls that you will come
across<00:07:05.770> when<00:07:06.190> dealing<00:07:06.340> with<00:07:06.550> interrupts<00:07:07.000> for

00:07:07.589 --> 00:07:07.599 
across when dealing with interrupts for

00:07:07.599 --> 00:07:09.180 
across when dealing with interrupts for
more<00:07:07.750> information<00:07:08.199> about<00:07:08.319> this<00:07:08.560> project<00:07:08.860> or

00:07:09.180 --> 00:07:09.190 
more information about this project or

00:07:09.190 --> 00:07:11.300 
more information about this project or
more<00:07:09.520> videos<00:07:09.789> like<00:07:09.970> this<00:07:10.120> one<00:07:10.270> visit<00:07:10.690> us<00:07:10.990> at

00:07:11.300 --> 00:07:11.310 
more videos like this one visit us at

00:07:11.310 --> 00:07:14.310 
more videos like this one visit us at
www.nerdkits.com

