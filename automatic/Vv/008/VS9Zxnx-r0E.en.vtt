WEBVTT
Kind: captions
Language: en

00:00:06.740 --> 00:00:10.040 

hello<00:00:07.740> I'm<00:00:08.010> Robin<00:00:08.550> Harris<00:00:08.700> some<00:00:09.150> storage<00:00:09.510> mojo

00:00:10.040 --> 00:00:10.050 
hello I'm Robin Harris some storage mojo

00:00:10.050 --> 00:00:13.100 
hello I'm Robin Harris some storage mojo
NAND<00:00:10.830> flash<00:00:11.010> is<00:00:11.490> a<00:00:11.519> hot<00:00:11.820> topic<00:00:12.150> but<00:00:12.900> putting

00:00:13.100 --> 00:00:13.110 
NAND flash is a hot topic but putting

00:00:13.110 --> 00:00:15.140 
NAND flash is a hot topic but putting
flash<00:00:13.469> into<00:00:13.889> disks<00:00:14.309> is<00:00:14.490> like<00:00:14.670> putting<00:00:14.910> new

00:00:15.140 --> 00:00:15.150 
flash into disks is like putting new

00:00:15.150 --> 00:00:17.720 
flash into disks is like putting new
wine<00:00:15.389> into<00:00:15.780> old<00:00:15.929> skins<00:00:16.529> is<00:00:17.250> there<00:00:17.460> a<00:00:17.490> better

00:00:17.720 --> 00:00:17.730 
wine into old skins is there a better

00:00:17.730 --> 00:00:20.300 
wine into old skins is there a better
way<00:00:17.880> to<00:00:18.029> use<00:00:18.270> flashes<00:00:19.230> unique<00:00:19.560> qualities<00:00:20.070> in

00:00:20.300 --> 00:00:20.310 
way to use flashes unique qualities in

00:00:20.310 --> 00:00:23.420 
way to use flashes unique qualities in
this<00:00:21.060> video<00:00:21.359> whitepaper<00:00:21.930> david<00:00:22.410> flynn<00:00:22.710> CTO<00:00:23.310> of

00:00:23.420 --> 00:00:23.430 
this video whitepaper david flynn CTO of

00:00:23.430 --> 00:00:25.849 
this video whitepaper david flynn CTO of
fusion-io<00:00:24.180> talks<00:00:24.720> about<00:00:24.930> how<00:00:25.080> they<00:00:25.260> use<00:00:25.470> flesh

00:00:25.849 --> 00:00:25.859 
fusion-io talks about how they use flesh

00:00:25.859 --> 00:00:28.429 
fusion-io talks about how they use flesh
the<00:00:26.550> surprising<00:00:27.000> impact<00:00:27.300> of<00:00:27.779> reduced<00:00:28.080> iowa

00:00:28.429 --> 00:00:28.439 
the surprising impact of reduced iowa

00:00:28.439 --> 00:00:31.700 
the surprising impact of reduced iowa
latency<00:00:28.949> and<00:00:29.099> a<00:00:29.789> customer<00:00:30.390> example<00:00:30.869> i'll<00:00:31.080> be

00:00:31.700 --> 00:00:31.710 
latency and a customer example i'll be

00:00:31.710 --> 00:00:34.430 
latency and a customer example i'll be
back<00:00:31.890> with<00:00:32.460> the<00:00:32.489> storage<00:00:32.910> mojo<00:00:33.300> take<00:00:33.570> and<00:00:33.899> it's

00:00:34.430 --> 00:00:34.440 
back with the storage mojo take and it's

00:00:34.440 --> 00:00:35.840 
back with the storage mojo take and it's
only<00:00:34.559> been<00:00:34.710> the<00:00:34.800> last<00:00:34.860> few<00:00:35.070> years<00:00:35.219> that<00:00:35.579> nand

00:00:35.840 --> 00:00:35.850 
only been the last few years that nand

00:00:35.850 --> 00:00:38.270 
only been the last few years that nand
flash<00:00:36.180> has<00:00:36.630> a<00:00:36.660> bit<00:00:36.960> density<00:00:37.350> and<00:00:37.620> a

00:00:38.270 --> 00:00:38.280 
flash has a bit density and a

00:00:38.280 --> 00:00:41.030 
flash has a bit density and a
performance<00:00:38.879> that<00:00:39.540> it's<00:00:40.320> really<00:00:40.469> positioned

00:00:41.030 --> 00:00:41.040 
performance that it's really positioned

00:00:41.040 --> 00:00:42.709 
performance that it's really positioned
it<00:00:41.190> and<00:00:41.430> this<00:00:41.820> is<00:00:41.969> important<00:00:42.420> because<00:00:42.570> that

00:00:42.709 --> 00:00:42.719 
it and this is important because that

00:00:42.719 --> 00:00:45.500 
it and this is important because that
gap<00:00:43.110> between<00:00:43.410> disks<00:00:44.070> and<00:00:44.270> processors<00:00:45.270> has

00:00:45.500 --> 00:00:45.510 
gap between disks and processors has

00:00:45.510 --> 00:00:48.500 
gap between disks and processors has
continued<00:00:46.260> to<00:00:46.550> spread<00:00:47.550> over<00:00:47.820> the<00:00:48.030> last<00:00:48.180> 20

00:00:48.500 --> 00:00:48.510 
continued to spread over the last 20

00:00:48.510 --> 00:00:50.810 
continued to spread over the last 20
years<00:00:48.690> it's<00:00:49.140> it's<00:00:49.500> important<00:00:50.129> that<00:00:50.430> you<00:00:50.460> look

00:00:50.810 --> 00:00:50.820 
years it's it's important that you look

00:00:50.820 --> 00:00:53.869 
years it's it's important that you look
to<00:00:51.059> the<00:00:51.090> LS<00:00:51.960> and<00:00:52.230> to<00:00:52.620> the<00:00:52.710> applications<00:00:53.430> like

00:00:53.869 --> 00:00:53.879 
to the LS and to the applications like

00:00:53.879 --> 00:00:57.350 
to the LS and to the applications like
what<00:00:54.149> they<00:00:54.300> expect<00:00:54.750> but<00:00:55.649> why<00:00:56.610> bother<00:00:56.910> looking

00:00:57.350 --> 00:00:57.360 
what they expect but why bother looking

00:00:57.360 --> 00:00:59.330 
what they expect but why bother looking
to<00:00:57.690> the<00:00:57.780> sheet<00:00:58.020> metal<00:00:58.170> or<00:00:58.500> to<00:00:58.980> the<00:00:59.100> disk

00:00:59.330 --> 00:00:59.340 
to the sheet metal or to the disk

00:00:59.340 --> 00:01:01.520 
to the sheet metal or to the disk
controllers<00:00:59.969> that<00:01:00.210> you're<00:01:00.719> trying<00:01:00.960> to<00:01:01.079> bypass

00:01:01.520 --> 00:01:01.530 
controllers that you're trying to bypass

00:01:01.530 --> 00:01:03.830 
controllers that you're trying to bypass
anyway<00:01:02.309> so<00:01:02.670> there's<00:01:02.850> no<00:01:03.000> real<00:01:03.210> reason<00:01:03.239> to<00:01:03.719> look

00:01:03.830 --> 00:01:03.840 
anyway so there's no real reason to look

00:01:03.840 --> 00:01:05.539 
anyway so there's no real reason to look
like<00:01:04.049> SATA<00:01:04.320> and<00:01:04.439> scuzzy<00:01:04.769> to<00:01:05.040> the<00:01:05.129> SATA<00:01:05.400> and

00:01:05.539 --> 00:01:05.549 
like SATA and scuzzy to the SATA and

00:01:05.549 --> 00:01:07.280 
like SATA and scuzzy to the SATA and
scuzzy<00:01:05.970> controller<00:01:06.630> because<00:01:06.930> those

00:01:07.280 --> 00:01:07.290 
scuzzy controller because those

00:01:07.290 --> 00:01:08.990 
scuzzy controller because those
controllers<00:01:07.740> are<00:01:07.979> actually<00:01:08.280> the<00:01:08.369> problem<00:01:08.580> we

00:01:08.990 --> 00:01:09.000 
controllers are actually the problem we

00:01:09.000 --> 00:01:12.260 
controllers are actually the problem we
deploy<00:01:09.360> a<00:01:09.390> driver<00:01:10.549> just<00:01:11.549> like<00:01:11.729> a<00:01:11.970> raid

00:01:12.260 --> 00:01:12.270 
deploy a driver just like a raid

00:01:12.270 --> 00:01:14.450 
deploy a driver just like a raid
controller<00:01:12.720> has<00:01:12.990> a<00:01:13.020> driver<00:01:13.380> or<00:01:13.680> like<00:01:14.100> a<00:01:14.130> host

00:01:14.450 --> 00:01:14.460 
controller has a driver or like a host

00:01:14.460 --> 00:01:17.030 
controller has a driver or like a host
bus<00:01:14.670> adapter<00:01:15.210> or<00:01:15.600> a<00:01:15.659> graphics<00:01:16.320> card<00:01:16.409> and<00:01:16.890> we

00:01:17.030 --> 00:01:17.040 
bus adapter or a graphics card and we

00:01:17.040 --> 00:01:18.950 
bus adapter or a graphics card and we
look<00:01:17.220> no<00:01:17.700> different<00:01:17.880> to<00:01:18.180> the<00:01:18.270> OS<00:01:18.570> it<00:01:18.780> looks

00:01:18.950 --> 00:01:18.960 
look no different to the OS it looks

00:01:18.960 --> 00:01:20.899 
look no different to the OS it looks
like<00:01:19.140> block<00:01:19.439> storage<00:01:19.740> ultimately<00:01:20.580> where<00:01:20.820> it

00:01:20.899 --> 00:01:20.909 
like block storage ultimately where it

00:01:20.909 --> 00:01:22.399 
like block storage ultimately where it
arrives<00:01:21.150> at<00:01:21.420> is<00:01:21.540> you<00:01:21.630> need<00:01:21.780> to<00:01:21.840> pull<00:01:22.020> that<00:01:22.140> nand

00:01:22.399 --> 00:01:22.409 
arrives at is you need to pull that nand

00:01:22.409 --> 00:01:24.649 
arrives at is you need to pull that nand
flash<00:01:22.680> in<00:01:22.979> close<00:01:23.759> and<00:01:23.970> it<00:01:24.119> actually<00:01:24.270> sits

00:01:24.649 --> 00:01:24.659 
flash in close and it actually sits

00:01:24.659 --> 00:01:25.880 
flash in close and it actually sits
where<00:01:24.900> the<00:01:25.020> rate<00:01:25.170> controller<00:01:25.590> would<00:01:25.770> have

00:01:25.880 --> 00:01:25.890 
where the rate controller would have

00:01:25.890 --> 00:01:28.490 
where the rate controller would have
been<00:01:26.040> because<00:01:26.820> pci<00:01:27.210> express<00:01:27.630> is<00:01:27.930> the<00:01:28.170> common

00:01:28.490 --> 00:01:28.500 
been because pci express is the common

00:01:28.500 --> 00:01:31.640 
been because pci express is the common
denominator<00:01:28.759> people<00:01:29.759> say<00:01:29.880> well<00:01:30.060> isn't<00:01:30.720> scuzzy

00:01:31.640 --> 00:01:31.650 
denominator people say well isn't scuzzy

00:01:31.650 --> 00:01:34.929 
denominator people say well isn't scuzzy
and<00:01:31.880> SATA<00:01:32.880> more<00:01:33.180> standard<00:01:33.600> it's<00:01:33.780> like<00:01:33.900> well

00:01:34.929 --> 00:01:34.939 
and SATA more standard it's like well

00:01:34.939 --> 00:01:37.370 
and SATA more standard it's like well
discuss<00:01:35.939> your<00:01:36.090> SATA<00:01:36.509> raid<00:01:36.869> controller

00:01:37.370 --> 00:01:37.380 
discuss your SATA raid controller

00:01:37.380 --> 00:01:39.620 
discuss your SATA raid controller
actually<00:01:37.619> sits<00:01:38.040> on<00:01:38.189> pci<00:01:38.610> express<00:01:39.000> so<00:01:39.299> it's<00:01:39.479> the

00:01:39.620 --> 00:01:39.630 
actually sits on pci express so it's the

00:01:39.630 --> 00:01:42.050 
actually sits on pci express so it's the
common<00:01:39.990> underline<00:01:40.470> an<00:01:40.860> application<00:01:41.490> asks<00:01:41.670> the

00:01:42.050 --> 00:01:42.060 
common underline an application asks the

00:01:42.060 --> 00:01:45.020 
common underline an application asks the
OS<00:01:42.390> to<00:01:42.600> go<00:01:42.750> and<00:01:42.930> get<00:01:43.110> a<00:01:43.320> block<00:01:43.770> of<00:01:44.220> storage<00:01:44.700> the

00:01:45.020 --> 00:01:45.030 
OS to go and get a block of storage the

00:01:45.030 --> 00:01:47.990 
OS to go and get a block of storage the
OS<00:01:45.390> then<00:01:46.310> sends<00:01:47.310> that<00:01:47.340> down<00:01:47.700> through

00:01:47.990 --> 00:01:48.000 
OS then sends that down through

00:01:48.000 --> 00:01:50.060 
OS then sends that down through
sometimes<00:01:48.780> the<00:01:48.960> file<00:01:49.170> system<00:01:49.409> sometimes

00:01:50.060 --> 00:01:50.070 
sometimes the file system sometimes

00:01:50.070 --> 00:01:51.679 
sometimes the file system sometimes
you're<00:01:50.220> bypassing<00:01:50.579> the<00:01:50.850> file<00:01:51.090> system<00:01:51.360> like

00:01:51.679 --> 00:01:51.689 
you're bypassing the file system like

00:01:51.689 --> 00:01:52.960 
you're bypassing the file system like
databases<00:01:52.320> do

00:01:52.960 --> 00:01:52.970 
databases do

00:01:52.970 --> 00:01:55.390 
databases do
higher<00:01:53.330> performance<00:01:53.900> then<00:01:54.560> you<00:01:54.680> go<00:01:54.830> into<00:01:55.190> the

00:01:55.390 --> 00:01:55.400 
higher performance then you go into the

00:01:55.400 --> 00:01:59.620 
higher performance then you go into the
block<00:01:55.820> layer<00:01:56.120> and<00:01:56.390> it<00:01:56.840> gets<00:01:57.080> wrapped<00:01:57.610> in<00:01:58.630> you

00:01:59.620 --> 00:01:59.630 
block layer and it gets wrapped in you

00:01:59.630 --> 00:02:02.710 
block layer and it gets wrapped in you
know<00:01:59.720> in<00:01:59.870> protocol<00:02:00.560> in<00:02:01.520> scuzzy<00:02:02.030> and<00:02:02.210> SATA<00:02:02.510> and

00:02:02.710 --> 00:02:02.720 
know in protocol in scuzzy and SATA and

00:02:02.720 --> 00:02:05.350 
know in protocol in scuzzy and SATA and
and<00:02:03.380> then<00:02:03.530> that<00:02:03.740> that<00:02:04.250> encapsulated<00:02:04.970> she'll

00:02:05.350 --> 00:02:05.360 
and then that that encapsulated she'll

00:02:05.360 --> 00:02:07.390 
and then that that encapsulated she'll
get<00:02:05.600> sent<00:02:05.840> to<00:02:06.020> the<00:02:06.050> raid<00:02:06.260> controller<00:02:06.740> well

00:02:07.390 --> 00:02:07.400 
get sent to the raid controller well

00:02:07.400 --> 00:02:09.520 
get sent to the raid controller well
with<00:02:07.670> NAND<00:02:07.940> flash<00:02:08.030> you<00:02:08.750> don't<00:02:08.930> need<00:02:09.110> that<00:02:09.140> and

00:02:09.520 --> 00:02:09.530 
with NAND flash you don't need that and

00:02:09.530 --> 00:02:10.990 
with NAND flash you don't need that and
you<00:02:09.710> also<00:02:09.860> don't<00:02:10.040> need<00:02:10.399> the<00:02:10.550> protocol

00:02:10.990 --> 00:02:11.000 
you also don't need the protocol

00:02:11.000 --> 00:02:13.740 
you also don't need the protocol
encapsulation<00:02:11.810> this<00:02:12.080> isn't<00:02:12.380> just<00:02:12.620> about

00:02:13.740 --> 00:02:13.750 
encapsulation this isn't just about

00:02:13.750 --> 00:02:18.430 
encapsulation this isn't just about
removing<00:02:14.750> you<00:02:15.410> know<00:02:16.030> disk<00:02:17.030> arrays<00:02:17.990> for

00:02:18.430 --> 00:02:18.440 
removing you know disk arrays for

00:02:18.440 --> 00:02:20.890 
removing you know disk arrays for
performance<00:02:19.310> purchases<00:02:19.850> and<00:02:20.060> using<00:02:20.540> NAND

00:02:20.890 --> 00:02:20.900 
performance purchases and using NAND

00:02:20.900 --> 00:02:23.350 
performance purchases and using NAND
flash<00:02:21.020> in<00:02:21.440> its<00:02:21.590> place<00:02:21.830> but<00:02:22.160> it's<00:02:22.940> also<00:02:23.090> about

00:02:23.350 --> 00:02:23.360 
flash in its place but it's also about

00:02:23.360 --> 00:02:26.860 
flash in its place but it's also about
making<00:02:23.810> the<00:02:24.790> server<00:02:25.790> itself<00:02:26.150> more<00:02:26.420> efficient

00:02:26.860 --> 00:02:26.870 
making the server itself more efficient

00:02:26.870 --> 00:02:28.600 
making the server itself more efficient
there's<00:02:27.050> a<00:02:27.110> reason<00:02:27.410> for<00:02:27.440> that<00:02:27.680> and<00:02:28.070> this<00:02:28.459> is

00:02:28.600 --> 00:02:28.610 
there's a reason for that and this is

00:02:28.610 --> 00:02:30.790 
there's a reason for that and this is
kind<00:02:28.790> of<00:02:28.850> surprising<00:02:29.000> if<00:02:29.660> you<00:02:30.260> have<00:02:30.500> much

00:02:30.790 --> 00:02:30.800 
kind of surprising if you have much

00:02:30.800 --> 00:02:33.580 
kind of surprising if you have much
lower<00:02:30.980> latency<00:02:31.630> to<00:02:32.630> get<00:02:32.780> the<00:02:32.900> same<00:02:33.080> throughput

00:02:33.580 --> 00:02:33.590 
lower latency to get the same throughput

00:02:33.590 --> 00:02:36.370 
lower latency to get the same throughput
you<00:02:33.890> need<00:02:34.100> fewer<00:02:34.490> transactions<00:02:35.330> in<00:02:35.600> flight<00:02:35.959> so

00:02:36.370 --> 00:02:36.380 
you need fewer transactions in flight so

00:02:36.380 --> 00:02:38.230 
you need fewer transactions in flight so
if<00:02:36.440> I'm<00:02:36.560> doing<00:02:36.680> a<00:02:36.800> hundred<00:02:37.070> thousand<00:02:37.610> things

00:02:38.230 --> 00:02:38.240 
if I'm doing a hundred thousand things

00:02:38.240 --> 00:02:40.990 
if I'm doing a hundred thousand things
per<00:02:38.540> second<00:02:38.900> and<00:02:39.050> I'm<00:02:40.040> answering<00:02:40.490> in<00:02:40.580> hundreds

00:02:40.990 --> 00:02:41.000 
per second and I'm answering in hundreds

00:02:41.000 --> 00:02:42.520 
per second and I'm answering in hundreds
of<00:02:41.090> a<00:02:41.180> second<00:02:41.600> then<00:02:41.959> that<00:02:42.080> means<00:02:42.200> i<00:02:42.350> have<00:02:42.380> to

00:02:42.520 --> 00:02:42.530 
of a second then that means i have to

00:02:42.530 --> 00:02:44.650 
of a second then that means i have to
have<00:02:42.709> a<00:02:42.770> thousandth<00:02:43.370> of<00:02:43.490> a<00:02:43.670> thousand<00:02:44.270> of<00:02:44.480> them

00:02:44.650 --> 00:02:44.660 
have a thousandth of a thousand of them

00:02:44.660 --> 00:02:47.290 
have a thousandth of a thousand of them
overlapping<00:02:45.230> and<00:02:45.770> i<00:02:46.520> have<00:02:46.640> to<00:02:46.760> have<00:02:46.850> memory

00:02:47.290 --> 00:02:47.300 
overlapping and i have to have memory

00:02:47.300 --> 00:02:49.150 
overlapping and i have to have memory
for<00:02:47.480> all<00:02:47.570> of<00:02:47.690> that<00:02:47.870> and<00:02:48.080> i<00:02:48.560> have<00:02:48.709> to<00:02:48.890> have<00:02:49.010> the

00:02:49.150 --> 00:02:49.160 
for all of that and i have to have the

00:02:49.160 --> 00:02:50.920 
for all of that and i have to have the
cpu<00:02:49.550> stumbling<00:02:50.030> all<00:02:50.150> over<00:02:50.180> each<00:02:50.480> other<00:02:50.660> as

00:02:50.920 --> 00:02:50.930 
cpu stumbling all over each other as

00:02:50.930 --> 00:02:52.630 
cpu stumbling all over each other as
they're<00:02:51.560> picking<00:02:51.890> them<00:02:52.010> up<00:02:52.100> and<00:02:52.340> putting<00:02:52.490> them

00:02:52.630 --> 00:02:52.640 
they're picking them up and putting them

00:02:52.640 --> 00:02:54.970 
they're picking them up and putting them
down<00:02:52.700> and<00:02:53.060> working<00:02:53.209> with<00:02:53.450> all<00:02:53.600> of<00:02:53.720> those<00:02:53.870> if<00:02:54.770> on

00:02:54.970 --> 00:02:54.980 
down and working with all of those if on

00:02:54.980 --> 00:02:56.979 
down and working with all of those if on
the<00:02:55.010> other<00:02:55.130> hand<00:02:55.250> i<00:02:55.520> can<00:02:55.700> answer<00:02:55.910> 100<00:02:56.750> times

00:02:56.979 --> 00:02:56.989 
the other hand i can answer 100 times

00:02:56.989 --> 00:03:00.040 
the other hand i can answer 100 times
faster<00:02:57.110> than<00:02:57.530> that<00:02:58.180> in<00:02:59.180> a<00:02:59.300> ten<00:02:59.540> thousandth<00:02:59.989> of

00:03:00.040 --> 00:03:00.050 
faster than that in a ten thousandth of

00:03:00.050 --> 00:03:01.630 
faster than that in a ten thousandth of
a<00:03:00.170> second<00:03:00.560> instead<00:03:01.070> of<00:03:01.130> hundredth<00:03:01.519> of<00:03:01.550> a

00:03:01.630 --> 00:03:01.640 
a second instead of hundredth of a

00:03:01.640 --> 00:03:04.300 
a second instead of hundredth of a
second<00:03:02.030> and<00:03:02.510> now<00:03:02.750> it's<00:03:02.930> ten<00:03:03.320> transactions<00:03:04.070> in

00:03:04.300 --> 00:03:04.310 
second and now it's ten transactions in

00:03:04.310 --> 00:03:06.970 
second and now it's ten transactions in
flight<00:03:04.580> at<00:03:04.970> once<00:03:05.330> a<00:03:05.600> lot<00:03:06.230> less<00:03:06.440> work<00:03:06.560> for<00:03:06.709> the

00:03:06.970 --> 00:03:06.980 
flight at once a lot less work for the

00:03:06.980 --> 00:03:10.540 
flight at once a lot less work for the
cpu<00:03:07.519> and<00:03:07.880> context<00:03:08.780> switching<00:03:09.140> in<00:03:09.550> stumbling

00:03:10.540 --> 00:03:10.550 
cpu and context switching in stumbling

00:03:10.550 --> 00:03:12.340 
cpu and context switching in stumbling
over<00:03:10.670> it<00:03:10.910> and<00:03:11.120> how<00:03:11.209> much<00:03:11.360> ram<00:03:11.690> do<00:03:12.170> you<00:03:12.230> give

00:03:12.340 --> 00:03:12.350 
over it and how much ram do you give

00:03:12.350 --> 00:03:14.140 
over it and how much ram do you give
better<00:03:12.560> locality<00:03:13.220> in<00:03:13.370> your<00:03:13.489> memory<00:03:13.790> because

00:03:14.140 --> 00:03:14.150 
better locality in your memory because

00:03:14.150 --> 00:03:15.970 
better locality in your memory because
you're<00:03:14.269> not<00:03:14.390> spreading<00:03:15.110> it<00:03:15.380> out<00:03:15.440> as<00:03:15.620> much<00:03:15.769> and

00:03:15.970 --> 00:03:15.980 
you're not spreading it out as much and

00:03:15.980 --> 00:03:17.259 
you're not spreading it out as much and
so<00:03:16.040> this<00:03:16.130> is<00:03:16.190> all<00:03:16.400> about<00:03:16.640> improving<00:03:17.060> the

00:03:17.259 --> 00:03:17.269 
so this is all about improving the

00:03:17.269 --> 00:03:19.630 
so this is all about improving the
efficiency<00:03:17.480> of<00:03:17.959> all<00:03:18.769> of<00:03:18.980> the<00:03:19.130> tears<00:03:19.370> in<00:03:19.580> the

00:03:19.630 --> 00:03:19.640 
efficiency of all of the tears in the

00:03:19.640 --> 00:03:22.660 
efficiency of all of the tears in the
memory<00:03:19.880> hierarchy<00:03:20.530> your<00:03:21.530> l1<00:03:21.860> cache<00:03:22.130> gets<00:03:22.489> more

00:03:22.660 --> 00:03:22.670 
memory hierarchy your l1 cache gets more

00:03:22.670 --> 00:03:23.850 
memory hierarchy your l1 cache gets more
hit<00:03:22.850> your<00:03:23.000> l2<00:03:23.120> cache<00:03:23.510> because

00:03:23.850 --> 00:03:23.860 
hit your l2 cache because

00:03:23.860 --> 00:03:25.920 
hit your l2 cache because
or<00:03:23.950> into<00:03:24.220> ramekins<00:03:24.580> more<00:03:24.910> kids<00:03:25.510> because

00:03:25.920 --> 00:03:25.930 
or into ramekins more kids because

00:03:25.930 --> 00:03:28.050 
or into ramekins more kids because
you're<00:03:26.080> not<00:03:26.260> having<00:03:26.770> to<00:03:26.800> take<00:03:27.130> so<00:03:27.400> long<00:03:27.670> and

00:03:28.050 --> 00:03:28.060 
you're not having to take so long and

00:03:28.060 --> 00:03:30.210 
you're not having to take so long and
therefore<00:03:28.510> work<00:03:29.050> in<00:03:29.290> parallel<00:03:29.620> with<00:03:29.980> so<00:03:30.160> many

00:03:30.210 --> 00:03:30.220 
therefore work in parallel with so many

00:03:30.220 --> 00:03:33.450 
therefore work in parallel with so many
different<00:03:30.430> pieces<00:03:30.900> one<00:03:31.900> example<00:03:32.260> would<00:03:32.500> be<00:03:32.560> a

00:03:33.450 --> 00:03:33.460 
different pieces one example would be a

00:03:33.460 --> 00:03:36.180 
different pieces one example would be a
customer<00:03:34.120> running<00:03:34.450> a<00:03:34.860> transaction<00:03:35.860> system

00:03:36.180 --> 00:03:36.190 
customer running a transaction system

00:03:36.190 --> 00:03:39.930 
customer running a transaction system
with<00:03:37.060> a<00:03:38.190> thing<00:03:39.190> they<00:03:39.310> had<00:03:39.460> on<00:03:39.580> the<00:03:39.700> order<00:03:39.910> of

00:03:39.930 --> 00:03:39.940 
with a thing they had on the order of

00:03:39.940 --> 00:03:44.730 
with a thing they had on the order of
250<00:03:40.660> 15k<00:03:41.560> RPM<00:03:41.680> drives<00:03:42.270> fibre<00:03:43.270> channel<00:03:43.740> the

00:03:44.730 --> 00:03:44.740 
250 15k RPM drives fibre channel the

00:03:44.740 --> 00:03:48.060 
250 15k RPM drives fibre channel the
whole<00:03:44.890> getup<00:03:45.990> cost<00:03:46.990> you<00:03:47.560> know<00:03:47.650> well<00:03:47.830> over<00:03:48.040> a

00:03:48.060 --> 00:03:48.070 
whole getup cost you know well over a

00:03:48.070 --> 00:03:50.040 
whole getup cost you know well over a
quarter<00:03:48.190> million<00:03:48.460> dollars<00:03:48.910> and<00:03:49.120> then<00:03:49.840> a

00:03:50.040 --> 00:03:50.050 
quarter million dollars and then a

00:03:50.050 --> 00:03:54.540 
quarter million dollars and then a
server<00:03:50.410> with<00:03:50.709> 16<00:03:51.610> cores<00:03:52.890> 16<00:03:53.890> licenses<00:03:54.459> of

00:03:54.540 --> 00:03:54.550 
server with 16 cores 16 licenses of

00:03:54.550 --> 00:03:58.050 
server with 16 cores 16 licenses of
Oracle<00:03:54.940> for<00:03:55.450> each<00:03:55.510> of<00:03:55.660> those<00:03:55.750> cores<00:03:56.080> and<00:03:57.060> 64

00:03:58.050 --> 00:03:58.060 
Oracle for each of those cores and 64

00:03:58.060 --> 00:04:00.630 
Oracle for each of those cores and 64
gigs<00:03:58.300> of<00:03:58.420> ram<00:03:58.800> just<00:03:59.800> that<00:03:59.950> one<00:04:00.100> server<00:04:00.340> is<00:04:00.520> all

00:04:00.630 --> 00:04:00.640 
gigs of ram just that one server is all

00:04:00.640 --> 00:04:02.280 
gigs of ram just that one server is all
it<00:04:00.730> takes<00:04:00.910> to<00:04:01.060> consume<00:04:01.420> all<00:04:01.600> of<00:04:01.630> the<00:04:01.840> i/o<00:04:01.959> that

00:04:02.280 --> 00:04:02.290 
it takes to consume all of the i/o that

00:04:02.290 --> 00:04:04.500 
it takes to consume all of the i/o that
that<00:04:02.440> sand<00:04:03.010> put<00:04:03.340> out<00:04:03.459> to<00:04:03.940> run<00:04:04.090> this<00:04:04.209> database

00:04:04.500 --> 00:04:04.510 
that sand put out to run this database

00:04:04.510 --> 00:04:06.930 
that sand put out to run this database
was<00:04:05.080> doing<00:04:05.320> about<00:04:05.470> 9,000<00:04:06.220> of<00:04:06.340> their

00:04:06.930 --> 00:04:06.940 
was doing about 9,000 of their

00:04:06.940 --> 00:04:10.740 
was doing about 9,000 of their
transactions<00:04:07.660> per<00:04:08.410> minute<00:04:08.820> now<00:04:09.820> they<00:04:10.000> built<00:04:10.660> a

00:04:10.740 --> 00:04:10.750 
transactions per minute now they built a

00:04:10.750 --> 00:04:13.110 
transactions per minute now they built a
second<00:04:11.080> system<00:04:11.350> with<00:04:12.220> half<00:04:12.430> the<00:04:12.640> cores<00:04:12.850> and

00:04:13.110 --> 00:04:13.120 
second system with half the cores and

00:04:13.120 --> 00:04:15.390 
second system with half the cores and
half<00:04:13.630> the<00:04:13.660> RAM<00:04:14.020> so<00:04:14.560> basically<00:04:14.860> half<00:04:15.130> of<00:04:15.280> the

00:04:15.390 --> 00:04:15.400 
half the RAM so basically half of the

00:04:15.400 --> 00:04:18.330 
half the RAM so basically half of the
server<00:04:15.610> hardware<00:04:15.820> and<00:04:16.350> half<00:04:17.350> of<00:04:17.560> the<00:04:17.680> Oracle

00:04:18.330 --> 00:04:18.340 
server hardware and half of the Oracle

00:04:18.340 --> 00:04:20.430 
server hardware and half of the Oracle
licenses<00:04:18.940> because<00:04:19.419> now<00:04:19.630> you<00:04:19.690> only<00:04:19.930> need<00:04:20.169> eight

00:04:20.430 --> 00:04:20.440 
licenses because now you only need eight

00:04:20.440 --> 00:04:24.270 
licenses because now you only need eight
and<00:04:21.330> none<00:04:22.330> of<00:04:22.360> the<00:04:22.600> sand<00:04:22.890> putting<00:04:23.890> the<00:04:24.160> i/o

00:04:24.270 --> 00:04:24.280 
and none of the sand putting the i/o

00:04:24.280 --> 00:04:26.390 
and none of the sand putting the i/o
drive<00:04:24.669> in<00:04:24.970> there<00:04:25.360> they<00:04:25.900> were<00:04:26.020> able<00:04:26.140> to<00:04:26.260> achieve

00:04:26.390 --> 00:04:26.400 
drive in there they were able to achieve

00:04:26.400 --> 00:04:29.280 
drive in there they were able to achieve
11,000<00:04:27.400> transactions<00:04:27.970> per<00:04:28.180> minute<00:04:28.390> sustained

00:04:29.280 --> 00:04:29.290 
11,000 transactions per minute sustained

00:04:29.290 --> 00:04:33.930 
11,000 transactions per minute sustained
the<00:04:30.250> storage<00:04:30.610> mojo<00:04:31.030> take<00:04:32.220> fusion-io<00:04:33.220> is<00:04:33.550> on<00:04:33.729> to

00:04:33.930 --> 00:04:33.940 
the storage mojo take fusion-io is on to

00:04:33.940 --> 00:04:36.960 
the storage mojo take fusion-io is on to
something<00:04:34.120> the<00:04:35.020> gap<00:04:35.229> between<00:04:35.410> CPUs<00:04:36.190> and<00:04:36.220> disks

00:04:36.960 --> 00:04:36.970 
something the gap between CPUs and disks

00:04:36.970 --> 00:04:40.020 
something the gap between CPUs and disks
has<00:04:37.180> never<00:04:37.600> been<00:04:37.750> wider<00:04:38.340> keeping<00:04:39.340> flash<00:04:39.580> close

00:04:40.020 --> 00:04:40.030 
has never been wider keeping flash close

00:04:40.030 --> 00:04:43.230 
has never been wider keeping flash close
to<00:04:40.300> the<00:04:40.419> CPU<00:04:40.810> minimizes<00:04:41.770> latency<00:04:42.310> while

00:04:43.230 --> 00:04:43.240 
to the CPU minimizes latency while

00:04:43.240 --> 00:04:45.240 
to the CPU minimizes latency while
putting<00:04:43.510> flash<00:04:43.840> into<00:04:44.229> disk<00:04:44.440> drive<00:04:44.650> packaging

00:04:45.240 --> 00:04:45.250 
putting flash into disk drive packaging

00:04:45.250 --> 00:04:47.640 
putting flash into disk drive packaging
has<00:04:45.280> real<00:04:45.729> advantages<00:04:46.450> the<00:04:47.169> future<00:04:47.530> belongs

00:04:47.640 --> 00:04:47.650 
has real advantages the future belongs

00:04:47.650 --> 00:04:49.770 
has real advantages the future belongs
to<00:04:47.979> flash<00:04:48.280> designs<00:04:48.820> that<00:04:49.120> minimize<00:04:49.510> latency

00:04:49.770 --> 00:04:49.780 
to flash designs that minimize latency

00:04:49.780 --> 00:04:53.280 
to flash designs that minimize latency
and<00:04:50.290> maximize<00:04:51.220> bandwidth<00:04:52.110> comments<00:04:53.110> welcome

00:04:53.280 --> 00:04:53.290 
and maximize bandwidth comments welcome

00:04:53.290 --> 00:04:57.000 
and maximize bandwidth comments welcome
as<00:04:53.620> always<00:04:54.280> I'm<00:04:54.780> Robin<00:04:55.780> Harris<00:04:55.960> for<00:04:56.650> storage

00:04:57.000 --> 00:04:57.010 
as always I'm Robin Harris for storage

00:04:57.010 --> 00:04:59.430 
as always I'm Robin Harris for storage
mojo

