WEBVTT
Kind: captions
Language: en

00:00:00.290 --> 00:00:03.919 

hello<00:00:01.290> everyone<00:00:01.650> its<00:00:02.010> Benny<00:00:02.399> and<00:00:03.210> in<00:00:03.689> this

00:00:03.919 --> 00:00:03.929 
hello everyone its Benny and in this

00:00:03.929 --> 00:00:05.840 
hello everyone its Benny and in this
video<00:00:04.259> we're<00:00:04.859> gonna<00:00:04.920> start<00:00:05.279> talking<00:00:05.549> about

00:00:05.840 --> 00:00:05.850 
video we're gonna start talking about

00:00:05.850 --> 00:00:08.480 
video we're gonna start talking about
registers<00:00:06.600> because<00:00:07.319> we've<00:00:07.859> already<00:00:08.069> finished

00:00:08.480 --> 00:00:08.490 
registers because we've already finished

00:00:08.490 --> 00:00:09.890 
registers because we've already finished
our<00:00:08.610> ALU<00:00:08.910> at<00:00:09.000> this<00:00:09.120> point<00:00:09.360> there<00:00:09.599> is<00:00:09.690> nothing

00:00:09.890 --> 00:00:09.900 
our ALU at this point there is nothing

00:00:09.900 --> 00:00:12.709 
our ALU at this point there is nothing
more<00:00:10.200> to<00:00:10.440> be<00:00:10.469> said<00:00:10.620> or<00:00:10.830> to<00:00:11.070> do<00:00:11.509> so<00:00:12.509> we're<00:00:12.630> gonna

00:00:12.709 --> 00:00:12.719 
more to be said or to do so we're gonna

00:00:12.719 --> 00:00:14.360 
more to be said or to do so we're gonna
start<00:00:12.990> talking<00:00:13.170> about<00:00:13.410> what<00:00:13.889> are<00:00:14.009> registers

00:00:14.360 --> 00:00:14.370 
start talking about what are registers

00:00:14.370 --> 00:00:17.300 
start talking about what are registers
are<00:00:14.670> what<00:00:15.240> they<00:00:15.389> do<00:00:15.450> and<00:00:16.049> what<00:00:16.740> makes<00:00:17.070> the

00:00:17.300 --> 00:00:17.310 
are what they do and what makes the

00:00:17.310 --> 00:00:21.740 
are what they do and what makes the
ideal<00:00:17.880> register<00:00:19.400> so<00:00:20.400> first<00:00:20.609> off<00:00:20.850> what<00:00:21.480> are

00:00:21.740 --> 00:00:21.750 
ideal register so first off what are

00:00:21.750 --> 00:00:24.830 
ideal register so first off what are
registers<00:00:22.289> and<00:00:23.090> registers<00:00:24.090> or<00:00:24.300> memory<00:00:24.570> just

00:00:24.830 --> 00:00:24.840 
registers and registers or memory just

00:00:24.840 --> 00:00:26.300 
registers and registers or memory just
like<00:00:24.990> any<00:00:25.260> other<00:00:25.619> type<00:00:25.890> of<00:00:25.949> memory<00:00:26.070> in<00:00:26.250> the

00:00:26.300 --> 00:00:26.310 
like any other type of memory in the

00:00:26.310 --> 00:00:28.700 
like any other type of memory in the
computer<00:00:26.570> only<00:00:27.570> thing<00:00:27.960> that<00:00:28.080> makes<00:00:28.230> registers

00:00:28.700 --> 00:00:28.710 
computer only thing that makes registers

00:00:28.710 --> 00:00:31.160 
computer only thing that makes registers
special<00:00:29.189> is<00:00:29.369> their<00:00:29.880> memory<00:00:30.179> specifically<00:00:30.869> for

00:00:31.160 --> 00:00:31.170 
special is their memory specifically for

00:00:31.170 --> 00:00:31.820 
special is their memory specifically for
the<00:00:31.380> aou

00:00:31.820 --> 00:00:31.830 
the aou

00:00:31.830 --> 00:00:33.950 
the aou
their<00:00:32.579> memory<00:00:32.880> that<00:00:33.030> will<00:00:33.149> hold<00:00:33.329> whatever

00:00:33.950 --> 00:00:33.960 
their memory that will hold whatever

00:00:33.960 --> 00:00:36.709 
their memory that will hold whatever
data<00:00:34.620> the<00:00:34.860> ALU<00:00:35.219> is<00:00:35.370> working<00:00:35.670> with<00:00:35.820> at<00:00:36.120> that

00:00:36.709 --> 00:00:36.719 
data the ALU is working with at that

00:00:36.719 --> 00:00:39.709 
data the ALU is working with at that
specific<00:00:37.200> instant<00:00:37.590> in<00:00:37.649> time<00:00:38.210> so<00:00:39.210> for<00:00:39.329> example

00:00:39.709 --> 00:00:39.719 
specific instant in time so for example

00:00:39.719 --> 00:00:42.200 
specific instant in time so for example
let's<00:00:40.110> say<00:00:40.230> I<00:00:40.290> need<00:00:40.500> to<00:00:40.530> add<00:00:40.710> 5<00:00:41.100> plus<00:00:41.550> 8<00:00:41.730> plus<00:00:41.790> 7

00:00:42.200 --> 00:00:42.210 
let's say I need to add 5 plus 8 plus 7

00:00:42.210 --> 00:00:44.060 
let's say I need to add 5 plus 8 plus 7
plus<00:00:42.390> 3<00:00:42.510> for<00:00:42.840> some<00:00:42.960> reason<00:00:43.260> nope<00:00:43.739> doesn't

00:00:44.060 --> 00:00:44.070 
plus 3 for some reason nope doesn't

00:00:44.070 --> 00:00:46.850 
plus 3 for some reason nope doesn't
matter<00:00:44.340> why<00:00:44.550> we<00:00:44.969> need<00:00:45.120> but<00:00:45.239> we<00:00:45.270> need<00:00:45.480> to<00:00:45.660> if<00:00:46.350> I

00:00:46.850 --> 00:00:46.860 
matter why we need but we need to if I

00:00:46.860 --> 00:00:49.850 
matter why we need but we need to if I
access<00:00:47.280> that<00:00:47.309> directly<00:00:47.910> from<00:00:48.239> our<00:00:48.570> big<00:00:49.379> giant

00:00:49.850 --> 00:00:49.860 
access that directly from our big giant

00:00:49.860 --> 00:00:51.500 
access that directly from our big giant
memory<00:00:50.340> system<00:00:50.730> for<00:00:50.879> the<00:00:50.940> entire<00:00:51.030> computer

00:00:51.500 --> 00:00:51.510 
memory system for the entire computer

00:00:51.510 --> 00:00:53.479 
memory system for the entire computer
that<00:00:52.440> could<00:00:52.559> end<00:00:52.680> up<00:00:52.800> being<00:00:53.010> we're<00:00:53.250> really

00:00:53.479 --> 00:00:53.489 
that could end up being we're really

00:00:53.489 --> 00:00:55.490 
that could end up being we're really
really<00:00:53.879> slow<00:00:54.210> because<00:00:54.510> ideally<00:00:55.079> when<00:00:55.379> you're

00:00:55.490 --> 00:00:55.500 
really slow because ideally when you're

00:00:55.500 --> 00:00:57.049 
really slow because ideally when you're
building<00:00:55.649> memory<00:00:56.039> for<00:00:56.250> the<00:00:56.370> whole<00:00:56.730> giant

00:00:57.049 --> 00:00:57.059 
building memory for the whole giant

00:00:57.059 --> 00:00:59.750 
building memory for the whole giant
computer<00:00:57.649> that's<00:00:58.649> not<00:00:58.800> really<00:00:58.949> optimized<00:00:59.430> for

00:00:59.750 --> 00:00:59.760 
computer that's not really optimized for

00:00:59.760 --> 00:01:01.670 
computer that's not really optimized for
speed<00:00:59.879> that's<00:01:00.329> optimized<00:01:00.870> to<00:01:01.079> hold<00:01:01.289> as<00:01:01.410> much

00:01:01.670 --> 00:01:01.680 
speed that's optimized to hold as much

00:01:01.680 --> 00:01:03.080 
speed that's optimized to hold as much
memory<00:01:01.949> in<00:01:02.219> a<00:01:02.309> single<00:01:02.609> space<00:01:02.760> as<00:01:02.940> possible

00:01:03.080 --> 00:01:03.090 
memory in a single space as possible

00:01:03.090 --> 00:01:07.609 
memory in a single space as possible
generally<00:01:03.780> speaking<00:01:04.519> so<00:01:06.320> that<00:01:07.320> could<00:01:07.439> end<00:01:07.530> up

00:01:07.609 --> 00:01:07.619 
generally speaking so that could end up

00:01:07.619 --> 00:01:10.490 
generally speaking so that could end up
being<00:01:07.830> a<00:01:07.890> bit<00:01:08.010> of<00:01:08.100> a<00:01:08.159> problem<00:01:08.810> so<00:01:09.810> that's<00:01:10.290> why

00:01:10.490 --> 00:01:10.500 
being a bit of a problem so that's why

00:01:10.500 --> 00:01:11.719 
being a bit of a problem so that's why
registers<00:01:10.979> exist<00:01:11.280> in<00:01:11.369> the<00:01:11.430> first<00:01:11.580> place

00:01:11.719 --> 00:01:11.729 
registers exist in the first place

00:01:11.729 --> 00:01:15.429 
registers exist in the first place
they're<00:01:12.689> very<00:01:13.200> fast<00:01:13.530> generally<00:01:14.400> speaking<00:01:14.760> and

00:01:15.429 --> 00:01:15.439 
they're very fast generally speaking and

00:01:15.439 --> 00:01:17.990 
they're very fast generally speaking and
since<00:01:16.439> you<00:01:16.590> daily<00:01:16.920> is<00:01:17.070> only<00:01:17.250> working<00:01:17.490> with<00:01:17.790> so

00:01:17.990 --> 00:01:18.000 
since you daily is only working with so

00:01:18.000 --> 00:01:20.390 
since you daily is only working with so
much<00:01:18.119> memory<00:01:18.479> at<00:01:18.570> once<00:01:18.780> it's<00:01:19.680> really<00:01:20.070> good<00:01:20.250> to

00:01:20.390 --> 00:01:20.400 
much memory at once it's really good to

00:01:20.400 --> 00:01:24.170 
much memory at once it's really good to
have<00:01:20.549> a<00:01:20.610> nice<00:01:20.939> small<00:01:21.720> set<00:01:22.020> of<00:01:22.110> registers<00:01:23.180> so

00:01:24.170 --> 00:01:24.180 
have a nice small set of registers so

00:01:24.180 --> 00:01:26.060 
have a nice small set of registers so
let's<00:01:24.360> talk<00:01:24.659> about<00:01:25.049> what<00:01:25.680> makes<00:01:25.830> an<00:01:26.009> ideal

00:01:26.060 --> 00:01:26.070 
let's talk about what makes an ideal

00:01:26.070 --> 00:01:28.249 
let's talk about what makes an ideal
register<00:01:26.729> now<00:01:27.000> obviously<00:01:27.540> it's<00:01:27.780> gonna<00:01:28.049> have

00:01:28.249 --> 00:01:28.259 
register now obviously it's gonna have

00:01:28.259 --> 00:01:30.410 
register now obviously it's gonna have
to<00:01:28.409> be<00:01:28.530> fast<00:01:28.829> if<00:01:29.520> we<00:01:29.670> don't<00:01:29.850> have<00:01:30.060> a<00:01:30.090> fast

00:01:30.410 --> 00:01:30.420 
to be fast if we don't have a fast

00:01:30.420 --> 00:01:32.240 
to be fast if we don't have a fast
register<00:01:30.990> then<00:01:31.530> we're<00:01:31.650> gonna<00:01:31.740> end<00:01:31.829> up<00:01:32.040> back

00:01:32.240 --> 00:01:32.250 
register then we're gonna end up back

00:01:32.250 --> 00:01:33.920 
register then we're gonna end up back
with<00:01:32.400> the<00:01:32.490> same<00:01:32.670> problem<00:01:33.240> of<00:01:33.360> accessing<00:01:33.840> it

00:01:33.920 --> 00:01:33.930 
with the same problem of accessing it

00:01:33.930 --> 00:01:36.710 
with the same problem of accessing it
directly<00:01:34.259> from<00:01:34.350> memory<00:01:35.210> at<00:01:36.210> that<00:01:36.450> point

00:01:36.710 --> 00:01:36.720 
directly from memory at that point

00:01:36.720 --> 00:01:39.289 
directly from memory at that point
you're<00:01:37.350> not<00:01:37.470> really<00:01:37.680> solving<00:01:37.860> anything<00:01:38.250> so<00:01:39.150> we

00:01:39.289 --> 00:01:39.299 
you're not really solving anything so we

00:01:39.299 --> 00:01:41.569 
you're not really solving anything so we
need<00:01:39.479> these<00:01:39.659> things<00:01:39.960> to<00:01:40.140> be<00:01:40.350> fast<00:01:40.710> even<00:01:41.430> if

00:01:41.569 --> 00:01:41.579 
need these things to be fast even if

00:01:41.579 --> 00:01:43.609 
need these things to be fast even if
they<00:01:41.729> end<00:01:41.759> up<00:01:42.060> being<00:01:42.360> much<00:01:43.049> larger<00:01:43.500> than

00:01:43.609 --> 00:01:43.619 
they end up being much larger than

00:01:43.619 --> 00:01:46.880 
they end up being much larger than
normal<00:01:43.920> memory<00:01:45.079> the<00:01:46.079> second<00:01:46.500> thing<00:01:46.649> I'm<00:01:46.770> gonna

00:01:46.880 --> 00:01:46.890 
normal memory the second thing I'm gonna

00:01:46.890 --> 00:01:49.730 
normal memory the second thing I'm gonna
talk<00:01:47.130> about<00:01:47.250> registers<00:01:48.110> how<00:01:49.110> much<00:01:49.380> of<00:01:49.500> them<00:01:49.649> do

00:01:49.730 --> 00:01:49.740 
talk about registers how much of them do

00:01:49.740 --> 00:01:52.700 
talk about registers how much of them do
we<00:01:49.829> really<00:01:50.070> need<00:01:50.280> because<00:01:50.790> the<00:01:51.030> ALU<00:01:51.710> obviously

00:01:52.700 --> 00:01:52.710 
we really need because the ALU obviously

00:01:52.710 --> 00:01:55.069 
we really need because the ALU obviously
isn't<00:01:53.100> going<00:01:53.340> to<00:01:53.460> need<00:01:53.640> that<00:01:54.390> much<00:01:54.689> memories

00:01:55.069 --> 00:01:55.079 
isn't going to need that much memories

00:01:55.079 --> 00:01:57.260 
isn't going to need that much memories
because<00:01:55.500> I'm<00:01:55.619> working<00:01:55.890> with<00:01:56.009> all<00:01:56.189> ones<00:01:56.460> it's

00:01:57.260 --> 00:01:57.270 
because I'm working with all ones it's

00:01:57.270 --> 00:01:59.149 
because I'm working with all ones it's
only<00:01:57.509> gonna<00:01:57.689> be<00:01:57.750> working<00:01:58.110> with<00:01:58.140> yeah<00:01:58.829> so<00:01:59.040> much

00:01:59.149 --> 00:01:59.159 
only gonna be working with yeah so much

00:01:59.159 --> 00:02:02.420 
only gonna be working with yeah so much
memory<00:01:59.460> it<00:01:59.520> wants<00:01:59.820> so<00:02:00.140> in<00:02:01.140> order<00:02:01.590> to<00:02:01.799> just<00:02:02.100> keep

00:02:02.420 --> 00:02:02.430 
memory it wants so in order to just keep

00:02:02.430 --> 00:02:04.100 
memory it wants so in order to just keep
that<00:02:02.640> at<00:02:02.939> ideal<00:02:03.360> levels<00:02:03.719> we're<00:02:03.869> just<00:02:04.020> gonna

00:02:04.100 --> 00:02:04.110 
that at ideal levels we're just gonna

00:02:04.110 --> 00:02:06.859 
that at ideal levels we're just gonna
have<00:02:04.350> only<00:02:04.590> so<00:02:04.950> many<00:02:05.040> registers<00:02:05.579> so<00:02:06.570> question

00:02:06.859 --> 00:02:06.869 
have only so many registers so question

00:02:06.869 --> 00:02:08.839 
have only so many registers so question
is<00:02:06.930> how<00:02:07.110> many<00:02:07.170> verses<00:02:07.469> are<00:02:07.680> should<00:02:07.799> we<00:02:07.890> have<00:02:08.099> 2

00:02:08.839 --> 00:02:08.849 
is how many verses are should we have 2

00:02:08.849 --> 00:02:12.500 
is how many verses are should we have 2
4<00:02:09.539> 8<00:02:10.379> 16

00:02:12.500 --> 00:02:12.510 
4 8 16

00:02:12.510 --> 00:02:14.990 
4 8 16
regardless<00:02:13.230> of<00:02:13.349> what<00:02:13.500> you<00:02:13.620> choose<00:02:14.000> generally

00:02:14.990 --> 00:02:15.000 
regardless of what you choose generally

00:02:15.000 --> 00:02:17.059 
regardless of what you choose generally
you'll<00:02:15.180> want<00:02:15.450> to<00:02:15.599> have<00:02:15.810> it<00:02:16.140> be<00:02:16.319> an<00:02:16.470> exponent<00:02:16.890> of

00:02:17.059 --> 00:02:17.069 
you'll want to have it be an exponent of

00:02:17.069 --> 00:02:21.170 
you'll want to have it be an exponent of
two<00:02:17.370> so<00:02:18.299> like<00:02:18.720> I<00:02:18.810> said<00:02:18.870> 2<00:02:19.200> 4<00:02:19.530> 8<00:02:19.739> or<00:02:20.190> 16<00:02:20.610> or<00:02:20.640> 32

00:02:21.170 --> 00:02:21.180 
two so like I said 2 4 8 or 16 or 32

00:02:21.180 --> 00:02:23.479 
two so like I said 2 4 8 or 16 or 32
something<00:02:21.510> like<00:02:21.599> that<00:02:22.220> and<00:02:23.220> the<00:02:23.310> bigger

00:02:23.479 --> 00:02:23.489 
something like that and the bigger

00:02:23.489 --> 00:02:27.680 
something like that and the bigger
reason<00:02:23.760> for<00:02:23.909> that<00:02:24.060> is<00:02:25.519> addressing<00:02:26.519> a<00:02:26.849> decoder

00:02:27.680 --> 00:02:27.690 
reason for that is addressing a decoder

00:02:27.690 --> 00:02:30.440 
reason for that is addressing a decoder
is<00:02:27.840> gonna<00:02:28.019> be<00:02:28.140> taking<00:02:28.470> in<00:02:28.560> a<00:02:28.620> binary<00:02:28.860> number<00:02:29.450> so

00:02:30.440 --> 00:02:30.450 
is gonna be taking in a binary number so

00:02:30.450 --> 00:02:32.530 
is gonna be taking in a binary number so
if<00:02:30.569> I<00:02:30.690> example<00:02:30.989> I'll<00:02:31.170> just<00:02:31.290> look<00:02:31.440> at<00:02:31.560> my<00:02:31.680> IOU

00:02:32.530 --> 00:02:32.540 
if I example I'll just look at my IOU

00:02:32.540 --> 00:02:34.880 
if I example I'll just look at my IOU
now<00:02:33.540> these<00:02:33.660> are<00:02:33.810> all<00:02:33.900> binary<00:02:34.110> numbers<00:02:34.530> so

00:02:34.880 --> 00:02:34.890 
now these are all binary numbers so

00:02:34.890 --> 00:02:39.770 
now these are all binary numbers so
there's<00:02:35.250> 1<00:02:35.640> 2<00:02:36.000> 4<00:02:36.420> 8<00:02:36.629> 16<00:02:37.140> 32<00:02:37.379> etc<00:02:38.660> ideally<00:02:39.660> you'll

00:02:39.770 --> 00:02:39.780 
there's 1 2 4 8 16 32 etc ideally you'll

00:02:39.780 --> 00:02:42.289 
there's 1 2 4 8 16 32 etc ideally you'll
just<00:02:39.989> want<00:02:40.290> it<00:02:40.379> to<00:02:40.410> be<00:02:40.530> one<00:02:41.370> of<00:02:41.700> these

00:02:42.289 --> 00:02:42.299 
just want it to be one of these

00:02:42.299 --> 00:02:44.360 
just want it to be one of these
exponents<00:02:42.720> of<00:02:42.930> two<00:02:43.079> because<00:02:43.260> that<00:02:43.409> way<00:02:43.709> you

00:02:44.360 --> 00:02:44.370 
exponents of two because that way you

00:02:44.370 --> 00:02:46.309 
exponents of two because that way you
can<00:02:44.519> utilize<00:02:44.910> the<00:02:45.150> entire<00:02:45.239> binary<00:02:45.870> number<00:02:46.170> 5

00:02:46.309 --> 00:02:46.319 
can utilize the entire binary number 5

00:02:46.319 --> 00:02:49.339 
can utilize the entire binary number 5
only<00:02:46.470> 30<00:02:47.000> well<00:02:48.000> I<00:02:48.030> might<00:02:48.450> be<00:02:48.480> able<00:02:48.569> to<00:02:48.780> have<00:02:48.959> 5

00:02:49.339 --> 00:02:49.349 
only 30 well I might be able to have 5

00:02:49.349 --> 00:02:51.140 
only 30 well I might be able to have 5
bits<00:02:49.590> of<00:02:49.680> information<00:02:49.829> but<00:02:50.459> I<00:02:50.489> can't<00:02:50.790> use<00:02:50.970> all

00:02:51.140 --> 00:02:51.150 
bits of information but I can't use all

00:02:51.150 --> 00:02:54.650 
bits of information but I can't use all
those<00:02:51.299> 5<00:02:51.540> bits<00:02:51.980> so<00:02:52.980> you<00:02:53.340> ideally<00:02:54.239> you<00:02:54.359> want<00:02:54.569> it

00:02:54.650 --> 00:02:54.660 
those 5 bits so you ideally you want it

00:02:54.660 --> 00:02:58.970 
those 5 bits so you ideally you want it
to<00:02:54.750> be<00:02:55.010> very<00:02:56.010> fast<00:02:56.250> and<00:02:56.549> have<00:02:56.940> a<00:02:57.709> exponent<00:02:58.709> of<00:02:58.769> 2

00:02:58.970 --> 00:02:58.980 
to be very fast and have a exponent of 2

00:02:58.980 --> 00:03:03.080 
to be very fast and have a exponent of 2
quantity<00:03:00.890> so<00:03:01.890> that<00:03:02.099> leads<00:03:02.310> the<00:03:02.519> question<00:03:02.940> of

00:03:03.080 --> 00:03:03.090 
quantity so that leads the question of

00:03:03.090 --> 00:03:05.900 
quantity so that leads the question of
how<00:03:04.079> many<00:03:04.250> specifically<00:03:05.250> should<00:03:05.340> I<00:03:05.459> have<00:03:05.609> what

00:03:05.900 --> 00:03:05.910 
how many specifically should I have what

00:03:05.910 --> 00:03:09.170 
how many specifically should I have what
exponent<00:03:06.209> of<00:03:06.420> 2<00:03:06.690> is<00:03:06.930> ideal<00:03:07.760> and<00:03:08.760> you<00:03:08.910> can<00:03:09.030> argue

00:03:09.170 --> 00:03:09.180 
exponent of 2 is ideal and you can argue

00:03:09.180 --> 00:03:11.539 
exponent of 2 is ideal and you can argue
many<00:03:09.629> different<00:03:10.079> systems<00:03:10.230> I'm<00:03:11.040> gonna<00:03:11.370> argue

00:03:11.539 --> 00:03:11.549 
many different systems I'm gonna argue

00:03:11.549 --> 00:03:14.509 
many different systems I'm gonna argue
that<00:03:11.790> 8<00:03:12.209> is<00:03:12.540> probably<00:03:12.870> ideal<00:03:13.049> because<00:03:13.590> it<00:03:14.129> has

00:03:14.509 --> 00:03:14.519 
that 8 is probably ideal because it has

00:03:14.519 --> 00:03:16.309 
that 8 is probably ideal because it has
gives<00:03:14.879> you<00:03:15.000> a<00:03:15.030> nice<00:03:15.299> bit<00:03:15.750> of<00:03:15.780> space<00:03:16.079> to<00:03:16.109> work

00:03:16.309 --> 00:03:16.319 
gives you a nice bit of space to work

00:03:16.319 --> 00:03:20.000 
gives you a nice bit of space to work
with<00:03:16.609> yet<00:03:17.609> you're<00:03:17.760> not<00:03:17.790> having<00:03:18.269> 32<00:03:18.840> bits<00:03:19.440> of<00:03:19.560> or

00:03:20.000 --> 00:03:20.010 
with yet you're not having 32 bits of or

00:03:20.010 --> 00:03:21.199 
with yet you're not having 32 bits of or
pieces<00:03:20.310> of<00:03:20.370> information<00:03:20.519> to<00:03:20.910> work<00:03:21.030> with

00:03:21.199 --> 00:03:21.209 
pieces of information to work with

00:03:21.209 --> 00:03:23.270 
pieces of information to work with
what's<00:03:21.389> because<00:03:21.720> I<00:03:21.810> mean<00:03:21.959> come<00:03:22.200> on<00:03:22.230> why<00:03:23.130> don't

00:03:23.270 --> 00:03:23.280 
what's because I mean come on why don't

00:03:23.280 --> 00:03:25.640 
what's because I mean come on why don't
you<00:03:23.370> be<00:03:23.489> working<00:03:23.819> with<00:03:23.970> 16<00:03:24.840> or<00:03:25.049> 32<00:03:25.470> different

00:03:25.640 --> 00:03:25.650 
you be working with 16 or 32 different

00:03:25.650 --> 00:03:27.220 
you be working with 16 or 32 different
pieces<00:03:25.980> of<00:03:26.069> information<00:03:26.250> registers<00:03:26.880> at<00:03:27.000> once

00:03:27.220 --> 00:03:27.230 
pieces of information registers at once

00:03:27.230 --> 00:03:29.750 
pieces of information registers at once
not<00:03:28.230> that<00:03:28.470> often<00:03:28.680> if<00:03:29.220> you're<00:03:29.489> gonna<00:03:29.579> be

00:03:29.750 --> 00:03:29.760 
not that often if you're gonna be

00:03:29.760 --> 00:03:32.629 
not that often if you're gonna be
working<00:03:29.910> with<00:03:30.090> a<00:03:30.329> really<00:03:30.720> fancy<00:03:31.349> computer<00:03:31.980> so

00:03:32.629 --> 00:03:32.639 
working with a really fancy computer so

00:03:32.639 --> 00:03:36.289 
working with a really fancy computer so
not<00:03:32.940> this<00:03:33.680> then<00:03:34.680> maybe<00:03:35.489> that<00:03:35.790> might<00:03:35.970> be<00:03:36.150> ideal

00:03:36.289 --> 00:03:36.299 
not this then maybe that might be ideal

00:03:36.299 --> 00:03:39.229 
not this then maybe that might be ideal
but<00:03:36.900> in<00:03:36.989> this<00:03:37.109> case<00:03:37.380> I<00:03:37.680> think<00:03:37.950> 8<00:03:38.370> is<00:03:38.700> gonna<00:03:38.910> be<00:03:39.060> a

00:03:39.229 --> 00:03:39.239 
but in this case I think 8 is gonna be a

00:03:39.239 --> 00:03:43.610 
but in this case I think 8 is gonna be a
perfect<00:03:39.900> amount<00:03:41.150> so<00:03:42.150> then<00:03:42.359> the<00:03:42.930> only<00:03:42.959> real

00:03:43.610 --> 00:03:43.620 
perfect amount so then the only real

00:03:43.620 --> 00:03:45.259 
perfect amount so then the only real
question<00:03:43.799> left<00:03:44.220> them<00:03:44.459> since<00:03:44.730> registers<00:03:45.150> are

00:03:45.259 --> 00:03:45.269 
question left them since registers are

00:03:45.269 --> 00:03:48.349 
question left them since registers are
memory<00:03:45.480> just<00:03:45.630> like<00:03:45.750> any<00:03:46.049> other<00:03:46.230> memory<00:03:46.620> is<00:03:47.359> how

00:03:48.349 --> 00:03:48.359 
memory just like any other memory is how

00:03:48.359 --> 00:03:49.909 
memory just like any other memory is how
many<00:03:48.540> pieces<00:03:48.959> of<00:03:49.139> information<00:03:49.290> to<00:03:49.650> be<00:03:49.739> able<00:03:49.799> to

00:03:49.909 --> 00:03:49.919 
many pieces of information to be able to

00:03:49.919 --> 00:03:51.920 
many pieces of information to be able to
read<00:03:50.130> at<00:03:50.250> once<00:03:50.430> and<00:03:50.700> how<00:03:51.120> much<00:03:51.299> information

00:03:51.920 --> 00:03:51.930 
read at once and how much information

00:03:51.930 --> 00:03:53.569 
read at once and how much information
should<00:03:52.079> I<00:03:52.109> have<00:03:52.349> to<00:03:52.560> write<00:03:52.769> at<00:03:53.040> once

00:03:53.569 --> 00:03:53.579 
should I have to write at once

00:03:53.579 --> 00:03:57.409 
should I have to write at once
and<00:03:54.980> you<00:03:55.980> usually<00:03:56.340> don't<00:03:56.579> ask<00:03:56.819> this<00:03:57.180> because

00:03:57.409 --> 00:03:57.419 
and you usually don't ask this because

00:03:57.419 --> 00:03:59.030 
and you usually don't ask this because
usually<00:03:57.569> you<00:03:57.780> think<00:03:57.810> ok<00:03:58.319> memories<00:03:58.739> gonna<00:03:58.919> have

00:03:59.030 --> 00:03:59.040 
usually you think ok memories gonna have

00:03:59.040 --> 00:04:02.690 
usually you think ok memories gonna have
one<00:03:59.310> read<00:03:59.519> one<00:04:00.090> right<00:04:00.359> end<00:04:01.319> of<00:04:01.500> story<00:04:01.829> but

00:04:02.690 --> 00:04:02.700 
one read one right end of story but

00:04:02.700 --> 00:04:04.430 
one read one right end of story but
registers<00:04:03.090> they<00:04:03.690> can<00:04:03.840> be<00:04:03.930> a<00:04:03.959> bit<00:04:04.139> different

00:04:04.430 --> 00:04:04.440 
registers they can be a bit different

00:04:04.440 --> 00:04:06.229 
registers they can be a bit different
because<00:04:04.530> our<00:04:04.769> ALU<00:04:05.129> is<00:04:05.190> a<00:04:05.280> bit<00:04:05.430> weird<00:04:05.639> it

00:04:06.229 --> 00:04:06.239 
because our ALU is a bit weird it

00:04:06.239 --> 00:04:07.879 
because our ALU is a bit weird it
doesn't<00:04:06.450> take<00:04:06.720> in<00:04:06.900> one<00:04:07.079> piece<00:04:07.290> of<00:04:07.410> information

00:04:07.879 --> 00:04:07.889 
doesn't take in one piece of information

00:04:07.889 --> 00:04:09.080 
doesn't take in one piece of information
and<00:04:08.010> spit<00:04:08.250> back<00:04:08.400> another<00:04:08.819> piece<00:04:09.000> of

00:04:09.080 --> 00:04:09.090 
and spit back another piece of

00:04:09.090 --> 00:04:11.689 
and spit back another piece of
information<00:04:09.269> if<00:04:10.109> you<00:04:10.769> notice<00:04:11.040> right<00:04:11.190> here<00:04:11.250> it

00:04:11.689 --> 00:04:11.699 
information if you notice right here it

00:04:11.699 --> 00:04:14.360 
information if you notice right here it
takes<00:04:12.180> in<00:04:12.389> two<00:04:12.780> pieces<00:04:13.019> of<00:04:13.169> information<00:04:13.370> input

00:04:14.360 --> 00:04:14.370 
takes in two pieces of information input

00:04:14.370 --> 00:04:19.520 
takes in two pieces of information input
a<00:04:14.489> and<00:04:14.790> input<00:04:15.780> B<00:04:15.930> and<00:04:17.449> of<00:04:18.449> course<00:04:18.630> over<00:04:18.840> here<00:04:19.199> we

00:04:19.520 --> 00:04:19.530 
a and input B and of course over here we

00:04:19.530 --> 00:04:22.670 
a and input B and of course over here we
have<00:04:19.739> one<00:04:20.099> output<00:04:20.280> so<00:04:20.700> two<00:04:21.180> inputs<00:04:21.780> one<00:04:22.469> output

00:04:22.670 --> 00:04:22.680 
have one output so two inputs one output

00:04:22.680 --> 00:04:25.040 
have one output so two inputs one output
so<00:04:23.669> we're<00:04:23.820> gonna<00:04:23.909> want<00:04:24.150> to<00:04:24.270> arrange<00:04:24.539> our<00:04:24.780> reads

00:04:25.040 --> 00:04:25.050 
so we're gonna want to arrange our reads

00:04:25.050 --> 00:04:25.960 
so we're gonna want to arrange our reads
and<00:04:25.260> writes<00:04:25.349> according

00:04:25.960 --> 00:04:25.970 
and writes according

00:04:25.970 --> 00:04:28.060 
and writes according
because<00:04:26.240> we<00:04:26.360> don't<00:04:26.510> have<00:04:26.540> to<00:04:26.720> wait<00:04:27.140> to<00:04:27.440> read

00:04:28.060 --> 00:04:28.070 
because we don't have to wait to read

00:04:28.070 --> 00:04:29.890 
because we don't have to wait to read
certain<00:04:28.610> amount<00:04:28.850> of<00:04:28.940> information<00:04:29.090> over<00:04:29.750> and

00:04:29.890 --> 00:04:29.900 
certain amount of information over and

00:04:29.900 --> 00:04:31.840 
certain amount of information over and
over<00:04:30.080> until<00:04:30.140> we<00:04:30.350> get<00:04:30.470> enough<00:04:30.710> information<00:04:30.850> in

00:04:31.840 --> 00:04:31.850 
over until we get enough information in

00:04:31.850 --> 00:04:33.790 
over until we get enough information in
our<00:04:32.000> AO<00:04:32.180> you<00:04:32.320> know<00:04:33.320> that's<00:04:33.560> just<00:04:33.620> gonna

00:04:33.790 --> 00:04:33.800 
our AO you know that's just gonna

00:04:33.800 --> 00:04:35.710 
our AO you know that's just gonna
bottleneck<00:04:34.310> the<00:04:34.430> system<00:04:34.760> that's<00:04:34.970> gonna<00:04:35.090> bring

00:04:35.710 --> 00:04:35.720 
bottleneck the system that's gonna bring

00:04:35.720 --> 00:04:37.690 
bottleneck the system that's gonna bring
us<00:04:35.870> right<00:04:36.110> back<00:04:36.290> to<00:04:36.440> the<00:04:36.530> problem<00:04:36.860> of<00:04:36.950> reading

00:04:37.690 --> 00:04:37.700 
us right back to the problem of reading

00:04:37.700 --> 00:04:42.670 
us right back to the problem of reading
directly<00:04:38.090> from<00:04:38.240> memory<00:04:39.130> so<00:04:41.230> let's<00:04:42.230> start<00:04:42.560> with

00:04:42.670 --> 00:04:42.680 
directly from memory so let's start with

00:04:42.680 --> 00:04:45.490 
directly from memory so let's start with
our<00:04:42.860> elbow<00:04:43.190> we<00:04:43.580> have<00:04:43.730> one<00:04:44.120> output<00:04:44.410> what's<00:04:45.410> our

00:04:45.490 --> 00:04:45.500 
our elbow we have one output what's our

00:04:45.500 --> 00:04:48.570 
our elbow we have one output what's our
output<00:04:45.530> gonna<00:04:45.890> be<00:04:46.070> doing<00:04:46.400> in<00:04:46.580> our<00:04:47.090> registers

00:04:48.570 --> 00:04:48.580 
output gonna be doing in our registers

00:04:48.580 --> 00:04:50.320 
output gonna be doing in our registers
generally<00:04:49.580> speaking<00:04:49.820> you're<00:04:50.060> gonna<00:04:50.150> be

00:04:50.320 --> 00:04:50.330 
generally speaking you're gonna be

00:04:50.330 --> 00:04:51.730 
generally speaking you're gonna be
saving<00:04:50.660> your<00:04:50.810> output<00:04:51.140> to<00:04:51.260> the<00:04:51.350> registers

00:04:51.730 --> 00:04:51.740 
saving your output to the registers

00:04:51.740 --> 00:04:53.110 
saving your output to the registers
you're<00:04:51.890> not<00:04:52.010> gonna<00:04:52.130> be<00:04:52.310> reading<00:04:52.760> an<00:04:52.850> output

00:04:53.110 --> 00:04:53.120 
you're not gonna be reading an output

00:04:53.120 --> 00:04:55.090 
you're not gonna be reading an output
out<00:04:53.300> of<00:04:53.420> your<00:04:53.540> registers<00:04:53.930> because<00:04:54.140> I<00:04:54.710> mean

00:04:55.090 --> 00:04:55.100 
out of your registers because I mean

00:04:55.100 --> 00:04:56.230 
out of your registers because I mean
that<00:04:55.250> defeats<00:04:55.370> the<00:04:55.640> whole<00:04:55.670> purpose<00:04:55.910> of<00:04:56.120> the

00:04:56.230 --> 00:04:56.240 
that defeats the whole purpose of the

00:04:56.240 --> 00:04:57.430 
that defeats the whole purpose of the
ALU<00:04:56.390> the<00:04:56.600> arrows<00:04:56.840> can<00:04:57.020> be<00:04:57.050> giving<00:04:57.350> you<00:04:57.410> some

00:04:57.430 --> 00:04:57.440 
ALU the arrows can be giving you some

00:04:57.440 --> 00:04:59.560 
ALU the arrows can be giving you some
output<00:04:57.980> and<00:04:58.190> you're<00:04:58.820> gonna<00:04:58.940> want<00:04:59.210> to<00:04:59.300> save

00:04:59.560 --> 00:04:59.570 
output and you're gonna want to save

00:04:59.570 --> 00:05:03.340 
output and you're gonna want to save
that<00:04:59.600> into<00:05:00.320> the<00:05:00.440> registers<00:05:01.330> so<00:05:02.330> we're<00:05:03.260> gonna

00:05:03.340 --> 00:05:03.350 
that into the registers so we're gonna

00:05:03.350 --> 00:05:05.530 
that into the registers so we're gonna
have<00:05:03.620> just<00:05:03.890> one<00:05:04.220> right<00:05:04.430> because<00:05:04.670> there's

00:05:05.530 --> 00:05:05.540 
have just one right because there's

00:05:05.540 --> 00:05:06.910 
have just one right because there's
nothing<00:05:05.840> else<00:05:06.050> we're<00:05:06.290> gonna<00:05:06.380> write<00:05:06.650> at<00:05:06.800> the

00:05:06.910 --> 00:05:06.920 
nothing else we're gonna write at the

00:05:06.920 --> 00:05:10.900 
nothing else we're gonna write at the
same<00:05:07.100> time<00:05:08.260> now<00:05:09.260> second<00:05:09.710> thing<00:05:09.740> though<00:05:10.070> how

00:05:10.900 --> 00:05:10.910 
same time now second thing though how

00:05:10.910 --> 00:05:13.480 
same time now second thing though how
many<00:05:11.150> reads<00:05:11.510> should<00:05:11.870> we<00:05:12.020> have<00:05:12.200> but<00:05:13.010> now<00:05:13.100> we

00:05:13.480 --> 00:05:13.490 
many reads should we have but now we

00:05:13.490 --> 00:05:16.780 
many reads should we have but now we
have<00:05:13.640> two<00:05:14.060> inputs<00:05:14.690> to<00:05:14.780> the<00:05:14.870> ALU<00:05:15.200> so<00:05:15.580> we<00:05:16.580> don't

00:05:16.780 --> 00:05:16.790 
have two inputs to the ALU so we don't

00:05:16.790 --> 00:05:18.130 
have two inputs to the ALU so we don't
want<00:05:16.940> to<00:05:17.030> overdo<00:05:17.330> it<00:05:17.450> we<00:05:17.570> don't<00:05:17.660> just<00:05:17.930> want<00:05:18.110> to

00:05:18.130 --> 00:05:18.140 
want to overdo it we don't just want to

00:05:18.140 --> 00:05:19.810 
want to overdo it we don't just want to
have<00:05:18.200> one<00:05:18.350> read<00:05:18.980> because<00:05:19.340> then<00:05:19.550> we<00:05:19.669> have<00:05:19.700> to

00:05:19.810 --> 00:05:19.820 
have one read because then we have to

00:05:19.820 --> 00:05:22.630 
have one read because then we have to
read<00:05:20.090> out<00:05:20.270> our<00:05:20.510> first<00:05:20.900> input<00:05:21.440> and<00:05:21.950> then<00:05:22.430> read

00:05:22.630 --> 00:05:22.640 
read out our first input and then read

00:05:22.640 --> 00:05:23.980 
read out our first input and then read
our<00:05:22.760> second<00:05:23.090> input<00:05:23.180> secondly<00:05:23.750> and<00:05:23.870> that's

00:05:23.980 --> 00:05:23.990 
our second input secondly and that's

00:05:23.990 --> 00:05:26.740 
our second input secondly and that's
just<00:05:24.260> not<00:05:24.470> gonna<00:05:25.010> be<00:05:25.190> ideal<00:05:25.550> we<00:05:26.419> don't<00:05:26.570> want<00:05:26.690> to

00:05:26.740 --> 00:05:26.750 
just not gonna be ideal we don't want to

00:05:26.750 --> 00:05:30.070 
just not gonna be ideal we don't want to
read<00:05:26.930> both<00:05:27.110> at<00:05:27.260> once<00:05:27.470> so<00:05:28.930> ideally<00:05:29.930> you<00:05:29.960> should

00:05:30.070 --> 00:05:30.080 
read both at once so ideally you should

00:05:30.080 --> 00:05:34.000 
read both at once so ideally you should
have<00:05:30.350> two<00:05:30.740> reads<00:05:31.490> in<00:05:31.640> your<00:05:31.760> register<00:05:32.270> and<00:05:33.010> the

00:05:34.000 --> 00:05:34.010 
have two reads in your register and the

00:05:34.010 --> 00:05:35.950 
have two reads in your register and the
big<00:05:34.160> reason<00:05:34.310> for<00:05:34.490> that<00:05:34.610> is<00:05:34.730> again<00:05:34.970> you<00:05:35.210> just

00:05:35.950 --> 00:05:35.960 
big reason for that is again you just

00:05:35.960 --> 00:05:37.990 
big reason for that is again you just
you're<00:05:36.590> gonna<00:05:36.710> have<00:05:36.919> two<00:05:37.220> things<00:05:37.550> to<00:05:37.820> read

00:05:37.990 --> 00:05:38.000 
you're gonna have two things to read

00:05:38.000 --> 00:05:40.150 
you're gonna have two things to read
from<00:05:38.150> it<00:05:38.330> once<00:05:38.510> two<00:05:38.840> inputs<00:05:39.169> at<00:05:39.230> once<00:05:39.410> if<00:05:39.830> you

00:05:40.150 --> 00:05:40.160 
from it once two inputs at once if you

00:05:40.160 --> 00:05:41.500 
from it once two inputs at once if you
have<00:05:40.250> two<00:05:40.490> reads<00:05:40.730> from<00:05:40.850> your<00:05:41.000> registers<00:05:41.419> you

00:05:41.500 --> 00:05:41.510 
have two reads from your registers you

00:05:41.510 --> 00:05:43.030 
have two reads from your registers you
could<00:05:41.630> read<00:05:41.810> in<00:05:41.960> to<00:05:42.200> them<00:05:42.290> in<00:05:42.530> from<00:05:42.950> the

00:05:43.030 --> 00:05:43.040 
could read in to them in from the

00:05:43.040 --> 00:05:45.610 
could read in to them in from the
embedment<00:05:43.400> you<00:05:44.300> can<00:05:44.450> read<00:05:44.600> in<00:05:44.750> two<00:05:45.050> inputs<00:05:45.530> at

00:05:45.610 --> 00:05:45.620 
embedment you can read in two inputs at

00:05:45.620 --> 00:05:48.219 
embedment you can read in two inputs at
once<00:05:45.770> and<00:05:46.640> so<00:05:47.210> at<00:05:47.630> the<00:05:47.780> end<00:05:47.900> of<00:05:47.990> the<00:05:48.080> day

00:05:48.219 --> 00:05:48.229 
once and so at the end of the day

00:05:48.229 --> 00:05:51.460 
once and so at the end of the day
they're<00:05:49.130> all<00:05:49.430> yeah<00:05:50.360> at<00:05:50.510> the<00:05:50.600> end<00:05:50.810> result<00:05:51.350> of

00:05:51.460 --> 00:05:51.470 
they're all yeah at the end result of

00:05:51.470 --> 00:05:53.530 
they're all yeah at the end result of
all<00:05:51.590> that<00:05:51.800> is<00:05:52.040> you<00:05:52.370> have<00:05:52.460> this<00:05:52.669> nice<00:05:52.910> efficient

00:05:53.530 --> 00:05:53.540 
all that is you have this nice efficient

00:05:53.540 --> 00:05:56.050 
all that is you have this nice efficient
register<00:05:53.900> system<00:05:54.080> and<00:05:54.860> that's<00:05:55.580> really<00:05:55.940> all

00:05:56.050 --> 00:05:56.060 
register system and that's really all

00:05:56.060 --> 00:05:57.310 
register system and that's really all
I'm<00:05:56.150> going<00:05:56.270> to<00:05:56.330> talk<00:05:56.540> about<00:05:56.570> varistor<00:05:57.080> design

00:05:57.310 --> 00:05:57.320 
I'm going to talk about varistor design

00:05:57.320 --> 00:06:00.280 
I'm going to talk about varistor design
right<00:05:57.560> now<00:05:57.710> because<00:05:58.930> there's<00:05:59.930> really<00:06:00.110> not

00:06:00.280 --> 00:06:00.290 
right now because there's really not

00:06:00.290 --> 00:06:02.170 
right now because there's really not
that<00:06:00.350> much<00:06:00.830> that<00:06:01.100> goes<00:06:01.190> into<00:06:01.430> it<00:06:01.550> but<00:06:01.790> it's

00:06:02.170 --> 00:06:02.180 
that much that goes into it but it's

00:06:02.180 --> 00:06:03.430 
that much that goes into it but it's
very<00:06:02.300> important<00:06:02.780> to<00:06:02.840> go<00:06:02.960> into<00:06:02.990> it<00:06:03.290> where

00:06:03.430 --> 00:06:03.440 
very important to go into it where

00:06:03.440 --> 00:06:04.450 
very important to go into it where
you're<00:06:03.560> gonna<00:06:03.620> end<00:06:03.740> up<00:06:03.950> with<00:06:04.100> a<00:06:04.220> really

00:06:04.450 --> 00:06:04.460 
you're gonna end up with a really

00:06:04.460 --> 00:06:08.020 
you're gonna end up with a really
inefficient<00:06:05.150> system<00:06:05.919> so<00:06:06.919> yeah<00:06:07.070> so<00:06:07.610> thank<00:06:07.850> you

00:06:08.020 --> 00:06:08.030 
inefficient system so yeah so thank you

00:06:08.030 --> 00:06:10.630 
inefficient system so yeah so thank you
and<00:06:08.270> I<00:06:09.169> will<00:06:09.440> see<00:06:09.710> you<00:06:09.830> next<00:06:10.010> time<00:06:10.250> where<00:06:10.610> we

00:06:10.630 --> 00:06:10.640 
and I will see you next time where we

00:06:10.640 --> 00:06:13.150 
and I will see you next time where we
will<00:06:10.790> be<00:06:11.000> talking<00:06:11.330> about<00:06:11.800> how<00:06:12.800> we<00:06:12.830> can

00:06:13.150 --> 00:06:13.160 
will be talking about how we can

00:06:13.160 --> 00:06:16.260 
will be talking about how we can
actually<00:06:13.610> build<00:06:13.880> an<00:06:14.150> ideal<00:06:15.020> register<00:06:15.950> system

00:06:16.260 --> 00:06:16.270 
actually build an ideal register system

00:06:16.270 --> 00:06:21.160 
actually build an ideal register system
so<00:06:17.270> thank<00:06:17.510> you<00:06:17.660> and<00:06:17.900> I'll<00:06:18.440> see<00:06:18.470> you<00:06:18.860> next<00:06:19.070> time

