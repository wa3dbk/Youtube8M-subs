WEBVTT
Kind: captions
Language: en

00:00:02.149 --> 00:00:05.660 

finite<00:00:03.149> state<00:00:03.449> machines<00:00:03.899> or<00:00:04.290> simply<00:00:05.009> state

00:00:05.660 --> 00:00:05.670 
finite state machines or simply state

00:00:05.670 --> 00:00:08.240 
finite state machines or simply state
machines<00:00:06.120> are<00:00:06.480> the<00:00:07.140> core<00:00:07.410> of<00:00:07.440> every<00:00:07.980> hardware

00:00:08.240 --> 00:00:08.250 
machines are the core of every hardware

00:00:08.250 --> 00:00:11.540 
machines are the core of every hardware
design<00:00:09.139> since<00:00:10.139> you<00:00:10.290> work<00:00:10.530> a<00:00:10.679> lot<00:00:10.860> with<00:00:10.920> them<00:00:11.340> it

00:00:11.540 --> 00:00:11.550 
design since you work a lot with them it

00:00:11.550 --> 00:00:13.879 
design since you work a lot with them it
is<00:00:12.120> important<00:00:12.690> that<00:00:12.719> state<00:00:13.230> machines<00:00:13.650> are

00:00:13.879 --> 00:00:13.889 
is important that state machines are

00:00:13.889 --> 00:00:17.140 
is important that state machines are
easy<00:00:14.219> to<00:00:14.490> write<00:00:14.700> and<00:00:14.969> easy<00:00:15.030> to<00:00:15.360> understand

00:00:17.140 --> 00:00:17.150 
easy to write and easy to understand

00:00:17.150 --> 00:00:20.120 
easy to write and easy to understand
here<00:00:18.150> is<00:00:18.180> a<00:00:18.359> short<00:00:18.779> demonstration<00:00:19.020> on<00:00:19.800> how<00:00:19.830> to

00:00:20.120 --> 00:00:20.130 
here is a short demonstration on how to

00:00:20.130 --> 00:00:23.660 
here is a short demonstration on how to
write<00:00:20.460> the<00:00:20.640> state<00:00:20.910> machine<00:00:22.130> we<00:00:23.130> declare<00:00:23.519> an

00:00:23.660 --> 00:00:23.670 
write the state machine we declare an

00:00:23.670 --> 00:00:25.730 
write the state machine we declare an
enumerated<00:00:24.330> data<00:00:24.480> type<00:00:24.960> with<00:00:25.170> two<00:00:25.380> states

00:00:25.730 --> 00:00:25.740 
enumerated data type with two states

00:00:25.740 --> 00:00:30.019 
enumerated data type with two states
idle<00:00:26.550> and<00:00:26.789> running<00:00:28.369> the<00:00:29.369> trick<00:00:29.670> is<00:00:29.820> how<00:00:29.849> to

00:00:30.019 --> 00:00:30.029 
idle and running the trick is how to

00:00:30.029 --> 00:00:33.139 
idle and running the trick is how to
write<00:00:30.330> a<00:00:30.390> case<00:00:30.779> statement<00:00:31.109> if<00:00:31.859> you<00:00:32.700> just<00:00:32.940> type

00:00:33.139 --> 00:00:33.149 
write a case statement if you just type

00:00:33.149 --> 00:00:36.530 
write a case statement if you just type
case<00:00:33.630> and<00:00:34.020> press<00:00:34.380> comfortable<00:00:34.890> space<00:00:35.540> sigasi

00:00:36.530 --> 00:00:36.540 
case and press comfortable space sigasi

00:00:36.540 --> 00:00:39.410 
case and press comfortable space sigasi
will<00:00:36.690> offer<00:00:36.930> an<00:00:37.200> autocomplete<00:00:37.879> all<00:00:38.879> of<00:00:39.270> the

00:00:39.410 --> 00:00:39.420 
will offer an autocomplete all of the

00:00:39.420 --> 00:00:41.780 
will offer an autocomplete all of the
states<00:00:39.750> are<00:00:40.020> already<00:00:40.260> there<00:00:40.770> and<00:00:40.980> all<00:00:41.520> you

00:00:41.780 --> 00:00:41.790 
states are already there and all you

00:00:41.790 --> 00:00:45.770 
states are already there and all you
have<00:00:42.030> to<00:00:42.180> do<00:00:42.329> is<00:00:42.570> fill<00:00:42.930> out<00:00:43.079> the<00:00:43.230> behavior<00:00:44.780> if

00:00:45.770 --> 00:00:45.780 
have to do is fill out the behavior if

00:00:45.780 --> 00:00:48.560 
have to do is fill out the behavior if
you<00:00:45.930> add<00:00:46.170> code<00:00:46.590> to<00:00:46.800> the<00:00:46.920> state<00:00:47.190> machine<00:00:47.579> sigasi

00:00:48.560 --> 00:00:48.570 
you add code to the state machine sigasi

00:00:48.570 --> 00:00:50.569 
you add code to the state machine sigasi
will<00:00:48.690> automatically<00:00:49.410> compile<00:00:49.860> while<00:00:50.190> you<00:00:50.460> are

00:00:50.569 --> 00:00:50.579 
will automatically compile while you are

00:00:50.579 --> 00:00:53.420 
will automatically compile while you are
typing<00:00:51.170> you<00:00:52.170> will<00:00:52.320> see<00:00:52.530> the<00:00:52.649> error<00:00:52.890> markers

00:00:53.420 --> 00:00:53.430 
typing you will see the error markers

00:00:53.430 --> 00:00:56.090 
typing you will see the error markers
appear<00:00:53.820> and<00:00:54.120> disappear<00:00:54.360> as<00:00:54.960> you<00:00:55.020> type<00:00:55.739> errors

00:00:56.090 --> 00:00:56.100 
appear and disappear as you type errors

00:00:56.100 --> 00:00:59.420 
appear and disappear as you type errors
and<00:00:56.370> then<00:00:56.489> fix<00:00:56.760> them<00:00:56.989> like<00:00:57.989> if<00:00:58.680> you<00:00:59.039> list<00:00:59.280> the

00:00:59.420 --> 00:00:59.430 
and then fix them like if you list the

00:00:59.430 --> 00:01:02.479 
and then fix them like if you list the
states<00:00:59.789> twice<00:01:00.180> that's<00:01:00.750> an<00:01:00.899> error<00:01:01.160> and<00:01:02.160> you<00:01:02.190> see

00:01:02.479 --> 00:01:02.489 
states twice that's an error and you see

00:01:02.489 --> 00:01:06.200 
states twice that's an error and you see
a<00:01:02.520> red<00:01:02.730> marker<00:01:03.210> next<00:01:03.420> to<00:01:03.690> your<00:01:03.809> code<00:01:05.210> now

00:01:06.200 --> 00:01:06.210 
a red marker next to your code now

00:01:06.210 --> 00:01:08.210 
a red marker next to your code now
suppose<00:01:06.720> you<00:01:06.750> want<00:01:06.930> to<00:01:07.170> add<00:01:07.290> more<00:01:07.619> states<00:01:08.010> to

00:01:08.210 --> 00:01:08.220 
suppose you want to add more states to

00:01:08.220 --> 00:01:11.030 
suppose you want to add more states to
the<00:01:08.250> state<00:01:08.580> machine<00:01:08.939> if<00:01:09.500> you<00:01:10.500> add<00:01:10.680> state

00:01:11.030 --> 00:01:11.040 
the state machine if you add state

00:01:11.040 --> 00:01:13.160 
the state machine if you add state
without<00:01:11.250> declaring<00:01:11.880> it<00:01:12.150> first<00:01:12.479> that's<00:01:12.960> an

00:01:13.160 --> 00:01:13.170 
without declaring it first that's an

00:01:13.170 --> 00:01:16.310 
without declaring it first that's an
error<00:01:13.380> -<00:01:14.000> you<00:01:15.000> see<00:01:15.240> an<00:01:15.360> error<00:01:15.630> marker<00:01:16.140> with<00:01:16.290> a

00:01:16.310 --> 00:01:16.320 
error - you see an error marker with a

00:01:16.320 --> 00:01:19.550 
error - you see an error marker with a
light<00:01:16.590> bulb<00:01:17.360> the<00:01:18.360> light<00:01:18.390> bulb<00:01:18.960> means<00:01:19.290> that

00:01:19.550 --> 00:01:19.560 
light bulb the light bulb means that

00:01:19.560 --> 00:01:21.289 
light bulb the light bulb means that
sigasi<00:01:19.950> can<00:01:20.250> try<00:01:20.490> and<00:01:20.640> help<00:01:20.700> you<00:01:21.030> with<00:01:21.180> this

00:01:21.289 --> 00:01:21.299 
sigasi can try and help you with this

00:01:21.299 --> 00:01:25.490 
sigasi can try and help you with this
problem<00:01:21.810> we<00:01:22.740> call<00:01:23.009> this<00:01:23.189> a<00:01:23.400> quick<00:01:23.640> fix<00:01:23.880> in<00:01:24.509> this

00:01:25.490 --> 00:01:25.500 
problem we call this a quick fix in this

00:01:25.500 --> 00:01:27.289 
problem we call this a quick fix in this
case<00:01:25.770> the<00:01:26.009> tool<00:01:26.250> can<00:01:26.400> automatically<00:01:27.090> add<00:01:27.210> your

00:01:27.289 --> 00:01:27.299 
case the tool can automatically add your

00:01:27.299 --> 00:01:30.580 
case the tool can automatically add your
new<00:01:27.930> state<00:01:28.350> to<00:01:28.680> the<00:01:28.799> data<00:01:29.040> type<00:01:29.340> declaration

00:01:30.580 --> 00:01:30.590 
new state to the data type declaration

00:01:30.590 --> 00:01:34.190 
new state to the data type declaration
this<00:01:31.590> also<00:01:32.220> works<00:01:32.490> the<00:01:32.610> other<00:01:32.729> way<00:01:32.880> around<00:01:33.200> if

00:01:34.190 --> 00:01:34.200 
this also works the other way around if

00:01:34.200 --> 00:01:36.649 
this also works the other way around if
you<00:01:34.409> add<00:01:34.650> a<00:01:34.680> state<00:01:35.159> to<00:01:35.430> the<00:01:35.579> type<00:01:35.850> declaration

00:01:36.649 --> 00:01:36.659 
you add a state to the type declaration

00:01:36.659 --> 00:01:39.410 
you add a state to the type declaration
there<00:01:37.320> is<00:01:37.439> a<00:01:37.470> quick<00:01:37.799> fix<00:01:37.829> that<00:01:38.400> adds<00:01:38.610> new<00:01:39.090> one

00:01:39.410 --> 00:01:39.420 
there is a quick fix that adds new one

00:01:39.420 --> 00:01:44.720 
there is a quick fix that adds new one
class<00:01:39.810> to<00:01:40.140> the<00:01:40.200> case<00:01:40.500> statement

00:01:44.720 --> 00:01:44.730 

00:01:44.730 --> 00:01:47.460 

in<00:01:45.730> order<00:01:46.030> to<00:01:46.150> understand<00:01:46.630> large<00:01:47.050> state

00:01:47.460 --> 00:01:47.470 
in order to understand large state

00:01:47.470 --> 00:01:49.470 
in order to understand large state
machines<00:01:47.920> you<00:01:48.250> should<00:01:48.490> be<00:01:48.670> able<00:01:48.790> to<00:01:48.940> jump<00:01:49.330> from

00:01:49.470 --> 00:01:49.480 
machines you should be able to jump from

00:01:49.480 --> 00:01:52.290 
machines you should be able to jump from
one<00:01:49.750> state<00:01:50.080> to<00:01:50.110> the<00:01:50.260> next<00:01:50.760> two<00:01:51.760> things<00:01:52.030> that

00:01:52.290 --> 00:01:52.300 
one state to the next two things that

00:01:52.300 --> 00:01:54.210 
one state to the next two things that
can<00:01:52.390> help<00:01:52.600> here<00:01:52.990> are<00:01:53.220> occurrence

00:01:54.210 --> 00:01:54.220 
can help here are occurrence

00:01:54.220 --> 00:01:58.320 
can help here are occurrence
highlighting<00:01:54.850> and<00:01:55.030> hyperlinks<00:01:56.850> if<00:01:57.850> you<00:01:58.060> place

00:01:58.320 --> 00:01:58.330 
highlighting and hyperlinks if you place

00:01:58.330 --> 00:02:00.510 
highlighting and hyperlinks if you place
the<00:01:58.479> cursor<00:01:58.780> on<00:01:58.990> a<00:01:59.200> state<00:01:59.650> signal<00:02:00.100> all

00:02:00.510 --> 00:02:00.520 
the cursor on a state signal all

00:02:00.520 --> 00:02:02.130 
the cursor on a state signal all
occurrences<00:02:01.330> of<00:02:01.360> the<00:02:01.600> signal<00:02:01.960> are

00:02:02.130 --> 00:02:02.140 
occurrences of the signal are

00:02:02.140 --> 00:02:04.620 
occurrences of the signal are
highlighted<00:02:02.710> this<00:02:03.550> makes<00:02:03.850> it<00:02:04.030> easy<00:02:04.180> to<00:02:04.330> see

00:02:04.620 --> 00:02:04.630 
highlighted this makes it easy to see

00:02:04.630 --> 00:02:08.249 
highlighted this makes it easy to see
some<00:02:04.840> structure<00:02:05.380> in<00:02:05.410> your<00:02:05.560> code<00:02:06.660> if<00:02:07.660> you<00:02:07.930> hold

00:02:08.249 --> 00:02:08.259 
some structure in your code if you hold

00:02:08.259 --> 00:02:10.770 
some structure in your code if you hold
the<00:02:08.410> control<00:02:08.920> button<00:02:08.950> all<00:02:09.670> names<00:02:10.209> in<00:02:10.450> the<00:02:10.540> code

00:02:10.770 --> 00:02:10.780 
the control button all names in the code

00:02:10.780 --> 00:02:13.920 
the control button all names in the code
turn<00:02:11.200> into<00:02:11.440> hyperlinks<00:02:12.240> now<00:02:13.240> you<00:02:13.300> can<00:02:13.690> jump

00:02:13.920 --> 00:02:13.930 
turn into hyperlinks now you can jump

00:02:13.930 --> 00:02:15.690 
turn into hyperlinks now you can jump
from<00:02:14.140> state<00:02:14.590> assignments<00:02:15.340> to<00:02:15.550> its

00:02:15.690 --> 00:02:15.700 
from state assignments to its

00:02:15.700 --> 00:02:20.430 
from state assignments to its
implementation<00:02:18.570> if<00:02:19.570> you<00:02:19.810> want<00:02:19.989> to<00:02:20.110> write<00:02:20.410> a

00:02:20.430 --> 00:02:20.440 
implementation if you want to write a

00:02:20.440 --> 00:02:23.160 
implementation if you want to write a
read<00:02:20.920> complex<00:02:21.489> code<00:02:21.820> you<00:02:22.300> need<00:02:22.480> all<00:02:22.720> the<00:02:23.050> help

00:02:23.160 --> 00:02:23.170 
read complex code you need all the help

00:02:23.170 --> 00:02:26.490 
read complex code you need all the help
you<00:02:23.410> can<00:02:23.590> get<00:02:24.300> sigasi<00:02:25.300> pro<00:02:25.660> helps<00:02:26.140> you<00:02:26.260> write

00:02:26.490 --> 00:02:26.500 
you can get sigasi pro helps you write

00:02:26.500 --> 00:02:29.940 
you can get sigasi pro helps you write
and<00:02:26.739> understand<00:02:27.310> state<00:02:27.640> machines<00:02:28.950> download

00:02:29.940 --> 00:02:29.950 
and understand state machines download

00:02:29.950 --> 00:02:32.660 
and understand state machines download
and<00:02:30.160> try<00:02:30.400> free<00:02:30.790> evaluation<00:02:31.090> at

00:02:32.660 --> 00:02:32.670 
and try free evaluation at

00:02:32.670 --> 00:02:35.670 
and try free evaluation at
www.legacylivingkidneydonor.org

