WEBVTT
Kind: captions
Language: en

00:00:02.520 --> 00:00:05.520
 i 

00:00:10.200 --> 00:00:14.309
 and also means a new video tutorial 

00:00:12.480 --> 00:00:17.670
 of the java course write today 

00:00:14.309 --> 00:00:19.650
 let's talk about map which is another 

00:00:17.670 --> 00:00:21.720
 these functions that can be executed 

00:00:19.650 --> 00:00:24.180
 about the fixes in script 5 a 

00:00:21.720 --> 00:00:27.050
 from script 5 and that allows us 

00:00:24.180 --> 00:00:31.039
 modify the arrangements so 

00:00:27.050 --> 00:00:33.350
 the intelligent advanced etcetera 

00:00:31.039 --> 00:00:35.359
 map 

00:00:33.350 --> 00:00:36.530
 has the following syntax first I'm going 

00:00:35.359 --> 00:00:38.539
 to declare an arrangement 

00:00:36.530 --> 00:00:40.789
 which is the one that we are going to be modifying 

00:00:38.539 --> 00:00:43.440
 so I'm going to place a series of 

00:00:40.789 --> 00:00:46.140
 numbers come out 

00:00:43.440 --> 00:00:47.730
 and good sea is a method that runs 

00:00:46.140 --> 00:00:50.670
 about the arrangement and to which you have to 

00:00:47.730 --> 00:00:52.680
 pass a callback with a said function 

00:00:50.670 --> 00:00:56.039
 function is going to run on each 

00:00:52.680 --> 00:00:57.539
 of the elements of the arrangement goes and 

00:00:56.039 --> 00:01:00.960
 now let's see the example before 

00:00:57.539 --> 00:01:04.769
 I would not like anything the same as 

00:01:00.960 --> 00:01:06.750
 we did with filter run the same 

00:01:04.769 --> 00:01:08.610
 code that we are going to do with map but 

00:01:06.750 --> 00:01:10.860
 without map so we can see what are the 

00:01:08.610 --> 00:01:12.840
 differences imagine that one of the 

00:01:10.860 --> 00:01:15.060
 classic examples are put around the 

00:01:12.840 --> 00:01:17.920
 map in all languages ​​because no 

00:01:15.060 --> 00:01:20.409
 only javascript has sea 

00:01:17.920 --> 00:01:23.229
 who ask us that each of the 

00:01:20.409 --> 00:01:24.820
 elements of the arrangement become your 

00:01:23.229 --> 00:01:27.280
 square is to say that instead of 5 

00:01:24.820 --> 00:01:29.830
 let's have 25 instead of 6 36 and instead 

00:01:27.280 --> 00:01:31.390
 of 8 64 that is to say for each one numbers 

00:01:29.830 --> 00:01:32.979
 let's take out the square and build a 

00:01:31.390 --> 00:01:36.039
 new arrangement with that 

00:01:32.979 --> 00:01:38.380
 without more we would do it of the following 

00:01:36.039 --> 00:01:40.690
 way first I'm going to create an arrangement 

00:01:38.380 --> 00:01:44.110
 which is going to be called squares 

00:01:40.690 --> 00:01:46.300
 later I will integrate the arrangement 

00:01:44.110 --> 00:01:47.010
 original that was number then I'm going to 

00:01:46.300 --> 00:01:48.650
 give him 

00:01:47.010 --> 00:01:50.840
 and I'm going to place 

00:01:48.650 --> 00:01:53.660
 this so that it does not go yes clear already 

00:01:50.840 --> 00:01:55.720
 we know that this is a problem that 

00:01:53.660 --> 00:02:00.150
 have 

00:01:55.720 --> 00:02:00.150
 12 - 1 

00:02:01.260 --> 00:02:07.380
 and here we are going to do and more equal to 

00:02:05.580 --> 00:02:10.789
 zero 

00:02:07.380 --> 00:02:10.789
 and more leaves 

00:02:12.380 --> 00:02:17.290
 later then here is no 

00:02:20.910 --> 00:02:27.090
 number equals iu numbers 

00:02:24.300 --> 00:02:30.690
 to have each of the numbers and 

00:02:27.090 --> 00:02:33.510
 then I'm going to take out the square that 

00:02:30.690 --> 00:02:36.530
 we could draw as a number by number or 

00:02:33.510 --> 00:02:39.450
 also using the library of 

00:02:36.530 --> 00:02:40.800
 arithmetic of jobs curve then so what 

00:02:39.450 --> 00:02:44.160
 I'm going to do squares this time 

00:02:40.800 --> 00:02:46.980
 point puig would be more point that rocket 

00:02:44.160 --> 00:02:48.930
 to take out the square that would be 

00:02:46.980 --> 00:02:50.670
 number and it would be obviously to the 

00:02:48.930 --> 00:02:55.070
 power of 2 to take out the square goes 

00:02:50.670 --> 00:02:55.070
 and subsequently 

00:02:55.130 --> 00:02:58.750
 I believe it 

00:02:58.910 --> 00:03:03.700
 here I will print the squares 

00:03:06.830 --> 00:03:11.740
 ok is that you want and less less 

00:03:15.410 --> 00:03:20.870
 and then I'm going to print the squares 

00:03:17.930 --> 00:03:22.580
 of each one waiting for him to be fine but 

00:03:20.870 --> 00:03:26.660
 not 

00:03:22.580 --> 00:03:29.810
 ah I know because this is payment 

00:03:26.660 --> 00:03:32.630
 and now yes then we have the 5 84 

00:03:29.810 --> 00:03:34.520
 the 36 the 25 and the 1 my mistake was that is 

00:03:32.630 --> 00:03:36.250
 using square root instead of 

00:03:34.520 --> 00:03:38.080
 power 

00:03:36.250 --> 00:03:40.480
 pau is for power and I'm doing it 

00:03:38.080 --> 00:03:42.160
 that leads to the power of 2 and 

00:03:40.480 --> 00:03:44.110
 basically i have my fix 

00:03:42.160 --> 00:03:45.670
 rebuilt with the square of each 

00:03:44.110 --> 00:03:48.130
 of the elements but for that I had to 

00:03:45.670 --> 00:03:50.350
 execute all these lines of code 

00:03:48.130 --> 00:03:52.690
 that we are going to produce it here by removing it 

00:03:50.350 --> 00:03:54.840
 the spaces now we are going to do with 

00:03:52.690 --> 00:03:54.840
 map 

00:04:00.350 --> 00:04:05.180
 with maps would be as follows 

00:04:02.390 --> 00:04:08.060
 point numbers more we spent a callback 

00:04:05.180 --> 00:04:11.780
 which is a function this function receives 

00:04:08.060 --> 00:04:13.310
 the element that we are that on the 

00:04:11.780 --> 00:04:16.430
 which one is running remember that 

00:04:13.310 --> 00:04:19.130
 with this type of methods this function is 

00:04:16.430 --> 00:04:20.750
 run for each of the elements is 

00:04:19.130 --> 00:04:22.760
 say it runs once with one it 

00:04:20.750 --> 00:04:25.340
 run once with five or six and 

00:04:22.760 --> 00:04:27.770
 with eight and each of those times receives 

00:04:25.340 --> 00:04:29.840
 as a parameter each of the values 

00:04:27.770 --> 00:04:31.370
 of the arrangement , your first element goes 

00:04:29.840 --> 00:04:32.450
 to be worth one then he will talk five 

00:04:31.370 --> 00:04:35.570
 then he's going to talk six and so 

00:04:32.450 --> 00:04:39.260
 successively and here nothing else we have 

00:04:35.570 --> 00:04:42.560
 to be return element by element or 

00:04:39.260 --> 00:04:45.650
 we already know that it can be mad punto pau and 

00:04:42.560 --> 00:04:47.570
 here we are going to say that square is 

00:04:45.650 --> 00:04:52.050
 equal to this and we will print 

00:04:47.570 --> 00:04:56.490
 squares to verify that it's the same 

00:04:52.050 --> 00:05:00.060
 and that's where it comes out then 

00:04:56.490 --> 00:05:01.949
 we can verify that mac repeats is a 

00:05:00.060 --> 00:05:04.470
 method that runs on the fixes 

00:05:01.949 --> 00:05:07.169
 a function is passed and a 

00:05:04.470 --> 00:05:10.129
 new arrangement built from what 

00:05:07.169 --> 00:05:12.259
 that returns to the function that is 

00:05:10.129 --> 00:05:15.649
 and passed as a parameter the difference with 

00:05:12.259 --> 00:05:17.599
 filter is that here it can become 

00:05:15.649 --> 00:05:20.749
 true or false string object or 

00:05:17.599 --> 00:05:22.249
 number arrangement whatever and what is 

00:05:20.749 --> 00:05:24.710
 return is going to be stored in a 

00:05:22.249 --> 00:05:27.740
 rearrangement 

00:05:24.710 --> 00:05:29.840
 and ready then thanks for watching this 

00:05:27.740 --> 00:05:32.990
 tutorial do not forget to like the video 

00:05:29.840 --> 00:05:34.640
 subscribe to the facilitated code channel 

00:05:32.990 --> 00:05:36.770
 we are missing a lot of things to see 

00:05:34.640 --> 00:05:39.430
 about javascript so do not miss out 

00:05:36.770 --> 00:05:39.430
 the following chapters 

