WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:01.730 

hey<00:00:00.390> guys<00:00:00.570> welcome<00:00:00.960> to<00:00:01.199> the<00:00:01.319> hundred<00:00:01.709> and

00:00:01.730 --> 00:00:01.740 
hey guys welcome to the hundred and

00:00:01.740 --> 00:00:03.770 
hey guys welcome to the hundred and
ninety-eight<00:00:02.159> c-sharp<00:00:02.879> tutorial<00:00:03.480> that<00:00:03.659> I'm

00:00:03.770 --> 00:00:03.780 
ninety-eight c-sharp tutorial that I'm

00:00:03.780 --> 00:00:06.200 
ninety-eight c-sharp tutorial that I'm
making<00:00:04.140> for<00:00:04.380> the<00:00:04.650> new<00:00:04.799> Boston<00:00:05.370> and<00:00:05.549> in<00:00:06.120> this

00:00:06.200 --> 00:00:06.210 
making for the new Boston and in this

00:00:06.210 --> 00:00:08.059 
making for the new Boston and in this
tutorial<00:00:06.390> organ<00:00:07.080> continue<00:00:07.529> working<00:00:07.740> on<00:00:07.919> our

00:00:08.059 --> 00:00:08.069 
tutorial organ continue working on our

00:00:08.069 --> 00:00:10.250 
tutorial organ continue working on our
reader<00:00:08.309> class<00:00:08.670> and<00:00:09.030> like<00:00:09.750> I<00:00:09.870> said<00:00:10.080> in<00:00:10.200> the

00:00:10.250 --> 00:00:10.260 
reader class and like I said in the

00:00:10.260 --> 00:00:11.780 
reader class and like I said in the
previous<00:00:10.469> tutorial<00:00:11.190> we're<00:00:11.400> going<00:00:11.519> to<00:00:11.700> be

00:00:11.780 --> 00:00:11.790 
previous tutorial we're going to be

00:00:11.790 --> 00:00:14.360 
previous tutorial we're going to be
reading<00:00:12.000> strings<00:00:12.540> so<00:00:13.410> the<00:00:13.650> first<00:00:13.889> method<00:00:14.099> that

00:00:14.360 --> 00:00:14.370 
reading strings so the first method that

00:00:14.370 --> 00:00:16.039 
reading strings so the first method that
we're<00:00:14.490> going<00:00:14.519> to<00:00:14.670> create<00:00:14.940> is<00:00:15.240> this<00:00:15.389> method

00:00:16.039 --> 00:00:16.049 
we're going to create is this method

00:00:16.049 --> 00:00:17.630 
we're going to create is this method
that<00:00:16.260> will<00:00:16.500> read<00:00:16.650> a<00:00:16.680> string<00:00:17.070> at<00:00:17.220> the<00:00:17.250> current

00:00:17.630 --> 00:00:17.640 
that will read a string at the current

00:00:17.640 --> 00:00:22.090 
that will read a string at the current
position<00:00:17.789> so<00:00:18.660> let<00:00:18.779> me<00:00:18.900> say<00:00:19.109> public<00:00:20.300> public

00:00:22.090 --> 00:00:22.100 
position so let me say public public

00:00:22.100 --> 00:00:26.269 
position so let me say public public
string<00:00:23.100> read<00:00:24.080> string<00:00:25.080> and<00:00:25.320> then<00:00:26.010> we're<00:00:26.130> just

00:00:26.269 --> 00:00:26.279 
string read string and then we're just

00:00:26.279 --> 00:00:27.980 
string read string and then we're just
gonna<00:00:26.369> have<00:00:26.580> the<00:00:26.699> user<00:00:26.910> pass<00:00:27.300> through<00:00:27.750> the

00:00:27.980 --> 00:00:27.990 
gonna have the user pass through the

00:00:27.990 --> 00:00:29.450 
gonna have the user pass through the
length<00:00:28.320> of<00:00:28.500> the<00:00:28.619> string<00:00:28.890> that<00:00:29.010> they<00:00:29.160> want<00:00:29.369> us

00:00:29.450 --> 00:00:29.460 
length of the string that they want us

00:00:29.460 --> 00:00:33.680 
length of the string that they want us
to<00:00:29.490> read<00:00:29.789> so<00:00:30.119> just<00:00:30.330> going<00:00:30.420> to<00:00:30.510> say<00:00:31.009> length<00:00:32.690> all

00:00:33.680 --> 00:00:33.690 
to read so just going to say length all

00:00:33.690 --> 00:00:35.870 
to read so just going to say length all
right<00:00:33.899> and<00:00:34.440> we're<00:00:34.980> gonna<00:00:35.070> be<00:00:35.250> using<00:00:35.399> you<00:00:35.670> read

00:00:35.870 --> 00:00:35.880 
right and we're gonna be using you read

00:00:35.880 --> 00:00:37.459 
right and we're gonna be using you read
characters<00:00:36.390> method<00:00:36.780> inside<00:00:37.079> of<00:00:37.200> the<00:00:37.260> binary

00:00:37.459 --> 00:00:37.469 
characters method inside of the binary

00:00:37.469 --> 00:00:39.440 
characters method inside of the binary
reader<00:00:37.890> class<00:00:38.219> to<00:00:38.579> read<00:00:38.910> the<00:00:39.059> character

00:00:39.440 --> 00:00:39.450 
reader class to read the character

00:00:39.450 --> 00:00:41.450 
reader class to read the character
they're<00:00:39.690> really<00:00:40.020> string<00:00:40.379> so<00:00:40.710> they'll<00:00:40.860> say<00:00:41.070> BR

00:00:41.450 --> 00:00:41.460 
they're really string so they'll say BR

00:00:41.460 --> 00:00:44.660 
they're really string so they'll say BR
read<00:00:42.329> characters<00:00:42.960> and<00:00:43.230> then<00:00:43.860> the<00:00:44.219> length<00:00:44.489> of

00:00:44.660 --> 00:00:44.670 
read characters and then the length of

00:00:44.670 --> 00:00:45.920 
read characters and then the length of
the<00:00:44.760> string<00:00:45.059> would<00:00:45.239> be<00:00:45.390> the<00:00:45.570> amount<00:00:45.809> of

00:00:45.920 --> 00:00:45.930 
the string would be the amount of

00:00:45.930 --> 00:00:47.869 
the string would be the amount of
characters<00:00:46.200> that<00:00:46.620> we<00:00:46.710> want<00:00:46.860> to<00:00:46.980> read<00:00:47.160> so<00:00:47.700> just

00:00:47.869 --> 00:00:47.879 
characters that we want to read so just

00:00:47.879 --> 00:00:49.690 
characters that we want to read so just
gonna<00:00:48.030> say<00:00:48.239> well<00:00:48.629> link<00:00:48.809> right<00:00:49.050> there<00:00:49.079> and

00:00:49.690 --> 00:00:49.700 
gonna say well link right there and

00:00:49.700 --> 00:00:51.740 
gonna say well link right there and
you're<00:00:50.700> probably<00:00:50.910> wondering<00:00:51.390> why<00:00:51.539> we're<00:00:51.719> not

00:00:51.740 --> 00:00:51.750 
you're probably wondering why we're not

00:00:51.750 --> 00:00:53.900 
you're probably wondering why we're not
using<00:00:52.050> the<00:00:52.289> read<00:00:52.530> string<00:00:52.860> method<00:00:53.250> and<00:00:53.579> that's

00:00:53.900 --> 00:00:53.910 
using the read string method and that's

00:00:53.910 --> 00:00:55.819 
using the read string method and that's
because<00:00:54.329> the<00:00:54.629> read<00:00:54.899> string<00:00:55.199> method<00:00:55.559> inside

00:00:55.819 --> 00:00:55.829 
because the read string method inside

00:00:55.829 --> 00:00:58.010 
because the read string method inside
the<00:00:55.890> binary<00:00:56.430> reader<00:00:56.730> class<00:00:57.059> doesn't<00:00:57.809> allow

00:00:58.010 --> 00:00:58.020 
the binary reader class doesn't allow

00:00:58.020 --> 00:00:59.869 
the binary reader class doesn't allow
you<00:00:58.079> to<00:00:58.260> specify<00:00:58.500> the<00:00:58.859> length<00:00:59.340> of<00:00:59.520> the<00:00:59.640> string

00:00:59.869 --> 00:00:59.879 
you to specify the length of the string

00:00:59.879 --> 00:01:01.610 
you to specify the length of the string
that<00:01:00.000> you<00:01:00.120> want<00:01:00.149> to<00:01:00.420> read<00:01:00.600> it<00:01:01.020> just<00:01:01.079> assumes

00:01:01.610 --> 00:01:01.620 
that you want to read it just assumes

00:01:01.620 --> 00:01:03.770 
that you want to read it just assumes
where<00:01:01.859> the<00:01:01.949> string<00:01:02.250> is<00:01:02.280> and<00:01:02.820> I<00:01:03.210> prefer<00:01:03.570> to<00:01:03.600> do

00:01:03.770 --> 00:01:03.780 
where the string is and I prefer to do

00:01:03.780 --> 00:01:06.980 
where the string is and I prefer to do
it<00:01:03.899> this<00:01:03.930> way<00:01:04.519> alright<00:01:05.519> and<00:01:05.880> census<00:01:06.540> returns<00:01:06.689> a

00:01:06.980 --> 00:01:06.990 
it this way alright and census returns a

00:01:06.990 --> 00:01:08.780 
it this way alright and census returns a
character<00:01:07.470> array<00:01:07.920> of<00:01:08.220> all<00:01:08.400> the<00:01:08.549> characters

00:01:08.780 --> 00:01:08.790 
character array of all the characters

00:01:08.790 --> 00:01:09.649 
character array of all the characters
that<00:01:09.180> it<00:01:09.270> read

00:01:09.649 --> 00:01:09.659 
that it read

00:01:09.659 --> 00:01:11.210 
that it read
we<00:01:09.900> just<00:01:10.049> need<00:01:10.170> to<00:01:10.260> convert<00:01:10.590> that<00:01:10.770> into<00:01:10.830> a

00:01:11.210 --> 00:01:11.220 
we just need to convert that into a

00:01:11.220 --> 00:01:14.179 
we just need to convert that into a
string<00:01:11.610> so<00:01:11.970> it's<00:01:12.119> gonna<00:01:12.240> say<00:01:12.510> a<00:01:12.750> new<00:01:13.189> string

00:01:14.179 --> 00:01:14.189 
string so it's gonna say a new string

00:01:14.189 --> 00:01:16.670 
string so it's gonna say a new string
and<00:01:14.220> then<00:01:14.610> just<00:01:14.850> pass<00:01:15.180> this<00:01:15.810> character<00:01:16.320> right

00:01:16.670 --> 00:01:16.680 
and then just pass this character right

00:01:16.680 --> 00:01:18.940 
and then just pass this character right
that<00:01:17.100> this<00:01:17.310> read<00:01:17.580> characters<00:01:18.090> method<00:01:18.450> returns

00:01:18.940 --> 00:01:18.950 
that this read characters method returns

00:01:18.950 --> 00:01:21.289 
that this read characters method returns
through<00:01:19.950> the<00:01:20.009> constructor<00:01:20.580> of<00:01:20.850> this<00:01:20.970> string

00:01:21.289 --> 00:01:21.299 
through the constructor of this string

00:01:21.299 --> 00:01:23.480 
through the constructor of this string
struck<00:01:21.659> and<00:01:21.990> basically<00:01:22.770> it'll<00:01:22.950> just<00:01:23.159> convert

00:01:23.480 --> 00:01:23.490 
struck and basically it'll just convert

00:01:23.490 --> 00:01:25.789 
struck and basically it'll just convert
that<00:01:23.670> character<00:01:24.180> array<00:01:24.450> into<00:01:24.869> a<00:01:24.900> string<00:01:25.350> and

00:01:25.789 --> 00:01:25.799 
that character array into a string and

00:01:25.799 --> 00:01:27.740 
that character array into a string and
now<00:01:26.610> we're<00:01:26.729> just<00:01:26.790> gonna<00:01:26.939> return<00:01:27.299> the<00:01:27.479> string

00:01:27.740 --> 00:01:27.750 
now we're just gonna return the string

00:01:27.750 --> 00:01:30.289 
now we're just gonna return the string
we<00:01:27.960> created<00:01:28.470> and<00:01:28.680> now<00:01:29.610> whenever<00:01:29.850> we<00:01:30.119> go<00:01:30.270> to

00:01:30.289 --> 00:01:30.299 
we created and now whenever we go to

00:01:30.299 --> 00:01:32.719 
we created and now whenever we go to
call<00:01:30.810> this<00:01:31.049> read<00:01:31.590> string<00:01:31.920> method<00:01:32.280> what<00:01:32.610> it

00:01:32.719 --> 00:01:32.729 
call this read string method what it

00:01:32.729 --> 00:01:33.980 
call this read string method what it
will<00:01:32.850> do<00:01:33.030> is<00:01:33.270> it<00:01:33.420> will<00:01:33.450> just<00:01:33.540> read<00:01:33.869> the

00:01:33.980 --> 00:01:33.990 
will do is it will just read the

00:01:33.990 --> 00:01:35.719 
will do is it will just read the
character<00:01:34.439> that<00:01:34.650> the<00:01:34.770> user<00:01:34.890> wants<00:01:35.130> us<00:01:35.340> to<00:01:35.369> read

00:01:35.719 --> 00:01:35.729 
character that the user wants us to read

00:01:35.729 --> 00:01:38.210 
character that the user wants us to read
so<00:01:36.299> if<00:01:36.479> we<00:01:36.570> use<00:01:36.689> your<00:01:36.810> pass<00:01:37.049> through<00:01:37.500> or<00:01:37.890> they

00:01:38.210 --> 00:01:38.220 
so if we use your pass through or they

00:01:38.220 --> 00:01:40.010 
so if we use your pass through or they
wanted<00:01:38.490> us<00:01:38.610> to<00:01:38.759> read<00:01:38.880> a<00:01:38.939> four<00:01:39.240> character<00:01:39.630> long

00:01:40.010 --> 00:01:40.020 
wanted us to read a four character long

00:01:40.020 --> 00:01:41.780 
wanted us to read a four character long
string<00:01:40.500> it<00:01:41.100> would<00:01:41.220> just<00:01:41.369> read<00:01:41.520> four

00:01:41.780 --> 00:01:41.790 
string it would just read four

00:01:41.790 --> 00:01:43.460 
string it would just read four
characters<00:01:42.390> and<00:01:42.659> then<00:01:42.780> convert<00:01:43.170> that

00:01:43.460 --> 00:01:43.470 
characters and then convert that

00:01:43.470 --> 00:01:45.440 
characters and then convert that
character<00:01:44.040> array<00:01:44.310> into<00:01:44.700> a<00:01:44.729> string<00:01:45.119> and<00:01:45.360> then

00:01:45.440 --> 00:01:45.450 
character array into a string and then

00:01:45.450 --> 00:01:49.130 
character array into a string and then
return<00:01:45.810> it<00:01:46.220> alright<00:01:47.220> and<00:01:47.369> the<00:01:48.000> next<00:01:48.140> Makela

00:01:49.130 --> 00:01:49.140 
return it alright and the next Makela

00:01:49.140 --> 00:01:50.480 
return it alright and the next Makela
that<00:01:49.320> we're<00:01:49.439> going<00:01:49.560> to<00:01:49.649> be<00:01:49.829> creating<00:01:50.280> is<00:01:50.460> a

00:01:50.480 --> 00:01:50.490 
that we're going to be creating is a

00:01:50.490 --> 00:01:52.760 
that we're going to be creating is a
method<00:01:51.000> that<00:01:51.030> will<00:01:51.270> read<00:01:51.479> a<00:01:51.630> unicode<00:01:52.320> string

00:01:52.760 --> 00:01:52.770 
method that will read a unicode string

00:01:52.770 --> 00:01:55.190 
method that will read a unicode string
and<00:01:53.310> I<00:01:53.970> haven't<00:01:54.210> really<00:01:54.329> talked<00:01:54.600> much<00:01:54.630> about<00:01:54.930> a

00:01:55.190 --> 00:01:55.200 
and I haven't really talked much about a

00:01:55.200 --> 00:01:56.870 
and I haven't really talked much about a
unicode<00:01:55.680> string<00:01:56.070> and<00:01:56.250> I'm<00:01:56.310> not<00:01:56.430> even<00:01:56.549> sure<00:01:56.759> if

00:01:56.870 --> 00:01:56.880 
unicode string and I'm not even sure if

00:01:56.880 --> 00:01:59.090 
unicode string and I'm not even sure if
I<00:01:56.969> have<00:01:57.210> but<00:01:57.960> basically<00:01:58.469> what<00:01:58.590> a<00:01:58.619> unicode

00:01:59.090 --> 00:01:59.100 
I have but basically what a unicode

00:01:59.100 --> 00:02:00.859 
I have but basically what a unicode
string<00:01:59.430> is<00:01:59.610> is<00:01:59.909> it's<00:02:00.060> a<00:02:00.180> string<00:02:00.509> where<00:02:00.689> each

00:02:00.859 --> 00:02:00.869 
string is is it's a string where each

00:02:00.869 --> 00:02:04.190 
string is is it's a string where each
character<00:02:01.170> is<00:02:01.649> represented<00:02:02.520> by<00:02:03.030> n<00:02:03.390> 16<00:02:03.960> or<00:02:04.170> a

00:02:04.190 --> 00:02:04.200 
character is represented by n 16 or a

00:02:04.200 --> 00:02:06.709 
character is represented by n 16 or a
two-button<00:02:04.770> integer<00:02:05.159> so<00:02:05.759> for<00:02:06.119> example<00:02:06.570> if<00:02:06.659> we

00:02:06.709 --> 00:02:06.719 
two-button integer so for example if we

00:02:06.719 --> 00:02:08.270 
two-button integer so for example if we
were<00:02:06.810> to<00:02:06.840> create<00:02:07.049> a<00:02:07.229> Unicode<00:02:07.799> string<00:02:07.829> that

00:02:08.270 --> 00:02:08.280 
were to create a Unicode string that

00:02:08.280 --> 00:02:11.110 
were to create a Unicode string that
read<00:02:08.429> Adam<00:02:08.670> through<00:02:09.030> this<00:02:09.179> do<00:02:09.390> a

00:02:11.110 --> 00:02:11.120 
read Adam through this do a

00:02:11.120 --> 00:02:15.280 
read Adam through this do a
a<00:02:12.250> ham<00:02:13.250> and<00:02:13.670> a<00:02:14.270> regular<00:02:14.660> string<00:02:14.989> would<00:02:15.110> just

00:02:15.280 --> 00:02:15.290 
a ham and a regular string would just

00:02:15.290 --> 00:02:17.800 
a ham and a regular string would just
look<00:02:15.470> like<00:02:15.940> like<00:02:16.940> that<00:02:16.970> how<00:02:17.480> you'd<00:02:17.629> normally

00:02:17.800 --> 00:02:17.810 
look like like that how you'd normally

00:02:17.810 --> 00:02:21.820 
look like like that how you'd normally
type<00:02:18.260> it<00:02:18.440> just<00:02:18.620> Adam<00:02:18.980> so<00:02:20.230> and<00:02:21.230> you<00:02:21.440> can<00:02:21.560> see<00:02:21.709> the

00:02:21.820 --> 00:02:21.830 
type it just Adam so and you can see the

00:02:21.830 --> 00:02:24.520 
type it just Adam so and you can see the
key<00:02:21.980> difference<00:02:22.370> here<00:02:22.730> is<00:02:22.970> each<00:02:23.530> character

00:02:24.520 --> 00:02:24.530 
key difference here is each character

00:02:24.530 --> 00:02:27.220 
key difference here is each character
takes<00:02:24.980> up<00:02:25.220> two<00:02:25.459> bytes<00:02:25.760> so<00:02:26.209> this<00:02:26.480> a<00:02:26.629> is<00:02:26.720> two

00:02:27.220 --> 00:02:27.230 
takes up two bytes so this a is two

00:02:27.230 --> 00:02:31.740 
takes up two bytes so this a is two
bytes<00:02:27.470> long<00:02:27.739> this<00:02:28.160> D<00:02:28.459> is<00:02:28.670> two<00:02:28.880> bytes<00:02:29.090> long<00:02:29.360> so

00:02:31.740 --> 00:02:31.750 
bytes long this D is two bytes long so

00:02:31.750 --> 00:02:34.000 
bytes long this D is two bytes long so
you're<00:02:32.750> probably<00:02:32.989> wondering<00:02:33.200> why<00:02:33.769> this<00:02:33.830> is

00:02:34.000 --> 00:02:34.010 
you're probably wondering why this is

00:02:34.010 --> 00:02:35.620 
you're probably wondering why this is
even<00:02:34.400> useful<00:02:34.550> why<00:02:34.940> they<00:02:35.180> ever<00:02:35.330> store

00:02:35.620 --> 00:02:35.630 
even useful why they ever store

00:02:35.630 --> 00:02:37.479 
even useful why they ever store
characters<00:02:36.110> this<00:02:36.349> way<00:02:36.530> or<00:02:36.680> strings<00:02:37.040> this<00:02:37.250> way

00:02:37.479 --> 00:02:37.489 
characters this way or strings this way

00:02:37.489 --> 00:02:39.580 
characters this way or strings this way
when<00:02:38.299> it<00:02:38.390> would<00:02:38.450> take<00:02:38.690> out<00:02:38.840> more<00:02:39.019> space

00:02:39.580 --> 00:02:39.590 
when it would take out more space

00:02:39.590 --> 00:02:41.320 
when it would take out more space
well<00:02:39.769> that's<00:02:40.040> because<00:02:40.340> not<00:02:40.610> all<00:02:40.910> characters

00:02:41.320 --> 00:02:41.330 
well that's because not all characters

00:02:41.330 --> 00:02:44.080 
well that's because not all characters
can<00:02:41.690> be<00:02:41.720> represented<00:02:42.650> by<00:02:42.799> one<00:02:42.830> byte<00:02:43.370> for

00:02:44.080 --> 00:02:44.090 
can be represented by one byte for

00:02:44.090 --> 00:02:45.850 
can be represented by one byte for
example<00:02:44.569> a<00:02:44.840> lot<00:02:45.170> of<00:02:45.290> characters<00:02:45.680> in<00:02:45.799> different

00:02:45.850 --> 00:02:45.860 
example a lot of characters in different

00:02:45.860 --> 00:02:48.250 
example a lot of characters in different
languages<00:02:46.549> such<00:02:46.849> as<00:02:46.880> like<00:02:47.150> chimp<00:02:47.450> such<00:02:47.720> as<00:02:47.959> and

00:02:48.250 --> 00:02:48.260 
languages such as like chimp such as and

00:02:48.260 --> 00:02:50.530 
languages such as like chimp such as and
like<00:02:48.380> Chinese<00:02:48.890> or<00:02:49.099> Japanese<00:02:49.250> or<00:02:49.940> Korean<00:02:49.970> or

00:02:50.530 --> 00:02:50.540 
like Chinese or Japanese or Korean or

00:02:50.540 --> 00:02:53.740 
like Chinese or Japanese or Korean or
something<00:02:50.870> like<00:02:50.989> that<00:02:51.049> a<00:02:52.540> lot<00:02:53.540> of<00:02:53.599> the

00:02:53.740 --> 00:02:53.750 
something like that a lot of the

00:02:53.750 --> 00:02:55.630 
something like that a lot of the
characters<00:02:54.200> inside<00:02:54.500> of<00:02:54.620> their<00:02:54.709> language<00:02:55.130> you

00:02:55.630 --> 00:02:55.640 
characters inside of their language you

00:02:55.640 --> 00:02:58.569 
characters inside of their language you
have<00:02:56.120> to<00:02:56.150> represent<00:02:56.750> with<00:02:56.870> two<00:02:57.079> bytes<00:02:57.349> so<00:02:57.769> if

00:02:58.569 --> 00:02:58.579 
have to represent with two bytes so if

00:02:58.579 --> 00:03:00.370 
have to represent with two bytes so if
you're<00:02:58.760> trying<00:02:59.090> to<00:02:59.239> write<00:02:59.420> in<00:02:59.660> like<00:02:59.840> Korean<00:03:00.260> or

00:03:00.370 --> 00:03:00.380 
you're trying to write in like Korean or

00:03:00.380 --> 00:03:01.960 
you're trying to write in like Korean or
something<00:03:00.739> inside<00:03:01.010> of<00:03:01.130> one<00:03:01.280> of<00:03:01.370> your<00:03:01.459> programs

00:03:01.960 --> 00:03:01.970 
something inside of one of your programs

00:03:01.970 --> 00:03:03.759 
something inside of one of your programs
that<00:03:02.150> you<00:03:02.239> wanted<00:03:02.480> to<00:03:02.599> store<00:03:02.900> that<00:03:03.049> string<00:03:03.500> you

00:03:03.759 --> 00:03:03.769 
that you wanted to store that string you

00:03:03.769 --> 00:03:06.339 
that you wanted to store that string you
would<00:03:03.860> have<00:03:03.980> to<00:03:04.099> store<00:03:04.370> it<00:03:04.489> in<00:03:04.989> Unicode<00:03:05.989> string

00:03:06.339 --> 00:03:06.349 
would have to store it in Unicode string

00:03:06.349 --> 00:03:08.470 
would have to store it in Unicode string
and<00:03:06.620> there<00:03:07.489> are<00:03:07.610> two<00:03:07.730> different<00:03:08.090> types<00:03:08.299> of

00:03:08.470 --> 00:03:08.480 
and there are two different types of

00:03:08.480 --> 00:03:10.720 
and there are two different types of
Unicode<00:03:08.900> strings<00:03:09.319> began<00:03:10.069> the<00:03:10.220> in<00:03:10.310> Unicode

00:03:10.720 --> 00:03:10.730 
Unicode strings began the in Unicode

00:03:10.730 --> 00:03:12.850 
Unicode strings began the in Unicode
string<00:03:11.090> and<00:03:11.299> there's<00:03:11.780> little<00:03:12.049> onion<00:03:12.440> Unicode

00:03:12.850 --> 00:03:12.860 
string and there's little onion Unicode

00:03:12.860 --> 00:03:15.400 
string and there's little onion Unicode
string<00:03:13.190> and<00:03:13.430> a<00:03:14.030> big-endian<00:03:14.420> Unicode<00:03:15.049> string

00:03:15.400 --> 00:03:15.410 
string and a big-endian Unicode string

00:03:15.410 --> 00:03:17.500 
string and a big-endian Unicode string
basically<00:03:15.980> means<00:03:16.220> that<00:03:16.370> the<00:03:16.609> N<00:03:16.760> 16<00:03:17.269> was

00:03:17.500 --> 00:03:17.510 
basically means that the N 16 was

00:03:17.510 --> 00:03:20.620 
basically means that the N 16 was
represented<00:03:18.170> in<00:03:18.380> big<00:03:18.769> endian<00:03:19.190> so<00:03:19.880> as<00:03:20.299> you<00:03:20.569> can

00:03:20.620 --> 00:03:20.630 
represented in big endian so as you can

00:03:20.630 --> 00:03:22.059 
represented in big endian so as you can
see<00:03:20.810> right<00:03:20.930> here<00:03:20.989> this<00:03:21.350> is<00:03:21.410> a<00:03:21.530> big-endian

00:03:22.059 --> 00:03:22.069 
see right here this is a big-endian

00:03:22.069 --> 00:03:26.740 
see right here this is a big-endian
Unicode<00:03:22.790> string<00:03:23.260> so<00:03:24.260> since<00:03:24.709> a<00:03:25.000> is<00:03:26.000> represented

00:03:26.740 --> 00:03:26.750 
Unicode string so since a is represented

00:03:26.750 --> 00:03:29.920 
Unicode string so since a is represented
by<00:03:26.780> 41<00:03:27.590> we<00:03:28.160> just<00:03:28.340> read<00:03:28.579> this<00:03:28.790> in<00:03:29.030> 16<00:03:29.510> right<00:03:29.660> here

00:03:29.920 --> 00:03:29.930 
by 41 we just read this in 16 right here

00:03:29.930 --> 00:03:32.110 
by 41 we just read this in 16 right here
and<00:03:30.139> it's<00:03:30.230> 41<00:03:30.829> so<00:03:31.160> same<00:03:31.579> is<00:03:31.609> just<00:03:31.760> a<00:03:31.940> regular

00:03:32.110 --> 00:03:32.120 
and it's 41 so same is just a regular

00:03:32.120 --> 00:03:34.770 
and it's 41 so same is just a regular
standard<00:03:32.600> but<00:03:33.319> if<00:03:33.590> we<00:03:33.739> were<00:03:33.859> to<00:03:33.980> make<00:03:34.100> this<00:03:34.370> a

00:03:34.770 --> 00:03:34.780 
standard but if we were to make this a

00:03:34.780 --> 00:03:37.660 
standard but if we were to make this a
little<00:03:35.780> endian<00:03:36.139> unicode<00:03:36.620> string<00:03:37.040> it<00:03:37.549> would

00:03:37.660 --> 00:03:37.670 
little endian unicode string it would

00:03:37.670 --> 00:03:41.819 
little endian unicode string it would
look<00:03:37.790> like<00:03:37.970> this<00:03:38.269> it<00:03:38.450> would<00:03:38.540> be<00:03:38.600> a<00:03:39.130> D<00:03:40.180> then<00:03:41.180> a

00:03:41.819 --> 00:03:41.829 
look like this it would be a D then a

00:03:41.829 --> 00:03:43.900 
look like this it would be a D then a
then<00:03:42.829> M

00:03:43.900 --> 00:03:43.910 
then M

00:03:43.910 --> 00:03:46.030 
then M
so<00:03:44.269> what<00:03:44.630> it<00:03:44.720> would<00:03:44.870> do<00:03:45.019> is<00:03:45.380> they<00:03:45.769> would<00:03:45.799> go

00:03:46.030 --> 00:03:46.040 
so what it would do is they would go

00:03:46.040 --> 00:03:52.270 
so what it would do is they would go
4100<00:03:47.319> instead<00:03:48.319> of<00:03:48.440> 0<00:03:48.769> 0<00:03:48.829> 41<00:03:49.670> so<00:03:50.299> this<00:03:50.750> is<00:03:51.280> big

00:03:52.270 --> 00:03:52.280 
4100 instead of 0 0 41 so this is big

00:03:52.280 --> 00:03:55.270 
4100 instead of 0 0 41 so this is big
endian<00:03:52.609> and<00:03:52.940> this<00:03:53.090> is<00:03:53.239> little<00:03:53.450> ano<00:03:53.870> all<00:03:54.560> right

00:03:55.270 --> 00:03:55.280 
endian and this is little ano all right

00:03:55.280 --> 00:03:57.699 
endian and this is little ano all right
so<00:03:55.849> now<00:03:56.269> we<00:03:56.329> need<00:03:56.599> to<00:03:56.750> actually<00:03:57.049> read<00:03:57.530> those

00:03:57.699 --> 00:03:57.709 
so now we need to actually read those

00:03:57.709 --> 00:03:59.530 
so now we need to actually read those
strings<00:03:58.190> so<00:03:58.639> it's<00:03:58.819> gonna<00:03:58.940> create<00:03:59.209> a<00:03:59.329> new

00:03:59.530 --> 00:03:59.540 
strings so it's gonna create a new

00:03:59.540 --> 00:04:04.229 
strings so it's gonna create a new
method<00:03:59.930> called<00:03:59.959> public<00:04:00.769> string<00:04:01.510> read<00:04:02.769> Unicode

00:04:04.229 --> 00:04:04.239 
method called public string read Unicode

00:04:04.239 --> 00:04:06.580 
method called public string read Unicode
string<00:04:05.239> and<00:04:05.540> then<00:04:06.079> we're<00:04:06.170> just<00:04:06.200> gonna<00:04:06.349> have

00:04:06.580 --> 00:04:06.590 
string and then we're just gonna have

00:04:06.590 --> 00:04:08.080 
string and then we're just gonna have
the<00:04:06.739> user<00:04:06.889> provide<00:04:07.340> the<00:04:07.519> length<00:04:07.790> of<00:04:08.000> the

00:04:08.080 --> 00:04:08.090 
the user provide the length of the

00:04:08.090 --> 00:04:09.849 
the user provide the length of the
Unicode<00:04:08.510> string<00:04:08.840> that<00:04:08.989> they<00:04:09.109> want<00:04:09.349> us<00:04:09.500> to<00:04:09.530> read

00:04:09.849 --> 00:04:09.859 
Unicode string that they want us to read

00:04:09.859 --> 00:04:11.740 
Unicode string that they want us to read
so<00:04:10.400> we're<00:04:10.489> just<00:04:10.519> going<00:04:10.700> to<00:04:10.790> stay<00:04:10.970> in<00:04:11.269> there

00:04:11.740 --> 00:04:11.750 
so we're just going to stay in there

00:04:11.750 --> 00:04:15.580 
so we're just going to stay in there
like<00:04:12.790> all<00:04:13.790> right<00:04:14.000> and<00:04:14.209> basically<00:04:15.139> what<00:04:15.470> we're

00:04:15.580 --> 00:04:15.590 
like all right and basically what we're

00:04:15.590 --> 00:04:17.740 
like all right and basically what we're
just<00:04:15.709> going<00:04:15.889> to<00:04:15.950> do<00:04:16.190> is<00:04:16.459> read<00:04:17.030> the<00:04:17.209> bytes<00:04:17.450> of

00:04:17.740 --> 00:04:17.750 
just going to do is read the bytes of

00:04:17.750 --> 00:04:20.229 
just going to do is read the bytes of
the<00:04:18.049> string<00:04:18.380> so<00:04:18.769> the<00:04:19.280> user<00:04:19.430> wanted<00:04:19.789> us<00:04:19.909> to<00:04:20.090> read

00:04:20.229 --> 00:04:20.239 
the string so the user wanted us to read

00:04:20.239 --> 00:04:22.120 
the string so the user wanted us to read
this<00:04:20.479> is<00:04:20.659> during<00:04:20.930> Adam<00:04:21.289> right<00:04:21.409> here<00:04:21.680> they

00:04:22.120 --> 00:04:22.130 
this is during Adam right here they

00:04:22.130 --> 00:04:22.980 
this is during Adam right here they
would<00:04:22.280> enter

00:04:22.980 --> 00:04:22.990 
would enter

00:04:22.990 --> 00:04:25.950 
would enter
eight<00:04:23.860> bytes<00:04:24.160> long<00:04:24.430> right<00:04:24.669> here<00:04:24.940> and<00:04:25.180> we<00:04:25.840> would

00:04:25.950 --> 00:04:25.960 
eight bytes long right here and we would

00:04:25.960 --> 00:04:29.330 
eight bytes long right here and we would
just<00:04:26.110> read<00:04:26.410> one<00:04:26.889> two<00:04:27.400> three<00:04:27.940> four<00:04:28.240> eight<00:04:28.720> bytes

00:04:29.330 --> 00:04:29.340 
just read one two three four eight bytes

00:04:29.340 --> 00:04:31.650 
just read one two three four eight bytes
all<00:04:30.340> right<00:04:30.460> and<00:04:30.699> then<00:04:31.150> we<00:04:31.270> just<00:04:31.389> need<00:04:31.479> to

00:04:31.650 --> 00:04:31.660 
all right and then we just need to

00:04:31.660 --> 00:04:34.200 
all right and then we just need to
convert<00:04:31.990> that<00:04:32.050> into<00:04:32.740> a<00:04:32.770> big<00:04:33.340> ending<00:04:33.759> Unicode

00:04:34.200 --> 00:04:34.210 
convert that into a big ending Unicode

00:04:34.210 --> 00:04:35.969 
convert that into a big ending Unicode
string<00:04:34.539> since<00:04:34.930> this<00:04:35.110> is<00:04:35.349> a<00:04:35.380> big-endian

00:04:35.969 --> 00:04:35.979 
string since this is a big-endian

00:04:35.979 --> 00:04:39.540 
string since this is a big-endian
unicode<00:04:36.610> string<00:04:36.940> right<00:04:37.120> there<00:04:37.330> so<00:04:38.550> we're

00:04:39.540 --> 00:04:39.550 
unicode string right there so we're

00:04:39.550 --> 00:04:41.400 
unicode string right there so we're
gonna<00:04:39.669> determine<00:04:39.910> what<00:04:40.780> string<00:04:41.080> to<00:04:41.229> read

00:04:41.400 --> 00:04:41.410 
gonna determine what string to read

00:04:41.410 --> 00:04:43.980 
gonna determine what string to read
based<00:04:41.680> on<00:04:41.949> what<00:04:42.849> by<00:04:43.030> order<00:04:43.389> of<00:04:43.419> the<00:04:43.509> user<00:04:43.720> has

00:04:43.980 --> 00:04:43.990 
based on what by order of the user has

00:04:43.990 --> 00:04:47.370 
based on what by order of the user has
defined<00:04:44.440> so<00:04:44.770> we're<00:04:44.919> going<00:04:45.039> to<00:04:45.099> say<00:04:45.250> if<00:04:46.380> byte

00:04:47.370 --> 00:04:47.380 
defined so we're going to say if byte

00:04:47.380 --> 00:04:51.930 
defined so we're going to say if byte
order<00:04:49.229> equals<00:04:50.229> by<00:04:50.919> order<00:04:51.280> dot<00:04:51.460> big-endian

00:04:51.930 --> 00:04:51.940 
order equals by order dot big-endian

00:04:51.940 --> 00:04:54.029 
order equals by order dot big-endian
then<00:04:52.870> we're<00:04:53.080> just<00:04:53.199> going<00:04:53.380> to<00:04:53.410> read<00:04:53.650> the<00:04:53.800> bytes

00:04:54.029 --> 00:04:54.039 
then we're just going to read the bytes

00:04:54.039 --> 00:04:56.249 
then we're just going to read the bytes
and<00:04:54.310> convert<00:04:54.639> it<00:04:54.789> into<00:04:54.880> a<00:04:55.120> big-endian<00:04:55.630> unicode

00:04:56.249 --> 00:04:56.259 
and convert it into a big-endian unicode

00:04:56.259 --> 00:04:58.350 
and convert it into a big-endian unicode
string<00:04:56.680> so<00:04:57.400> we're<00:04:57.520> just<00:04:57.550> going<00:04:57.729> to<00:04:57.789> say<00:04:57.970> BR

00:04:58.350 --> 00:04:58.360 
string so we're just going to say BR

00:04:58.360 --> 00:05:06.779 
string so we're just going to say BR
read<00:04:59.490> byte<00:05:01.050> by<00:05:02.050> byte<00:05:04.530> and<00:05:05.530> then<00:05:05.590> the<00:05:06.430> length

00:05:06.779 --> 00:05:06.789 
read byte by byte and then the length

00:05:06.789 --> 00:05:08.129 
read byte by byte and then the length
which<00:05:07.120> would<00:05:07.270> be<00:05:07.360> the<00:05:07.449> length<00:05:07.660> that<00:05:07.900> the<00:05:07.960> user

00:05:08.129 --> 00:05:08.139 
which would be the length that the user

00:05:08.139 --> 00:05:10.860 
which would be the length that the user
passes<00:05:08.680> through<00:05:09.039> and<00:05:09.570> now<00:05:10.570> we<00:05:10.630> need<00:05:10.810> to

00:05:10.860 --> 00:05:10.870 
passes through and now we need to

00:05:10.870 --> 00:05:13.740 
passes through and now we need to
convert<00:05:11.199> this<00:05:11.380> into<00:05:11.590> a<00:05:12.130> big-endian<00:05:13.030> unicode

00:05:13.740 --> 00:05:13.750 
convert this into a big-endian unicode

00:05:13.750 --> 00:05:16.589 
convert this into a big-endian unicode
string<00:05:14.199> sense<00:05:14.560> this<00:05:15.190> will<00:05:15.460> only<00:05:15.669> occur<00:05:16.090> if<00:05:16.389> the

00:05:16.589 --> 00:05:16.599 
string sense this will only occur if the

00:05:16.599 --> 00:05:19.200 
string sense this will only occur if the
user's<00:05:16.930> byte<00:05:17.199> order<00:05:17.590> is<00:05:17.800> big<00:05:18.099> endian<00:05:18.490> and<00:05:18.699> to

00:05:19.200 --> 00:05:19.210 
user's byte order is big endian and to

00:05:19.210 --> 00:05:20.310 
user's byte order is big endian and to
do<00:05:19.360> that<00:05:19.539> we're<00:05:19.690> gonna<00:05:19.780> have<00:05:19.930> to<00:05:19.990> use<00:05:20.169> the

00:05:20.310 --> 00:05:20.320 
do that we're gonna have to use the

00:05:20.320 --> 00:05:21.839 
do that we're gonna have to use the
encoding<00:05:20.830> class<00:05:20.860> so<00:05:21.430> I'm<00:05:21.490> going<00:05:21.610> to<00:05:21.669> stay<00:05:21.819> in

00:05:21.839 --> 00:05:21.849 
encoding class so I'm going to stay in

00:05:21.849 --> 00:05:27.719 
encoding class so I'm going to stay in
coding<00:05:23.159> dot<00:05:25.229> big-endian<00:05:26.229> unicode<00:05:26.949> and<00:05:27.190> then

00:05:27.719 --> 00:05:27.729 
coding dot big-endian unicode and then

00:05:27.729 --> 00:05:29.010 
coding dot big-endian unicode and then
we're<00:05:27.820> just<00:05:27.849> gonna<00:05:28.000> want<00:05:28.270> to<00:05:28.360> get<00:05:28.509> this<00:05:28.659> string

00:05:29.010 --> 00:05:29.020 
we're just gonna want to get this string

00:05:29.020 --> 00:05:31.110 
we're just gonna want to get this string
from<00:05:29.320> bytes<00:05:29.740> so<00:05:30.520> we're<00:05:30.610> just<00:05:30.639> gonna<00:05:30.789> use<00:05:30.970> the

00:05:31.110 --> 00:05:31.120 
from bytes so we're just gonna use the

00:05:31.120 --> 00:05:32.939 
from bytes so we're just gonna use the
get<00:05:31.300> string<00:05:31.630> method<00:05:31.990> to<00:05:32.110> convert<00:05:32.440> it<00:05:32.560> into<00:05:32.710> a

00:05:32.939 --> 00:05:32.949 
get string method to convert it into a

00:05:32.949 --> 00:05:35.850 
get string method to convert it into a
big-endian<00:05:33.520> unicode<00:05:34.240> string<00:05:34.690> and<00:05:34.960> then<00:05:35.770> we're

00:05:35.850 --> 00:05:35.860 
big-endian unicode string and then we're

00:05:35.860 --> 00:05:37.140 
big-endian unicode string and then we're
just<00:05:35.889> gonna<00:05:36.039> want<00:05:36.310> to<00:05:36.370> return<00:05:36.610> this<00:05:36.849> since

00:05:37.140 --> 00:05:37.150 
just gonna want to return this since

00:05:37.150 --> 00:05:39.149 
just gonna want to return this since
this<00:05:37.419> get<00:05:37.990> string<00:05:38.289> method<00:05:38.620> returns<00:05:38.949> a<00:05:39.099> string

00:05:39.149 --> 00:05:39.159 
this get string method returns a string

00:05:39.159 --> 00:05:42.540 
this get string method returns a string
so<00:05:40.120> we're<00:05:40.210> just<00:05:40.240> gonna<00:05:40.419> say<00:05:40.690> return<00:05:41.370> all<00:05:42.370> right

00:05:42.540 --> 00:05:42.550 
so we're just gonna say return all right

00:05:42.550 --> 00:05:43.680 
so we're just gonna say return all right
and<00:05:42.759> then<00:05:43.030> we're<00:05:43.150> just<00:05:43.180> going<00:05:43.360> to<00:05:43.419> want<00:05:43.599> to

00:05:43.680 --> 00:05:43.690 
and then we're just going to want to

00:05:43.690 --> 00:05:46.830 
and then we're just going to want to
have<00:05:43.810> it<00:05:43.930> return<00:05:44.259> a<00:05:44.530> little<00:05:45.099> endian<00:05:45.840> unicode

00:05:46.830 --> 00:05:46.840 
have it return a little endian unicode

00:05:46.840 --> 00:05:49.290 
have it return a little endian unicode
string<00:05:47.289> if<00:05:47.530> the<00:05:47.830> users<00:05:48.130> byte<00:05:48.370> order<00:05:48.729> is<00:05:48.909> little

00:05:49.290 --> 00:05:49.300 
string if the users byte order is little

00:05:49.300 --> 00:05:55.430 
string if the users byte order is little
onion<00:05:49.630> so<00:05:49.900> to<00:05:49.960> say<00:05:50.289> else<00:05:51.630> return<00:05:53.520> encoding

00:05:55.430 --> 00:05:55.440 
onion so to say else return encoding

00:05:55.440 --> 00:05:57.770 
onion so to say else return encoding
coding

00:05:57.770 --> 00:05:57.780 
coding

00:05:57.780 --> 00:06:00.719 
coding
unicode<00:05:58.780> and<00:05:59.110> you<00:05:59.320> don't<00:05:59.469> have<00:05:59.590> to<00:05:59.710> say<00:05:59.949> little

00:06:00.719 --> 00:06:00.729 
unicode and you don't have to say little

00:06:00.729 --> 00:06:03.540 
unicode and you don't have to say little
endian<00:06:00.969> unicode<00:06:01.509> it's<00:06:02.020> just<00:06:02.409> unicode<00:06:03.159> so

00:06:03.540 --> 00:06:03.550 
endian unicode it's just unicode so

00:06:03.550 --> 00:06:07.140 
endian unicode it's just unicode so
unicode<00:06:04.270> dot<00:06:04.930> get<00:06:05.349> string<00:06:05.830> and<00:06:06.070> then<00:06:06.820> those

00:06:07.140 --> 00:06:07.150 
unicode dot get string and then those

00:06:07.150 --> 00:06:11.129 
unicode dot get string and then those
bytes<00:06:07.740> VRE<00:06:08.740> bytes<00:06:09.099> the<00:06:09.599> length<00:06:10.599> of<00:06:10.810> the<00:06:10.870> string

00:06:11.129 --> 00:06:11.139 
bytes VRE bytes the length of the string

00:06:11.139 --> 00:06:14.610 
bytes VRE bytes the length of the string
that<00:06:11.259> the<00:06:11.320> user<00:06:11.440> passes<00:06:11.889> screw<00:06:13.320> alright<00:06:14.320> so

00:06:14.610 --> 00:06:14.620 
that the user passes screw alright so

00:06:14.620 --> 00:06:16.680 
that the user passes screw alright so
that's<00:06:15.099> pretty<00:06:15.219> much<00:06:15.430> it<00:06:15.550> for<00:06:15.909> this<00:06:16.060> tutorial

00:06:16.680 --> 00:06:16.690 
that's pretty much it for this tutorial

00:06:16.690 --> 00:06:19.949 
that's pretty much it for this tutorial
so<00:06:17.080> see<00:06:17.650> you<00:06:17.740> guys

