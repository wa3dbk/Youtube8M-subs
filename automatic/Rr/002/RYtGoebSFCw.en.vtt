WEBVTT
Kind: captions
Language: en

00:00:02.300 --> 00:00:04.910 

AMD<00:00:03.300> is<00:00:03.510> introducing<00:00:04.049> the<00:00:04.170> next<00:00:04.350> chapter<00:00:04.799> in

00:00:04.910 --> 00:00:04.920 
AMD is introducing the next chapter in

00:00:04.920 --> 00:00:07.670 
AMD is introducing the next chapter in
x86<00:00:05.339> computing<00:00:06.150> with<00:00:06.480> two<00:00:06.750> completely<00:00:07.440> new

00:00:07.670 --> 00:00:07.680 
x86 computing with two completely new

00:00:07.680 --> 00:00:10.430 
x86 computing with two completely new
course<00:00:08.069> the<00:00:08.610> cores<00:00:08.940> codenamed<00:00:09.719> bulldozer<00:00:10.200> and

00:00:10.430 --> 00:00:10.440 
course the cores codenamed bulldozer and

00:00:10.440 --> 00:00:12.950 
course the cores codenamed bulldozer and
Bobcat<00:00:11.070> are<00:00:11.250> finely<00:00:11.940> tuned<00:00:12.210> for<00:00:12.450> specific

00:00:12.950 --> 00:00:12.960 
Bobcat are finely tuned for specific

00:00:12.960 --> 00:00:15.620 
Bobcat are finely tuned for specific
markets<00:00:13.380> and<00:00:13.559> workloads<00:00:14.330> bulldozer<00:00:15.330> is

00:00:15.620 --> 00:00:15.630 
markets and workloads bulldozer is

00:00:15.630 --> 00:00:17.000 
markets and workloads bulldozer is
engineered<00:00:16.139> for<00:00:16.320> performance<00:00:16.859> and

00:00:17.000 --> 00:00:17.010 
engineered for performance and

00:00:17.010 --> 00:00:18.890 
engineered for performance and
scalability<00:00:17.369> and<00:00:17.940> targets<00:00:18.539> the<00:00:18.660> heavy

00:00:18.890 --> 00:00:18.900 
scalability and targets the heavy

00:00:18.900 --> 00:00:20.210 
scalability and targets the heavy
lifting<00:00:18.990> of<00:00:19.470> server<00:00:19.770> and<00:00:20.039> high<00:00:20.160> performance

00:00:20.210 --> 00:00:20.220 
lifting of server and high performance

00:00:20.220 --> 00:00:23.390 
lifting of server and high performance
client<00:00:21.029> platforms<00:00:21.630> Bobcat<00:00:22.560> is<00:00:22.800> geared<00:00:23.100> toward

00:00:23.390 --> 00:00:23.400 
client platforms Bobcat is geared toward

00:00:23.400 --> 00:00:25.790 
client platforms Bobcat is geared toward
flexibility<00:00:24.210> low<00:00:24.660> power<00:00:24.930> and<00:00:25.260> small<00:00:25.529> size

00:00:25.790 --> 00:00:25.800 
flexibility low power and small size

00:00:25.800 --> 00:00:28.130 
flexibility low power and small size
it's<00:00:26.460> design<00:00:26.849> is<00:00:26.880> specifically<00:00:27.539> suited<00:00:27.840> for

00:00:28.130 --> 00:00:28.140 
it's design is specifically suited for

00:00:28.140 --> 00:00:29.599 
it's design is specifically suited for
notebooks<00:00:28.560> and<00:00:28.769> other<00:00:28.890> portable<00:00:29.340> form

00:00:29.599 --> 00:00:29.609 
notebooks and other portable form

00:00:29.609 --> 00:00:31.880 
notebooks and other portable form
factors<00:00:30.119> now<00:00:30.900> that<00:00:31.080> we've<00:00:31.170> met<00:00:31.320> the<00:00:31.439> two<00:00:31.590> cores

00:00:31.880 --> 00:00:31.890 
factors now that we've met the two cores

00:00:31.890 --> 00:00:34.040 
factors now that we've met the two cores
let's<00:00:32.430> take<00:00:32.579> a<00:00:32.640> closer<00:00:32.940> look<00:00:33.059> at<00:00:33.329> bulldozer<00:00:33.750> at

00:00:34.040 --> 00:00:34.050 
let's take a closer look at bulldozer at

00:00:34.050 --> 00:00:36.170 
let's take a closer look at bulldozer at
the<00:00:34.590> heart<00:00:34.860> of<00:00:34.950> bulldozers<00:00:35.370> innovation<00:00:36.030> is

00:00:36.170 --> 00:00:36.180 
the heart of bulldozers innovation is

00:00:36.180 --> 00:00:38.630 
the heart of bulldozers innovation is
the<00:00:36.630> way<00:00:36.840> it<00:00:37.050> combines<00:00:37.440> dedicated<00:00:38.129> and<00:00:38.280> shared

00:00:38.630 --> 00:00:38.640 
the way it combines dedicated and shared

00:00:38.640 --> 00:00:41.360 
the way it combines dedicated and shared
resources<00:00:39.210> in<00:00:39.540> a<00:00:39.690> compact<00:00:40.140> design<00:00:40.379> to<00:00:41.070> deliver

00:00:41.360 --> 00:00:41.370 
resources in a compact design to deliver

00:00:41.370 --> 00:00:43.340 
resources in a compact design to deliver
exceptional<00:00:41.760> performance<00:00:42.480> in<00:00:42.629> a<00:00:42.840> given<00:00:43.140> power

00:00:43.340 --> 00:00:43.350 
exceptional performance in a given power

00:00:43.350 --> 00:00:46.130 
exceptional performance in a given power
envelope<00:00:43.710> the<00:00:44.579> dedicated<00:00:45.000> resources<00:00:45.420> include

00:00:46.130 --> 00:00:46.140 
envelope the dedicated resources include

00:00:46.140 --> 00:00:48.950 
envelope the dedicated resources include
two<00:00:46.469> integer<00:00:47.070> execution<00:00:47.760> cores<00:00:48.090> that<00:00:48.660> deliver

00:00:48.950 --> 00:00:48.960 
two integer execution cores that deliver

00:00:48.960 --> 00:00:51.529 
two integer execution cores that deliver
true<00:00:49.410> core<00:00:49.800> functionality<00:00:50.610> by<00:00:51.210> presenting

00:00:51.529 --> 00:00:51.539 
true core functionality by presenting

00:00:51.539 --> 00:00:53.540 
true core functionality by presenting
two<00:00:51.899> true<00:00:52.199> cores<00:00:52.500> to<00:00:52.739> the<00:00:52.829> operating<00:00:53.190> system

00:00:53.540 --> 00:00:53.550 
two true cores to the operating system

00:00:53.550 --> 00:00:55.850 
two true cores to the operating system
and<00:00:53.670> applications<00:00:54.210> to<00:00:54.750> simultaneous<00:00:55.530> threads

00:00:55.850 --> 00:00:55.860 
and applications to simultaneous threads

00:00:55.860 --> 00:00:57.680 
and applications to simultaneous threads
can<00:00:56.100> be<00:00:56.219> executed<00:00:56.789> more<00:00:56.940> efficiently<00:00:57.480> than

00:00:57.680 --> 00:00:57.690 
can be executed more efficiently than

00:00:57.690 --> 00:00:59.330 
can be executed more efficiently than
two<00:00:58.079> threads<00:00:58.350> running<00:00:58.500> on<00:00:58.710> a<00:00:58.739> single<00:00:59.129> integer

00:00:59.330 --> 00:00:59.340 
two threads running on a single integer

00:00:59.340 --> 00:01:01.639 
two threads running on a single integer
core<00:00:59.640> the<00:01:00.300> shared<00:01:00.570> components<00:01:00.930> help<00:01:01.320> reduce

00:01:01.639 --> 00:01:01.649 
core the shared components help reduce

00:01:01.649 --> 00:01:03.560 
core the shared components help reduce
power<00:01:01.920> consumption<00:01:02.460> and<00:01:02.789> reduce<00:01:03.090> die<00:01:03.300> space

00:01:03.560 --> 00:01:03.570 
power consumption and reduce die space

00:01:03.570 --> 00:01:06.200 
power consumption and reduce die space
the<00:01:04.500> discrete<00:01:04.920> components<00:01:05.489> help<00:01:05.909> increase

00:01:06.200 --> 00:01:06.210 
the discrete components help increase

00:01:06.210 --> 00:01:08.600 
the discrete components help increase
performance<00:01:06.510> and<00:01:07.049> scalability<00:01:07.200> at<00:01:07.920> the<00:01:08.400> chip

00:01:08.600 --> 00:01:08.610 
performance and scalability at the chip

00:01:08.610 --> 00:01:10.820 
performance and scalability at the chip
level<00:01:08.820> it<00:01:09.090> is<00:01:09.150> easy<00:01:09.570> to<00:01:09.689> see<00:01:09.960> how<00:01:10.200> the<00:01:10.260> modules

00:01:10.820 --> 00:01:10.830 
level it is easy to see how the modules

00:01:10.830 --> 00:01:12.230 
level it is easy to see how the modules
can<00:01:10.979> be<00:01:11.040> combined<00:01:11.520> to<00:01:11.760> form<00:01:12.060> complete

00:01:12.230 --> 00:01:12.240 
can be combined to form complete

00:01:12.240 --> 00:01:14.750 
can be combined to form complete
processors<00:01:13.080> that<00:01:13.110> share<00:01:13.530> resources<00:01:13.950> like<00:01:14.369> l3

00:01:14.750 --> 00:01:14.760 
processors that share resources like l3

00:01:14.760 --> 00:01:17.390 
processors that share resources like l3
cache<00:01:14.790> the<00:01:15.750> modules<00:01:16.229> are<00:01:16.380> logical<00:01:16.890> divisions

00:01:17.390 --> 00:01:17.400 
cache the modules are logical divisions

00:01:17.400 --> 00:01:19.340 
cache the modules are logical divisions
transparent<00:01:18.330> to<00:01:18.450> the<00:01:18.479> hardware<00:01:18.810> the

00:01:19.340 --> 00:01:19.350 
transparent to the hardware the

00:01:19.350 --> 00:01:21.770 
transparent to the hardware the
operating<00:01:19.799> system<00:01:20.130> or<00:01:20.220> applications<00:01:21.090> so<00:01:21.600> how

00:01:21.770 --> 00:01:21.780 
operating system or applications so how

00:01:21.780 --> 00:01:23.570 
operating system or applications so how
does<00:01:21.840> AMD's<00:01:22.650> approach<00:01:22.979> work<00:01:23.250> from<00:01:23.520> a

00:01:23.570 --> 00:01:23.580 
does AMD's approach work from a

00:01:23.580 --> 00:01:24.890 
does AMD's approach work from a
performance<00:01:23.880> perspective<00:01:24.119> versus

00:01:24.890 --> 00:01:24.900 
performance perspective versus

00:01:24.900 --> 00:01:26.410 
performance perspective versus
multithreading<00:01:25.530> on<00:01:25.619> a<00:01:25.650> single<00:01:25.979> core

00:01:26.410 --> 00:01:26.420 
multithreading on a single core

00:01:26.420 --> 00:01:28.399 
multithreading on a single core
multi-threading<00:01:27.420> on<00:01:27.509> a<00:01:27.540> single<00:01:27.900> core<00:01:28.110> can<00:01:28.320> be

00:01:28.399 --> 00:01:28.409 
multi-threading on a single core can be

00:01:28.409 --> 00:01:30.560 
multi-threading on a single core can be
inconsistent<00:01:28.920> often<00:01:29.670> with<00:01:29.759> relatively<00:01:30.180> small

00:01:30.560 --> 00:01:30.570 
inconsistent often with relatively small

00:01:30.570 --> 00:01:32.990 
inconsistent often with relatively small
increases<00:01:31.079> in<00:01:31.200> throughput<00:01:31.710> in<00:01:31.950> fact<00:01:32.430> under

00:01:32.990 --> 00:01:33.000 
increases in throughput in fact under

00:01:33.000 --> 00:01:34.670 
increases in throughput in fact under
some<00:01:33.240> workloads<00:01:33.689> this<00:01:34.140> approach<00:01:34.470> to

00:01:34.670 --> 00:01:34.680 
some workloads this approach to

00:01:34.680 --> 00:01:36.170 
some workloads this approach to
multi-threading<00:01:35.250> can<00:01:35.369> actually<00:01:35.700> result<00:01:36.000> in

00:01:36.170 --> 00:01:36.180 
multi-threading can actually result in

00:01:36.180 --> 00:01:38.179 
multi-threading can actually result in
negative<00:01:36.390> overall<00:01:37.079> throughput<00:01:37.290> with

00:01:38.179 --> 00:01:38.189 
negative overall throughput with

00:01:38.189 --> 00:01:40.039 
negative overall throughput with
dedicated<00:01:38.670> cores<00:01:39.030> in<00:01:39.299> parallel<00:01:39.750> thread

00:01:40.039 --> 00:01:40.049 
dedicated cores in parallel thread

00:01:40.049 --> 00:01:42.260 
dedicated cores in parallel thread
execution<00:01:40.680> bulldozer<00:01:41.520> offers<00:01:42.030> more

00:01:42.260 --> 00:01:42.270 
execution bulldozer offers more

00:01:42.270 --> 00:01:44.270 
execution bulldozer offers more
consistent<00:01:42.990> results<00:01:43.500> and<00:01:43.619> superior

00:01:44.270 --> 00:01:44.280 
consistent results and superior

00:01:44.280 --> 00:01:46.700 
consistent results and superior
throughput<00:01:44.820> for<00:01:45.479> server<00:01:45.780> workloads<00:01:46.409> the

00:01:46.700 --> 00:01:46.710 
throughput for server workloads the

00:01:46.710 --> 00:01:48.980 
throughput for server workloads the
first<00:01:46.979> bulldozer<00:01:47.520> based<00:01:47.880> processor<00:01:48.570> features

00:01:48.980 --> 00:01:48.990 
first bulldozer based processor features

00:01:48.990 --> 00:01:52.039 
first bulldozer based processor features
16<00:01:49.680> cores<00:01:50.009> a<00:01:50.310> thirty<00:01:50.909> three<00:01:51.210> percent<00:01:51.240> increase

00:01:52.039 --> 00:01:52.049 
16 cores a thirty three percent increase

00:01:52.049 --> 00:01:54.590 
16 cores a thirty three percent increase
over<00:01:52.380> AMD's<00:01:52.920> current<00:01:53.399> magny-cours<00:01:53.970> processor

00:01:54.590 --> 00:01:54.600 
over AMD's current magny-cours processor

00:01:54.600 --> 00:01:56.840 
over AMD's current magny-cours processor
and<00:01:54.780> delivers<00:01:55.500> an<00:01:55.619> estimated<00:01:56.189> fifty<00:01:56.369> percent

00:01:56.840 --> 00:01:56.850 
and delivers an estimated fifty percent

00:01:56.850 --> 00:01:58.639 
and delivers an estimated fifty percent
increase<00:01:57.299> in<00:01:57.329> throughput<00:01:57.990> performance<00:01:58.049> and

00:01:58.639 --> 00:01:58.649 
increase in throughput performance and

00:01:58.649 --> 00:02:01.280 
increase in throughput performance and
around<00:01:58.890> the<00:01:59.040> same<00:01:59.280> power<00:01:59.490> envelope<00:01:59.909> a<00:02:00.299> primary

00:02:01.280 --> 00:02:01.290 
around the same power envelope a primary

00:02:01.290 --> 00:02:03.170 
around the same power envelope a primary
benefit<00:02:01.770> of<00:02:01.860> bulldozers<00:02:02.280> use<00:02:02.700> of<00:02:02.909> shared

00:02:03.170 --> 00:02:03.180 
benefit of bulldozers use of shared

00:02:03.180 --> 00:02:06.109 
benefit of bulldozers use of shared
resources<00:02:03.689> is<00:02:04.049> to<00:02:04.439> save<00:02:04.740> silicon<00:02:05.280> area<00:02:05.610> the

00:02:06.109 --> 00:02:06.119 
resources is to save silicon area the

00:02:06.119 --> 00:02:07.880 
resources is to save silicon area the
amount<00:02:06.390> of<00:02:06.600> circuitry<00:02:07.170> needed<00:02:07.619> for<00:02:07.799> the

00:02:07.880 --> 00:02:07.890 
amount of circuitry needed for the

00:02:07.890 --> 00:02:09.619 
amount of circuitry needed for the
second<00:02:08.280> integer<00:02:08.550> core<00:02:09.000> is<00:02:09.209> only<00:02:09.450> around

00:02:09.619 --> 00:02:09.629 
second integer core is only around

00:02:09.629 --> 00:02:11.869 
second integer core is only around
twelve<00:02:10.110> percent<00:02:10.470> of<00:02:10.590> the<00:02:10.679> module<00:02:11.069> this<00:02:11.700> is<00:02:11.849> a

00:02:11.869 --> 00:02:11.879 
twelve percent of the module this is a

00:02:11.879 --> 00:02:12.720 
twelve percent of the module this is a
much<00:02:12.209> more<00:02:12.239> of

00:02:12.720 --> 00:02:12.730 
much more of

00:02:12.730 --> 00:02:14.759 
much more of
solution<00:02:13.450> than<00:02:13.599> to<00:02:13.810> complete<00:02:14.230> cores<00:02:14.500> in<00:02:14.709> a

00:02:14.759 --> 00:02:14.769 
solution than to complete cores in a

00:02:14.769 --> 00:02:17.520 
solution than to complete cores in a
core<00:02:15.010> multiprocessing<00:02:15.849> configuration<00:02:16.750> cmp

00:02:17.520 --> 00:02:17.530 
core multiprocessing configuration cmp

00:02:17.530 --> 00:02:19.710 
core multiprocessing configuration cmp
with<00:02:17.890> bulldozer<00:02:18.400> providing<00:02:19.030> a<00:02:19.120> compelling

00:02:19.710 --> 00:02:19.720 
with bulldozer providing a compelling

00:02:19.720 --> 00:02:21.979 
with bulldozer providing a compelling
ratio<00:02:20.080> of<00:02:20.200> performance<00:02:20.799> per<00:02:21.010> watt<00:02:21.040> per<00:02:21.519> dollar

00:02:21.979 --> 00:02:21.989 
ratio of performance per watt per dollar

00:02:21.989 --> 00:02:24.780 
ratio of performance per watt per dollar
bulldozer<00:02:22.989> is<00:02:23.260> another<00:02:23.560> new<00:02:23.830> chapter<00:02:24.280> in<00:02:24.430> x86

00:02:24.780 --> 00:02:24.790 
bulldozer is another new chapter in x86

00:02:24.790 --> 00:02:27.330 
bulldozer is another new chapter in x86
computing<00:02:25.629> engineered<00:02:26.440> for<00:02:26.650> performance<00:02:27.220> and

00:02:27.330 --> 00:02:27.340 
computing engineered for performance and

00:02:27.340 --> 00:02:29.070 
computing engineered for performance and
scalability<00:02:27.670> for<00:02:28.330> the<00:02:28.420> high-performance

00:02:29.070 --> 00:02:29.080 
scalability for the high-performance

00:02:29.080 --> 00:02:32.309 
scalability for the high-performance
client<00:02:29.560> and<00:02:29.709> server<00:02:30.069> markets<00:02:30.900> now<00:02:31.900> let's<00:02:32.140> take

00:02:32.309 --> 00:02:32.319 
client and server markets now let's take

00:02:32.319 --> 00:02:34.530 
client and server markets now let's take
a<00:02:32.379> closer<00:02:32.650> look<00:02:32.799> at<00:02:33.069> bobcat<00:02:33.299> bobcat<00:02:34.299> is<00:02:34.510> a

00:02:34.530 --> 00:02:34.540 
a closer look at bobcat bobcat is a

00:02:34.540 --> 00:02:37.470 
a closer look at bobcat bobcat is a
small<00:02:34.959> efficient<00:02:35.650> low-power<00:02:36.040> x86<00:02:36.819> core<00:02:37.060> that

00:02:37.470 --> 00:02:37.480 
small efficient low-power x86 core that

00:02:37.480 --> 00:02:39.210 
small efficient low-power x86 core that
offers<00:02:37.810> mainstream<00:02:38.319> performance<00:02:38.799> in<00:02:38.980> half

00:02:39.210 --> 00:02:39.220 
offers mainstream performance in half

00:02:39.220 --> 00:02:41.339 
offers mainstream performance in half
the<00:02:39.489> die<00:02:39.640> area<00:02:39.910> and<00:02:40.269> a<00:02:40.510> fraction<00:02:41.019> of<00:02:41.079> the<00:02:41.200> power

00:02:41.339 --> 00:02:41.349 
the die area and a fraction of the power

00:02:41.349 --> 00:02:43.380 
the die area and a fraction of the power
of<00:02:41.500> prior<00:02:41.860> generations<00:02:42.519> it<00:02:42.879> is<00:02:43.030> highly

00:02:43.380 --> 00:02:43.390 
of prior generations it is highly

00:02:43.390 --> 00:02:44.970 
of prior generations it is highly
synthesizable<00:02:44.079> with<00:02:44.319> only<00:02:44.500> a<00:02:44.620> small<00:02:44.799> number

00:02:44.970 --> 00:02:44.980 
synthesizable with only a small number

00:02:44.980 --> 00:02:47.009 
synthesizable with only a small number
of<00:02:45.430> customer<00:02:45.819> rays<00:02:45.970> making<00:02:46.569> it<00:02:46.780> easily

00:02:47.009 --> 00:02:47.019 
of customer rays making it easily

00:02:47.019 --> 00:02:49.819 
of customer rays making it easily
portable<00:02:47.560> across<00:02:47.860> process<00:02:48.430> technologies

00:02:49.819 --> 00:02:49.829 
portable across process technologies

00:02:49.829 --> 00:02:52.890 
portable across process technologies
bobcat<00:02:50.829> forms<00:02:51.280> the<00:02:51.459> cpu<00:02:52.090> side<00:02:52.390> of<00:02:52.569> the<00:02:52.660> first

00:02:52.890 --> 00:02:52.900 
bobcat forms the cpu side of the first

00:02:52.900 --> 00:02:55.680 
bobcat forms the cpu side of the first
AMD<00:02:53.530> fusion<00:02:53.829> apu<00:02:54.579> product<00:02:55.030> coming<00:02:55.359> to<00:02:55.480> market

00:02:55.680 --> 00:02:55.690 
AMD fusion apu product coming to market

00:02:55.690 --> 00:02:58.680 
AMD fusion apu product coming to market
ontario<00:02:56.560> an<00:02:56.799> APU<00:02:57.579> combines<00:02:58.269> the<00:02:58.510> best

00:02:58.680 --> 00:02:58.690 
ontario an APU combines the best

00:02:58.690 --> 00:03:01.619 
ontario an APU combines the best
features<00:02:59.079> of<00:02:59.109> a<00:02:59.319> cpu<00:02:59.859> and<00:03:00.099> a<00:03:00.250> GPU<00:03:00.670> to<00:03:01.269> handle

00:03:01.619 --> 00:03:01.629 
features of a cpu and a GPU to handle

00:03:01.629 --> 00:03:03.000 
features of a cpu and a GPU to handle
modern<00:03:02.019> workloads<00:03:02.470> that<00:03:02.590> are<00:03:02.739> much<00:03:02.859> more

00:03:03.000 --> 00:03:03.010 
modern workloads that are much more

00:03:03.010 --> 00:03:05.099 
modern workloads that are much more
visually<00:03:03.579> intensive<00:03:04.120> and<00:03:04.299> can<00:03:04.720> be<00:03:04.810> executed

00:03:05.099 --> 00:03:05.109 
visually intensive and can be executed

00:03:05.109 --> 00:03:08.069 
visually intensive and can be executed
most<00:03:05.590> efficiently<00:03:06.160> by<00:03:06.609> a<00:03:06.640> GPU<00:03:07.150> and<00:03:07.540> CPU

00:03:08.069 --> 00:03:08.079 
most efficiently by a GPU and CPU

00:03:08.079 --> 00:03:10.410 
most efficiently by a GPU and CPU
working<00:03:08.560> together<00:03:08.739> from<00:03:09.459> an<00:03:09.609> advanced<00:03:10.030> micro

00:03:10.410 --> 00:03:10.420 
working together from an advanced micro

00:03:10.420 --> 00:03:12.509 
working together from an advanced micro
architecture<00:03:10.629> perspective<00:03:11.560> Bobcat<00:03:12.340> is<00:03:12.370> a

00:03:12.509 --> 00:03:12.519 
architecture perspective Bobcat is a

00:03:12.519 --> 00:03:14.339 
architecture perspective Bobcat is a
single<00:03:12.879> thread<00:03:13.060> machine<00:03:13.480> with<00:03:13.720> impressive

00:03:14.339 --> 00:03:14.349 
single thread machine with impressive

00:03:14.349 --> 00:03:16.500 
single thread machine with impressive
performance<00:03:14.829> instructions<00:03:15.730> are<00:03:15.879> decoded<00:03:16.390> in

00:03:16.500 --> 00:03:16.510 
performance instructions are decoded in

00:03:16.510 --> 00:03:18.870 
performance instructions are decoded in
program<00:03:16.930> order<00:03:17.139> executed<00:03:17.859> speculatively<00:03:18.609> out

00:03:18.870 --> 00:03:18.880 
program order executed speculatively out

00:03:18.880 --> 00:03:21.300 
program order executed speculatively out
of<00:03:19.060> order<00:03:19.359> and<00:03:19.540> our<00:03:19.930> retired<00:03:20.410> committed<00:03:21.099> and

00:03:21.300 --> 00:03:21.310 
of order and our retired committed and

00:03:21.310 --> 00:03:24.030 
of order and our retired committed and
program<00:03:21.700> order<00:03:21.910> Bobcat<00:03:22.840> can<00:03:23.139> decode<00:03:23.620> issue

00:03:24.030 --> 00:03:24.040 
program order Bobcat can decode issue

00:03:24.040 --> 00:03:27.599 
program order Bobcat can decode issue
and<00:03:24.609> retire<00:03:25.060> up<00:03:25.359> to<00:03:25.780> two<00:03:26.019> x86<00:03:26.980> instructions

00:03:27.599 --> 00:03:27.609 
and retire up to two x86 instructions

00:03:27.609 --> 00:03:29.729 
and retire up to two x86 instructions
per<00:03:27.790> cycle<00:03:28.000> from<00:03:28.959> a<00:03:29.109> power<00:03:29.290> management

00:03:29.729 --> 00:03:29.739 
per cycle from a power management

00:03:29.739 --> 00:03:31.770 
per cycle from a power management
perspective<00:03:30.150> Bobcat<00:03:31.150> offers<00:03:31.540> power

00:03:31.770 --> 00:03:31.780 
perspective Bobcat offers power

00:03:31.780 --> 00:03:33.960 
perspective Bobcat offers power
optimized<00:03:32.410> execution<00:03:33.069> with<00:03:33.519> a<00:03:33.549> micro

00:03:33.960 --> 00:03:33.970 
optimized execution with a micro

00:03:33.970 --> 00:03:36.150 
optimized execution with a micro
architecture<00:03:34.180> designed<00:03:35.079> to<00:03:35.349> minimize<00:03:35.799> data

00:03:36.150 --> 00:03:36.160 
architecture designed to minimize data

00:03:36.160 --> 00:03:37.949 
architecture designed to minimize data
movement<00:03:36.400> and<00:03:36.760> unnecessary<00:03:37.389> reads<00:03:37.630> and

00:03:37.949 --> 00:03:37.959 
movement and unnecessary reads and

00:03:37.959 --> 00:03:40.289 
movement and unnecessary reads and
includes<00:03:38.709> extensive<00:03:39.099> clock<00:03:39.519> gating<00:03:39.940> power

00:03:40.289 --> 00:03:40.299 
includes extensive clock gating power

00:03:40.299 --> 00:03:41.970 
includes extensive clock gating power
gating<00:03:40.750> and<00:03:40.900> system<00:03:41.290> low-power<00:03:41.620> States

00:03:41.970 --> 00:03:41.980 
gating and system low-power States

00:03:41.980 --> 00:03:44.400 
gating and system low-power States
Bobcat<00:03:42.730> is<00:03:42.940> the<00:03:43.180> next<00:03:43.480> chapter<00:03:43.870> in<00:03:43.989> low-power

00:03:44.400 --> 00:03:44.410 
Bobcat is the next chapter in low-power

00:03:44.410 --> 00:03:47.520 
Bobcat is the next chapter in low-power
x86<00:03:45.340> computing<00:03:45.910> engineered<00:03:46.720> for<00:03:46.900> flexibility

00:03:47.520 --> 00:03:47.530 
x86 computing engineered for flexibility

00:03:47.530 --> 00:03:50.039 
x86 computing engineered for flexibility
and<00:03:47.709> small<00:03:48.040> size<00:03:48.340> making<00:03:49.000> it<00:03:49.120> ideal<00:03:49.630> for<00:03:49.750> the

00:03:50.039 --> 00:03:50.049 
and small size making it ideal for the

00:03:50.049 --> 00:03:52.170 
and small size making it ideal for the
next<00:03:50.290> generation<00:03:50.829> of<00:03:50.919> highly<00:03:51.310> portable<00:03:51.579> PC

00:03:52.170 --> 00:03:52.180 
next generation of highly portable PC

00:03:52.180 --> 00:03:54.449 
next generation of highly portable PC
form<00:03:52.510> factors<00:03:52.900> that<00:03:53.290> deliver<00:03:53.680> a<00:03:53.769> compelling

00:03:54.449 --> 00:03:54.459 
form factors that deliver a compelling

00:03:54.459 --> 00:03:58.319 
form factors that deliver a compelling
user<00:03:54.700> experience<00:03:55.480> as<00:03:55.750> the<00:03:56.470> x86<00:03:57.160> core<00:03:57.519> in<00:03:57.760> AMD's

00:03:58.319 --> 00:03:58.329 
user experience as the x86 core in AMD's

00:03:58.329 --> 00:04:01.470 
user experience as the x86 core in AMD's
first<00:03:58.720> APU<00:03:59.459> Bobcat<00:04:00.459> will<00:04:00.669> deliver<00:04:01.000> ninety

00:04:01.470 --> 00:04:01.480 
first APU Bobcat will deliver ninety

00:04:01.480 --> 00:04:03.270 
first APU Bobcat will deliver ninety
percent<00:04:01.660> of<00:04:02.019> the<00:04:02.109> performance<00:04:02.620> of<00:04:02.739> AMD's

00:04:03.270 --> 00:04:03.280 
percent of the performance of AMD's

00:04:03.280 --> 00:04:06.300 
percent of the performance of AMD's
current<00:04:03.760> mainstream<00:04:04.389> CPU<00:04:05.079> in<00:04:05.290> half<00:04:05.739> the<00:04:05.950> area

00:04:06.300 --> 00:04:06.310 
current mainstream CPU in half the area

00:04:06.310 --> 00:04:09.059 
current mainstream CPU in half the area
and<00:04:06.519> at<00:04:06.790> a<00:04:06.819> fraction<00:04:06.910> of<00:04:07.450> the<00:04:07.569> power<00:04:07.919> the<00:04:08.919> new

00:04:09.059 --> 00:04:09.069 
and at a fraction of the power the new

00:04:09.069 --> 00:04:11.849 
and at a fraction of the power the new
bobcat<00:04:09.699> and<00:04:09.730> bulldozer<00:04:10.389> x86<00:04:11.199> core<00:04:11.440> designs

00:04:11.849 --> 00:04:11.859 
bobcat and bulldozer x86 core designs

00:04:11.859 --> 00:04:13.860 
bobcat and bulldozer x86 core designs
are<00:04:12.190> the<00:04:12.609> latest<00:04:12.879> in<00:04:13.180> a<00:04:13.269> long<00:04:13.540> line<00:04:13.810> of

00:04:13.860 --> 00:04:13.870 
are the latest in a long line of

00:04:13.870 --> 00:04:16.199 
are the latest in a long line of
innovations<00:04:14.530> from<00:04:14.680> AMD<00:04:15.099> the<00:04:15.489> low-power

00:04:16.199 --> 00:04:16.209 
innovations from AMD the low-power

00:04:16.209 --> 00:04:18.300 
innovations from AMD the low-power
bobcat<00:04:16.840> and<00:04:17.079> high-performance<00:04:17.859> bulldozer

00:04:18.300 --> 00:04:18.310 
bobcat and high-performance bulldozer

00:04:18.310 --> 00:04:21.719 
bobcat and high-performance bulldozer
cores<00:04:18.669> are<00:04:18.970> integral<00:04:19.750> to<00:04:19.930> upcoming<00:04:20.320> AMD<00:04:21.039> cpu

00:04:21.719 --> 00:04:21.729 
cores are integral to upcoming AMD cpu

00:04:21.729 --> 00:04:22.200 
cores are integral to upcoming AMD cpu
and

00:04:22.200 --> 00:04:22.210 
and

00:04:22.210 --> 00:04:24.749 
and
APU<00:04:22.900> products<00:04:23.350> that<00:04:23.770> are<00:04:23.889> designed<00:04:24.039> to<00:04:24.460> set

00:04:24.749 --> 00:04:24.759 
APU products that are designed to set

00:04:24.759 --> 00:04:26.189 
APU products that are designed to set
new<00:04:24.789> levels<00:04:25.300> of<00:04:25.389> performance<00:04:25.600> in<00:04:26.110> the

00:04:26.189 --> 00:04:26.199 
new levels of performance in the

00:04:26.199 --> 00:04:34.270 
new levels of performance in the
industry

00:04:34.270 --> 00:04:34.280 

00:04:34.280 --> 00:04:36.340 

you

