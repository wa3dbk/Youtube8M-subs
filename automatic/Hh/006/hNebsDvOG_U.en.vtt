WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:01.760 

so<00:00:00.299> so<00:00:00.480> far<00:00:00.690> in<00:00:00.810> our<00:00:00.930> project<00:00:01.410> for<00:00:01.709> our

00:00:01.760 --> 00:00:01.770 
so so far in our project for our

00:00:01.770 --> 00:00:03.470 
so so far in our project for our
embedded<00:00:02.010> system<00:00:02.520> we've<00:00:03.000> acquired<00:00:03.300> a

00:00:03.470 --> 00:00:03.480 
embedded system we've acquired a

00:00:03.480 --> 00:00:05.809 
embedded system we've acquired a
waveform<00:00:03.899> brought<00:00:04.560> it<00:00:04.710> onto<00:00:04.859> our<00:00:04.980> FPGA<00:00:05.520> and

00:00:05.809 --> 00:00:05.819 
waveform brought it onto our FPGA and

00:00:05.819 --> 00:00:07.519 
waveform brought it onto our FPGA and
then<00:00:06.180> streamed<00:00:06.660> it<00:00:06.810> up<00:00:06.930> through<00:00:07.170> a<00:00:07.200> DMA

00:00:07.519 --> 00:00:07.529 
then streamed it up through a DMA

00:00:07.529 --> 00:00:09.290 
then streamed it up through a DMA
channel<00:00:07.919> up<00:00:08.010> to<00:00:08.160> our<00:00:08.250> microprocessor

00:00:09.290 --> 00:00:09.300 
channel up to our microprocessor

00:00:09.300 --> 00:00:11.180 
channel up to our microprocessor
once<00:00:09.929> on<00:00:10.080> our<00:00:10.200> processor<00:00:10.650> we've<00:00:10.830> done<00:00:10.980> some

00:00:11.180 --> 00:00:11.190 
once on our processor we've done some

00:00:11.190 --> 00:00:13.850 
once on our processor we've done some
analysis<00:00:11.730> and<00:00:11.940> logging<00:00:12.630> of<00:00:12.750> the<00:00:13.320> information

00:00:13.850 --> 00:00:13.860 
analysis and logging of the information

00:00:13.860 --> 00:00:16.189 
analysis and logging of the information
now<00:00:14.639> we're<00:00:15.150> actually<00:00:15.269> going<00:00:15.540> to<00:00:15.660> string<00:00:16.080> the

00:00:16.189 --> 00:00:16.199 
now we're actually going to string the

00:00:16.199 --> 00:00:17.960 
now we're actually going to string the
information<00:00:16.680> across<00:00:16.949> the<00:00:17.310> ethernet<00:00:17.640> network

00:00:17.960 --> 00:00:17.970 
information across the ethernet network

00:00:17.970 --> 00:00:20.570 
information across the ethernet network
up<00:00:18.480> to<00:00:18.690> our<00:00:18.750> Windows<00:00:19.020> PC<00:00:19.529> in<00:00:20.130> order<00:00:20.340> to<00:00:20.460> have<00:00:20.550> a

00:00:20.570 --> 00:00:20.580 
up to our Windows PC in order to have a

00:00:20.580 --> 00:00:22.640 
up to our Windows PC in order to have a
user<00:00:20.820> interface<00:00:20.910> for<00:00:21.840> our<00:00:21.960> end<00:00:22.109> customer

00:00:22.640 --> 00:00:22.650 
user interface for our end customer

00:00:22.650 --> 00:00:25.839 
user interface for our end customer
let's<00:00:23.369> look<00:00:23.609> at<00:00:23.699> our<00:00:23.730> LabVIEW<00:00:24.060> up<00:00:24.180> project

00:00:25.839 --> 00:00:25.849 
let's look at our LabVIEW up project

00:00:25.849 --> 00:00:27.950 
let's look at our LabVIEW up project
we're<00:00:26.849> going<00:00:26.970> to<00:00:27.029> first<00:00:27.240> expand<00:00:27.689> out<00:00:27.840> our

00:00:27.950 --> 00:00:27.960 
we're going to first expand out our

00:00:27.960 --> 00:00:30.769 
we're going to first expand out our
embedded<00:00:28.230> target<00:00:29.269> that<00:00:30.269> will<00:00:30.359> click<00:00:30.599> on<00:00:30.630> our

00:00:30.769 --> 00:00:30.779 
embedded target that will click on our

00:00:30.779 --> 00:00:32.450 
embedded target that will click on our
microprocessor<00:00:31.619> application<00:00:32.189> that<00:00:32.309> we've

00:00:32.450 --> 00:00:32.460 
microprocessor application that we've

00:00:32.460 --> 00:00:33.920 
microprocessor application that we've
developed<00:00:32.969> and<00:00:33.180> then<00:00:33.360> bring<00:00:33.570> up<00:00:33.660> the<00:00:33.750> block

00:00:33.920 --> 00:00:33.930 
developed and then bring up the block

00:00:33.930 --> 00:00:37.130 
developed and then bring up the block
diagram<00:00:34.380> to<00:00:34.950> show<00:00:34.980> the<00:00:35.250> logic<00:00:35.670> just<00:00:36.140> to

00:00:37.130 --> 00:00:37.140 
diagram to show the logic just to

00:00:37.140 --> 00:00:39.560 
diagram to show the logic just to
quickly<00:00:37.380> review<00:00:37.829> we<00:00:38.070> have<00:00:38.160> two<00:00:38.370> loops<00:00:38.570> running

00:00:39.560 --> 00:00:39.570 
quickly review we have two loops running

00:00:39.570 --> 00:00:41.630 
quickly review we have two loops running
our<00:00:39.719> microprocessor<00:00:40.530> first<00:00:41.370> a<00:00:41.489> higher

00:00:41.630 --> 00:00:41.640 
our microprocessor first a higher

00:00:41.640 --> 00:00:43.069 
our microprocessor first a higher
priority<00:00:41.879> loop<00:00:42.210> that's<00:00:42.629> pulling<00:00:42.930> information

00:00:43.069 --> 00:00:43.079 
priority loop that's pulling information

00:00:43.079 --> 00:00:45.830 
priority loop that's pulling information
off<00:00:43.530> of<00:00:43.590> our<00:00:43.829> DMA<00:00:44.190> FIFO<00:00:44.610> and<00:00:44.820> feed<00:00:45.450> it<00:00:45.570> into<00:00:45.690> a

00:00:45.830 --> 00:00:45.840 
off of our DMA FIFO and feed it into a

00:00:45.840 --> 00:00:47.990 
off of our DMA FIFO and feed it into a
real-time<00:00:46.289> FIFO<00:00:46.770> to<00:00:47.309> communicate<00:00:47.820> to<00:00:47.969> our

00:00:47.990 --> 00:00:48.000 
real-time FIFO to communicate to our

00:00:48.000 --> 00:00:50.180 
real-time FIFO to communicate to our
lower<00:00:48.270> priority<00:00:48.750> loop<00:00:48.930> within<00:00:49.860> the<00:00:50.070> lower

00:00:50.180 --> 00:00:50.190 
lower priority loop within the lower

00:00:50.190 --> 00:00:52.130 
lower priority loop within the lower
priority<00:00:50.489> loop<00:00:50.850> we're<00:00:51.449> currently<00:00:51.629> doing<00:00:51.960> a

00:00:52.130 --> 00:00:52.140 
priority loop we're currently doing a

00:00:52.140 --> 00:00:53.900 
priority loop we're currently doing a
log<00:00:52.320> to<00:00:52.530> disk<00:00:52.770> and<00:00:53.010> now<00:00:53.460> we're<00:00:53.610> going<00:00:53.699> to<00:00:53.760> add

00:00:53.900 --> 00:00:53.910 
log to disk and now we're going to add

00:00:53.910 --> 00:00:57.889 
log to disk and now we're going to add
Network<00:00:54.420> communication<00:00:56.090> in<00:00:57.090> order<00:00:57.660> to<00:00:57.750> do

00:00:57.889 --> 00:00:57.899 
Network communication in order to do

00:00:57.899 --> 00:01:00.410 
Network communication in order to do
that<00:00:58.079> we're<00:00:58.649> going<00:00:58.739> to<00:00:58.829> use<00:00:58.980> an<00:00:59.129> ni<00:00:59.420> protocol

00:01:00.410 --> 00:01:00.420 
that we're going to use an ni protocol

00:01:00.420 --> 00:01:02.840 
that we're going to use an ni protocol
or<00:01:00.780> ni<00:01:00.989> developed<00:01:01.440> protocol<00:01:01.949> called<00:01:02.579> Network

00:01:02.840 --> 00:01:02.850 
or ni developed protocol called Network

00:01:02.850 --> 00:01:06.320 
or ni developed protocol called Network
streams<00:01:03.979> so<00:01:04.979> I'm<00:01:05.129> going<00:01:05.339> to<00:01:05.519> navigate<00:01:05.880> down<00:01:06.150> to

00:01:06.320 --> 00:01:06.330 
streams so I'm going to navigate down to

00:01:06.330 --> 00:01:08.780 
streams so I'm going to navigate down to
the<00:01:06.630> data<00:01:07.200> communication<00:01:07.830> pallet<00:01:08.189> network

00:01:08.780 --> 00:01:08.790 
the data communication pallet network

00:01:08.790 --> 00:01:10.609 
the data communication pallet network
streams<00:01:09.210> to<00:01:09.600> create<00:01:09.900> a<00:01:09.930> writer<00:01:10.200> for<00:01:10.500> our

00:01:10.609 --> 00:01:10.619 
streams to create a writer for our

00:01:10.619 --> 00:01:13.100 
streams to create a writer for our
stream<00:01:11.299> I'm<00:01:12.299> then<00:01:12.510> going<00:01:12.659> to<00:01:12.720> write<00:01:12.930> one

00:01:13.100 --> 00:01:13.110 
stream I'm then going to write one

00:01:13.110 --> 00:01:17.630 
stream I'm then going to write one
element<00:01:13.530> and<00:01:14.000> then<00:01:15.000> destroy<00:01:15.390> the<00:01:15.600> string<00:01:16.640> I'm

00:01:17.630 --> 00:01:17.640 
element and then destroy the string I'm

00:01:17.640 --> 00:01:20.780 
element and then destroy the string I'm
gonna<00:01:17.790> wire<00:01:18.000> the<00:01:18.030> blocks<00:01:18.360> together<00:01:19.759> with<00:01:20.759> a

00:01:20.780 --> 00:01:20.790 
gonna wire the blocks together with a

00:01:20.790 --> 00:01:26.480 
gonna wire the blocks together with a
reference<00:01:21.210> wire<00:01:23.000> and<00:01:24.680> then<00:01:25.680> designate<00:01:26.250> a

00:01:26.480 --> 00:01:26.490 
reference wire and then designate a

00:01:26.490 --> 00:01:28.969 
reference wire and then designate a
unique<00:01:27.030> name<00:01:27.240> for<00:01:27.270> this<00:01:27.840> stream<00:01:28.170> so<00:01:28.799> in<00:01:28.890> this

00:01:28.969 --> 00:01:28.979 
unique name for this stream so in this

00:01:28.979 --> 00:01:31.399 
unique name for this stream so in this
case<00:01:29.220> I'm<00:01:29.460> going<00:01:29.640> to<00:01:29.729> name<00:01:29.880> it<00:01:29.909> data<00:01:30.409> slash

00:01:31.399 --> 00:01:31.409 
case I'm going to name it data slash

00:01:31.409 --> 00:01:36.770 
case I'm going to name it data slash
sine<00:01:31.890> wave<00:01:34.579> next<00:01:35.579> I<00:01:35.640> need<00:01:35.700> to<00:01:35.939> assign<00:01:36.390> a<00:01:36.450> data

00:01:36.770 --> 00:01:36.780 
sine wave next I need to assign a data

00:01:36.780 --> 00:01:39.020 
sine wave next I need to assign a data
type<00:01:36.990> to<00:01:37.560> this<00:01:37.710> stream<00:01:38.070> it's<00:01:38.729> gonna<00:01:38.850> be<00:01:38.939> the

00:01:39.020 --> 00:01:39.030 
type to this stream it's gonna be the

00:01:39.030 --> 00:01:41.929 
type to this stream it's gonna be the
same<00:01:39.180> data<00:01:39.450> type<00:01:39.720> as<00:01:39.930> a<00:01:40.140> real-time<00:01:40.619> FIFO<00:01:41.130> so

00:01:41.929 --> 00:01:41.939 
same data type as a real-time FIFO so

00:01:41.939 --> 00:01:44.569 
same data type as a real-time FIFO so
I'll<00:01:42.030> copy<00:01:42.240> down<00:01:42.479> our<00:01:42.630> FIFO<00:01:43.049> or<00:01:43.979> down<00:01:44.220> the<00:01:44.399> data

00:01:44.569 --> 00:01:44.579 
I'll copy down our FIFO or down the data

00:01:44.579 --> 00:01:46.819 
I'll copy down our FIFO or down the data
type<00:01:44.820> from<00:01:44.970> our<00:01:45.149> FIFO<00:01:45.540> and<00:01:45.750> wire<00:01:46.470> it<00:01:46.500> up<00:01:46.649> to<00:01:46.740> the

00:01:46.819 --> 00:01:46.829 
type from our FIFO and wire it up to the

00:01:46.829 --> 00:01:50.210 
type from our FIFO and wire it up to the
data<00:01:46.950> type<00:01:47.189> terminal<00:01:48.140> next<00:01:49.140> in<00:01:49.860> order<00:01:50.100> to

00:01:50.210 --> 00:01:50.220 
data type terminal next in order to

00:01:50.220 --> 00:01:52.100 
data type terminal next in order to
continue<00:01:50.729> the<00:01:51.149> correct<00:01:51.479> propagation<00:01:52.079> of

00:01:52.100 --> 00:01:52.110 
continue the correct propagation of

00:01:52.110 --> 00:01:54.620 
continue the correct propagation of
errors<00:01:52.409> I'm<00:01:53.070> going<00:01:53.250> to<00:01:53.310> wire<00:01:53.490> in<00:01:53.790> this<00:01:54.240> API

00:01:54.620 --> 00:01:54.630 
errors I'm going to wire in this API

00:01:54.630 --> 00:02:01.000 
errors I'm going to wire in this API
appropriately

00:02:01.000 --> 00:02:01.010 

00:02:01.010 --> 00:02:02.440 

again<00:02:01.280> it's<00:02:01.430> very<00:02:01.490> important<00:02:02.030> in<00:02:02.120> headless

00:02:02.440 --> 00:02:02.450 
again it's very important in headless

00:02:02.450 --> 00:02:05.800 
again it's very important in headless
systems<00:02:02.870> to<00:02:03.260> wire<00:02:03.410> your<00:02:03.620> errors<00:02:04.090> correctly<00:02:05.090> in

00:02:05.800 --> 00:02:05.810 
systems to wire your errors correctly in

00:02:05.810 --> 00:02:09.850 
systems to wire your errors correctly in
order<00:02:06.110> to<00:02:06.350> establish<00:02:07.250> a<00:02:07.550> graceful<00:02:08.210> exit<00:02:08.860> for

00:02:09.850 --> 00:02:09.860 
order to establish a graceful exit for

00:02:09.860 --> 00:02:14.430 
order to establish a graceful exit for
your<00:02:10.430> application<00:02:11.000> if<00:02:11.090> an<00:02:11.210> error<00:02:11.390> does<00:02:11.750> occur

00:02:14.430 --> 00:02:14.440 

00:02:14.440 --> 00:02:17.440 

and<00:02:15.440> then<00:02:15.830> finally<00:02:16.160> I'm<00:02:16.220> gonna<00:02:16.370> wire<00:02:16.640> up<00:02:16.670> the

00:02:17.440 --> 00:02:17.450 
and then finally I'm gonna wire up the

00:02:17.450 --> 00:02:19.060 
and then finally I'm gonna wire up the
sine-wave<00:02:17.690> data<00:02:18.080> that<00:02:18.290> we're<00:02:18.410> gonna<00:02:18.530> write<00:02:18.800> to

00:02:19.060 --> 00:02:19.070 
sine-wave data that we're gonna write to

00:02:19.070 --> 00:02:22.810 
sine-wave data that we're gonna write to
our<00:02:19.220> stream<00:02:20.980> so<00:02:21.980> that<00:02:22.010> completes<00:02:22.550> the

00:02:22.810 --> 00:02:22.820 
our stream so that completes the

00:02:22.820 --> 00:02:24.940 
our stream so that completes the
application<00:02:23.750> on<00:02:23.810> our<00:02:23.840> embedded<00:02:24.110> system<00:02:24.620> now

00:02:24.940 --> 00:02:24.950 
application on our embedded system now

00:02:24.950 --> 00:02:26.680 
application on our embedded system now
let's<00:02:25.160> turn<00:02:25.340> our<00:02:25.460> focus<00:02:25.490> to<00:02:25.850> our<00:02:26.390> Windows

00:02:26.680 --> 00:02:26.690 
let's turn our focus to our Windows

00:02:26.690 --> 00:02:31.570 
let's turn our focus to our Windows
target<00:02:27.050> to<00:02:27.200> develop<00:02:27.530> the<00:02:27.650> logic<00:02:27.980> for<00:02:28.190> it<00:02:30.580> so

00:02:31.570 --> 00:02:31.580 
target to develop the logic for it so

00:02:31.580 --> 00:02:33.760 
target to develop the logic for it so
back<00:02:31.760> into<00:02:31.970> our<00:02:32.120> LabVIEW<00:02:32.420> project<00:02:32.930> we're

00:02:33.760 --> 00:02:33.770 
back into our LabVIEW project we're

00:02:33.770 --> 00:02:35.560 
back into our LabVIEW project we're
gonna<00:02:33.860> expand<00:02:34.310> out<00:02:34.460> the<00:02:34.730> my<00:02:34.880> computer<00:02:35.300> windows

00:02:35.560 --> 00:02:35.570 
gonna expand out the my computer windows

00:02:35.570 --> 00:02:37.630 
gonna expand out the my computer windows
target<00:02:36.130> double-click<00:02:37.130> on<00:02:37.340> our<00:02:37.520> application

00:02:37.630 --> 00:02:37.640 
target double-click on our application

00:02:37.640 --> 00:02:39.670 
target double-click on our application
develop<00:02:38.390> there<00:02:38.630> you'll<00:02:39.200> notice<00:02:39.350> I've<00:02:39.590> already

00:02:39.670 --> 00:02:39.680 
develop there you'll notice I've already

00:02:39.680 --> 00:02:41.800 
develop there you'll notice I've already
created<00:02:40.070> a<00:02:40.580> user<00:02:40.880> interface<00:02:41.330> for<00:02:41.690> the

00:02:41.800 --> 00:02:41.810 
created a user interface for the

00:02:41.810 --> 00:02:43.960 
created a user interface for the
application<00:02:42.410> as<00:02:42.590> well<00:02:43.190> as<00:02:43.250> drop<00:02:43.580> down<00:02:43.790> the

00:02:43.960 --> 00:02:43.970 
application as well as drop down the

00:02:43.970 --> 00:02:46.780 
application as well as drop down the
reader<00:02:44.180> API<00:02:44.600> for<00:02:44.690> our<00:02:45.020> stream<00:02:45.490> so<00:02:46.490> all<00:02:46.580> we<00:02:46.670> need

00:02:46.780 --> 00:02:46.790 
reader API for our stream so all we need

00:02:46.790 --> 00:02:49.810 
reader API for our stream so all we need
to<00:02:46.910> do<00:02:47.030> now<00:02:47.420> on<00:02:47.750> our<00:02:48.050> windows<00:02:48.890> host<00:02:49.160> is

00:02:49.810 --> 00:02:49.820 
to do now on our windows host is

00:02:49.820 --> 00:02:51.640 
to do now on our windows host is
designate<00:02:50.450> this<00:02:50.810> stream<00:02:51.140> that<00:02:51.320> we're<00:02:51.440> using

00:02:51.640 --> 00:02:51.650 
designate this stream that we're using

00:02:51.650 --> 00:02:56.370 
designate this stream that we're using
again<00:02:52.400> we<00:02:52.550> named<00:02:52.760> it<00:02:52.880> data<00:02:53.150> slash<00:02:53.750> sine<00:02:54.050> wave

00:02:56.370 --> 00:02:56.380 

00:02:56.380 --> 00:02:58.360 

so<00:02:57.380> now<00:02:57.470> let's<00:02:57.650> actually<00:02:57.740> deploy<00:02:58.190> the

00:02:58.360 --> 00:02:58.370 
so now let's actually deploy the

00:02:58.370 --> 00:03:00.310 
so now let's actually deploy the
application<00:02:58.970> again<00:02:59.600> we're<00:02:59.900> first<00:03:00.080> going<00:03:00.260> to

00:03:00.310 --> 00:03:00.320 
application again we're first going to

00:03:00.320 --> 00:03:02.500 
application again we're first going to
deploy<00:03:00.620> our<00:03:00.860> real-time<00:03:01.250> application<00:03:01.910> which

00:03:02.500 --> 00:03:02.510 
deploy our real-time application which

00:03:02.510 --> 00:03:05.110 
deploy our real-time application which
is<00:03:02.660> compiled<00:03:03.050> down<00:03:03.310> for<00:03:04.310> for<00:03:04.670> this<00:03:04.790> unique

00:03:05.110 --> 00:03:05.120 
is compiled down for for this unique

00:03:05.120 --> 00:03:07.240 
is compiled down for for this unique
target<00:03:05.570> and<00:03:05.720> then<00:03:06.080> deployed<00:03:06.470> to<00:03:06.800> the<00:03:06.830> target

00:03:07.240 --> 00:03:07.250 
target and then deployed to the target

00:03:07.250 --> 00:03:10.060 
target and then deployed to the target
once<00:03:07.430> it's<00:03:07.610> compiled<00:03:08.620> then<00:03:09.620> once<00:03:09.890> it's

00:03:10.060 --> 00:03:10.070 
once it's compiled then once it's

00:03:10.070 --> 00:03:11.470 
once it's compiled then once it's
compiled<00:03:10.490> and<00:03:10.760> downloaded<00:03:11.209> we're<00:03:11.360> actually

00:03:11.470 --> 00:03:11.480 
compiled and downloaded we're actually

00:03:11.480 --> 00:03:13.300 
compiled and downloaded we're actually
going<00:03:11.720> to<00:03:11.810> then<00:03:11.930> execute<00:03:12.500> our<00:03:12.920> Windows

00:03:13.300 --> 00:03:13.310 
going to then execute our Windows

00:03:13.310 --> 00:03:14.830 
going to then execute our Windows
application<00:03:13.910> to<00:03:14.060> complete<00:03:14.510> the

00:03:14.830 --> 00:03:14.840 
application to complete the

00:03:14.840 --> 00:03:16.660 
application to complete the
communication<00:03:15.440> between<00:03:15.890> our<00:03:16.400> micro

00:03:16.660 --> 00:03:16.670 
communication between our micro

00:03:16.670 --> 00:03:23.970 
communication between our micro
processor<00:03:17.209> and<00:03:17.420> our<00:03:17.870> Windows<00:03:18.140> computer

00:03:23.970 --> 00:03:23.980 

00:03:23.980 --> 00:03:26.470 

so<00:03:24.980> to<00:03:25.040> summarize<00:03:25.489> the<00:03:25.700> embedded<00:03:25.970> application

00:03:26.470 --> 00:03:26.480 
so to summarize the embedded application

00:03:26.480 --> 00:03:28.330 
so to summarize the embedded application
that<00:03:26.600> we've<00:03:26.720> created<00:03:27.020> let's<00:03:27.920> look<00:03:28.160> back<00:03:28.280> at

00:03:28.330 --> 00:03:28.340 
that we've created let's look back at

00:03:28.340 --> 00:03:30.520 
that we've created let's look back at
what<00:03:28.580> we've<00:03:28.700> done<00:03:28.910> we've<00:03:29.690> acquired<00:03:30.050> a<00:03:30.320> sine

00:03:30.520 --> 00:03:30.530 
what we've done we've acquired a sine

00:03:30.530 --> 00:03:33.160 
what we've done we've acquired a sine
wave<00:03:30.560> through<00:03:31.550> our<00:03:31.670> analog<00:03:31.970> input<00:03:32.330> up<00:03:32.900> through

00:03:33.160 --> 00:03:33.170 
wave through our analog input up through

00:03:33.170 --> 00:03:35.530 
wave through our analog input up through
our<00:03:33.200> FPGA<00:03:33.709> and<00:03:33.980> then<00:03:34.250> use<00:03:34.580> the<00:03:34.700> DMA<00:03:35.030> channel<00:03:35.390> to

00:03:35.530 --> 00:03:35.540 
our FPGA and then use the DMA channel to

00:03:35.540 --> 00:03:37.449 
our FPGA and then use the DMA channel to
stream<00:03:35.750> it<00:03:35.870> up<00:03:35.959> to<00:03:36.080> our<00:03:36.110> microprocessor<00:03:36.950> where

00:03:37.449 --> 00:03:37.459 
stream it up to our microprocessor where

00:03:37.459 --> 00:03:39.760 
stream it up to our microprocessor where
we<00:03:37.520> did<00:03:37.640> analysis<00:03:38.209> and<00:03:38.420> login<00:03:38.810> and<00:03:38.989> then<00:03:39.650> we

00:03:39.760 --> 00:03:39.770 
we did analysis and login and then we

00:03:39.770 --> 00:03:41.530 
we did analysis and login and then we
took<00:03:39.920> that<00:03:39.980> information<00:03:40.130> and<00:03:40.640> stream<00:03:41.390> it

00:03:41.530 --> 00:03:41.540 
took that information and stream it

00:03:41.540 --> 00:03:43.240 
took that information and stream it
through<00:03:41.780> our<00:03:41.959> Ethernet<00:03:42.440> network<00:03:42.739> up<00:03:43.010> to<00:03:43.220> a

00:03:43.240 --> 00:03:43.250 
through our Ethernet network up to a

00:03:43.250 --> 00:03:45.340 
through our Ethernet network up to a
Windows<00:03:43.550> PC<00:03:43.760> in<00:03:44.630> order<00:03:44.870> to<00:03:44.959> have<00:03:45.080> a<00:03:45.110> user

00:03:45.340 --> 00:03:45.350 
Windows PC in order to have a user

00:03:45.350 --> 00:03:48.010 
Windows PC in order to have a user
interface<00:03:45.440> for<00:03:46.070> our<00:03:46.430> end<00:03:46.580> customer<00:03:47.120> thank<00:03:47.930> you

00:03:48.010 --> 00:03:48.020 
interface for our end customer thank you

00:03:48.020 --> 00:03:50.620 
interface for our end customer thank you
for<00:03:48.230> watching

