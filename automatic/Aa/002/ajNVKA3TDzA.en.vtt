WEBVTT
Kind: captions
Language: en

00:00:00.829 --> 00:00:03.290 

welcome<00:00:01.829> to<00:00:02.010> the<00:00:02.129> pro<00:00:02.340> ute<00:00:02.610> in<00:00:02.820> computer

00:00:03.290 --> 00:00:03.300 
welcome to the pro ute in computer

00:00:03.300 --> 00:00:06.680 
welcome to the pro ute in computer
science<00:00:03.540> series<00:00:04.110> video<00:00:04.680> number<00:00:05.040> 5<00:00:05.310> on<00:00:05.690> binary

00:00:06.680 --> 00:00:06.690 
science series video number 5 on binary

00:00:06.690 --> 00:00:10.970 
science series video number 5 on binary
numbers<00:00:07.230> otherwise<00:00:08.220> known<00:00:08.519> as<00:00:08.550> base<00:00:08.940> to<00:00:09.980> the

00:00:10.970 --> 00:00:10.980 
numbers otherwise known as base to the

00:00:10.980 --> 00:00:13.759 
numbers otherwise known as base to the
base<00:00:11.190> 2<00:00:11.809> number<00:00:12.809> system<00:00:13.200> is<00:00:13.349> used<00:00:13.590> in

00:00:13.759 --> 00:00:13.769 
base 2 number system is used in

00:00:13.769 --> 00:00:18.160 
base 2 number system is used in
computers<00:00:14.309> instead<00:00:14.940> of<00:00:15.059> base<00:00:15.269> 10<00:00:16.039> because

00:00:18.160 --> 00:00:18.170 
computers instead of base 10 because

00:00:18.170 --> 00:00:21.290 
computers instead of base 10 because
electronic<00:00:19.170> components<00:00:19.980> that<00:00:20.670> represent

00:00:21.290 --> 00:00:21.300 
electronic components that represent

00:00:21.300 --> 00:00:24.470 
electronic components that represent
binary<00:00:21.660> are<00:00:22.490> better<00:00:23.490> than<00:00:23.910> those<00:00:24.210> that

00:00:24.470 --> 00:00:24.480 
binary are better than those that

00:00:24.480 --> 00:00:26.740 
binary are better than those that
represent<00:00:24.689> decimal<00:00:25.320> based<00:00:25.830> on<00:00:26.099> two<00:00:26.369> criteria

00:00:26.740 --> 00:00:26.750 
represent decimal based on two criteria

00:00:26.750 --> 00:00:29.359 
represent decimal based on two criteria
they're<00:00:27.750> easier<00:00:28.199> to<00:00:28.260> design<00:00:28.740> and<00:00:29.039> they're

00:00:29.359 --> 00:00:29.369 
they're easier to design and they're

00:00:29.369 --> 00:00:33.620 
they're easier to design and they're
cheap<00:00:29.640> to<00:00:29.670> build<00:00:31.250> base<00:00:32.250> 2<00:00:32.579> is<00:00:32.880> also<00:00:33.149> called

00:00:33.620 --> 00:00:33.630 
cheap to build base 2 is also called

00:00:33.630 --> 00:00:36.170 
cheap to build base 2 is also called
binary<00:00:33.960> and<00:00:34.380> it<00:00:34.890> works<00:00:35.130> very<00:00:35.430> similarly<00:00:36.000> to

00:00:36.170 --> 00:00:36.180 
binary and it works very similarly to

00:00:36.180 --> 00:00:40.150 
binary and it works very similarly to
base<00:00:36.570> 10<00:00:37.280> recall<00:00:38.280> that<00:00:38.550> base<00:00:38.879> 10<00:00:39.239> uses<00:00:39.870> the

00:00:40.150 --> 00:00:40.160 
base 10 recall that base 10 uses the

00:00:40.160 --> 00:00:43.760 
base 10 recall that base 10 uses the
digits<00:00:41.160> 0<00:00:41.340> to<00:00:41.730> 9<00:00:41.940> and<00:00:42.420> that<00:00:43.140> there<00:00:43.320> is<00:00:43.500> no

00:00:43.760 --> 00:00:43.770 
digits 0 to 9 and that there is no

00:00:43.770 --> 00:00:47.830 
digits 0 to 9 and that there is no
single<00:00:44.309> digit<00:00:44.730> that<00:00:44.879> represents<00:00:45.539> 10<00:00:46.670> then

00:00:47.830 --> 00:00:47.840 
single digit that represents 10 then

00:00:47.840 --> 00:00:50.869 
single digit that represents 10 then
base<00:00:48.840> 2<00:00:49.200> works<00:00:49.559> very<00:00:49.800> similarly<00:00:50.280> in<00:00:50.520> the<00:00:50.610> sense

00:00:50.869 --> 00:00:50.879 
base 2 works very similarly in the sense

00:00:50.879 --> 00:00:54.020 
base 2 works very similarly in the sense
that<00:00:50.969> it<00:00:51.390> uses<00:00:51.600> only<00:00:51.930> the<00:00:52.379> digits<00:00:52.980> 0<00:00:53.100> and<00:00:53.579> 1<00:00:53.820> and

00:00:54.020 --> 00:00:54.030 
that it uses only the digits 0 and 1 and

00:00:54.030 --> 00:00:56.840 
that it uses only the digits 0 and 1 and
there<00:00:54.149> is<00:00:54.300> no<00:00:54.539> single<00:00:55.050> digit<00:00:55.440> that<00:00:56.100> represents

00:00:56.840 --> 00:00:56.850 
there is no single digit that represents

00:00:56.850 --> 00:01:01.340 
there is no single digit that represents
2<00:00:57.180> in<00:00:57.480> base<00:00:57.899> 2<00:00:59.149> it's<00:01:00.149> also<00:01:00.449> similar<00:01:00.840> because

00:01:01.340 --> 00:01:01.350 
2 in base 2 it's also similar because

00:01:01.350 --> 00:01:04.880 
2 in base 2 it's also similar because
the<00:01:02.129> value<00:01:02.579> of<00:01:02.609> a<00:01:02.789> digit<00:01:03.030> depends<00:01:03.809> on<00:01:04.019> its

00:01:04.880 --> 00:01:04.890 
the value of a digit depends on its

00:01:04.890 --> 00:01:08.500 
the value of a digit depends on its
position<00:01:05.189> in<00:01:05.729> the<00:01:05.909> number<00:01:06.090> and<00:01:06.479> so<00:01:07.439> base<00:01:07.830> 2<00:01:08.189> is

00:01:08.500 --> 00:01:08.510 
position in the number and so base 2 is

00:01:08.510 --> 00:01:11.710 
position in the number and so base 2 is
positionally<00:01:09.510> weighted<00:01:09.990> just<00:01:10.590> like<00:01:10.890> base<00:01:11.250> 10

00:01:11.710 --> 00:01:11.720 
positionally weighted just like base 10

00:01:11.720 --> 00:01:15.230 
positionally weighted just like base 10
however<00:01:12.720> the<00:01:13.590> weights<00:01:13.890> are<00:01:14.220> powers<00:01:14.760> of<00:01:14.790> 2

00:01:15.230 --> 00:01:15.240 
however the weights are powers of 2

00:01:15.240 --> 00:01:17.929 
however the weights are powers of 2
instead<00:01:15.630> of<00:01:16.020> powers<00:01:16.590> of<00:01:16.799> 10<00:01:17.130> when<00:01:17.820> you're

00:01:17.929 --> 00:01:17.939 
instead of powers of 10 when you're

00:01:17.939 --> 00:01:22.280 
instead of powers of 10 when you're
using<00:01:18.119> base<00:01:18.570> to<00:01:20.210> base<00:01:21.210> two<00:01:21.570> numbers<00:01:21.990> are

00:01:22.280 --> 00:01:22.290 
using base to base two numbers are

00:01:22.290 --> 00:01:26.870 
using base to base two numbers are
composed<00:01:22.920> of<00:01:23.130> bits<00:01:23.810> bit<00:01:24.810> or<00:01:25.259> bi<00:01:25.740> t<00:01:25.920> means

00:01:26.870 --> 00:01:26.880 
composed of bits bit or bi t means

00:01:26.880 --> 00:01:31.249 
composed of bits bit or bi t means
binary<00:01:27.509> unit<00:01:27.990> or<00:01:28.159> binary<00:01:29.159> digit<00:01:29.700> the<00:01:30.659> bit<00:01:30.900> can

00:01:31.249 --> 00:01:31.259 
binary unit or binary digit the bit can

00:01:31.259 --> 00:01:34.819 
binary unit or binary digit the bit can
be<00:01:31.290> either<00:01:31.740> 0<00:01:32.430> or<00:01:32.700> 1<00:01:32.930> which<00:01:33.930> corresponds<00:01:34.770> to

00:01:34.819 --> 00:01:34.829 
be either 0 or 1 which corresponds to

00:01:34.829 --> 00:01:38.210 
be either 0 or 1 which corresponds to
either<00:01:35.250> a<00:01:35.460> high<00:01:35.759> or<00:01:36.090> a<00:01:36.180> low<00:01:36.600> voltage<00:01:36.840> in<00:01:37.290> some

00:01:38.210 --> 00:01:38.220 
either a high or a low voltage in some

00:01:38.220 --> 00:01:41.660 
either a high or a low voltage in some
electronic<00:01:38.909> component<00:01:39.450> we<00:01:40.350> can<00:01:40.530> also<00:01:40.680> view<00:01:41.189> 0

00:01:41.660 --> 00:01:41.670 
electronic component we can also view 0

00:01:41.670 --> 00:01:43.940 
electronic component we can also view 0
and<00:01:41.850> 1<00:01:42.060> as<00:01:42.240> corresponding<00:01:43.200> to<00:01:43.350> true<00:01:43.560> and<00:01:43.590> false

00:01:43.940 --> 00:01:43.950 
and 1 as corresponding to true and false

00:01:43.950 --> 00:01:48.770 
and 1 as corresponding to true and false
where<00:01:44.640> false<00:01:45.090> is<00:01:45.450> 0<00:01:45.750> and<00:01:46.079> true<00:01:46.500> is<00:01:46.710> 1<00:01:47.780> now

00:01:48.770 --> 00:01:48.780 
where false is 0 and true is 1 now

00:01:48.780 --> 00:01:53.499 
where false is 0 and true is 1 now
binary<00:01:49.470> logic<00:01:50.009> means<00:01:50.250> to<00:01:50.729> state<00:01:51.180> the<00:01:51.390> logic

00:01:53.499 --> 00:01:53.509 
binary logic means to state the logic

00:01:53.509 --> 00:01:56.660 
binary logic means to state the logic
notice<00:01:54.509> that<00:01:54.750> the<00:01:55.110> expansion<00:01:55.680> of<00:01:56.009> a<00:01:56.130> base<00:01:56.340> 2

00:01:56.660 --> 00:01:56.670 
notice that the expansion of a base 2

00:01:56.670 --> 00:01:59.450 
notice that the expansion of a base 2
number<00:01:56.700> is<00:01:57.560> just<00:01:58.560> like<00:01:58.829> the<00:01:59.070> extinct

00:01:59.450 --> 00:01:59.460 
number is just like the extinct

00:01:59.460 --> 00:02:02.630 
number is just like the extinct
expansion<00:02:00.210> of<00:02:00.299> a<00:02:00.390> base<00:02:00.600> 10<00:02:00.930> number<00:02:01.640> except

00:02:02.630 --> 00:02:02.640 
expansion of a base 10 number except

00:02:02.640 --> 00:02:05.539 
expansion of a base 10 number except
that<00:02:02.909> the<00:02:03.180> weights<00:02:03.450> are<00:02:03.750> powers<00:02:04.320> of<00:02:04.560> 2<00:02:04.829> instead

00:02:05.539 --> 00:02:05.549 
that the weights are powers of 2 instead

00:02:05.549 --> 00:02:08.449 
that the weights are powers of 2 instead
of<00:02:05.610> powers<00:02:06.030> of<00:02:06.210> 10<00:02:06.450> now<00:02:07.200> in<00:02:07.439> this<00:02:07.770> diagram<00:02:08.069> I

00:02:08.449 --> 00:02:08.459 
of powers of 10 now in this diagram I

00:02:08.459 --> 00:02:11.780 
of powers of 10 now in this diagram I
haven't<00:02:08.819> shown<00:02:09.209> all<00:02:09.539> of<00:02:10.440> the<00:02:10.590> arrows<00:02:10.979> in

00:02:11.780 --> 00:02:11.790 
haven't shown all of the arrows in

00:02:11.790 --> 00:02:14.509 
haven't shown all of the arrows in
the<00:02:12.030> base<00:02:12.480> two<00:02:12.840> example<00:02:13.440> because<00:02:13.769> the<00:02:14.010> diagram

00:02:14.509 --> 00:02:14.519 
the base two example because the diagram

00:02:14.519 --> 00:02:19.369 
the base two example because the diagram
would<00:02:14.760> get<00:02:15.000> quite<00:02:15.180> cluttered<00:02:17.690> so<00:02:18.690> I'm<00:02:19.019> going

00:02:19.369 --> 00:02:19.379 
would get quite cluttered so I'm going

00:02:19.379 --> 00:02:21.740 
would get quite cluttered so I'm going
to<00:02:19.500> ignore<00:02:19.680> the<00:02:20.099> zero<00:02:20.340> terms<00:02:20.790> because<00:02:21.420> zero

00:02:21.740 --> 00:02:21.750 
to ignore the zero terms because zero

00:02:21.750 --> 00:02:24.740 
to ignore the zero terms because zero
times<00:02:21.870> anything<00:02:23.030> including<00:02:24.030> any<00:02:24.239> power<00:02:24.540> of

00:02:24.740 --> 00:02:24.750 
times anything including any power of

00:02:24.750 --> 00:02:27.800 
times anything including any power of
two<00:02:24.989> is<00:02:25.230> always<00:02:26.099> going<00:02:26.310> to<00:02:26.400> be<00:02:26.459> zero<00:02:26.790> so<00:02:27.060> just

00:02:27.800 --> 00:02:27.810 
two is always going to be zero so just

00:02:27.810 --> 00:02:31.369 
two is always going to be zero so just
looking<00:02:28.140> at<00:02:28.290> the<00:02:28.530> terms<00:02:29.190> that<00:02:29.370> are<00:02:29.580> 1<00:02:30.379> and

00:02:31.369 --> 00:02:31.379 
looking at the terms that are 1 and

00:02:31.379 --> 00:02:34.009 
looking at the terms that are 1 and
expanding<00:02:32.129> those<00:02:32.370> we<00:02:32.670> have<00:02:32.849> 1<00:02:33.180> times<00:02:33.540> 2<00:02:33.870> to<00:02:33.989> the

00:02:34.009 --> 00:02:34.019 
expanding those we have 1 times 2 to the

00:02:34.019 --> 00:02:37.880 
expanding those we have 1 times 2 to the
power<00:02:34.230> 11<00:02:35.150> plus<00:02:36.150> 1<00:02:36.599> times<00:02:36.900> 2<00:02:37.140> to<00:02:37.200> the<00:02:37.260> power<00:02:37.470> 5

00:02:37.880 --> 00:02:37.890 
power 11 plus 1 times 2 to the power 5

00:02:37.890 --> 00:02:41.750 
power 11 plus 1 times 2 to the power 5
plus<00:02:38.700> 1<00:02:38.819> times<00:02:39.420> 2<00:02:39.629> to<00:02:39.720> the<00:02:39.750> power<00:02:39.959> of<00:02:40.200> 3<00:02:40.500> plus<00:02:41.430> 1

00:02:41.750 --> 00:02:41.760 
plus 1 times 2 to the power of 3 plus 1

00:02:41.760 --> 00:02:45.400 
plus 1 times 2 to the power of 3 plus 1
times<00:02:42.090> 2<00:02:42.360> to<00:02:42.480> the<00:02:42.510> power<00:02:42.720> of<00:02:42.959> 2<00:02:43.200> or<00:02:43.500> 2<00:02:43.769> squared

00:02:45.400 --> 00:02:45.410 
times 2 to the power of 2 or 2 squared

00:02:45.410 --> 00:02:49.100 
times 2 to the power of 2 or 2 squared
so<00:02:46.410> I<00:02:46.440> take<00:02:46.739> each<00:02:47.040> of<00:02:47.459> those<00:02:47.849> powers<00:02:48.629> of<00:02:48.870> 2

00:02:49.100 --> 00:02:49.110 
so I take each of those powers of 2

00:02:49.110 --> 00:02:55.210 
so I take each of those powers of 2
where<00:02:49.769> there<00:02:50.069> is<00:02:50.489> a<00:02:50.840> 1<00:02:51.840> for<00:02:52.379> the<00:02:52.470> digit<00:02:52.829> and<00:02:53.720> I

00:02:55.210 --> 00:02:55.220 
where there is a 1 for the digit and I

00:02:55.220 --> 00:02:59.030 
where there is a 1 for the digit and I
compute<00:02:56.480> that<00:02:57.480> exponent<00:02:58.049> so<00:02:58.440> 2<00:02:58.530> to<00:02:58.769> the<00:02:58.859> power

00:02:59.030 --> 00:02:59.040 
compute that exponent so 2 to the power

00:02:59.040 --> 00:03:03.140 
compute that exponent so 2 to the power
a<00:02:59.190> lot<00:02:59.519> of<00:02:59.700> xi<00:03:00.120> is<00:03:00.299> equal<00:03:00.359> to<00:03:00.950> 2048<00:03:01.970> 2<00:03:02.970> to<00:03:03.060> the

00:03:03.140 --> 00:03:03.150 
a lot of xi is equal to 2048 2 to the

00:03:03.150 --> 00:03:06.979 
a lot of xi is equal to 2048 2 to the
power<00:03:03.299> 5<00:03:03.720> is<00:03:04.079> equal<00:03:04.379> to<00:03:04.470> 32<00:03:05.030> 2<00:03:06.030> cubed<00:03:06.480> is<00:03:06.750> equal

00:03:06.979 --> 00:03:06.989 
power 5 is equal to 32 2 cubed is equal

00:03:06.989 --> 00:03:09.949 
power 5 is equal to 32 2 cubed is equal
to<00:03:07.079> 8<00:03:07.260> and<00:03:07.590> 2<00:03:07.769> squared<00:03:08.250> is<00:03:08.400> equal<00:03:08.609> to<00:03:08.670> 4<00:03:09.000> when

00:03:09.949 --> 00:03:09.959 
to 8 and 2 squared is equal to 4 when

00:03:09.959 --> 00:03:13.759 
to 8 and 2 squared is equal to 4 when
you<00:03:10.049> add<00:03:10.200> those<00:03:10.560> up<00:03:11.209> 2048<00:03:12.209> plus<00:03:12.660> 32<00:03:13.079> plus<00:03:13.379> 8

00:03:13.759 --> 00:03:13.769 
you add those up 2048 plus 32 plus 8

00:03:13.769 --> 00:03:22.000 
you add those up 2048 plus 32 plus 8
plus<00:03:14.099> 4<00:03:14.640> you<00:03:15.269> get<00:03:15.480> 20<00:03:16.019> 92<00:03:16.590> or<00:03:17.359> 2092

00:03:22.000 --> 00:03:22.010 

00:03:22.010 --> 00:03:24.949 

again<00:03:23.010> you<00:03:23.370> just<00:03:23.519> pull<00:03:23.849> out<00:03:23.880> the<00:03:24.000> exponents

00:03:24.949 --> 00:03:24.959 
again you just pull out the exponents

00:03:24.959 --> 00:03:27.530 
again you just pull out the exponents
where<00:03:25.319> the<00:03:25.470> digit<00:03:25.859> is<00:03:25.980> equal<00:03:26.340> to<00:03:26.489> 1<00:03:26.790> or<00:03:27.150> the<00:03:27.299> bit

00:03:27.530 --> 00:03:27.540 
where the digit is equal to 1 or the bit

00:03:27.540 --> 00:03:31.580 
where the digit is equal to 1 or the bit
is<00:03:27.750> equal<00:03:27.780> to<00:03:28.139> 1<00:03:28.549> you<00:03:29.549> compute<00:03:30.120> the<00:03:30.590> exponent

00:03:31.580 --> 00:03:31.590 
is equal to 1 you compute the exponent

00:03:31.590 --> 00:03:33.680 
is equal to 1 you compute the exponent
and<00:03:31.709> then<00:03:32.250> you<00:03:32.400> add<00:03:32.609> them<00:03:32.819> all<00:03:33.000> together<00:03:33.180> and

00:03:33.680 --> 00:03:33.690 
and then you add them all together and

00:03:33.690 --> 00:03:36.349 
and then you add them all together and
that<00:03:33.750> gives<00:03:34.739> you<00:03:34.980> the<00:03:35.130> base<00:03:35.340> 10<00:03:35.669> version<00:03:36.239> of

00:03:36.349 --> 00:03:36.359 
that gives you the base 10 version of

00:03:36.359 --> 00:03:43.670 
that gives you the base 10 version of
that<00:03:36.480> number<00:03:38.480> so<00:03:40.099> 2092<00:03:41.099> base<00:03:41.819> 10<00:03:42.269> is<00:03:42.569> equal<00:03:43.290> to

00:03:43.670 --> 00:03:43.680 
that number so 2092 base 10 is equal to

00:03:43.680 --> 00:03:47.620 
that number so 2092 base 10 is equal to
that<00:03:43.889> long<00:03:44.280> string<00:03:44.970> of<00:03:45.120> dydt<00:03:45.329> of<00:03:45.569> bits<00:03:45.930> base<00:03:46.799> 2

00:03:47.620 --> 00:03:47.630 
that long string of dydt of bits base 2

00:03:47.630 --> 00:03:51.199 
that long string of dydt of bits base 2
notice<00:03:48.630> that<00:03:48.750> I<00:03:48.810> put<00:03:48.870> spaces<00:03:49.739> between<00:03:50.209> blocks

00:03:51.199 --> 00:03:51.209 
notice that I put spaces between blocks

00:03:51.209 --> 00:03:55.629 
notice that I put spaces between blocks
of<00:03:51.510> 4<00:03:51.780> bits<00:03:52.049> for<00:03:52.680> easy<00:03:52.919> reading<00:03:53.629> now<00:03:54.629> binary<00:03:55.319> is

00:03:55.629 --> 00:03:55.639 
of 4 bits for easy reading now binary is

00:03:55.639 --> 00:03:58.280 
of 4 bits for easy reading now binary is
very<00:03:56.639> well<00:03:56.879> suited<00:03:57.120> to<00:03:57.329> the<00:03:57.540> computer<00:03:58.109> but

00:03:58.280 --> 00:03:58.290 
very well suited to the computer but

00:03:58.290 --> 00:04:00.470 
very well suited to the computer but
it's<00:03:58.470> not<00:03:58.769> so<00:03:59.040> well<00:03:59.250> suited<00:03:59.730> for<00:03:59.760> the<00:04:00.030> for

00:04:00.470 --> 00:04:00.480 
it's not so well suited for the for

00:04:00.480 --> 00:04:01.869 
it's not so well suited for the for
human<00:04:00.750> use

00:04:01.869 --> 00:04:01.879 
human use

00:04:01.879 --> 00:04:05.390 
human use
notice<00:04:02.879> that<00:04:03.120> we<00:04:03.660> have<00:04:03.690> put<00:04:04.109> the<00:04:04.560> base<00:04:04.859> in<00:04:05.190> the

00:04:05.390 --> 00:04:05.400 
notice that we have put the base in the

00:04:05.400 --> 00:04:07.309 
notice that we have put the base in the
lower<00:04:05.609> right<00:04:05.940> hand<00:04:05.970> corner<00:04:06.359> of<00:04:06.840> the<00:04:06.989> number

00:04:07.309 --> 00:04:07.319 
lower right hand corner of the number

00:04:07.319 --> 00:04:10.909 
lower right hand corner of the number
and<00:04:08.129> that<00:04:08.849> the<00:04:08.910> base<00:04:09.269> itself<00:04:09.780> is<00:04:10.079> always

00:04:10.909 --> 00:04:10.919 
and that the base itself is always

00:04:10.919 --> 00:04:17.060 
and that the base itself is always
written<00:04:11.310> in<00:04:11.609> base<00:04:11.940> 10<00:04:12.359> by<00:04:12.750> convention<00:04:16.070> bits

00:04:17.060 --> 00:04:17.070 
written in base 10 by convention bits

00:04:17.070 --> 00:04:19.759 
written in base 10 by convention bits
are<00:04:17.250> often<00:04:17.669> grouped<00:04:17.970> together<00:04:18.560> the<00:04:19.560> most

00:04:19.759 --> 00:04:19.769 
are often grouped together the most

00:04:19.769 --> 00:04:22.490 
are often grouped together the most
common<00:04:20.250> grouping<00:04:20.700> is<00:04:20.880> 8<00:04:21.269> bits<00:04:21.690> which<00:04:22.049> makes<00:04:22.349> a

00:04:22.490 --> 00:04:22.500 
common grouping is 8 bits which makes a

00:04:22.500 --> 00:04:23.380 
common grouping is 8 bits which makes a
byte

00:04:23.380 --> 00:04:23.390 
byte

00:04:23.390 --> 00:04:27.010 
byte
four<00:04:24.390> bits<00:04:24.660> make<00:04:25.110> a<00:04:25.140> nibble<00:04:25.500> or<00:04:25.890> half<00:04:26.160> a<00:04:26.340> bite

00:04:27.010 --> 00:04:27.020 
four bits make a nibble or half a bite

00:04:27.020 --> 00:04:30.440 
four bits make a nibble or half a bite
sixteen<00:04:28.020> bits<00:04:28.350> make<00:04:28.800> a<00:04:28.830> half<00:04:29.130> word<00:04:29.490> or<00:04:29.850> two

00:04:30.440 --> 00:04:30.450 
sixteen bits make a half word or two

00:04:30.450 --> 00:04:36.560 
sixteen bits make a half word or two
bites<00:04:31.310> 32<00:04:32.310> bytes<00:04:32.640> 32<00:04:33.570> bits<00:04:33.840> or<00:04:34.280> 4<00:04:35.280> bytes<00:04:35.580> makes

00:04:36.560 --> 00:04:36.570 
bites 32 bytes 32 bits or 4 bytes makes

00:04:36.570 --> 00:04:40.270 
bites 32 bytes 32 bits or 4 bytes makes
a<00:04:36.720> full<00:04:37.110> word<00:04:37.700> 64<00:04:38.700> bits<00:04:38.970> is<00:04:39.240> a<00:04:39.270> double<00:04:39.690> word<00:04:39.840> and

00:04:40.270 --> 00:04:40.280 
a full word 64 bits is a double word and

00:04:40.280 --> 00:04:47.420 
a full word 64 bits is a double word and
128<00:04:41.280> bits<00:04:41.640> is<00:04:41.910> a<00:04:42.540> quat<00:04:43.020> word<00:04:45.200> now<00:04:46.200> a<00:04:46.470> bit<00:04:46.890> can<00:04:47.400> be

00:04:47.420 --> 00:04:47.430 
128 bits is a quat word now a bit can be

00:04:47.430 --> 00:04:51.640 
128 bits is a quat word now a bit can be
either<00:04:47.910> a<00:04:48.390> 0<00:04:48.870> or<00:04:48.960> a<00:04:49.260> 1<00:04:49.530> and<00:04:50.130> nothing<00:04:50.850> else<00:04:51.030> a

00:04:51.640 --> 00:04:51.650 
either a 0 or a 1 and nothing else a

00:04:51.650 --> 00:04:54.860 
either a 0 or a 1 and nothing else a
single<00:04:52.650> bit<00:04:52.830> therefore<00:04:53.340> has<00:04:53.850> two<00:04:54.240> possible

00:04:54.860 --> 00:04:54.870 
single bit therefore has two possible

00:04:54.870 --> 00:05:00.890 
single bit therefore has two possible
states<00:04:55.290> or<00:04:55.700> values<00:04:59.150> the<00:05:00.150> number<00:05:00.330> of<00:05:00.630> bits

00:05:00.890 --> 00:05:00.900 
states or values the number of bits

00:05:00.900 --> 00:05:03.620 
states or values the number of bits
determines<00:05:01.650> the<00:05:01.890> number<00:05:02.070> of<00:05:02.250> distinct<00:05:03.150> states

00:05:03.620 --> 00:05:03.630 
determines the number of distinct states

00:05:03.630 --> 00:05:08.300 
determines the number of distinct states
that<00:05:04.530> those<00:05:04.830> bits<00:05:05.430> can<00:05:05.970> represent<00:05:06.470> so<00:05:07.470> 2<00:05:07.980> bits

00:05:08.300 --> 00:05:08.310 
that those bits can represent so 2 bits

00:05:08.310 --> 00:05:12.590 
that those bits can represent so 2 bits
can<00:05:08.970> represent<00:05:09.180> four<00:05:09.810> distinct<00:05:10.380> states<00:05:10.680> 0<00:05:10.919> 0<00:05:11.600> 0

00:05:12.590 --> 00:05:12.600 
can represent four distinct states 0 0 0

00:05:12.600 --> 00:05:17.900 
can represent four distinct states 0 0 0
1<00:05:12.900> 1<00:05:13.230> 0<00:05:13.830> and<00:05:14.460> 1<00:05:14.490> 1<00:05:14.990> 3<00:05:15.990> bits<00:05:16.350> can<00:05:17.220> represent<00:05:17.430> 8

00:05:17.900 --> 00:05:17.910 
1 1 0 and 1 1 3 bits can represent 8

00:05:17.910 --> 00:05:21.500 
1 1 0 and 1 1 3 bits can represent 8
distinct<00:05:18.660> States<00:05:18.990> as<00:05:19.260> listed<00:05:19.830> here<00:05:20.160> and<00:05:20.510> n

00:05:21.500 --> 00:05:21.510 
distinct States as listed here and n

00:05:21.510 --> 00:05:24.950 
distinct States as listed here and n
bits<00:05:21.810> can<00:05:22.470> represent<00:05:22.710> 2<00:05:23.400> to<00:05:23.580> the<00:05:23.669> n<00:05:23.960> distinct

00:05:24.950 --> 00:05:24.960 
bits can represent 2 to the n distinct

00:05:24.960 --> 00:05:30.830 
bits can represent 2 to the n distinct
States<00:05:27.710> finally<00:05:28.820> it's<00:05:29.820> very<00:05:30.210> simple<00:05:30.660> to<00:05:30.810> add

00:05:30.830 --> 00:05:30.840 
States finally it's very simple to add

00:05:30.840 --> 00:05:35.990 
States finally it's very simple to add
bits<00:05:31.320> 0<00:05:32.250> plus<00:05:32.610> 0<00:05:32.880> is<00:05:33.360> equal<00:05:33.690> to<00:05:33.750> 0<00:05:34.050> 1<00:05:34.979> plus<00:05:35.400> 0<00:05:35.700> is

00:05:35.990 --> 00:05:36.000 
bits 0 plus 0 is equal to 0 1 plus 0 is

00:05:36.000 --> 00:05:40.240 
bits 0 plus 0 is equal to 0 1 plus 0 is
equal<00:05:36.419> to<00:05:36.450> 1<00:05:36.570> and<00:05:37.110> 0<00:05:37.160> plus<00:05:38.160> 1<00:05:38.520> is<00:05:38.790> equal<00:05:38.880> to<00:05:39.450> 1

00:05:40.240 --> 00:05:40.250 
equal to 1 and 0 plus 1 is equal to 1

00:05:40.250 --> 00:05:45.680 
equal to 1 and 0 plus 1 is equal to 1
but<00:05:41.250> 1<00:05:41.640> plus<00:05:42.000> 1<00:05:42.270> is<00:05:42.660> equal<00:05:43.020> to<00:05:43.410> 1<00:05:43.770> 0<00:05:44.450> notice<00:05:45.450> that

00:05:45.680 --> 00:05:45.690 
but 1 plus 1 is equal to 1 0 notice that

00:05:45.690 --> 00:05:48.680 
but 1 plus 1 is equal to 1 0 notice that
1<00:05:46.050> in<00:05:46.229> 1<00:05:46.500> make<00:05:46.770> 2<00:05:47.040> but<00:05:47.370> there's<00:05:47.550> no<00:05:47.910> way<00:05:48.660> to

00:05:48.680 --> 00:05:48.690 
1 in 1 make 2 but there's no way to

00:05:48.690 --> 00:05:52.060 
1 in 1 make 2 but there's no way to
write<00:05:49.229> 2<00:05:49.560> with<00:05:49.830> a<00:05:49.860> single<00:05:50.460> digit<00:05:50.880> in<00:05:51.030> base<00:05:51.390> 2

00:05:52.060 --> 00:05:52.070 
write 2 with a single digit in base 2

00:05:52.070 --> 00:05:57.860 
write 2 with a single digit in base 2
instead<00:05:53.070> 2<00:05:53.880> becomes<00:05:54.390> 0<00:05:55.110> carry<00:05:55.860> 1<00:05:56.870> this

00:05:57.860 --> 00:05:57.870 
instead 2 becomes 0 carry 1 this

00:05:57.870 --> 00:06:00.740 
instead 2 becomes 0 carry 1 this
concludes<00:05:58.440> our<00:05:58.740> introduction<00:05:59.250> to<00:05:59.520> the<00:05:59.820> binary

00:06:00.740 --> 00:06:00.750 
concludes our introduction to the binary

00:06:00.750 --> 00:06:04.310 
concludes our introduction to the binary
number<00:06:01.169> system<00:06:01.200> thank<00:06:02.190> you

