WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.170
 this is our well-known picture of the cpu 

00:00:03.049 --> 00:00:08.760
 to the left are the registers 

00:00:06.170 --> 00:00:12.139
 let's take a single register 

00:00:08.760 --> 00:00:15.360
 and take a closer look 

00:00:12.139 --> 00:00:17.039
 that is such a single register and 

00:00:15.360 --> 00:00:19.050
 we already know that a register 

00:00:17.039 --> 00:00:19.949
 this is served by a group of up to 

00:00:19.050 --> 00:00:21.779
 to save 

00:00:19.949 --> 00:00:24.869
 and here we have a group of 

00:00:21.779 --> 00:00:26.330
 Eight until the width of this register is 

00:00:24.869 --> 00:00:29.760
 So 8 

00:00:26.330 --> 00:00:31.920
 there must be lines at the beginning and there 

00:00:29.760 --> 00:00:33.930
 we have to have a wide eight of it 

00:00:31.920 --> 00:00:36.840
 Also a total of eight input lines 

00:00:33.930 --> 00:00:40.620
 be just like the exit line 

00:00:36.840 --> 00:00:42.989
 there are eight of them every single picture 

00:00:40.620 --> 00:00:48.870
 what is stored in our register 

00:00:42.989 --> 00:00:51.570
 is to be seen as a single entity and 

00:00:48.870 --> 00:00:53.910
 for each of these individual units there 

00:00:51.570 --> 00:01:00.510
 It also has a separate input line 

00:00:53.910 --> 00:01:02.539
 and a separate output line of the 

00:01:00.510 --> 00:01:05.489
 There are two more 

00:01:02.539 --> 00:01:07.400
 At the beginning of the lines a certain 

00:01:05.489 --> 00:01:09.810
 fulfill functionality 

00:01:07.400 --> 00:01:13.770
 We'll take a closer look 

00:01:09.810 --> 00:01:16.560
 and the one input line is 

00:01:13.770 --> 00:01:19.320
 so dragged right through and each 

00:01:16.560 --> 00:01:22.979
 single image receives the information the 

00:01:19.320 --> 00:01:25.110
 The whole thing comes over this one line 

00:01:22.979 --> 00:01:27.299
 Let's make it a bit colorful with it 

00:01:25.110 --> 00:01:29.670
 right now do not get confused and 

00:01:27.299 --> 00:01:32.009
 the second line will be like that too 

00:01:29.670 --> 00:01:36.060
 Having broken through that every single picture 

00:01:32.009 --> 00:01:38.869
 An input of this introduction also has 

00:01:36.060 --> 00:01:41.790
 here comes a little color into the game 

00:01:38.869 --> 00:01:43.530
 we call the whole and our orange 

00:01:41.790 --> 00:01:46.680
 line is the so-called select 

00:01:43.530 --> 00:01:49.710
 the green line is the wide one 

00:01:46.680 --> 00:01:54.710
 line up we have the input 

00:01:49.710 --> 00:01:54.710
 lines and bottom output lines 

00:01:54.730 --> 00:02:00.310
 how does such a register work now 

00:01:57.910 --> 00:02:02.230
 for this you have to be on specific line first 

00:02:00.310 --> 00:02:04.330
 once certain values ​​apply to it 

00:02:02.230 --> 00:02:08.350
 then look at the way we work 

00:02:04.330 --> 00:02:12.130
 Possible values ​​on ours 

00:02:08.350 --> 00:02:15.130
 lines are always 0 and 1 respectively 

00:02:12.130 --> 00:02:17.770
 that which is represented as bitter 

00:02:15.130 --> 00:02:20.800
 can and we have the first one here 

00:02:17.770 --> 00:02:24.040
 situation select has the value zero and 

00:02:20.800 --> 00:02:26.170
 reid also has the value zero and in 

00:02:24.040 --> 00:02:29.070
 This situation does not happen 

00:02:26.170 --> 00:02:32.200
 select says if this register 

00:02:29.070 --> 00:02:34.210
 is selected and zero says no 

00:02:32.200 --> 00:02:36.430
 this register is not selected and 

00:02:34.210 --> 00:02:39.280
 nothing happens whichever 

00:02:36.430 --> 00:02:43.140
 worth the riding line has whether 0 or 1 

00:02:39.280 --> 00:02:46.390
 Nothing happens in this situation 

00:02:43.140 --> 00:02:49.150
 select switches the value to 1 then 

00:02:46.390 --> 00:02:51.850
 this means that the output lines 

00:02:49.150 --> 00:02:54.610
 be switched through that is the 

00:02:51.850 --> 00:02:57.310
 currently in the individual cells 

00:02:54.610 --> 00:02:59.050
 saved biz can use the register 

00:02:57.310 --> 00:03:02.220
 leave and elsewhere 

00:02:59.050 --> 00:03:02.220
 be used 

00:03:03.060 --> 00:03:08.350
 the next one was free 

00:03:05.950 --> 00:03:10.930
 one in this case will be one 

00:03:08.350 --> 00:03:13.090
 input lines switched through and that 

00:03:10.930 --> 00:03:15.459
 it in turn means that 

00:03:13.090 --> 00:03:17.739
 the values ​​are transmitted via the input line 

00:03:15.459 --> 00:03:20.440
 get into the individual 

00:03:17.739 --> 00:03:23.700
 image memories are stored and 

00:03:20.440 --> 00:03:26.020
 stored there permanently 

00:03:23.700 --> 00:03:28.570
 we already said that each one 

00:03:26.020 --> 00:03:31.750
 single of the eight stored here 

00:03:28.570 --> 00:03:33.940
 picture can be seen as a single entity 

00:03:31.750 --> 00:03:36.730
 That's why we can be such a single one 

00:03:33.940 --> 00:03:39.670
 pick out units and continue 

00:03:36.730 --> 00:03:43.290
 zoom in so look how is that 

00:03:39.670 --> 00:03:43.290
 internally built up again 

00:03:43.840 --> 00:03:48.310
 Here we see the sound of a picture 

00:03:46.599 --> 00:03:50.980
 possible construction of a 

00:03:48.310 --> 00:03:52.510
 memory cell exactly one single 

00:03:50.980 --> 00:03:55.660
 can save bit 

00:03:52.510 --> 00:03:59.019
 the main component is a son of rs 

00:03:55.660 --> 00:04:01.900
 flip flop and three more and gate 

00:03:59.019 --> 00:04:03.430
 and the wiring inside this 

00:04:01.900 --> 00:04:06.310
 Sound picture then gives the 

00:04:03.430 --> 00:04:10.440
 possibility that it is a single bit 

00:04:06.310 --> 00:04:10.440
 can be stored permanently 

