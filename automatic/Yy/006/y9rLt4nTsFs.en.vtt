WEBVTT
Kind: captions
Language: en

00:00:00.589 --> 00:00:03.889 

hi<00:00:01.589> everyone<00:00:01.949> my<00:00:02.280> name<00:00:02.340> is<00:00:02.580> Brad<00:00:02.820> and<00:00:03.060> this<00:00:03.540> is

00:00:03.889 --> 00:00:03.899 
hi everyone my name is Brad and this is

00:00:03.899 --> 00:00:06.470 
hi everyone my name is Brad and this is
the<00:00:04.230> pick<00:00:04.410> and<00:00:04.529> we<00:00:04.710> know<00:00:04.940> the<00:00:05.940> pick<00:00:06.150> and<00:00:06.270> we

00:00:06.470 --> 00:00:06.480 
the pick and we know the pick and we

00:00:06.480 --> 00:00:08.150 
the pick and we know the pick and we
know<00:00:06.629> is<00:00:06.839> a<00:00:06.870> dual<00:00:07.259> microcontroller

00:00:08.150 --> 00:00:08.160 
know is a dual microcontroller

00:00:08.160 --> 00:00:10.100 
know is a dual microcontroller
development<00:00:08.790> platform<00:00:09.269> that<00:00:09.599> is<00:00:09.750> compatible

00:00:10.100 --> 00:00:10.110 
development platform that is compatible

00:00:10.110 --> 00:00:13.970 
development platform that is compatible
with<00:00:10.410> both<00:00:10.710> Arduino<00:00:11.429> and<00:00:11.610> amicus<00:00:12.269> 18<00:00:12.830> it<00:00:13.830> has

00:00:13.970 --> 00:00:13.980 
with both Arduino and amicus 18 it has

00:00:13.980 --> 00:00:17.120 
with both Arduino and amicus 18 it has
an<00:00:14.130> inbuilt<00:00:14.309> programmer<00:00:15.000> 7<00:00:15.660> LEDs<00:00:16.139> a<00:00:16.440> regulator

00:00:17.120 --> 00:00:17.130 
an inbuilt programmer 7 LEDs a regulator

00:00:17.130 --> 00:00:20.090 
an inbuilt programmer 7 LEDs a regulator
to<00:00:17.670> reset<00:00:18.180> buttons<00:00:18.570> and<00:00:18.750> it<00:00:19.320> gives<00:00:19.560> you<00:00:19.680> 40<00:00:20.010> for

00:00:20.090 --> 00:00:20.100 
to reset buttons and it gives you 40 for

00:00:20.100 --> 00:00:22.670 
to reset buttons and it gives you 40 for
input/output<00:00:20.789> pins<00:00:21.240> for<00:00:22.050> you<00:00:22.140> to<00:00:22.260> connect<00:00:22.529> up

00:00:22.670 --> 00:00:22.680 
input/output pins for you to connect up

00:00:22.680 --> 00:00:24.140 
input/output pins for you to connect up
to<00:00:22.710> all<00:00:23.010> sorts<00:00:23.039> of<00:00:23.460> different<00:00:23.640> electronic

00:00:24.140 --> 00:00:24.150 
to all sorts of different electronic

00:00:24.150 --> 00:00:27.099 
to all sorts of different electronic
devices<00:00:24.570> some<00:00:25.439> of<00:00:25.560> which<00:00:25.650> you<00:00:25.800> can<00:00:25.949> see<00:00:25.980> here

00:00:27.099 --> 00:00:27.109 
devices some of which you can see here

00:00:27.109 --> 00:00:29.839 
devices some of which you can see here
the<00:00:28.109> pic<00:00:28.289> and<00:00:28.320> we<00:00:28.619> know<00:00:28.769> was<00:00:29.039> created<00:00:29.519> for<00:00:29.640> two

00:00:29.839 --> 00:00:29.849 
the pic and we know was created for two

00:00:29.849 --> 00:00:33.319 
the pic and we know was created for two
main<00:00:30.060> reasons<00:00:31.640> firstly<00:00:32.640> it's<00:00:32.910> great<00:00:33.149> for

00:00:33.319 --> 00:00:33.329 
main reasons firstly it's great for

00:00:33.329 --> 00:00:35.540 
main reasons firstly it's great for
beginners<00:00:33.420> no<00:00:34.200> experience<00:00:34.620> is<00:00:34.829> required<00:00:35.010> you

00:00:35.540 --> 00:00:35.550 
beginners no experience is required you

00:00:35.550 --> 00:00:39.040 
beginners no experience is required you
can<00:00:36.300> plug<00:00:36.600> it<00:00:36.750> straight<00:00:36.870> into<00:00:37.079> a<00:00:37.410> USB<00:00:37.770> port

00:00:39.040 --> 00:00:39.050 
can plug it straight into a USB port

00:00:39.050 --> 00:00:42.740 
can plug it straight into a USB port
open<00:00:40.050> up<00:00:40.379> some<00:00:40.559> code<00:00:40.890> and<00:00:41.510> send<00:00:42.510> it<00:00:42.600> to<00:00:42.660> the

00:00:42.740 --> 00:00:42.750 
open up some code and send it to the

00:00:42.750 --> 00:00:46.400 
open up some code and send it to the
device<00:00:43.520> since<00:00:44.520> it<00:00:44.670> has<00:00:44.820> inbuilt<00:00:45.030> LEDs<00:00:45.750> we<00:00:46.230> can

00:00:46.400 --> 00:00:46.410 
device since it has inbuilt LEDs we can

00:00:46.410 --> 00:00:47.840 
device since it has inbuilt LEDs we can
have<00:00:46.530> the<00:00:46.649> pic<00:00:46.829> and<00:00:46.860> we<00:00:47.129> know<00:00:47.309> doing<00:00:47.489> something

00:00:47.840 --> 00:00:47.850 
have the pic and we know doing something

00:00:47.850 --> 00:00:50.119 
have the pic and we know doing something
straight<00:00:48.270> away<00:00:48.510> in<00:00:48.690> this<00:00:48.989> case<00:00:49.230> blinking<00:00:49.980> to

00:00:50.119 --> 00:00:50.129 
straight away in this case blinking to

00:00:50.129 --> 00:00:54.590 
straight away in this case blinking to
LEDs<00:00:52.129> the<00:00:53.129> pic<00:00:53.340> and<00:00:53.370> we<00:00:53.640> know<00:00:53.789> is<00:00:53.969> also<00:00:54.329> great

00:00:54.590 --> 00:00:54.600 
LEDs the pic and we know is also great

00:00:54.600 --> 00:00:56.510 
LEDs the pic and we know is also great
for<00:00:54.750> experienced<00:00:55.320> programmers<00:00:56.010> because<00:00:56.399> it

00:00:56.510 --> 00:00:56.520 
for experienced programmers because it

00:00:56.520 --> 00:00:58.010 
for experienced programmers because it
gives<00:00:56.640> you<00:00:56.820> a<00:00:56.850> chance<00:00:57.180> to<00:00:57.510> learn<00:00:57.660> how<00:00:57.719> to

00:00:58.010 --> 00:00:58.020 
gives you a chance to learn how to

00:00:58.020 --> 00:00:59.959 
gives you a chance to learn how to
program<00:00:58.260> for<00:00:58.739> a<00:00:58.800> different<00:00:59.190> microcontroller

00:00:59.959 --> 00:00:59.969 
program for a different microcontroller

00:00:59.969 --> 00:01:02.479 
program for a different microcontroller
in<00:01:00.270> a<00:01:00.690> different<00:01:01.050> language<00:01:01.140> or<00:01:01.680> without

00:01:02.479 --> 00:01:02.489 
in a different language or without

00:01:02.489 --> 00:01:04.820 
in a different language or without
unplugging<00:01:02.670> the<00:01:03.059> device<00:01:03.439> why<00:01:04.439> not<00:01:04.619> try

00:01:04.820 --> 00:01:04.830 
unplugging the device why not try

00:01:04.830 --> 00:01:06.950 
unplugging the device why not try
putting<00:01:05.250> your<00:01:05.280> Arduino<00:01:05.909> code<00:01:05.939> over<00:01:06.510> to<00:01:06.540> amicus

00:01:06.950 --> 00:01:06.960 
putting your Arduino code over to amicus

00:01:06.960 --> 00:01:10.850 
putting your Arduino code over to amicus
18<00:01:07.380> or<00:01:07.650> vice<00:01:07.890> versa<00:01:09.140> so<00:01:10.140> let's<00:01:10.320> try<00:01:10.560> a<00:01:10.590> simple

00:01:10.850 --> 00:01:10.860 
18 or vice versa so let's try a simple

00:01:10.860 --> 00:01:14.660 
18 or vice versa so let's try a simple
example<00:01:11.390> will<00:01:12.390> blink<00:01:12.600> a<00:01:12.720> couple<00:01:13.049> of<00:01:13.140> LEDs<00:01:13.670> one

00:01:14.660 --> 00:01:14.670 
example will blink a couple of LEDs one

00:01:14.670 --> 00:01:16.760 
example will blink a couple of LEDs one
with<00:01:15.060> the<00:01:15.150> Arduino<00:01:15.659> software<00:01:15.900> for<00:01:16.350> the<00:01:16.380> atmega

00:01:16.760 --> 00:01:16.770 
with the Arduino software for the atmega

00:01:16.770 --> 00:01:19.580 
with the Arduino software for the atmega
and<00:01:17.070> one<00:01:17.460> with<00:01:17.790> the<00:01:17.880> amicus<00:01:18.240> 18<00:01:18.630> software<00:01:19.170> for

00:01:19.580 --> 00:01:19.590 
and one with the amicus 18 software for

00:01:19.590 --> 00:01:22.700 
and one with the amicus 18 software for
the<00:01:19.619> pic<00:01:19.860> chip<00:01:21.080> first<00:01:22.080> thing<00:01:22.259> we<00:01:22.350> want<00:01:22.470> to<00:01:22.560> do

00:01:22.700 --> 00:01:22.710 
the pic chip first thing we want to do

00:01:22.710 --> 00:01:24.770 
the pic chip first thing we want to do
is<00:01:22.950> flick<00:01:23.250> this<00:01:23.430> switch<00:01:23.490> so<00:01:24.299> we<00:01:24.420> can<00:01:24.540> program

00:01:24.770 --> 00:01:24.780 
is flick this switch so we can program

00:01:24.780 --> 00:01:28.399 
is flick this switch so we can program
the<00:01:25.049> atmega<00:01:25.350> chip<00:01:26.150> once<00:01:27.150> in<00:01:27.330> your<00:01:27.409> Arduino

00:01:28.399 --> 00:01:28.409 
the atmega chip once in your Arduino

00:01:28.409 --> 00:01:32.590 
the atmega chip once in your Arduino
software<00:01:28.650> open<00:01:29.400> up<00:01:29.790> the<00:01:29.939> blink<00:01:30.180> example<00:01:30.720> and

00:01:32.590 --> 00:01:32.600 
software open up the blink example and

00:01:32.600 --> 00:01:38.810 
software open up the blink example and
upload<00:01:33.600> it<00:01:33.630> to<00:01:33.900> the<00:01:33.930> Omega<00:01:34.110> chip

00:01:38.810 --> 00:01:38.820 

00:01:38.820 --> 00:01:44.190 

we<00:01:39.820> now<00:01:39.970> have<00:01:40.180> a<00:01:40.210> blue<00:01:40.450> blinking<00:01:40.960> LED<00:01:43.110> open<00:01:44.110> up

00:01:44.190 --> 00:01:44.200 
we now have a blue blinking LED open up

00:01:44.200 --> 00:01:47.730 
we now have a blue blinking LED open up
the<00:01:44.320> amicus<00:01:44.740> idea<00:01:45.720> flick<00:01:46.720> the<00:01:46.840> switch<00:01:47.110> so<00:01:47.710> we

00:01:47.730 --> 00:01:47.740 
the amicus idea flick the switch so we

00:01:47.740 --> 00:01:50.390 
the amicus idea flick the switch so we
can<00:01:47.950> program<00:01:48.220> the<00:01:48.550> pic<00:01:48.730> microcontroller<00:01:49.540> and

00:01:50.390 --> 00:01:50.400 
can program the pic microcontroller and

00:01:50.400 --> 00:01:55.680 
can program the pic microcontroller and
again<00:01:51.400> open<00:01:51.760> up<00:01:51.880> the<00:01:51.970> blink<00:01:52.210> example<00:01:54.690> compile

00:01:55.680 --> 00:01:55.690 
again open up the blink example compile

00:01:55.690 --> 00:02:03.770 
again open up the blink example compile
and<00:01:55.900> program<00:01:56.320> to<00:01:56.530> send<00:01:56.770> it<00:01:56.920> to<00:01:57.160> the<00:01:57.280> device<00:01:57.550> and

00:02:03.770 --> 00:02:03.780 

00:02:03.780 --> 00:02:06.900 

now<00:02:04.780> we<00:02:04.840> have<00:02:05.080> a<00:02:05.110> red<00:02:05.380> blinking<00:02:05.830> LED<00:02:06.310> which<00:02:06.729> is

00:02:06.900 --> 00:02:06.910 
now we have a red blinking LED which is

00:02:06.910 --> 00:02:08.219 
now we have a red blinking LED which is
actually<00:02:07.090> controlled<00:02:07.750> by<00:02:07.930> the<00:02:07.990> pic

00:02:08.219 --> 00:02:08.229 
actually controlled by the pic

00:02:08.229 --> 00:02:11.880 
actually controlled by the pic
microcontroller<00:02:10.110> here<00:02:11.110> the<00:02:11.230> pic<00:02:11.410> and<00:02:11.440> we<00:02:11.709> know

00:02:11.880 --> 00:02:11.890 
microcontroller here the pic and we know

00:02:11.890 --> 00:02:14.910 
microcontroller here the pic and we know
is<00:02:12.100> driving<00:02:12.520> to<00:02:12.730> LCD<00:02:13.239> displays<00:02:13.810> I've<00:02:14.200> already

00:02:14.910 --> 00:02:14.920 
is driving to LCD displays I've already

00:02:14.920 --> 00:02:17.040 
is driving to LCD displays I've already
programmed<00:02:15.610> the<00:02:15.820> pic<00:02:16.000> microcontroller<00:02:16.810> to

00:02:17.040 --> 00:02:17.050 
programmed the pic microcontroller to

00:02:17.050 --> 00:02:19.500 
programmed the pic microcontroller to
say<00:02:17.260> hallo<00:02:17.530> amicus<00:02:18.040> a<00:02:18.190> team<00:02:18.459> and<00:02:18.730> you<00:02:19.209> can<00:02:19.330> see

00:02:19.500 --> 00:02:19.510 
say hallo amicus a team and you can see

00:02:19.510 --> 00:02:23.430 
say hallo amicus a team and you can see
the<00:02:19.540> code<00:02:19.870> here<00:02:20.140> on<00:02:20.380> this<00:02:20.530> screen<00:02:21.870> I've<00:02:22.870> got

00:02:23.430 --> 00:02:23.440 
the code here on this screen I've got

00:02:23.440 --> 00:02:25.410 
the code here on this screen I've got
the<00:02:23.530> Arduino<00:02:24.040> code<00:02:24.070> here<00:02:24.640> so<00:02:24.910> i<00:02:24.940> will<00:02:25.180> send

00:02:25.410 --> 00:02:25.420 
the Arduino code here so i will send

00:02:25.420 --> 00:02:28.320 
the Arduino code here so i will send
that<00:02:25.630> to<00:02:26.530> the<00:02:26.560> atmega<00:02:27.280> microcontroller<00:02:28.150> and

00:02:28.320 --> 00:02:28.330 
that to the atmega microcontroller and

00:02:28.330 --> 00:02:34.650 
that to the atmega microcontroller and
it<00:02:28.570> should<00:02:28.750> say<00:02:28.989> hello<00:02:29.410> Arduino<00:02:33.270> both<00:02:34.270> screens

00:02:34.650 --> 00:02:34.660 
it should say hello Arduino both screens

00:02:34.660 --> 00:02:39.000 
it should say hello Arduino both screens
are<00:02:34.870> happily<00:02:35.170> running<00:02:35.350> simultaneously<00:02:38.010> here

00:02:39.000 --> 00:02:39.010 
are happily running simultaneously here

00:02:39.010 --> 00:02:40.320 
are happily running simultaneously here
it<00:02:39.130> is<00:02:39.190> showing<00:02:39.610> you<00:02:39.730> the<00:02:39.850> pulse<00:02:40.060> width

00:02:40.320 --> 00:02:40.330 
it is showing you the pulse width

00:02:40.330 --> 00:02:42.240 
it is showing you the pulse width
modulation<00:02:40.930> capabilities<00:02:41.770> of<00:02:41.800> the<00:02:42.070> pic<00:02:42.220> and

00:02:42.240 --> 00:02:42.250 
modulation capabilities of the pic and

00:02:42.250 --> 00:02:45.420 
modulation capabilities of the pic and
we<00:02:42.520> know<00:02:42.700> you<00:02:43.690> can<00:02:43.840> use<00:02:44.019> the<00:02:44.200> onboard<00:02:44.380> LEDs<00:02:45.160> or

00:02:45.420 --> 00:02:45.430 
we know you can use the onboard LEDs or

00:02:45.430 --> 00:02:47.370 
we know you can use the onboard LEDs or
connect<00:02:46.030> up<00:02:46.180> your<00:02:46.360> own<00:02:46.480> to<00:02:46.720> some<00:02:46.900> of<00:02:47.019> the<00:02:47.140> port

00:02:47.370 --> 00:02:47.380 
connect up your own to some of the port

00:02:47.380 --> 00:02:50.550 
connect up your own to some of the port
pins<00:02:48.299> here<00:02:49.299> the<00:02:49.480> atmega<00:02:49.780> chip<00:02:49.870> of<00:02:50.230> the<00:02:50.260> pic<00:02:50.530> and

00:02:50.550 --> 00:02:50.560 
pins here the atmega chip of the pic and

00:02:50.560 --> 00:02:52.770 
pins here the atmega chip of the pic and
we<00:02:50.830> know<00:02:51.010> is<00:02:51.220> sending<00:02:51.610> serial<00:02:52.090> data<00:02:52.269> through

00:02:52.770 --> 00:02:52.780 
we know is sending serial data through

00:02:52.780 --> 00:02:55.470 
we know is sending serial data through
to<00:02:52.930> the<00:02:53.019> computer<00:02:53.470> I<00:02:53.620> also<00:02:54.580> have<00:02:54.910> the<00:02:55.060> pic<00:02:55.239> chip

00:02:55.470 --> 00:02:55.480 
to the computer I also have the pic chip

00:02:55.480 --> 00:02:57.930 
to the computer I also have the pic chip
running<00:02:55.870> some<00:02:56.049> similar<00:02:56.440> code<00:02:56.620> to<00:02:57.610> have<00:02:57.760> a<00:02:57.790> look

00:02:57.930 --> 00:02:57.940 
running some similar code to have a look

00:02:57.940 --> 00:02:59.580 
running some similar code to have a look
at<00:02:58.090> what<00:02:58.209> it's<00:02:58.360> doing<00:02:58.420> we<00:02:58.900> just<00:02:59.110> need<00:02:59.260> to<00:02:59.380> flick

00:02:59.580 --> 00:02:59.590 
at what it's doing we just need to flick

00:02:59.590 --> 00:03:01.470 
at what it's doing we just need to flick
the<00:02:59.620> switch<00:02:59.980> to<00:03:00.370> connect<00:03:00.640> the<00:03:00.730> pic<00:03:00.940> chip<00:03:01.150> to

00:03:01.470 --> 00:03:01.480 
the switch to connect the pic chip to

00:03:01.480 --> 00:03:06.360 
the switch to connect the pic chip to
the<00:03:01.630> USB<00:03:02.019> port<00:03:04.440> we<00:03:05.440> can<00:03:05.590> then<00:03:05.709> flick<00:03:05.980> back<00:03:06.130> and

00:03:06.360 --> 00:03:06.370 
the USB port we can then flick back and

00:03:06.370 --> 00:03:08.310 
the USB port we can then flick back and
forth<00:03:06.549> between<00:03:06.760> the<00:03:07.090> pic<00:03:07.269> and<00:03:07.450> omega<00:03:07.900> without

00:03:08.310 --> 00:03:08.320 
forth between the pic and omega without

00:03:08.320 --> 00:03:13.470 
forth between the pic and omega without
interrupting<00:03:08.799> their<00:03:09.100> code<00:03:12.150> we<00:03:13.150> can<00:03:13.330> even

00:03:13.470 --> 00:03:13.480 
interrupting their code we can even

00:03:13.480 --> 00:03:15.390 
interrupting their code we can even
reset<00:03:14.080> one<00:03:14.290> while<00:03:14.590> the<00:03:14.620> other<00:03:14.769> still<00:03:15.190> runs

00:03:15.390 --> 00:03:15.400 
reset one while the other still runs

00:03:15.400 --> 00:03:19.460 
reset one while the other still runs
perfectly<00:03:15.850> fine<00:03:16.120> I'll<00:03:16.420> reset<00:03:17.320> the<00:03:17.500> pic<00:03:17.680> chip

00:03:19.460 --> 00:03:19.470 
perfectly fine I'll reset the pic chip

00:03:19.470 --> 00:03:22.410 
perfectly fine I'll reset the pic chip
it<00:03:20.470> starts<00:03:20.890> again<00:03:20.980> from<00:03:21.310> zero<00:03:21.579> if<00:03:21.880> we<00:03:22.030> go<00:03:22.209> back

00:03:22.410 --> 00:03:22.420 
it starts again from zero if we go back

00:03:22.420 --> 00:03:26.130 
it starts again from zero if we go back
to<00:03:22.480> the<00:03:22.840> atmega<00:03:24.360> it's<00:03:25.360> still<00:03:25.660> counting

00:03:26.130 --> 00:03:26.140 
to the atmega it's still counting

00:03:26.140 --> 00:03:33.600 
to the atmega it's still counting
happily<00:03:26.500> away<00:03:26.590> and<00:03:26.980> we<00:03:27.400> can<00:03:27.579> reset<00:03:27.940> that

00:03:33.600 --> 00:03:33.610 

00:03:33.610 --> 00:03:35.890 

and<00:03:34.610> finally<00:03:35.030> I<00:03:35.060> just<00:03:35.180> wanted<00:03:35.630> to<00:03:35.690> show<00:03:35.870> you

00:03:35.890 --> 00:03:35.900 
and finally I just wanted to show you

00:03:35.900 --> 00:03:37.420 
and finally I just wanted to show you
how<00:03:36.200> much<00:03:36.230> the<00:03:36.530> pic<00:03:36.680> and<00:03:36.710> do<00:03:36.890> we<00:03:36.980> know<00:03:37.100> can<00:03:37.280> do

00:03:37.420 --> 00:03:37.430 
how much the pic and do we know can do

00:03:37.430 --> 00:03:39.940 
how much the pic and do we know can do
at<00:03:37.459> once<00:03:38.110> here<00:03:39.110> I'm<00:03:39.230> using<00:03:39.260> a<00:03:39.590> Super<00:03:39.860> Nintendo

00:03:39.940 --> 00:03:39.950 
at once here I'm using a Super Nintendo

00:03:39.950 --> 00:03:43.120 
at once here I'm using a Super Nintendo
control<00:03:40.670> pad<00:03:40.880> with<00:03:41.690> an<00:03:41.810> RGB<00:03:42.140> matrix<00:03:42.800> to<00:03:42.950> play

00:03:43.120 --> 00:03:43.130 
control pad with an RGB matrix to play

00:03:43.130 --> 00:03:45.220 
control pad with an RGB matrix to play
this<00:03:43.280> simple<00:03:43.640> little<00:03:43.670> game<00:03:44.030> that's<00:03:44.780> not<00:03:45.050> quite

00:03:45.220 --> 00:03:45.230 
this simple little game that's not quite

00:03:45.230 --> 00:03:49.330 
this simple little game that's not quite
finished<00:03:45.410> yet<00:03:46.990> all<00:03:47.990> the<00:03:48.260> while<00:03:48.290> it's<00:03:48.770> updating

00:03:49.330 --> 00:03:49.340 
finished yet all the while it's updating

00:03:49.340 --> 00:03:52.030 
finished yet all the while it's updating
information<00:03:49.490> on<00:03:50.030> this<00:03:50.150> text<00:03:50.390> LCD<00:03:50.959> screen<00:03:51.350> it's

00:03:52.030 --> 00:03:52.040 
information on this text LCD screen it's

00:03:52.040 --> 00:03:53.740 
information on this text LCD screen it's
also<00:03:52.280> running<00:03:52.670> a<00:03:52.820> pulse<00:03:53.030> width<00:03:53.240> modulation

00:03:53.740 --> 00:03:53.750 
also running a pulse width modulation

00:03:53.750 --> 00:03:56.830 
also running a pulse width modulation
program<00:03:54.350> and<00:03:54.700> drawing<00:03:55.700> some<00:03:55.970> graphics<00:03:56.660> on

00:03:56.830 --> 00:03:56.840 
program and drawing some graphics on

00:03:56.840 --> 00:04:00.400 
program and drawing some graphics on
this<00:03:56.990> graphic<00:03:57.590> LCD<00:03:58.150> all<00:03:59.150> the<00:03:59.420> while<00:03:59.600> I've<00:03:59.930> got

00:04:00.400 --> 00:04:00.410 
this graphic LCD all the while I've got

00:04:00.410 --> 00:04:02.740 
this graphic LCD all the while I've got
an<00:04:00.500> accelerometer<00:04:00.800> plugged<00:04:01.430> in<00:04:01.640> and<00:04:01.820> as<00:04:02.600> if

00:04:02.740 --> 00:04:02.750 
an accelerometer plugged in and as if

00:04:02.750 --> 00:04:04.540 
an accelerometer plugged in and as if
you<00:04:02.870> have<00:04:03.290> a<00:04:03.319> look<00:04:03.500> on<00:04:03.620> the<00:04:03.709> screen<00:04:03.830> at<00:04:04.160> sending

00:04:04.540 --> 00:04:04.550 
you have a look on the screen at sending

00:04:04.550 --> 00:04:06.900 
you have a look on the screen at sending
the<00:04:04.610> accelerometer<00:04:05.270> data<00:04:05.450> through<00:04:06.260> to<00:04:06.530> the

00:04:06.900 --> 00:04:06.910 
the accelerometer data through to the

00:04:06.910 --> 00:04:15.670 
the accelerometer data through to the
serial<00:04:07.910> bus<00:04:08.090> of<00:04:08.300> the<00:04:08.750> computer<00:04:14.320> make<00:04:15.320> a<00:04:15.350> pledge

00:04:15.670 --> 00:04:15.680 
serial bus of the computer make a pledge

00:04:15.680 --> 00:04:17.440 
serial bus of the computer make a pledge
to<00:04:15.739> get<00:04:16.280> a<00:04:16.310> pic<00:04:16.519> and<00:04:16.549> do<00:04:16.760> we<00:04:16.820> know<00:04:16.970> to<00:04:17.030> call<00:04:17.269> your

00:04:17.440 --> 00:04:17.450 
to get a pic and do we know to call your

00:04:17.450 --> 00:04:21.070 
to get a pic and do we know to call your
very<00:04:17.690> own<00:04:17.780> and<00:04:18.079> thanks<00:04:18.919> for<00:04:19.040> watching

