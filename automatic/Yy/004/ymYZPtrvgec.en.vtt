WEBVTT
Kind: captions
Language: en

00:00:07.880 --> 00:00:11.330 

our<00:00:08.880> files<00:00:09.269> stored<00:00:09.960> on<00:00:10.080> disk<00:00:10.139> the<00:00:11.010> simplest

00:00:11.330 --> 00:00:11.340 
our files stored on disk the simplest

00:00:11.340 --> 00:00:13.129 
our files stored on disk the simplest
way<00:00:11.550> to<00:00:11.580> think<00:00:11.790> of<00:00:11.910> it<00:00:12.059> would<00:00:12.660> be<00:00:12.809> to<00:00:12.960> have

00:00:13.129 --> 00:00:13.139 
way to think of it would be to have

00:00:13.139 --> 00:00:15.620 
way to think of it would be to have
every<00:00:13.500> file<00:00:13.679> stored<00:00:14.130> sequentially<00:00:14.820> in<00:00:15.299> the

00:00:15.620 --> 00:00:15.630 
every file stored sequentially in the

00:00:15.630 --> 00:00:17.990 
every file stored sequentially in the
order<00:00:15.839> in<00:00:15.929> which<00:00:16.080> it<00:00:16.230> was<00:00:16.289> created<00:00:17.000> this

00:00:17.990 --> 00:00:18.000 
order in which it was created this

00:00:18.000 --> 00:00:19.880 
order in which it was created this
however<00:00:18.210> has<00:00:18.600> an<00:00:18.750> obvious<00:00:18.900> problem<00:00:19.230> when<00:00:19.830> a

00:00:19.880 --> 00:00:19.890 
however has an obvious problem when a

00:00:19.890 --> 00:00:21.349 
however has an obvious problem when a
file<00:00:20.100> changes<00:00:20.490> size<00:00:20.670> you<00:00:20.850> can't<00:00:21.029> just<00:00:21.180> write

00:00:21.349 --> 00:00:21.359 
file changes size you can't just write

00:00:21.359 --> 00:00:23.750 
file changes size you can't just write
over<00:00:21.570> the<00:00:21.600> file<00:00:21.869> in<00:00:22.020> front<00:00:22.230> of<00:00:22.320> it<00:00:22.410> instead<00:00:23.100> you

00:00:23.750 --> 00:00:23.760 
over the file in front of it instead you

00:00:23.760 --> 00:00:25.640 
over the file in front of it instead you
have<00:00:23.880> to<00:00:24.000> add<00:00:24.150> some<00:00:24.630> on<00:00:24.840> to<00:00:25.170> the<00:00:25.260> end<00:00:25.439> of<00:00:25.529> the

00:00:25.640 --> 00:00:25.650 
have to add some on to the end of the

00:00:25.650 --> 00:00:27.950 
have to add some on to the end of the
disk<00:00:25.890> we<00:00:26.640> use<00:00:26.820> eye<00:00:27.060> notes<00:00:27.300> to<00:00:27.539> keep<00:00:27.689> track<00:00:27.930> of

00:00:27.950 --> 00:00:27.960 
disk we use eye notes to keep track of

00:00:27.960 --> 00:00:30.230 
disk we use eye notes to keep track of
these<00:00:28.199> broken<00:00:28.500> up<00:00:28.710> pieces<00:00:28.740> of<00:00:29.070> files<00:00:29.369> the<00:00:30.029> disk

00:00:30.230 --> 00:00:30.240 
these broken up pieces of files the disk

00:00:30.240 --> 00:00:32.389 
these broken up pieces of files the disk
is<00:00:30.420> divided<00:00:30.900> into<00:00:31.080> equally<00:00:31.740> sized<00:00:31.980> blocks

00:00:32.389 --> 00:00:32.399 
is divided into equally sized blocks

00:00:32.399 --> 00:00:34.040 
is divided into equally sized blocks
each<00:00:32.790> of<00:00:33.030> which<00:00:33.210> can<00:00:33.450> be<00:00:33.480> assigned<00:00:33.809> to<00:00:33.989> any

00:00:34.040 --> 00:00:34.050 
each of which can be assigned to any

00:00:34.050 --> 00:00:36.979 
each of which can be assigned to any
file<00:00:34.500> if<00:00:35.250> a<00:00:35.340> file<00:00:35.579> is<00:00:35.790> larger<00:00:36.329> than<00:00:36.540> a<00:00:36.660> single

00:00:36.979 --> 00:00:36.989 
file if a file is larger than a single

00:00:36.989 --> 00:00:38.750 
file if a file is larger than a single
block<00:00:37.200> it<00:00:37.410> has<00:00:37.649> put<00:00:37.860> into<00:00:38.040> multiple<00:00:38.520> blocks

00:00:38.750 --> 00:00:38.760 
block it has put into multiple blocks

00:00:38.760 --> 00:00:41.690 
block it has put into multiple blocks
each<00:00:39.480> file<00:00:39.840> has<00:00:40.200> an<00:00:40.350> I<00:00:40.559> know<00:00:40.620> associated<00:00:41.520> with

00:00:41.690 --> 00:00:41.700 
each file has an I know associated with

00:00:41.700 --> 00:00:43.760 
each file has an I know associated with
it<00:00:41.879> that<00:00:42.059> stores<00:00:42.600> which<00:00:42.840> blocks<00:00:43.200> make<00:00:43.440> up<00:00:43.590> to

00:00:43.760 --> 00:00:43.770 
it that stores which blocks make up to

00:00:43.770 --> 00:00:47.660 
it that stores which blocks make up to
file<00:00:44.930> all<00:00:45.930> inodes<00:00:46.620> are<00:00:46.800> the<00:00:46.920> same<00:00:47.160> size<00:00:47.430> and

00:00:47.660 --> 00:00:47.670 
file all inodes are the same size and

00:00:47.670 --> 00:00:49.700 
file all inodes are the same size and
are<00:00:47.940> stored<00:00:48.270> in<00:00:48.450> an<00:00:48.629> array<00:00:48.780> in<00:00:49.230> the<00:00:49.350> super

00:00:49.700 --> 00:00:49.710 
are stored in an array in the super

00:00:49.710 --> 00:00:51.889 
are stored in an array in the super
block<00:00:49.890> your<00:00:50.460> consistent<00:00:51.030> size<00:00:51.239> makes<00:00:51.570> it<00:00:51.690> easy

00:00:51.889 --> 00:00:51.899 
block your consistent size makes it easy

00:00:51.899 --> 00:00:55.790 
block your consistent size makes it easy
to<00:00:52.020> look<00:00:52.289> them<00:00:52.500> up<00:00:53.660> then<00:00:54.660> inode<00:00:54.960> stores<00:00:55.199> more

00:00:55.790 --> 00:00:55.800 
to look them up then inode stores more

00:00:55.800 --> 00:00:57.889 
to look them up then inode stores more
than<00:00:55.980> just<00:00:56.219> data<00:00:56.399> for<00:00:57.090> example<00:00:57.180> you<00:00:57.750> might

00:00:57.889 --> 00:00:57.899 
than just data for example you might

00:00:57.899 --> 00:00:59.779 
than just data for example you might
want<00:00:57.960> to<00:00:58.199> know<00:00:58.469> when<00:00:59.160> a<00:00:59.190> file<00:00:59.430> was<00:00:59.609> created

00:00:59.779 --> 00:00:59.789 
want to know when a file was created

00:00:59.789 --> 00:01:02.630 
want to know when a file was created
what<00:01:00.780> its<00:01:00.930> size<00:01:01.109> is<00:01:01.379> how<00:01:01.680> many<00:01:01.859> links<00:01:02.100> there

00:01:02.630 --> 00:01:02.640 
what its size is how many links there

00:01:02.640 --> 00:01:05.630 
what its size is how many links there
are<00:01:02.789> to<00:01:03.059> it<00:01:03.210> or<00:01:03.539> who<00:01:03.989> created<00:01:04.350> the<00:01:04.559> file<00:01:04.739> each

00:01:05.630 --> 00:01:05.640 
are to it or who created the file each

00:01:05.640 --> 00:01:08.109 
are to it or who created the file each
inode<00:01:06.150> therefore<00:01:06.630> has<00:01:06.810> blocks<00:01:07.110> and<00:01:07.409> metadata

00:01:08.109 --> 00:01:08.119 
inode therefore has blocks and metadata

00:01:08.119 --> 00:01:10.250 
inode therefore has blocks and metadata
when<00:01:09.119> you<00:01:09.240> want<00:01:09.450> to<00:01:09.570> see<00:01:09.689> the<00:01:09.810> data<00:01:09.990> of<00:01:10.170> the

00:01:10.250 --> 00:01:10.260 
when you want to see the data of the

00:01:10.260 --> 00:01:11.840 
when you want to see the data of the
files<00:01:10.500> inode<00:01:10.799> can<00:01:11.130> tell<00:01:11.310> you<00:01:11.400> all<00:01:11.520> the<00:01:11.610> blocks

00:01:11.840 --> 00:01:11.850 
files inode can tell you all the blocks

00:01:11.850 --> 00:01:13.820 
files inode can tell you all the blocks
that<00:01:11.970> contain<00:01:12.330> that<00:01:12.510> data<00:01:12.689> or<00:01:13.470> when<00:01:13.590> you<00:01:13.650> want

00:01:13.820 --> 00:01:13.830 
that contain that data or when you want

00:01:13.830 --> 00:01:16.280 
that contain that data or when you want
to<00:01:13.950> know<00:01:14.070> more<00:01:14.310> about<00:01:14.340> the<00:01:14.670> file<00:01:14.850> itself<00:01:15.290> and

00:01:16.280 --> 00:01:16.290 
to know more about the file itself and

00:01:16.290 --> 00:01:18.560 
to know more about the file itself and
get<00:01:16.409> the<00:01:16.530> metadata<00:01:16.950> so<00:01:17.700> you<00:01:17.790> have<00:01:17.909> a<00:01:17.939> file<00:01:18.299> I

00:01:18.560 --> 00:01:18.570 
get the metadata so you have a file I

00:01:18.570 --> 00:01:21.600 
get the metadata so you have a file I
know<00:01:19.500> -<00:01:19.680> for<00:01:20.220> example

00:01:21.600 --> 00:01:21.610 
know - for example

00:01:21.610 --> 00:01:23.640 
know - for example
and<00:01:22.540> in<00:01:22.660> the<00:01:22.750> operating<00:01:23.020> system<00:01:23.380> you<00:01:23.500> can<00:01:23.620> have

00:01:23.640 --> 00:01:23.650 
and in the operating system you can have

00:01:23.650 --> 00:01:25.380 
and in the operating system you can have
a<00:01:23.770> bunch<00:01:23.920> of<00:01:24.040> file<00:01:24.280> names<00:01:24.550> that<00:01:24.670> point<00:01:25.060> to<00:01:25.270> this

00:01:25.380 --> 00:01:25.390 
a bunch of file names that point to this

00:01:25.390 --> 00:01:30.770 
a bunch of file names that point to this
file<00:01:25.810> so<00:01:26.590> you<00:01:27.070> could<00:01:27.580> have<00:01:28.170> readme<00:01:29.170> have<00:01:30.040> help

00:01:30.770 --> 00:01:30.780 
file so you could have readme have help

00:01:30.780 --> 00:01:34.620 
file so you could have readme have help
etc<00:01:31.780> all<00:01:32.410> of<00:01:32.470> these<00:01:32.860> are<00:01:33.250> links<00:01:33.970> to<00:01:34.150> the<00:01:34.420> same

00:01:34.620 --> 00:01:34.630 
etc all of these are links to the same

00:01:34.630 --> 00:01:37.620 
etc all of these are links to the same
inode<00:01:35.070> so<00:01:36.070> when<00:01:36.190> you<00:01:36.250> open<00:01:36.520> one<00:01:36.640> of<00:01:36.790> these<00:01:37.000> it

00:01:37.620 --> 00:01:37.630 
inode so when you open one of these it

00:01:37.630 --> 00:01:40.440 
inode so when you open one of these it
displays<00:01:38.560> the<00:01:38.800> data<00:01:38.950> that's<00:01:39.340> that's<00:01:39.820> in<00:01:40.240> the

00:01:40.440 --> 00:01:40.450 
displays the data that's that's in the

00:01:40.450 --> 00:01:42.420 
displays the data that's that's in the
blocks<00:01:40.690> referenced<00:01:41.230> by<00:01:41.320> that<00:01:41.470> inode<00:01:41.800> remember

00:01:42.420 --> 00:01:42.430 
blocks referenced by that inode remember

00:01:42.430 --> 00:01:43.620 
blocks referenced by that inode remember
all<00:01:42.940> inodes

00:01:43.620 --> 00:01:43.630 
all inodes

00:01:43.630 --> 00:01:45.810 
all inodes
are<00:01:43.750> stored<00:01:44.050> in<00:01:44.260> the<00:01:44.710> inode<00:01:44.920> table<00:01:45.400> in<00:01:45.730> the

00:01:45.810 --> 00:01:45.820 
are stored in the inode table in the

00:01:45.820 --> 00:01:47.790 
are stored in the inode table in the
super<00:01:46.120> block<00:01:46.210> each<00:01:46.750> of<00:01:46.960> them<00:01:47.110> is<00:01:47.410> the<00:01:47.620> same

00:01:47.790 --> 00:01:47.800 
super block each of them is the same

00:01:47.800 --> 00:01:51.360 
super block each of them is the same
size<00:01:48.240> let's<00:01:49.240> look<00:01:49.390> at<00:01:49.480> i<00:01:49.600> know'd<00:01:49.780> -<00:01:50.020> if<00:01:51.010> it<00:01:51.220> were

00:01:51.360 --> 00:01:51.370 
size let's look at i know'd - if it were

00:01:51.370 --> 00:01:53.640 
size let's look at i know'd - if it were
to<00:01:51.580> represent<00:01:51.970> a<00:01:52.030> file<00:01:52.270> 40<00:01:52.570> blocks<00:01:52.840> long<00:01:53.110> you

00:01:53.640 --> 00:01:53.650 
to represent a file 40 blocks long you

00:01:53.650 --> 00:01:55.260 
to represent a file 40 blocks long you
think<00:01:53.950> it<00:01:54.070> would<00:01:54.190> contain<00:01:54.460> 40<00:01:54.820> block<00:01:55.030> pointers

00:01:55.260 --> 00:01:55.270 
think it would contain 40 block pointers

00:01:55.270 --> 00:01:57.660 
think it would contain 40 block pointers
but<00:01:56.140> no<00:01:56.410> since<00:01:56.920> I<00:01:57.070> nodes<00:01:57.280> are<00:01:57.400> a<00:01:57.430> tiny

00:01:57.660 --> 00:01:57.670 
but no since I nodes are a tiny

00:01:57.670 --> 00:01:59.670 
but no since I nodes are a tiny
pre-allocated<00:01:58.450> size<00:01:58.750> they<00:01:59.229> simply<00:01:59.560> don't

00:01:59.670 --> 00:01:59.680 
pre-allocated size they simply don't

00:01:59.680 --> 00:02:01.440 
pre-allocated size they simply don't
have<00:01:59.830> enough<00:01:59.950> room<00:02:00.370> for<00:02:00.400> 40<00:02:00.910> block<00:02:01.180> pointers

00:02:01.440 --> 00:02:01.450 
have enough room for 40 block pointers

00:02:01.450 --> 00:02:03.870 
have enough room for 40 block pointers
this<00:02:02.200> is<00:02:02.410> where<00:02:02.560> indirect<00:02:03.010> blocks<00:02:03.370> come<00:02:03.640> into

00:02:03.870 --> 00:02:03.880 
this is where indirect blocks come into

00:02:03.880 --> 00:02:07.560 
this is where indirect blocks come into
play<00:02:04.650> each<00:02:05.650> ina<00:02:05.950> has<00:02:06.340> an<00:02:06.460> array<00:02:06.670> of<00:02:06.700> 12<00:02:07.180> block

00:02:07.560 --> 00:02:07.570 
play each ina has an array of 12 block

00:02:07.570 --> 00:02:10.380 
play each ina has an array of 12 block
Watchers<00:02:08.220> standard<00:02:09.220> block<00:02:09.459> size<00:02:09.700> is<00:02:10.030> 4

00:02:10.380 --> 00:02:10.390 
Watchers standard block size is 4

00:02:10.390 --> 00:02:12.930 
Watchers standard block size is 4
kilobytes<00:02:10.750> which<00:02:11.560> means<00:02:11.860> you<00:02:12.040> have<00:02:12.250> 4<00:02:12.640> times

00:02:12.930 --> 00:02:12.940 
kilobytes which means you have 4 times

00:02:12.940 --> 00:02:17.610 
kilobytes which means you have 4 times
12<00:02:13.390> or<00:02:13.690> 48<00:02:14.680> kilobytes<00:02:15.220> of<00:02:15.790> storage<00:02:16.300> so<00:02:17.230> what<00:02:17.470> do

00:02:17.610 --> 00:02:17.620 
12 or 48 kilobytes of storage so what do

00:02:17.620 --> 00:02:19.620 
12 or 48 kilobytes of storage so what do
you<00:02:17.709> do<00:02:17.920> when<00:02:18.130> you<00:02:18.220> have<00:02:18.459> a<00:02:18.490> file<00:02:18.820> larger<00:02:19.420> than

00:02:19.620 --> 00:02:19.630 
you do when you have a file larger than

00:02:19.630 --> 00:02:22.170 
you do when you have a file larger than
that<00:02:19.810> well<00:02:20.470> that's<00:02:20.950> not<00:02:21.220> the<00:02:21.370> whole<00:02:21.520> story

00:02:22.170 --> 00:02:22.180 
that well that's not the whole story

00:02:22.180 --> 00:02:24.660 
that well that's not the whole story
in<00:02:22.240> addition<00:02:23.140> to<00:02:23.320> the<00:02:23.440> 12<00:02:23.680> all<00:02:23.950> pointers<00:02:24.520> and

00:02:24.660 --> 00:02:24.670 
in addition to the 12 all pointers and

00:02:24.670 --> 00:02:27.930 
in addition to the 12 all pointers and
inode<00:02:25.330> also<00:02:25.930> contains<00:02:26.380> free<00:02:26.830> indirect<00:02:27.610> block

00:02:27.930 --> 00:02:27.940 
inode also contains free indirect block

00:02:27.940 --> 00:02:31.050 
inode also contains free indirect block
pointers<00:02:28.239> which<00:02:28.959> will<00:02:29.170> help<00:02:29.340> River<00:02:30.340> do<00:02:30.489> people

00:02:31.050 --> 00:02:31.060 
pointers which will help River do people

00:02:31.060 --> 00:02:33.060 
pointers which will help River do people
each<00:02:31.570> indirect<00:02:32.110> block<00:02:32.320> points<00:02:32.860> to<00:02:33.010> a<00:02:33.040> block

00:02:33.060 --> 00:02:33.070 
each indirect block points to a block

00:02:33.070 --> 00:02:36.000 
each indirect block points to a block
and<00:02:33.580> block<00:02:33.940> pointers<00:02:34.320> greatly<00:02:35.320> expanding<00:02:35.860> and

00:02:36.000 --> 00:02:36.010 
and block pointers greatly expanding and

00:02:36.010 --> 00:02:39.180 
and block pointers greatly expanding and
inodes<00:02:36.400> capacity<00:02:37.500> indirect<00:02:38.500> blocks<00:02:38.800> can<00:02:39.040> also

00:02:39.180 --> 00:02:39.190 
inodes capacity indirect blocks can also

00:02:39.190 --> 00:02:41.130 
inodes capacity indirect blocks can also
point<00:02:39.519> to<00:02:39.580> other<00:02:39.790> indirect<00:02:40.269> blocks<00:02:40.600> creating

00:02:41.130 --> 00:02:41.140 
point to other indirect blocks creating

00:02:41.140 --> 00:02:43.770 
point to other indirect blocks creating
double<00:02:41.530> or<00:02:41.769> treble<00:02:42.100> and<00:02:42.340> direct<00:02:42.550> blocks<00:02:42.790> this

00:02:43.770 --> 00:02:43.780 
double or treble and direct blocks this

00:02:43.780 --> 00:02:45.540 
double or treble and direct blocks this
even<00:02:44.170> further<00:02:44.350> expands<00:02:44.860> the<00:02:45.010> capacity<00:02:45.100> of<00:02:45.430> an

00:02:45.540 --> 00:02:45.550 
even further expands the capacity of an

00:02:45.550 --> 00:02:47.520 
even further expands the capacity of an
inode<00:02:45.700> think<00:02:46.180> about<00:02:46.420> you<00:02:46.870> have<00:02:46.989> limited<00:02:47.380> space

00:02:47.520 --> 00:02:47.530 
inode think about you have limited space

00:02:47.530 --> 00:02:50.699 
inode think about you have limited space
to<00:02:47.950> store<00:02:48.280> references<00:02:48.790> to<00:02:49.300> direct<00:02:49.600> blocks<00:02:49.959> so

00:02:50.699 --> 00:02:50.709 
to store references to direct blocks so

00:02:50.709 --> 00:02:52.080 
to store references to direct blocks so
I<00:02:50.739> use<00:02:51.040> all<00:02:51.190> that<00:02:51.340> space<00:02:51.519> to<00:02:51.730> store<00:02:51.880> references

00:02:52.080 --> 00:02:52.090 
I use all that space to store references

00:02:52.090 --> 00:02:54.120 
I use all that space to store references
to<00:02:52.510> direct<00:02:52.810> blocks<00:02:53.050> even<00:02:53.500> the<00:02:53.769> indirect

00:02:54.120 --> 00:02:54.130 
to direct blocks even the indirect

00:02:54.130 --> 00:02:55.680 
to direct blocks even the indirect
blocks<00:02:54.430> shouldn't<00:02:54.850> all<00:02:54.970> point<00:02:55.360> to<00:02:55.450> direct

00:02:55.680 --> 00:02:55.690 
blocks shouldn't all point to direct

00:02:55.690 --> 00:02:57.330 
blocks shouldn't all point to direct
blocks<00:02:55.959> and<00:02:56.440> you<00:02:56.500> can<00:02:56.650> just<00:02:56.800> point<00:02:56.950> a<00:02:57.100> more

00:02:57.330 --> 00:02:57.340 
blocks and you can just point a more

00:02:57.340 --> 00:02:59.759 
blocks and you can just point a more
indirect<00:02:57.880> blocks<00:02:58.239> this<00:02:59.050> gives<00:02:59.410> you<00:02:59.530> file

00:02:59.759 --> 00:02:59.769 
indirect blocks this gives you file

00:02:59.769 --> 00:03:02.820 
indirect blocks this gives you file
sizes<00:03:00.070> of<00:03:00.400> up<00:03:00.700> to<00:03:00.730> 4<00:03:01.120> terabytes<00:03:01.830> representing

00:03:02.820 --> 00:03:02.830 
sizes of up to 4 terabytes representing

00:03:02.830 --> 00:03:05.040 
sizes of up to 4 terabytes representing
files<00:03:03.100> as<00:03:03.430> a<00:03:03.489> table<00:03:04.030> of<00:03:04.120> I<00:03:04.300> nodes<00:03:04.540> has<00:03:04.870> some

00:03:05.040 --> 00:03:05.050 
files as a table of I nodes has some

00:03:05.050 --> 00:03:07.680 
files as a table of I nodes has some
interesting<00:03:05.350> side<00:03:05.800> effects<00:03:06.220> for<00:03:06.850> example<00:03:07.300> you

00:03:07.680 --> 00:03:07.690 
interesting side effects for example you

00:03:07.690 --> 00:03:09.570 
interesting side effects for example you
can<00:03:07.870> run<00:03:08.019> out<00:03:08.140> of<00:03:08.170> file<00:03:08.739> space<00:03:09.100> without

00:03:09.570 --> 00:03:09.580 
can run out of file space without

00:03:09.580 --> 00:03:12.199 
can run out of file space without
actually<00:03:10.330> running<00:03:10.510> out<00:03:10.780> of<00:03:10.840> disk<00:03:11.200> space

00:03:12.199 --> 00:03:12.209 
actually running out of disk space

00:03:12.209 --> 00:03:15.619 
actually running out of disk space
your<00:03:13.049> inode<00:03:13.439> table<00:03:13.650> is<00:03:13.920> a<00:03:13.950> limited<00:03:14.400> size<00:03:14.629> and

00:03:15.619 --> 00:03:15.629 
your inode table is a limited size and

00:03:15.629 --> 00:03:17.360 
your inode table is a limited size and
if<00:03:15.719> you<00:03:15.810> have<00:03:15.930> a<00:03:15.959> whole<00:03:16.200> ton<00:03:16.500> of<00:03:16.709> really<00:03:17.069> tiny

00:03:17.360 --> 00:03:17.370 
if you have a whole ton of really tiny

00:03:17.370 --> 00:03:19.729 
if you have a whole ton of really tiny
files<00:03:17.700> you<00:03:18.420> might<00:03:18.599> run<00:03:18.780> out<00:03:18.930> of<00:03:18.959> spaces<00:03:19.590> in

00:03:19.729 --> 00:03:19.739 
files you might run out of spaces in

00:03:19.739 --> 00:03:21.559 
files you might run out of spaces in
your<00:03:19.799> inode<00:03:20.370> table<00:03:20.609> before<00:03:20.969> you<00:03:21.209> run<00:03:21.390> out<00:03:21.510> of

00:03:21.559 --> 00:03:21.569 
your inode table before you run out of

00:03:21.569 --> 00:03:24.530 
your inode table before you run out of
disk<00:03:21.810> space<00:03:22.609> it's<00:03:23.609> worth<00:03:23.819> noting<00:03:24.180> that<00:03:24.209> I

00:03:24.530 --> 00:03:24.540 
disk space it's worth noting that I

00:03:24.540 --> 00:03:27.229 
disk space it's worth noting that I
nodes<00:03:24.870> are<00:03:24.959> a<00:03:24.989> UNIX<00:03:25.469> thing<00:03:26.030> Apple<00:03:27.030> and

00:03:27.229 --> 00:03:27.239 
nodes are a UNIX thing Apple and

00:03:27.239 --> 00:03:29.089 
nodes are a UNIX thing Apple and
Microsoft<00:03:27.319> both<00:03:28.319> have<00:03:28.500> their<00:03:28.709> own<00:03:28.799> file

00:03:29.089 --> 00:03:29.099 
Microsoft both have their own file

00:03:29.099 --> 00:03:33.890 
Microsoft both have their own file
systems<00:03:30.439> apples<00:03:31.439> HFS+<00:03:32.340> uses<00:03:33.090> a<00:03:33.120> catalog<00:03:33.629> file

00:03:33.890 --> 00:03:33.900 
systems apples HFS+ uses a catalog file

00:03:33.900 --> 00:03:35.449 
systems apples HFS+ uses a catalog file
which<00:03:34.170> is<00:03:34.319> a<00:03:34.349> little<00:03:34.680> analogous<00:03:35.159> to<00:03:35.310> high

00:03:35.449 --> 00:03:35.459 
which is a little analogous to high

00:03:35.459 --> 00:03:39.649 
which is a little analogous to high
nodes<00:03:36.379> Microsoft's<00:03:37.379> NTFS<00:03:38.310> uses<00:03:38.969> file<00:03:39.209> record

00:03:39.649 --> 00:03:39.659 
nodes Microsoft's NTFS uses file record

00:03:39.659 --> 00:03:41.420 
nodes Microsoft's NTFS uses file record
attributes<00:03:40.139> which<00:03:40.620> also<00:03:40.950> serve<00:03:41.129> the<00:03:41.280> same

00:03:41.420 --> 00:03:41.430 
attributes which also serve the same

00:03:41.430 --> 00:03:50.850 
attributes which also serve the same
purpose

00:03:50.850 --> 00:03:50.860 

00:03:50.860 --> 00:03:52.920 

you

