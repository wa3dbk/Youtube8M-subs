WEBVTT
Kind: captions
Language: en

00:00:07.230 --> 00:00:10.020 

hello<00:00:08.230> my<00:00:08.530> name<00:00:08.680> is<00:00:08.709> Paul<00:00:09.040> jongau<00:00:09.430> ski<00:00:09.700> and<00:00:09.910> I'm

00:00:10.020 --> 00:00:10.030 
hello my name is Paul jongau ski and I'm

00:00:10.030 --> 00:00:12.629 
hello my name is Paul jongau ski and I'm
a<00:00:10.059> member<00:00:10.330> of<00:00:10.510> the<00:00:10.539> AMD<00:00:11.020> code<00:00:11.230> analyst<00:00:11.619> team<00:00:11.920> in

00:00:12.629 --> 00:00:12.639 
a member of the AMD code analyst team in

00:00:12.639 --> 00:00:14.549 
a member of the AMD code analyst team in
this<00:00:12.850> demo<00:00:13.209> I'd<00:00:13.389> like<00:00:13.570> to<00:00:13.690> show<00:00:13.869> you<00:00:13.930> how<00:00:14.139> a<00:00:14.350> and

00:00:14.549 --> 00:00:14.559 
this demo I'd like to show you how a and

00:00:14.559 --> 00:00:16.109 
this demo I'd like to show you how a and
decode<00:00:14.889> analyst<00:00:15.309> can<00:00:15.520> help<00:00:15.730> you<00:00:15.850> to<00:00:16.000> improve

00:00:16.109 --> 00:00:16.119 
decode analyst can help you to improve

00:00:16.119 --> 00:00:17.360 
decode analyst can help you to improve
the<00:00:16.420> performance<00:00:16.600> of<00:00:17.140> your<00:00:17.320> application

00:00:17.360 --> 00:00:17.370 
the performance of your application

00:00:17.370 --> 00:00:21.090 
the performance of your application
program<00:00:19.290> AMD<00:00:20.290> code<00:00:20.500> analyst<00:00:20.920> is<00:00:21.070> a

00:00:21.090 --> 00:00:21.100 
program AMD code analyst is a

00:00:21.100 --> 00:00:23.430 
program AMD code analyst is a
performance<00:00:21.490> analysis<00:00:22.210> tool<00:00:22.420> suite<00:00:22.660> it

00:00:23.430 --> 00:00:23.440 
performance analysis tool suite it

00:00:23.440 --> 00:00:25.410 
performance analysis tool suite it
measures<00:00:23.830> program<00:00:24.250> performance<00:00:24.460> and<00:00:25.090> helps

00:00:25.410 --> 00:00:25.420 
measures program performance and helps

00:00:25.420 --> 00:00:27.680 
measures program performance and helps
you<00:00:25.510> to<00:00:25.630> find<00:00:25.869> and<00:00:26.110> fix<00:00:26.289> performance<00:00:26.950> issues

00:00:27.680 --> 00:00:27.690 
you to find and fix performance issues

00:00:27.690 --> 00:00:30.300 
you to find and fix performance issues
AMD<00:00:28.690> code<00:00:28.900> analyst<00:00:29.320> is<00:00:29.470> available<00:00:29.980> for<00:00:30.190> both

00:00:30.300 --> 00:00:30.310 
AMD code analyst is available for both

00:00:30.310 --> 00:00:33.090 
AMD code analyst is available for both
windows<00:00:30.520> and<00:00:30.730> linux<00:00:31.110> it's<00:00:32.110> a<00:00:32.259> free<00:00:32.500> profiling

00:00:33.090 --> 00:00:33.100 
windows and linux it's a free profiling

00:00:33.100 --> 00:00:36.180 
windows and linux it's a free profiling
tool<00:00:33.250> from<00:00:33.550> AMD<00:00:33.910> developer<00:00:34.569> central<00:00:35.190> program

00:00:36.180 --> 00:00:36.190 
tool from AMD developer central program

00:00:36.190 --> 00:00:37.649 
tool from AMD developer central program
performance<00:00:36.399> tuning<00:00:37.059> is<00:00:37.210> a<00:00:37.239> hands-on

00:00:37.649 --> 00:00:37.659 
performance tuning is a hands-on

00:00:37.659 --> 00:00:40.649 
performance tuning is a hands-on
iterative<00:00:38.440> process<00:00:39.030> there<00:00:40.030> are<00:00:40.149> four<00:00:40.420> main

00:00:40.649 --> 00:00:40.659 
iterative process there are four main

00:00:40.659 --> 00:00:43.110 
iterative process there are four main
steps<00:00:40.870> the<00:00:41.859> first<00:00:41.890> step<00:00:42.219> is<00:00:42.550> to<00:00:42.579> measure<00:00:42.850> the

00:00:43.110 --> 00:00:43.120 
steps the first step is to measure the

00:00:43.120 --> 00:00:45.930 
steps the first step is to measure the
performance<00:00:43.300> of<00:00:43.780> your<00:00:43.839> program<00:00:44.579> step<00:00:45.579> 2<00:00:45.760> is<00:00:45.789> to

00:00:45.930 --> 00:00:45.940 
performance of your program step 2 is to

00:00:45.940 --> 00:00:47.849 
performance of your program step 2 is to
identify<00:00:46.149> hotspots<00:00:46.719> in<00:00:47.170> the<00:00:47.289> program<00:00:47.679> where

00:00:47.849 --> 00:00:47.859 
identify hotspots in the program where

00:00:47.859 --> 00:00:50.090 
identify hotspots in the program where
performance<00:00:48.429> tuning<00:00:48.760> has<00:00:48.969> the<00:00:49.149> most<00:00:49.359> impact

00:00:50.090 --> 00:00:50.100 
performance tuning has the most impact

00:00:50.100 --> 00:00:52.439 
performance tuning has the most impact
hotspots<00:00:51.100> are<00:00:51.280> typically<00:00:51.609> the<00:00:51.789> places<00:00:52.210> in<00:00:52.239> the

00:00:52.439 --> 00:00:52.449 
hotspots are typically the places in the

00:00:52.449 --> 00:00:54.389 
hotspots are typically the places in the
program<00:00:52.839> that<00:00:53.019> consume<00:00:53.409> the<00:00:53.559> most<00:00:53.589> execution

00:00:54.389 --> 00:00:54.399 
program that consume the most execution

00:00:54.399 --> 00:00:57.299 
program that consume the most execution
time<00:00:54.870> the<00:00:55.870> third<00:00:56.109> step<00:00:56.350> is<00:00:56.530> to<00:00:56.679> diagnose<00:00:57.129> the

00:00:57.299 --> 00:00:57.309 
time the third step is to diagnose the

00:00:57.309 --> 00:01:00.719 
time the third step is to diagnose the
issue<00:00:57.429> and<00:00:57.819> identify<00:00:58.449> its<00:00:58.629> root<00:00:58.839> cause<00:00:59.729> with

00:01:00.719 --> 00:01:00.729 
issue and identify its root cause with

00:01:00.729 --> 00:01:02.610 
issue and identify its root cause with
the<00:01:00.760> root<00:01:00.999> cause<00:01:01.209> in<00:01:01.479> mind<00:01:01.690> the<00:01:01.929> final<00:01:02.260> step<00:01:02.379> is

00:01:02.610 --> 00:01:02.620 
the root cause in mind the final step is

00:01:02.620 --> 00:01:04.770 
the root cause in mind the final step is
to<00:01:02.769> change<00:01:03.039> the<00:01:03.100> program<00:01:03.609> the<00:01:03.850> tuning<00:01:04.629> process

00:01:04.770 --> 00:01:04.780 
to change the program the tuning process

00:01:04.780 --> 00:01:06.749 
to change the program the tuning process
is<00:01:05.229> iterative<00:01:05.560> because<00:01:06.220> once<00:01:06.430> we<00:01:06.549> have

00:01:06.749 --> 00:01:06.759 
is iterative because once we have

00:01:06.759 --> 00:01:08.670 
is iterative because once we have
changed<00:01:07.090> the<00:01:07.180> program<00:01:07.600> we<00:01:08.140> need<00:01:08.289> to<00:01:08.409> run<00:01:08.560> it

00:01:08.670 --> 00:01:08.680 
changed the program we need to run it

00:01:08.680 --> 00:01:10.050 
changed the program we need to run it
again<00:01:08.920> to<00:01:09.070> see<00:01:09.250> if<00:01:09.280> the<00:01:09.460> change<00:01:09.759> actually

00:01:10.050 --> 00:01:10.060 
again to see if the change actually

00:01:10.060 --> 00:01:12.990 
again to see if the change actually
improve<00:01:10.570> performance<00:01:11.369> AMD<00:01:12.369> code<00:01:12.579> analyst

00:01:12.990 --> 00:01:13.000 
improve performance AMD code analyst

00:01:13.000 --> 00:01:15.870 
improve performance AMD code analyst
helps<00:01:13.360> with<00:01:13.539> all<00:01:13.719> these<00:01:13.990> steps<00:01:14.549> now<00:01:15.549> we<00:01:15.610> will

00:01:15.870 --> 00:01:15.880 
helps with all these steps now we will

00:01:15.880 --> 00:01:17.550 
helps with all these steps now we will
show<00:01:15.939> how<00:01:16.270> easy<00:01:16.299> it<00:01:16.719> is<00:01:16.810> to<00:01:16.869> get<00:01:17.140> started<00:01:17.439> with

00:01:17.550 --> 00:01:17.560 
show how easy it is to get started with

00:01:17.560 --> 00:01:19.540 
show how easy it is to get started with
AMD<00:01:18.100> code<00:01:18.280> annals

00:01:19.540 --> 00:01:19.550 
AMD code annals

00:01:19.550 --> 00:01:21.580 
AMD code annals
we<00:01:20.090> first<00:01:20.360> create<00:01:20.660> a<00:01:20.690> new<00:01:20.960> code<00:01:21.200> analyst

00:01:21.580 --> 00:01:21.590 
we first create a new code analyst

00:01:21.590 --> 00:01:24.070 
we first create a new code analyst
project<00:01:22.100> we<00:01:22.880> tell<00:01:23.090> code<00:01:23.300> analyst<00:01:23.720> the<00:01:23.750> name<00:01:23.990> of

00:01:24.070 --> 00:01:24.080 
project we tell code analyst the name of

00:01:24.080 --> 00:01:25.570 
project we tell code analyst the name of
the<00:01:24.140> project<00:01:24.350> in<00:01:24.800> the<00:01:24.980> directory<00:01:25.370> location

00:01:25.570 --> 00:01:25.580 
the project in the directory location

00:01:25.580 --> 00:01:28.810 
the project in the directory location
for<00:01:26.180> the<00:01:26.270> project<00:01:27.190> next<00:01:28.190> we<00:01:28.340> enter<00:01:28.550> the<00:01:28.670> name

00:01:28.810 --> 00:01:28.820 
for the project next we enter the name

00:01:28.820 --> 00:01:30.850 
for the project next we enter the name
of<00:01:28.850> the<00:01:28.970> application<00:01:29.450> program<00:01:29.960> to<00:01:30.110> launch<00:01:30.350> and

00:01:30.850 --> 00:01:30.860 
of the application program to launch and

00:01:30.860 --> 00:01:33.610 
of the application program to launch and
the<00:01:30.980> kind<00:01:31.190> of<00:01:31.310> analysis<00:01:31.820> to<00:01:31.940> perform<00:01:32.390> in<00:01:32.660> this

00:01:33.610 --> 00:01:33.620 
the kind of analysis to perform in this

00:01:33.620 --> 00:01:35.800 
the kind of analysis to perform in this
case<00:01:33.830> we'll<00:01:34.070> use<00:01:34.100> time-based<00:01:35.000> profiling<00:01:35.660> to

00:01:35.800 --> 00:01:35.810 
case we'll use time-based profiling to

00:01:35.810 --> 00:01:37.300 
case we'll use time-based profiling to
see<00:01:36.020> where<00:01:36.200> the<00:01:36.290> program<00:01:36.500> is<00:01:36.830> spending<00:01:37.130> its

00:01:37.300 --> 00:01:37.310 
see where the program is spending its

00:01:37.310 --> 00:01:40.600 
see where the program is spending its
time<00:01:37.990> then<00:01:38.990> we<00:01:39.140> click<00:01:39.350> on<00:01:39.530> the<00:01:39.650> start<00:01:39.890> icon<00:01:40.070> to

00:01:40.600 --> 00:01:40.610 
time then we click on the start icon to

00:01:40.610 --> 00:01:42.340 
time then we click on the start icon to
launch<00:01:40.640> the<00:01:41.030> application<00:01:41.150> and<00:01:41.780> measure<00:01:42.110> its

00:01:42.340 --> 00:01:42.350 
launch the application and measure its

00:01:42.350 --> 00:01:45.280 
launch the application and measure its
performance<00:01:43.510> code<00:01:44.510> analyst<00:01:44.870> displays

00:01:45.280 --> 00:01:45.290 
performance code analyst displays

00:01:45.290 --> 00:01:47.170 
performance code analyst displays
profile<00:01:45.800> information<00:01:46.130> when<00:01:46.610> measurement<00:01:47.060> is

00:01:47.170 --> 00:01:47.180 
profile information when measurement is

00:01:47.180 --> 00:01:49.630 
profile information when measurement is
complete<00:01:47.920> profiles<00:01:48.920> are<00:01:49.100> shown<00:01:49.340> in<00:01:49.520> either

00:01:49.630 --> 00:01:49.640 
complete profiles are shown in either

00:01:49.640 --> 00:01:52.690 
complete profiles are shown in either
tabular<00:01:50.240> for<00:01:50.570> graphical<00:01:50.990> form<00:01:51.350> the<00:01:52.250> profile

00:01:52.690 --> 00:01:52.700 
tabular for graphical form the profile

00:01:52.700 --> 00:01:54.490 
tabular for graphical form the profile
information<00:01:53.000> produced<00:01:53.510> by<00:01:53.810> code<00:01:54.050> analyst

00:01:54.490 --> 00:01:54.500 
information produced by code analyst

00:01:54.500 --> 00:01:56.320 
information produced by code analyst
shows<00:01:54.890> the<00:01:55.070> hottest<00:01:55.400> software<00:01:55.790> locations

00:01:56.320 --> 00:01:56.330 
shows the hottest software locations

00:01:56.330 --> 00:01:58.450 
shows the hottest software locations
starting<00:01:57.230> with<00:01:57.320> modules<00:01:57.740> and<00:01:57.890> processes

00:01:58.450 --> 00:01:58.460 
starting with modules and processes

00:01:58.460 --> 00:02:01.300 
starting with modules and processes
right<00:01:59.000> down<00:01:59.210> to<00:01:59.390> the<00:01:59.510> source<00:01:59.720> code<00:02:00.310> by

00:02:01.300 --> 00:02:01.310 
right down to the source code by

00:02:01.310 --> 00:02:02.980 
right down to the source code by
double-clicking<00:02:01.640> the<00:02:02.060> module<00:02:02.390> or<00:02:02.510> process

00:02:02.980 --> 00:02:02.990 
double-clicking the module or process

00:02:02.990 --> 00:02:05.350 
double-clicking the module or process
belonging<00:02:03.350> to<00:02:03.560> the<00:02:03.680> application<00:02:04.280> program<00:02:04.730> we

00:02:05.350 --> 00:02:05.360 
belonging to the application program we

00:02:05.360 --> 00:02:06.700 
belonging to the application program we
can<00:02:05.540> drill<00:02:05.750> down<00:02:05.780> to<00:02:06.200> the<00:02:06.290> program's

00:02:06.700 --> 00:02:06.710 
can drill down to the program's

00:02:06.710 --> 00:02:08.680 
can drill down to the program's
functions<00:02:07.250> in<00:02:07.730> this<00:02:07.940> way<00:02:08.149> we<00:02:08.179> can<00:02:08.360> quickly

00:02:08.680 --> 00:02:08.690 
functions in this way we can quickly

00:02:08.690 --> 00:02:10.510 
functions in this way we can quickly
find<00:02:08.869> the<00:02:09.350> functions<00:02:09.770> and<00:02:09.920> code<00:02:10.130> that<00:02:10.369> take

00:02:10.510 --> 00:02:10.520 
find the functions and code that take

00:02:10.520 --> 00:02:13.780 
find the functions and code that take
the<00:02:10.670> most<00:02:10.880> execution<00:02:11.540> time<00:02:11.890> hotspots<00:02:12.890> the

00:02:13.780 --> 00:02:13.790 
the most execution time hotspots the

00:02:13.790 --> 00:02:15.550 
the most execution time hotspots the
code<00:02:14.030> density<00:02:14.420> chart<00:02:14.750> shows<00:02:15.050> the<00:02:15.230> hottest

00:02:15.550 --> 00:02:15.560 
code density chart shows the hottest

00:02:15.560 --> 00:02:17.530 
code density chart shows the hottest
spots<00:02:15.770> in<00:02:15.950> the<00:02:16.070> source<00:02:16.310> code<00:02:16.520> and<00:02:16.730> makes<00:02:17.390> it

00:02:17.530 --> 00:02:17.540 
spots in the source code and makes it

00:02:17.540 --> 00:02:20.170 
spots in the source code and makes it
easy<00:02:17.750> to<00:02:17.870> navigate<00:02:18.080> to<00:02:18.530> them<00:02:18.760> code<00:02:19.760> analyst

00:02:20.170 --> 00:02:20.180 
easy to navigate to them code analyst

00:02:20.180 --> 00:02:22.000 
easy to navigate to them code analyst
provides<00:02:20.540> several<00:02:20.840> predefined<00:02:21.200> kinds<00:02:21.920> of

00:02:22.000 --> 00:02:22.010 
provides several predefined kinds of

00:02:22.010 --> 00:02:24.580 
provides several predefined kinds of
analysis<00:02:22.630> event-based<00:02:23.630> profiling<00:02:24.440> or

00:02:24.580 --> 00:02:24.590 
analysis event-based profiling or

00:02:24.590 --> 00:02:26.530 
analysis event-based profiling or
instruction<00:02:25.190> based<00:02:25.340> sampling<00:02:25.760> are<00:02:26.090> used<00:02:26.390> to

00:02:26.530 --> 00:02:26.540 
instruction based sampling are used to

00:02:26.540 --> 00:02:29.380 
instruction based sampling are used to
diagnose<00:02:26.959> hot<00:02:27.200> spots<00:02:27.530> for<00:02:28.120> example<00:02:29.120> we<00:02:29.239> can

00:02:29.380 --> 00:02:29.390 
diagnose hot spots for example we can

00:02:29.390 --> 00:02:31.210 
diagnose hot spots for example we can
find<00:02:29.660> out<00:02:29.870> how<00:02:30.080> well<00:02:30.290> the<00:02:30.410> program<00:02:30.800> makes<00:02:31.010> use

00:02:31.210 --> 00:02:31.220 
find out how well the program makes use

00:02:31.220 --> 00:02:33.130 
find out how well the program makes use
of<00:02:31.250> cache<00:02:31.640> memory<00:02:32.090> by<00:02:32.690> choosing<00:02:32.930> the

00:02:33.130 --> 00:02:33.140 
of cache memory by choosing the

00:02:33.140 --> 00:02:35.850 
of cache memory by choosing the
investigate<00:02:33.709> data<00:02:33.920> access<00:02:34.430> configuration

00:02:35.850 --> 00:02:35.860 
investigate data access configuration

00:02:35.860 --> 00:02:38.410 
investigate data access configuration
event-based<00:02:36.860> profiling<00:02:37.700> and<00:02:37.880> instruction

00:02:38.410 --> 00:02:38.420 
event-based profiling and instruction

00:02:38.420 --> 00:02:40.750 
event-based profiling and instruction
based<00:02:38.600> sampling<00:02:39.020> use<00:02:39.560> AMD's<00:02:40.070> performance

00:02:40.750 --> 00:02:40.760 
based sampling use AMD's performance

00:02:40.760 --> 00:02:42.610 
based sampling use AMD's performance
monitoring<00:02:41.209> hardware<00:02:41.720> to<00:02:42.050> get<00:02:42.230> detailed

00:02:42.610 --> 00:02:42.620 
monitoring hardware to get detailed

00:02:42.620 --> 00:02:45.940 
monitoring hardware to get detailed
information<00:02:42.830> about<00:02:43.430> program<00:02:44.060> behavior<00:02:44.950> with

00:02:45.940 --> 00:02:45.950 
information about program behavior with

00:02:45.950 --> 00:02:47.500 
information about program behavior with
code<00:02:46.190> analyst<00:02:46.610> we<00:02:46.790> can<00:02:46.940> see<00:02:47.150> where<00:02:47.360> the

00:02:47.500 --> 00:02:47.510 
code analyst we can see where the

00:02:47.510 --> 00:02:49.630 
code analyst we can see where the
program<00:02:47.720> is<00:02:48.110> causing<00:02:48.530> data<00:02:48.739> cache<00:02:48.980> misses<00:02:49.310> and

00:02:49.630 --> 00:02:49.640 
program is causing data cache misses and

00:02:49.640 --> 00:02:52.260 
program is causing data cache misses and
other<00:02:50.030> performance<00:02:50.660> robbing<00:02:51.050> events

00:02:52.260 --> 00:02:52.270 
other performance robbing events

00:02:52.270 --> 00:02:54.580 
other performance robbing events
bottlenecks<00:02:53.270> such<00:02:53.450> as<00:02:53.600> these<00:02:53.810> are<00:02:54.020> removed<00:02:54.380> by

00:02:54.580 --> 00:02:54.590 
bottlenecks such as these are removed by

00:02:54.590 --> 00:02:56.290 
bottlenecks such as these are removed by
changing<00:02:55.040> the<00:02:55.130> program<00:02:55.550> and<00:02:55.790> its<00:02:56.120> underlying

00:02:56.290 --> 00:02:56.300 
changing the program and its underlying

00:02:56.300 --> 00:02:59.620 
changing the program and its underlying
algorithm<00:02:57.670> after<00:02:58.670> changing<00:02:58.910> the<00:02:59.120> program<00:02:59.480> and

00:02:59.620 --> 00:02:59.630 
algorithm after changing the program and

00:02:59.630 --> 00:03:01.570 
algorithm after changing the program and
rebuilding<00:03:00.080> it<00:03:00.260> we<00:03:00.560> measure<00:03:00.770> with<00:03:00.980> AMD<00:03:01.370> code

00:03:01.570 --> 00:03:01.580 
rebuilding it we measure with AMD code

00:03:01.580 --> 00:03:03.400 
rebuilding it we measure with AMD code
analysts<00:03:02.060> to<00:03:02.180> see<00:03:02.330> if<00:03:02.420> the<00:03:02.540> changes<00:03:02.720> decreased

00:03:03.400 --> 00:03:03.410 
analysts to see if the changes decreased

00:03:03.410 --> 00:03:05.890 
analysts to see if the changes decreased
execution<00:03:04.040> time<00:03:04.250> of<00:03:05.090> course<00:03:05.390> the<00:03:05.630> amount<00:03:05.840> of

00:03:05.890 --> 00:03:05.900 
execution time of course the amount of

00:03:05.900 --> 00:03:08.080 
execution time of course the amount of
speed<00:03:06.140> up<00:03:06.260> will<00:03:06.410> vary<00:03:06.700> we<00:03:07.700> reduce<00:03:08.060> the

00:03:08.080 --> 00:03:08.090 
speed up will vary we reduce the

00:03:08.090 --> 00:03:10.000 
speed up will vary we reduce the
execution<00:03:08.720> time<00:03:08.930> with<00:03:09.140> a<00:03:09.170> simple<00:03:09.590> program

00:03:10.000 --> 00:03:10.010 
execution time with a simple program

00:03:10.010 --> 00:03:13.990 
execution time with a simple program
from<00:03:10.400> 75<00:03:10.970> seconds<00:03:11.390> to<00:03:11.570> 25<00:03:12.050> seconds<00:03:12.790> AMD<00:03:13.790> code

00:03:13.990 --> 00:03:14.000 
from 75 seconds to 25 seconds AMD code

00:03:14.000 --> 00:03:15.729 
from 75 seconds to 25 seconds AMD code
analyst<00:03:14.390> collect<00:03:14.720> system-wide<00:03:15.200> data<00:03:15.470> and

00:03:15.729 --> 00:03:15.739 
analyst collect system-wide data and

00:03:15.739 --> 00:03:18.100 
analyst collect system-wide data and
profiles<00:03:16.190> application<00:03:16.880> programs<00:03:17.330> libraries

00:03:18.100 --> 00:03:18.110 
profiles application programs libraries

00:03:18.110 --> 00:03:20.080 
profiles application programs libraries
device<00:03:18.530> drivers<00:03:19.010> and<00:03:19.250> even<00:03:19.580> the<00:03:19.670> operating

00:03:20.080 --> 00:03:20.090 
device drivers and even the operating

00:03:20.090 --> 00:03:22.990 
device drivers and even the operating
system<00:03:20.420> kernel<00:03:21.100> data<00:03:22.100> is<00:03:22.280> collected<00:03:22.459> on<00:03:22.820> all

00:03:22.990 --> 00:03:23.000 
system kernel data is collected on all

00:03:23.000 --> 00:03:25.270 
system kernel data is collected on all
cores<00:03:23.269> in<00:03:23.600> a<00:03:23.660> multi-core<00:03:24.200> system

00:03:25.270 --> 00:03:25.280 
cores in a multi-core system

00:03:25.280 --> 00:03:27.820 
cores in a multi-core system
print<00:03:25.970> profiling<00:03:26.540> is<00:03:26.660> a<00:03:26.690> feature<00:03:26.990> of<00:03:27.110> AMD<00:03:27.620> code

00:03:27.820 --> 00:03:27.830 
print profiling is a feature of AMD code

00:03:27.830 --> 00:03:30.280 
print profiling is a feature of AMD code
analyst<00:03:28.250> for<00:03:28.430> Windows<00:03:28.790> a<00:03:29.060> thread<00:03:29.870> profile

00:03:30.280 --> 00:03:30.290 
analyst for Windows a thread profile

00:03:30.290 --> 00:03:32.440 
analyst for Windows a thread profile
shows<00:03:30.620> for<00:03:30.890> utilization<00:03:31.280> and<00:03:31.819> the<00:03:32.060> extent<00:03:32.390> to

00:03:32.440 --> 00:03:32.450 
shows for utilization and the extent to

00:03:32.450 --> 00:03:35.110 
shows for utilization and the extent to
which<00:03:32.630> threads<00:03:32.990> can<00:03:33.170> execute<00:03:33.500> in<00:03:33.770> parallel<00:03:34.120> it

00:03:35.110 --> 00:03:35.120 
which threads can execute in parallel it

00:03:35.120 --> 00:03:36.910 
which threads can execute in parallel it
identifies<00:03:35.660> poor<00:03:36.020> thread<00:03:36.319> affinity<00:03:36.770> and

00:03:36.910 --> 00:03:36.920 
identifies poor thread affinity and

00:03:36.920 --> 00:03:39.610 
identifies poor thread affinity and
remote<00:03:37.370> memory<00:03:37.580> accesses<00:03:38.350> both<00:03:39.350> of<00:03:39.500> these

00:03:39.610 --> 00:03:39.620 
remote memory accesses both of these

00:03:39.620 --> 00:03:41.590 
remote memory accesses both of these
problems<00:03:39.890> can<00:03:40.190> slow<00:03:40.520> down<00:03:40.670> a<00:03:40.730> program<00:03:41.270> in<00:03:41.480> a

00:03:41.590 --> 00:03:41.600 
problems can slow down a program in a

00:03:41.600 --> 00:03:44.080 
problems can slow down a program in a
NUMA<00:03:41.930> environment<00:03:42.560> this<00:03:43.400> demo<00:03:43.670> only

00:03:44.080 --> 00:03:44.090 
NUMA environment this demo only

00:03:44.090 --> 00:03:47.140 
NUMA environment this demo only
scratches<00:03:44.569> the<00:03:44.600> surface<00:03:45.489> AMD<00:03:46.489> code<00:03:46.700> analyst

00:03:47.140 --> 00:03:47.150 
scratches the surface AMD code analyst

00:03:47.150 --> 00:03:48.970 
scratches the surface AMD code analyst
provides<00:03:47.540> many<00:03:47.840> advanced<00:03:48.350> features<00:03:48.709> such<00:03:48.950> as

00:03:48.970 --> 00:03:48.980 
provides many advanced features such as

00:03:48.980 --> 00:03:50.710 
provides many advanced features such as
call<00:03:49.310> stack<00:03:49.580> sampling<00:03:50.060> and<00:03:50.239> pipeline

00:03:50.710 --> 00:03:50.720 
call stack sampling and pipeline

00:03:50.720 --> 00:03:53.770 
call stack sampling and pipeline
simulation<00:03:51.700> AMD<00:03:52.700> code<00:03:52.910> analyst<00:03:53.300> for<00:03:53.510> Windows

00:03:53.770 --> 00:03:53.780 
simulation AMD code analyst for Windows

00:03:53.780 --> 00:03:56.470 
simulation AMD code analyst for Windows
supports<00:03:54.290> microsoft<00:03:54.830> windows<00:03:55.069> XP<00:03:55.480> windows

00:03:56.470 --> 00:03:56.480 
supports microsoft windows XP windows

00:03:56.480 --> 00:04:00.759 
supports microsoft windows XP windows
2003<00:03:57.140> vista<00:03:58.070> and<00:03:58.220> windows<00:03:58.580> server<00:03:59.030> 2008<00:03:59.780> it<00:04:00.650> is

00:04:00.759 --> 00:04:00.769 
2003 vista and windows server 2008 it is

00:04:00.769 --> 00:04:02.560 
2003 vista and windows server 2008 it is
fully<00:04:00.980> integrated<00:04:01.250> into<00:04:01.880> Microsoft<00:04:02.420> Visual

00:04:02.560 --> 00:04:02.570 
fully integrated into Microsoft Visual

00:04:02.570 --> 00:04:07.300 
fully integrated into Microsoft Visual
Studio<00:04:03.040> 2005<00:04:04.040> and<00:04:04.120> 2008<00:04:05.709> AMD<00:04:06.709> code<00:04:06.920> analyst

00:04:07.300 --> 00:04:07.310 
Studio 2005 and 2008 AMD code analyst

00:04:07.310 --> 00:04:10.059 
Studio 2005 and 2008 AMD code analyst
for<00:04:07.519> linux<00:04:07.910> is<00:04:08.090> open<00:04:08.390> source<00:04:08.630> in<00:04:09.500> addition<00:04:09.800> to

00:04:10.059 --> 00:04:10.069 
for linux is open source in addition to

00:04:10.069 --> 00:04:12.490 
for linux is open source in addition to
source<00:04:10.370> pre-built<00:04:11.000> rpms<00:04:11.600> are<00:04:11.720> available<00:04:12.290> for

00:04:12.490 --> 00:04:12.500 
source pre-built rpms are available for

00:04:12.500 --> 00:04:14.949 
source pre-built rpms are available for
red<00:04:12.739> hat<00:04:12.920> enterprise<00:04:13.160> linux<00:04:13.580> and<00:04:14.300> fedora<00:04:14.660> and

00:04:14.949 --> 00:04:14.959 
red hat enterprise linux and fedora and

00:04:14.959 --> 00:04:17.650 
red hat enterprise linux and fedora and
for<00:04:15.680> novell<00:04:16.010> suse<00:04:16.310> enterprise<00:04:17.000> linux<00:04:17.269> server

00:04:17.650 --> 00:04:17.660 
for novell suse enterprise linux server

00:04:17.660 --> 00:04:20.920 
for novell suse enterprise linux server
and<00:04:17.989> opensuse<00:04:19.030> if<00:04:20.030> you<00:04:20.209> are<00:04:20.329> interested<00:04:20.630> in

00:04:20.920 --> 00:04:20.930 
and opensuse if you are interested in

00:04:20.930 --> 00:04:22.300 
and opensuse if you are interested in
getting<00:04:21.169> the<00:04:21.229> most<00:04:21.380> performance<00:04:22.010> out<00:04:22.160> of<00:04:22.190> your

00:04:22.300 --> 00:04:22.310 
getting the most performance out of your

00:04:22.310 --> 00:04:24.490 
getting the most performance out of your
code<00:04:22.640> then<00:04:23.090> AMD<00:04:23.540> code<00:04:23.750> analyst<00:04:24.200> is<00:04:24.380> an

00:04:24.490 --> 00:04:24.500 
code then AMD code analyst is an

00:04:24.500 --> 00:04:27.100 
code then AMD code analyst is an
excellent<00:04:24.770> place<00:04:25.100> to<00:04:25.130> start<00:04:25.479> we<00:04:26.479> offer<00:04:26.660> email

00:04:27.100 --> 00:04:27.110 
excellent place to start we offer email

00:04:27.110 --> 00:04:29.170 
excellent place to start we offer email
support<00:04:27.560> and<00:04:27.860> user<00:04:28.040> forums<00:04:28.550> if<00:04:28.729> you<00:04:28.850> need<00:04:29.030> help

00:04:29.170 --> 00:04:29.180 
support and user forums if you need help

00:04:29.180 --> 00:04:31.990 
support and user forums if you need help
getting<00:04:29.479> started<00:04:30.220> AMD<00:04:31.220> code<00:04:31.430> analyst<00:04:31.850> is

00:04:31.990 --> 00:04:32.000 
getting started AMD code analyst is

00:04:32.000 --> 00:04:33.850 
getting started AMD code analyst is
offered<00:04:32.360> as<00:04:32.479> a<00:04:32.510> free<00:04:32.810> download<00:04:32.840> to<00:04:33.410> registered

00:04:33.850 --> 00:04:33.860 
offered as a free download to registered

00:04:33.860 --> 00:04:36.510 
offered as a free download to registered
members<00:04:33.890> of<00:04:34.400> AMD<00:04:34.880> developer<00:04:35.390> central

00:04:36.510 --> 00:04:36.520 
members of AMD developer central

00:04:36.520 --> 00:04:49.959 
members of AMD developer central
download<00:04:37.520> AMD<00:04:37.760> code<00:04:38.150> analyst<00:04:38.570> today

00:04:49.959 --> 00:04:49.969 

00:04:49.969 --> 00:04:52.029 

you

