WEBVTT
Kind: captions
Language: en

00:00:04.750 --> 00:00:09.830
 Welcome to the method class with 

00:00:07.340 --> 00:00:12.379
 variable arguments so far all the 

00:00:09.830 --> 00:00:15.889
 The methods you built used a 

00:00:12.379 --> 00:00:18.440
 number of arguments by 

00:00:15.889 --> 00:00:20.840
 example the mathematical class that you 

00:00:18.440 --> 00:00:24.140
 He built some classes behind has a 

00:00:20.840 --> 00:00:26.750
 sum method that adds two numbers 

00:00:24.140 --> 00:00:32.119
 defined here in their set of 

00:00:26.750 --> 00:00:36.079
 arguments running this test class 

00:00:32.119 --> 00:00:43.130
 we have here the result of the sum of 

00:00:36.079 --> 00:00:46.310
 two numbers but imagine that the user 

00:00:43.130 --> 00:00:49.030
 want to spend a larger amount 

00:00:46.310 --> 00:00:52.040
 argument diary 

00:00:49.030 --> 00:00:56.149
 your sum method no longer supports it 

00:00:52.040 --> 00:00:59.660
 an indefinite number of arguments but 

00:00:56.149 --> 00:01:01.700
 you can change your method to 

00:00:59.660 --> 00:01:05.990
 receive an indefinite number of 

00:01:01.700 --> 00:01:06.860
 arguments, how can this be 

00:01:05.990 --> 00:01:13.240
 done 

00:01:06.860 --> 00:01:18.229
 you define the type of your variable 

00:01:13.240 --> 00:01:22.789
 followed by three dots, and then you can 

00:01:18.229 --> 00:01:26.170
 enter the name of this argument 

00:01:22.789 --> 00:01:29.479
 then this argument numbers actually 

00:01:26.170 --> 00:01:31.969
 indicates a list of numbers that the 

00:01:29.479 --> 00:01:33.549
 user will inform at the moment that he 

00:01:31.969 --> 00:01:37.399
 call this method 

00:01:33.549 --> 00:01:39.950
 these numbers they are converted into 

00:01:37.399 --> 00:01:42.229
 moment you compile class into one 

00:01:39.950 --> 00:01:45.200
 king in fact the moment you 

00:01:42.229 --> 00:01:46.099
 execute this method they are converted 

00:01:45.200 --> 00:01:48.560
 in a king 

00:01:46.099 --> 00:01:54.429
 that is you receive here inside the body 

00:01:48.560 --> 00:01:54.429
 of the method an array called numbers 

00:01:55.279 --> 00:02:03.399
 so here in you could be 

00:01:59.739 --> 00:02:05.950
 total you can for example 

00:02:03.399 --> 00:02:10.700
 go through the numbers of this king 

00:02:05.950 --> 00:02:11.840
 here using the liner is that the forint 

00:02:10.700 --> 00:02:15.730
 you already learned 

00:02:11.840 --> 00:02:17.690
 so I'll pick up each of the numbers here 

00:02:15.730 --> 00:02:22.010
 inside 

00:02:17.690 --> 00:02:26.020
 I went down to the king and here I could 

00:02:22.010 --> 00:02:26.020
 increase these numbers 

00:02:28.640 --> 00:02:36.890
 we will define a total variable for 

00:02:31.520 --> 00:02:41.420
 receive this more equal total increment 

00:02:36.890 --> 00:02:43.100
 the current number in the king and at the end 

00:02:41.420 --> 00:02:46.150
 people return 

00:02:43.100 --> 00:02:46.150
 this total 

00:02:48.530 --> 00:02:56.600
 now our method already supports this 

00:02:51.740 --> 00:02:59.830
 indefinite number of arguments 

00:02:56.600 --> 00:03:03.520
 if you want to put more numbers here 

00:02:59.830 --> 00:03:03.520
 no problem 

00:03:09.990 --> 00:03:18.720
 writing a method in this way is the same 

00:03:15.520 --> 00:03:23.650
 thing you write a method 

00:03:18.720 --> 00:03:26.880
 this way it 's exactly the same thing 

00:03:23.650 --> 00:03:29.440
 the difference is in the call of your method 

00:03:26.880 --> 00:03:33.070
 here in your method call 

00:03:29.440 --> 00:03:36.340
 you need when you are stating that 

00:03:33.070 --> 00:03:41.340
 is receiving a king of both 

00:03:36.340 --> 00:03:41.340
 you'll need to build that the king 

00:03:46.350 --> 00:04:04.390
 numbers to be used here in 

00:03:58.090 --> 00:04:12.840
 the result is the same but you impose a 

00:04:04.390 --> 00:04:15.700
 difficulty slightly higher for the for 

00:04:12.840 --> 00:04:19.299
 user of your method 

00:04:15.700 --> 00:04:24.910
 another important piece of information when you 

00:04:19.299 --> 00:04:27.630
 you are using a method with arguments 

00:04:24.910 --> 00:04:27.630
 variables 

00:04:29.940 --> 00:04:38.169
 it can only end with arguments 

00:04:35.410 --> 00:04:40.450
 variables but it can start with 

00:04:38.169 --> 00:04:47.740
 other arguments you might have for 

00:04:40.450 --> 00:04:50.220
 example here is another argument from a 

00:04:47.740 --> 00:04:55.860
 or other type at the beginning of the same type 

00:04:50.220 --> 00:05:03.870
 and that's where you could use it in here. 

00:04:55.860 --> 00:05:10.210
 that argument within your method 

00:05:03.870 --> 00:05:13.169
 No problem, I 'm going to write from here. 

00:05:10.210 --> 00:05:13.169
 here numbers 

00:05:13.689 --> 00:05:22.550
 It's a new argument that I'm going through. 

00:05:16.460 --> 00:05:27.189
 here and the sequence of numbers to be 

00:05:22.550 --> 00:05:30.409
 added to delivery print to us 

00:05:27.189 --> 00:05:36.610
 that variable then performs the 

00:05:30.409 --> 00:05:36.610
 calculation now this is not allowed here 

00:05:37.819 --> 00:05:44.779
 can not put two arguments 

00:05:41.449 --> 00:05:46.879
 variables within the same method 

00:05:44.779 --> 00:05:48.710
 you can only end with an argument 

00:05:46.879 --> 00:05:51.289
 variable 

00:05:48.710 --> 00:05:53.740
 So this is the argument class. 

00:05:51.289 --> 00:05:58.129
 weight variables hope you have 

00:05:53.740 --> 00:06:00.199
 liked to have to understand how 

00:05:58.129 --> 00:06:07.189
 It is clear how the method can 

00:06:00.199 --> 00:06:08.509
 receive various parameters and see you on 

00:06:07.189 --> 00:06:11.439
 next class 

00:06:08.509 --> 00:06:11.439
 until then 

