WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.090 

hey<00:00:00.599> guys<00:00:00.810> proper<00:00:01.260> english<00:00:01.500> here<00:00:01.709> and<00:00:01.920> today

00:00:02.090 --> 00:00:02.100 
hey guys proper english here and today

00:00:02.100 --> 00:00:03.679 
hey guys proper english here and today
we're<00:00:02.520> going<00:00:02.550> to<00:00:02.879> start<00:00:03.090> to<00:00:03.210> learn<00:00:03.360> how<00:00:03.419> to

00:00:03.679 --> 00:00:03.689 
we're going to start to learn how to

00:00:03.689 --> 00:00:07.670 
we're going to start to learn how to
build<00:00:03.959> an<00:00:04.200> ALU<00:00:04.740> now<00:00:05.130> what<00:00:05.370> is<00:00:05.609> an<00:00:05.910> ALU<00:00:06.299> well<00:00:07.140> ALU

00:00:07.670 --> 00:00:07.680 
build an ALU now what is an ALU well ALU

00:00:07.680 --> 00:00:10.669 
build an ALU now what is an ALU well ALU
stands<00:00:08.069> for<00:00:08.429> arithmetic<00:00:09.110> logic<00:00:10.110> unit<00:00:10.139> so<00:00:10.530> as

00:00:10.669 --> 00:00:10.679 
stands for arithmetic logic unit so as

00:00:10.679 --> 00:00:13.490 
stands for arithmetic logic unit so as
you<00:00:11.099> might<00:00:11.130> expect<00:00:11.370> a<00:00:11.940> nail<00:00:12.599> use<00:00:12.840> a<00:00:12.870> circuit

00:00:13.490 --> 00:00:13.500 
you might expect a nail use a circuit

00:00:13.500 --> 00:00:15.650 
you might expect a nail use a circuit
that<00:00:13.920> can<00:00:14.130> perform<00:00:14.519> arithmetic<00:00:14.880> things<00:00:15.480> like

00:00:15.650 --> 00:00:15.660 
that can perform arithmetic things like

00:00:15.660 --> 00:00:18.230 
that can perform arithmetic things like
addition<00:00:16.170> and<00:00:16.289> subtraction<00:00:16.920> and<00:00:17.100> logic<00:00:18.090> this

00:00:18.230 --> 00:00:18.240 
addition and subtraction and logic this

00:00:18.240 --> 00:00:21.230 
addition and subtraction and logic this
is<00:00:18.359> what's<00:00:18.570> at<00:00:18.750> the<00:00:18.900> core<00:00:18.930> of<00:00:19.470> a<00:00:19.740> cpu<00:00:19.949> and<00:00:20.550> what

00:00:21.230 --> 00:00:21.240 
is what's at the core of a cpu and what

00:00:21.240 --> 00:00:24.439 
is what's at the core of a cpu and what
i've<00:00:21.359> got<00:00:21.510> in<00:00:21.750> front<00:00:22.050> of<00:00:22.199> me<00:00:22.410> is<00:00:22.619> a<00:00:23.550> basic

00:00:24.439 --> 00:00:24.449 
i've got in front of me is a basic

00:00:24.449 --> 00:00:26.210 
i've got in front of me is a basic
ripple<00:00:24.960> carry<00:00:25.170> adder<00:00:25.350> and<00:00:25.650> what<00:00:25.859> we're<00:00:26.070> going

00:00:26.210 --> 00:00:26.220 
ripple carry adder and what we're going

00:00:26.220 --> 00:00:28.189 
ripple carry adder and what we're going
to<00:00:26.430> do<00:00:26.580> is<00:00:26.820> we're<00:00:27.119> going<00:00:27.269> to<00:00:27.510> modify<00:00:27.960> this

00:00:28.189 --> 00:00:28.199 
to do is we're going to modify this

00:00:28.199 --> 00:00:31.400 
to do is we're going to modify this
adder<00:00:28.619> and<00:00:28.830> convert<00:00:29.789> it<00:00:29.820> into<00:00:30.119> a<00:00:30.330> circuit<00:00:30.900> that

00:00:31.400 --> 00:00:31.410 
adder and convert it into a circuit that

00:00:31.410 --> 00:00:33.680 
adder and convert it into a circuit that
can<00:00:31.619> do<00:00:31.769> addition<00:00:32.369> subtraction<00:00:32.640> and<00:00:33.239> all<00:00:33.360> of

00:00:33.680 --> 00:00:33.690 
can do addition subtraction and all of

00:00:33.690 --> 00:00:35.870 
can do addition subtraction and all of
the<00:00:33.809> logic<00:00:34.170> functions<00:00:34.590> we're<00:00:35.430> going<00:00:35.550> to<00:00:35.760> do

00:00:35.870 --> 00:00:35.880 
the logic functions we're going to do

00:00:35.880 --> 00:00:37.760 
the logic functions we're going to do
this<00:00:36.030> in<00:00:36.239> a<00:00:36.360> couple<00:00:36.540> of<00:00:36.750> videos<00:00:37.050> we'll<00:00:37.320> take<00:00:37.620> it

00:00:37.760 --> 00:00:37.770 
this in a couple of videos we'll take it

00:00:37.770 --> 00:00:39.799 
this in a couple of videos we'll take it
step<00:00:38.070> by<00:00:38.100> step<00:00:38.280> so<00:00:38.790> you<00:00:38.879> can<00:00:39.059> see<00:00:39.270> exactly

00:00:39.799 --> 00:00:39.809 
step by step so you can see exactly

00:00:39.809 --> 00:00:42.670 
step by step so you can see exactly
what's<00:00:40.170> going<00:00:40.379> on<00:00:40.620> and<00:00:40.850> let's<00:00:41.850> get<00:00:42.059> started

00:00:42.670 --> 00:00:42.680 
what's going on and let's get started

00:00:42.680 --> 00:00:45.080 
what's going on and let's get started
alright<00:00:43.680> so<00:00:43.950> today<00:00:44.280> we're<00:00:44.730> going<00:00:44.850> to<00:00:45.000> answer

00:00:45.080 --> 00:00:45.090 
alright so today we're going to answer

00:00:45.090 --> 00:00:48.770 
alright so today we're going to answer
the<00:00:45.780> first<00:00:46.079> big<00:00:46.500> question<00:00:47.010> about<00:00:47.280> Al<00:00:47.640> use<00:00:47.910> how

00:00:48.770 --> 00:00:48.780 
the first big question about Al use how

00:00:48.780 --> 00:00:50.660 
the first big question about Al use how
do<00:00:48.840> you<00:00:49.020> make<00:00:49.260> a<00:00:49.289> circuit<00:00:49.890> that<00:00:50.129> can<00:00:50.309> do<00:00:50.460> both

00:00:50.660 --> 00:00:50.670 
do you make a circuit that can do both

00:00:50.670 --> 00:00:55.100 
do you make a circuit that can do both
addition<00:00:51.480> and<00:00:51.649> logic<00:00:52.649> well<00:00:53.660> let's<00:00:54.660> start<00:00:54.960> off

00:00:55.100 --> 00:00:55.110 
addition and logic well let's start off

00:00:55.110 --> 00:00:57.830 
addition and logic well let's start off
by<00:00:55.500> adding<00:00:55.949> 1<00:00:56.280> plus<00:00:56.550> 1<00:00:56.760> will<00:00:57.000> turn<00:00:57.210> on<00:00:57.449> both

00:00:57.830 --> 00:00:57.840 
by adding 1 plus 1 will turn on both

00:00:57.840 --> 00:01:00.470 
by adding 1 plus 1 will turn on both
inputs<00:00:58.289> for<00:00:58.739> bit<00:00:59.190> 0<00:00:59.699> over<00:01:00.059> here<00:01:00.090> so<00:01:00.390> we're

00:01:00.470 --> 00:01:00.480 
inputs for bit 0 over here so we're

00:01:00.480 --> 00:01:03.789 
inputs for bit 0 over here so we're
adding<00:01:00.600> 1<00:01:00.989> and<00:01:01.140> 1<00:01:01.350> we<00:01:02.190> get<00:01:02.370> an<00:01:02.609> output<00:01:02.820> of<00:01:03.180> two

00:01:03.789 --> 00:01:03.799 
adding 1 and 1 we get an output of two

00:01:03.799 --> 00:01:08.149 
adding 1 and 1 we get an output of two
but<00:01:04.799> let's<00:01:05.460> say<00:01:05.760> we<00:01:06.180> wanted<00:01:06.630> to<00:01:06.869> X<00:01:07.409> or<00:01:07.799> these

00:01:08.149 --> 00:01:08.159 
but let's say we wanted to X or these

00:01:08.159 --> 00:01:12.859 
but let's say we wanted to X or these
two<00:01:08.430> inputs<00:01:08.850> on<00:01:09.060> bit<00:01:09.990> 0<00:01:10.290> over<00:01:10.680> here<00:01:11.180> well<00:01:12.180> if<00:01:12.450> we

00:01:12.859 --> 00:01:12.869 
two inputs on bit 0 over here well if we

00:01:12.869 --> 00:01:15.350 
two inputs on bit 0 over here well if we
wanted<00:01:13.409> to<00:01:13.470> X<00:01:13.890> or<00:01:14.159> them<00:01:14.340> we'd<00:01:14.490> only<00:01:14.670> want<00:01:15.090> those

00:01:15.350 --> 00:01:15.360 
wanted to X or them we'd only want those

00:01:15.360 --> 00:01:18.890 
wanted to X or them we'd only want those
inputs<00:01:15.869> to<00:01:16.290> affect<00:01:16.890> the<00:01:17.549> output<00:01:17.759> for<00:01:18.420> bit<00:01:18.570> 0

00:01:18.890 --> 00:01:18.900 
inputs to affect the output for bit 0

00:01:18.900 --> 00:01:21.170 
inputs to affect the output for bit 0
over<00:01:19.200> here<00:01:19.229> and<00:01:19.650> the<00:01:20.250> same<00:01:20.460> thing<00:01:20.640> for<00:01:20.820> all<00:01:20.970> the

00:01:21.170 --> 00:01:21.180 
over here and the same thing for all the

00:01:21.180 --> 00:01:23.359 
over here and the same thing for all the
other<00:01:21.330> bits<00:01:21.630> that's<00:01:21.900> called<00:01:22.229> doing<00:01:22.710> bitwise

00:01:23.359 --> 00:01:23.369 
other bits that's called doing bitwise

00:01:23.369 --> 00:01:26.270 
other bits that's called doing bitwise
logic<00:01:24.000> when<00:01:24.180> we<00:01:24.299> do<00:01:24.450> bitwise<00:01:24.900> logic<00:01:25.500> we're

00:01:26.270 --> 00:01:26.280 
logic when we do bitwise logic we're

00:01:26.280 --> 00:01:28.999 
logic when we do bitwise logic we're
setting<00:01:26.700> up<00:01:26.820> the<00:01:26.970> adder<00:01:27.150> so<00:01:27.750> that<00:01:28.049> the<00:01:28.530> inputs

00:01:28.999 --> 00:01:29.009 
setting up the adder so that the inputs

00:01:29.009 --> 00:01:31.340 
setting up the adder so that the inputs
for<00:01:29.369> a<00:01:29.430> given<00:01:29.759> bit<00:01:30.030> like<00:01:30.420> bit<00:01:30.630> 0<00:01:30.960> over<00:01:31.320> here

00:01:31.340 --> 00:01:31.350 
for a given bit like bit 0 over here

00:01:31.350 --> 00:01:34.580 
for a given bit like bit 0 over here
only<00:01:32.340> affect<00:01:32.850> the<00:01:33.150> output<00:01:33.360> of<00:01:33.840> that

00:01:34.580 --> 00:01:34.590 
only affect the output of that

00:01:34.590 --> 00:01:37.969 
only affect the output of that
respective<00:01:35.520> bit<00:01:36.090> ok<00:01:37.020> so<00:01:37.079> how<00:01:37.530> do<00:01:37.590> you<00:01:37.770> do<00:01:37.950> that

00:01:37.969 --> 00:01:37.979 
respective bit ok so how do you do that

00:01:37.979 --> 00:01:40.550 
respective bit ok so how do you do that
well<00:01:38.820> the<00:01:39.270> thing<00:01:39.540> we're<00:01:39.720> going<00:01:39.960> to<00:01:40.049> need<00:01:40.200> to<00:01:40.350> do

00:01:40.550 --> 00:01:40.560 
well the thing we're going to need to do

00:01:40.560 --> 00:01:43.160 
well the thing we're going to need to do
is<00:01:40.860> disable<00:01:41.790> the<00:01:42.180> carry<00:01:42.479> so<00:01:42.750> let's<00:01:42.960> take<00:01:43.140> a

00:01:43.160 --> 00:01:43.170 
is disable the carry so let's take a

00:01:43.170 --> 00:01:46.190 
is disable the carry so let's take a
look<00:01:43.439> at<00:01:43.590> how<00:01:44.040> we<00:01:44.100> can<00:01:44.280> disable<00:01:44.790> the<00:01:45.600> carry<00:01:45.899> in

00:01:46.190 --> 00:01:46.200 
look at how we can disable the carry in

00:01:46.200 --> 00:01:49.310 
look at how we can disable the carry in
an<00:01:46.380> adder<00:01:46.850> alright<00:01:47.850> so<00:01:48.090> let's<00:01:48.659> start<00:01:48.930> off<00:01:49.079> by

00:01:49.310 --> 00:01:49.320 
an adder alright so let's start off by

00:01:49.320 --> 00:01:51.889 
an adder alright so let's start off by
going<00:01:49.530> through<00:01:49.710> the<00:01:50.009> truth<00:01:50.579> table<00:01:51.030> for<00:01:51.180> an<00:01:51.479> xor

00:01:51.889 --> 00:01:51.899 
going through the truth table for an xor

00:01:51.899 --> 00:01:55.010 
going through the truth table for an xor
gate<00:01:51.930> using<00:01:52.470> bit<00:01:53.100> 0<00:01:53.520> ok<00:01:54.090> so<00:01:54.149> right<00:01:54.420> now<00:01:54.479> this<00:01:54.869> is

00:01:55.010 --> 00:01:55.020 
gate using bit 0 ok so right now this is

00:01:55.020 --> 00:01:56.929 
gate using bit 0 ok so right now this is
an<00:01:55.170> adder<00:01:55.350> we're<00:01:55.770> going<00:01:55.890> to<00:01:56.070> walk<00:01:56.280> through<00:01:56.310> the

00:01:56.929 --> 00:01:56.939 
an adder we're going to walk through the

00:01:56.939 --> 00:01:58.670 
an adder we're going to walk through the
truth<00:01:57.180> table<00:01:57.509> see<00:01:57.719> if<00:01:57.810> it<00:01:57.930> matches<00:01:58.110> up<00:01:58.259> for<00:01:58.619> an

00:01:58.670 --> 00:01:58.680 
truth table see if it matches up for an

00:01:58.680 --> 00:02:01.249 
truth table see if it matches up for an
xor<00:01:59.009> gate<00:01:59.040> because<00:01:59.399> we've<00:02:00.299> got<00:02:00.540> an<00:02:00.810> xor<00:02:01.229> gate

00:02:01.249 --> 00:02:01.259 
xor gate because we've got an xor gate

00:02:01.259 --> 00:02:02.980 
xor gate because we've got an xor gate
right<00:02:01.710> here<00:02:01.770> in<00:02:02.219> the<00:02:02.399> adder

00:02:02.980 --> 00:02:02.990 
right here in the adder

00:02:02.990 --> 00:02:06.490 
right here in the adder
and<00:02:03.079> so<00:02:04.040> first<00:02:04.700> we've<00:02:04.970> got<00:02:05.149> zero<00:02:05.450> X<00:02:05.810> or<00:02:06.049> zero

00:02:06.490 --> 00:02:06.500 
and so first we've got zero X or zero

00:02:06.500 --> 00:02:10.110 
and so first we've got zero X or zero
our<00:02:07.189> output<00:02:07.640> is<00:02:07.790> zero<00:02:08.179> that's<00:02:08.390> good<00:02:08.780> if<00:02:08.959> we<00:02:09.709> do

00:02:10.110 --> 00:02:10.120 
our output is zero that's good if we do

00:02:10.120 --> 00:02:14.290 
our output is zero that's good if we do
1x<00:02:11.120> or<00:02:11.510> zero<00:02:11.920> now<00:02:12.920> we've<00:02:13.310> got<00:02:13.489> a<00:02:13.520> one<00:02:13.849> as<00:02:14.090> our

00:02:14.290 --> 00:02:14.300 
1x or zero now we've got a one as our

00:02:14.300 --> 00:02:16.630 
1x or zero now we've got a one as our
output<00:02:14.750> that's<00:02:15.319> good<00:02:15.590> because<00:02:15.620> in<00:02:16.190> an<00:02:16.280> xor

00:02:16.630 --> 00:02:16.640 
output that's good because in an xor

00:02:16.640 --> 00:02:19.420 
output that's good because in an xor
gate<00:02:16.670> the<00:02:17.390> output<00:02:17.540> should<00:02:18.080> only<00:02:18.290> be<00:02:18.530> on<00:02:18.709> when

00:02:19.420 --> 00:02:19.430 
gate the output should only be on when

00:02:19.430 --> 00:02:22.180 
gate the output should only be on when
one<00:02:20.030> and<00:02:20.330> only<00:02:20.630> one<00:02:20.989> of<00:02:21.200> the<00:02:21.319> inputs<00:02:21.470> is<00:02:21.800> on<00:02:21.950> so

00:02:22.180 --> 00:02:22.190 
one and only one of the inputs is on so

00:02:22.190 --> 00:02:25.620 
one and only one of the inputs is on so
let's<00:02:22.310> see<00:02:22.580> what<00:02:22.790> happens<00:02:23.120> with<00:02:23.239> zero<00:02:23.650> xr1

00:02:25.620 --> 00:02:25.630 
let's see what happens with zero xr1

00:02:25.630 --> 00:02:28.240 
let's see what happens with zero xr1
outputs<00:02:26.630> on<00:02:26.810> good<00:02:27.290> again<00:02:27.530> but<00:02:27.739> now<00:02:27.920> what

00:02:28.240 --> 00:02:28.250 
outputs on good again but now what

00:02:28.250 --> 00:02:32.530 
outputs on good again but now what
happens<00:02:28.730> when<00:02:29.060> it's<00:02:29.209> 1x<00:02:30.050> or<00:02:30.800> one<00:02:31.069> well<00:02:31.880> the

00:02:32.530 --> 00:02:32.540 
happens when it's 1x or one well the

00:02:32.540 --> 00:02:35.380 
happens when it's 1x or one well the
output<00:02:33.019> for<00:02:33.440> bit<00:02:33.830> 0<00:02:34.220> is<00:02:34.459> good<00:02:34.670> but<00:02:35.000> because

00:02:35.380 --> 00:02:35.390 
output for bit 0 is good but because

00:02:35.390 --> 00:02:37.900 
output for bit 0 is good but because
this<00:02:35.660> is<00:02:35.810> an<00:02:35.930> adder<00:02:36.170> we're<00:02:36.830> carrying<00:02:37.310> over<00:02:37.549> to

00:02:37.900 --> 00:02:37.910 
this is an adder we're carrying over to

00:02:37.910 --> 00:02:40.539 
this is an adder we're carrying over to
bit<00:02:38.090> one<00:02:38.410> but<00:02:39.410> like<00:02:39.590> i<00:02:39.709> said<00:02:39.739> before<00:02:40.040> we<00:02:40.400> can

00:02:40.539 --> 00:02:40.549 
bit one but like i said before we can

00:02:40.549 --> 00:02:43.600 
bit one but like i said before we can
solve<00:02:40.790> that<00:02:40.910> very<00:02:41.360> easily<00:02:41.630> by<00:02:42.440> turning<00:02:43.250> off

00:02:43.600 --> 00:02:43.610 
solve that very easily by turning off

00:02:43.610 --> 00:02:46.390 
solve that very easily by turning off
the<00:02:43.970> carrion<00:02:44.750> all<00:02:44.930> we<00:02:45.110> need<00:02:45.260> to<00:02:45.290> do<00:02:45.620> is<00:02:45.920> set<00:02:46.370> up

00:02:46.390 --> 00:02:46.400 
the carrion all we need to do is set up

00:02:46.400 --> 00:02:48.850 
the carrion all we need to do is set up
a<00:02:46.700> torch<00:02:47.090> over<00:02:47.299> here<00:02:47.630> now<00:02:47.900> the<00:02:47.959> Carrie<00:02:48.350> is<00:02:48.620> off

00:02:48.850 --> 00:02:48.860 
a torch over here now the Carrie is off

00:02:48.860 --> 00:02:53.860 
a torch over here now the Carrie is off
and<00:02:49.750> bit<00:02:50.750> 0<00:02:51.170> functions<00:02:52.100> independently<00:02:52.870> from

00:02:53.860 --> 00:02:53.870 
and bit 0 functions independently from

00:02:53.870 --> 00:02:57.250 
and bit 0 functions independently from
bit<00:02:54.170> 1<00:02:54.500> ok<00:02:55.100> so<00:02:55.160> what<00:02:55.370> we<00:02:55.519> can<00:02:55.670> do<00:02:55.910> is<00:02:56.180> set<00:02:57.110> that

00:02:57.250 --> 00:02:57.260 
bit 1 ok so what we can do is set that

00:02:57.260 --> 00:02:59.949 
bit 1 ok so what we can do is set that
up<00:02:57.290> so<00:02:57.890> that<00:02:58.190> goes<00:02:58.430> across<00:02:58.580> and<00:02:59.060> works<00:02:59.420> for<00:02:59.690> all

00:02:59.949 --> 00:02:59.959 
up so that goes across and works for all

00:02:59.959 --> 00:03:02.110 
up so that goes across and works for all
of<00:03:00.140> our<00:03:00.260> bits<00:03:00.530> alright<00:03:01.519> so<00:03:01.670> we'll<00:03:01.760> set<00:03:01.940> up<00:03:01.970> a

00:03:02.110 --> 00:03:02.120 
of our bits alright so we'll set up a

00:03:02.120 --> 00:03:06.250 
of our bits alright so we'll set up a
line<00:03:02.360> going<00:03:02.660> across<00:03:02.810> all<00:03:03.349> of<00:03:03.799> the<00:03:04.099> bits<00:03:05.260> throw

00:03:06.250 --> 00:03:06.260 
line going across all of the bits throw

00:03:06.260 --> 00:03:11.280 
line going across all of the bits throw
down<00:03:06.500> a<00:03:06.769> torch<00:03:07.280> a<00:03:07.900> torch<00:03:08.950> and<00:03:09.950> a<00:03:10.280> torch<00:03:10.519> and

00:03:11.280 --> 00:03:11.290 
down a torch a torch and a torch and

00:03:11.290 --> 00:03:14.020 
down a torch a torch and a torch and
then<00:03:12.290> run<00:03:12.470> some<00:03:12.680> redstone<00:03:12.920> across<00:03:13.640> the<00:03:13.790> whole

00:03:14.020 --> 00:03:14.030 
then run some redstone across the whole

00:03:14.030 --> 00:03:16.300 
then run some redstone across the whole
line<00:03:14.269> so<00:03:14.810> that<00:03:14.840> we<00:03:15.049> can<00:03:15.230> control<00:03:15.769> when<00:03:16.160> we're

00:03:16.300 --> 00:03:16.310 
line so that we can control when we're

00:03:16.310 --> 00:03:18.460 
line so that we can control when we're
doing<00:03:16.459> addition<00:03:17.180> and<00:03:17.359> when<00:03:18.019> we're<00:03:18.170> going<00:03:18.290> to

00:03:18.460 --> 00:03:18.470 
doing addition and when we're going to

00:03:18.470 --> 00:03:23.590 
doing addition and when we're going to
do<00:03:18.650> logic<00:03:20.530> set<00:03:21.530> up<00:03:21.650> an<00:03:21.769> input<00:03:22.130> and<00:03:22.310> I<00:03:23.299> think

00:03:23.590 --> 00:03:23.600 
do logic set up an input and I think

00:03:23.600 --> 00:03:25.690 
do logic set up an input and I think
we'll<00:03:23.810> need<00:03:23.959> a<00:03:24.200> little<00:03:24.680> bit<00:03:24.859> of<00:03:24.920> signal

00:03:25.690 --> 00:03:25.700 
we'll need a little bit of signal

00:03:25.700 --> 00:03:29.199 
we'll need a little bit of signal
extension<00:03:27.040> toss<00:03:28.040> a<00:03:28.070> repeater<00:03:28.519> over<00:03:28.820> there<00:03:29.000> and

00:03:29.199 --> 00:03:29.209 
extension toss a repeater over there and

00:03:29.209 --> 00:03:31.660 
extension toss a repeater over there and
so<00:03:29.600> right<00:03:29.810> now<00:03:29.840> we're<00:03:30.650> doing<00:03:30.980> addition<00:03:31.489> so

00:03:31.660 --> 00:03:31.670 
so right now we're doing addition so

00:03:31.670 --> 00:03:35.860 
so right now we're doing addition so
we're<00:03:31.819> carrying<00:03:32.269> over<00:03:32.510> from<00:03:32.840> bit<00:03:33.769> 0<00:03:34.220> 2<00:03:34.940> bit<00:03:35.540> 1

00:03:35.860 --> 00:03:35.870 
we're carrying over from bit 0 2 bit 1

00:03:35.870 --> 00:03:40.509 
we're carrying over from bit 0 2 bit 1
but<00:03:36.799> if<00:03:37.100> I<00:03:37.670> flip<00:03:38.090> this<00:03:38.269> lever<00:03:38.569> now<00:03:39.530> we're<00:03:40.190> doing

00:03:40.509 --> 00:03:40.519 
but if I flip this lever now we're doing

00:03:40.519 --> 00:03:43.180 
but if I flip this lever now we're doing
bitwise<00:03:40.910> logic<00:03:41.510> so<00:03:42.109> I'm<00:03:42.380> going<00:03:42.440> to<00:03:42.829> take<00:03:42.980> a

00:03:43.180 --> 00:03:43.190 
bitwise logic so I'm going to take a

00:03:43.190 --> 00:03:45.550 
bitwise logic so I'm going to take a
second<00:03:43.609> to<00:03:43.640> set<00:03:43.940> up<00:03:44.060> an<00:03:44.299> XOR<00:03:44.660> gate<00:03:44.870> truth<00:03:45.140> table

00:03:45.550 --> 00:03:45.560 
second to set up an XOR gate truth table

00:03:45.560 --> 00:03:48.699 
second to set up an XOR gate truth table
using<00:03:46.370> each<00:03:46.670> bit<00:03:47.060> for<00:03:47.540> a<00:03:47.720> line<00:03:48.079> of<00:03:48.350> the<00:03:48.500> truth

00:03:48.699 --> 00:03:48.709 
using each bit for a line of the truth

00:03:48.709 --> 00:03:51.629 
using each bit for a line of the truth
table<00:03:49.069> and<00:03:49.250> we'll<00:03:49.489> see<00:03:49.790> how<00:03:50.389> that<00:03:50.450> turns<00:03:50.660> out

00:03:51.629 --> 00:03:51.639 
table and we'll see how that turns out

00:03:51.639 --> 00:03:57.670 
table and we'll see how that turns out
alright<00:03:52.639> so<00:03:53.030> we've<00:03:53.480> got<00:03:53.690> 0<00:03:54.230> X<00:03:54.590> or<00:03:54.980> 0<00:03:55.310> is<00:03:55.579> 0<00:03:56.170> 0<00:03:57.170> X<00:03:57.500> r

00:03:57.670 --> 00:03:57.680 
alright so we've got 0 X or 0 is 0 0 X r

00:03:57.680 --> 00:04:05.379 
alright so we've got 0 X or 0 is 0 0 X r
1<00:03:58.040> is<00:03:58.310> 1<00:03:59.079> 1<00:04:00.079> X<00:04:00.410> or<00:04:00.680> 0<00:04:01.040> is<00:04:01.310> 1<00:04:01.690> then<00:04:02.690> 1<00:04:03.079> X<00:04:03.470> or<00:04:03.799> 1<00:04:04.160> is<00:04:04.459> 0

00:04:05.379 --> 00:04:05.389 
1 is 1 1 X or 0 is 1 then 1 X or 1 is 0

00:04:05.389 --> 00:04:08.080 
1 is 1 1 X or 0 is 1 then 1 X or 1 is 0
and<00:04:05.720> you<00:04:06.560> can<00:04:06.680> look<00:04:06.920> over<00:04:07.130> here<00:04:07.579> and<00:04:07.760> you<00:04:07.970> can

00:04:08.080 --> 00:04:08.090 
and you can look over here and you can

00:04:08.090 --> 00:04:11.949 
and you can look over here and you can
see<00:04:08.389> that<00:04:08.630> the<00:04:08.870> carryout<00:04:09.470> is<00:04:09.829> not<00:04:10.160> on<00:04:10.400> so<00:04:11.269> this

00:04:11.949 --> 00:04:11.959 
see that the carryout is not on so this

00:04:11.959 --> 00:04:15.159 
see that the carryout is not on so this
last<00:04:12.799> bit<00:04:13.100> over<00:04:13.579> here<00:04:13.880> would<00:04:14.419> not<00:04:14.630> affect

00:04:15.159 --> 00:04:15.169 
last bit over here would not affect

00:04:15.169 --> 00:04:15.880 
last bit over here would not affect
anything

00:04:15.880 --> 00:04:15.890 
anything

00:04:15.890 --> 00:04:19.599 
anything
downstream<00:04:16.640> and<00:04:16.970> that<00:04:17.630> is<00:04:17.900> perfect<00:04:18.590> so<00:04:19.459> now

00:04:19.599 --> 00:04:19.609 
downstream and that is perfect so now

00:04:19.609 --> 00:04:22.180 
downstream and that is perfect so now
you've<00:04:19.880> learned<00:04:20.209> how<00:04:20.450> to<00:04:20.900> isolate<00:04:21.230> the<00:04:21.920> bits

00:04:22.180 --> 00:04:22.190 
you've learned how to isolate the bits

00:04:22.190 --> 00:04:23.650 
you've learned how to isolate the bits
of<00:04:22.430> an<00:04:22.520> adder<00:04:22.700> that's<00:04:22.970> the<00:04:23.180> first<00:04:23.510> step

00:04:23.650 --> 00:04:23.660 
of an adder that's the first step

00:04:23.660 --> 00:04:26.140 
of an adder that's the first step
towards<00:04:24.500> building<00:04:24.890> a<00:04:25.160> nail<00:04:25.340> you<00:04:25.580> because<00:04:25.880> now

00:04:26.140 --> 00:04:26.150 
towards building a nail you because now

00:04:26.150 --> 00:04:30.190 
towards building a nail you because now
we<00:04:26.480> can<00:04:26.630> do<00:04:26.840> both<00:04:27.410> addition<00:04:28.250> and<00:04:28.690> XOR<00:04:29.690> ok<00:04:30.140> so

00:04:30.190 --> 00:04:30.200 
we can do both addition and XOR ok so

00:04:30.200 --> 00:04:32.470 
we can do both addition and XOR ok so
next<00:04:30.500> time<00:04:30.800> we're<00:04:31.280> going<00:04:31.490> to<00:04:31.670> learn<00:04:31.880> how<00:04:32.150> to

00:04:32.470 --> 00:04:32.480 
next time we're going to learn how to

00:04:32.480 --> 00:04:35.320 
next time we're going to learn how to
start<00:04:32.840> adding<00:04:33.110> more<00:04:33.590> logic<00:04:34.070> functions<00:04:34.520> hope

00:04:35.320 --> 00:04:35.330 
start adding more logic functions hope

00:04:35.330 --> 00:04:37.120 
start adding more logic functions hope
you<00:04:35.480> learned<00:04:35.690> something<00:04:36.020> and<00:04:36.320> I<00:04:36.710> will<00:04:36.770> see<00:04:37.100> you

00:04:37.120 --> 00:04:37.130 
you learned something and I will see you

00:04:37.130 --> 00:04:39.940 
you learned something and I will see you
guys<00:04:37.220> next<00:04:37.370> time

