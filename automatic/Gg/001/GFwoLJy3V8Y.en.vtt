WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.080
 Welcome to Number Six! 

00:00:02.159 --> 00:00:05.879
 student channel java for student and 

00:00:04.080 --> 00:00:08.010
 in this class here we finally go 

00:00:05.879 --> 00:00:11.160
 learn how we can treat 

00:00:08.010 --> 00:00:13.889
 with types of give and with decimal numbers 

00:00:11.160 --> 00:00:15.150
 en now we did integer variables 

00:00:13.889 --> 00:00:16.350
 prison to 5 

00:00:15.150 --> 00:00:18.960
 only we dream about variables 

00:00:16.350 --> 00:00:19.830
 integers can not store numbers 

00:00:18.960 --> 00:00:21.779
 broken 

00:00:19.830 --> 00:00:24.150
 I will not create a new class here that 

00:00:21.779 --> 00:00:26.189
 I'll call class 06 

00:00:24.150 --> 00:00:32.040
 so I'm going to create a new class of water 

00:00:26.189 --> 00:00:36.120
 java class name class class 06 

00:00:32.040 --> 00:00:39.390
 I will save in the package classes and now here 

00:00:36.120 --> 00:00:43.020
 my class to 06 to facilitate the 

00:00:39.390 --> 00:00:48.629
 life I'm going to copy the glue code 05 

00:00:43.020 --> 00:00:51.149
 with any school copy and pass here 

00:00:48.629 --> 00:00:54.360
 in my class 06 

00:00:51.149 --> 00:00:57.059
 the only thing that will have to change is in the 

00:00:54.360 --> 00:00:59.789
 setting here post them class 05 he 

00:00:57.059 --> 00:01:02.070
 will have to move to class 06 because it 's the 

00:00:59.789 --> 00:01:03.570
 file name if you fell for that 

00:01:02.070 --> 00:01:05.100
 those do not know how to create a class 

00:01:03.570 --> 00:01:06.600
 since the beginning also lost so 

00:01:05.100 --> 00:01:09.990
 wet new Delhi in previous classes 

00:01:06.600 --> 00:01:12.000
 It will brighten up a little bit right. Let's go. 

00:01:09.990 --> 00:01:13.170
 suppose that I want to make the 

00:01:12.000 --> 00:01:14.939
 or variable y 

00:01:13.170 --> 00:01:18.740
 instead of storing the integer value as 

00:01:14.939 --> 00:01:21.659
 would 200 store its value 10.5 

00:01:18.740 --> 00:01:23.509
 only receives an error for the mouse 

00:01:21.659 --> 00:01:26.520
 on top we will see that the error is 

00:01:23.509 --> 00:01:29.490
 possible loss of precision requires 

00:01:26.520 --> 00:01:32.130
 variable found a 

00:01:29.490 --> 00:01:33.600
 Good tone to nice answer is what 

00:01:32.130 --> 00:01:36.299
 is born in the series of errors 

00:01:33.600 --> 00:01:38.100
 an integer variable between 

00:01:36.299 --> 00:01:39.930
 only store integer values ​​now 

00:01:38.100 --> 00:01:42.090
 a good variable 

00:01:39.930 --> 00:01:44.850
 Look, just a key word here is a 

00:01:42.090 --> 00:01:48.030
 variable tube will allow us 

00:01:44.850 --> 00:01:50.310
 we store is decimal numbers 

00:01:48.030 --> 00:01:52.229
 now comes up with art programming is already 

00:01:50.310 --> 00:01:54.689
 talking is more so good is not unique in 

00:01:52.229 --> 00:01:56.600
 fact there is another one of 

00:01:54.689 --> 00:01:59.280
 evaluate what you can also store 

00:01:56.600 --> 00:02:00.509
 decimals but for the time being the 

00:01:59.280 --> 00:02:04.560
 second class where you will be only 

00:02:00.509 --> 00:02:06.659
 considering the fertilizer as the number 

00:02:04.560 --> 00:02:10.050
 of more in the next will see which 

00:02:06.659 --> 00:02:13.350
 are the others sure to support that now 

00:02:10.050 --> 00:02:16.320
 I want to give a print in variable y 

00:02:13.350 --> 00:02:19.500
 10.5 really going out, we're just looking 

00:02:16.320 --> 00:02:22.020
 that 3.5 came out with a wand in the tube if 

00:02:19.500 --> 00:02:23.340
 behaves exactly with the variable indy 

00:02:22.020 --> 00:02:25.470
 when we want to play here on the screen 

00:02:23.340 --> 00:02:26.280
 user so far nothing new 

00:02:25.470 --> 00:02:28.380
 so let's do an operation 

00:02:26.280 --> 00:02:31.500
 math we had done operations 

00:02:28.380 --> 00:02:35.100
 math with integers only 

00:02:31.500 --> 00:02:38.400
 I will not create a variable here that I 

00:02:35.100 --> 00:02:45.600
 I'll call it a result and I 'll say it 

00:02:38.400 --> 00:02:48.360
 that the result is equal to x plus and that 

00:02:45.600 --> 00:02:48.930
 Here I am going to give a number plant I go 

00:02:48.360 --> 00:02:52.710
 play 

00:02:48.930 --> 00:02:56.730
 the result is here result 

00:02:52.710 --> 00:03:01.350
 if we do not run 160 points now 

00:02:56.730 --> 00:03:04.140
 5 that's right so 157,500 let's sit 

00:03:01.350 --> 00:03:06.150
 that is the value of this evil that was 

00:03:04.140 --> 00:03:08.190
 considered if we multiplied 

00:03:06.150 --> 00:03:10.770
 It would be the same then only to lose. 

00:03:08.190 --> 00:03:11.940
 weather here everything is alright now too 

00:03:10.770 --> 00:03:14.970
 look at how much more than the result 

00:03:11.940 --> 00:03:16.830
 be whole when he pitied him 

00:03:14.970 --> 00:03:19.050
 considered zero even though it did not 

00:03:16.830 --> 00:03:22.530
 be the whole value here included 

00:03:19.050 --> 00:03:24.420
 the signal part and reminds me that I think 

00:03:22.530 --> 00:03:26.640
 it was in the 3rd class 

00:03:24.420 --> 00:03:30.450
 we try to make a division between 

00:03:26.640 --> 00:03:32.700
 two integers and the result 

00:03:30.450 --> 00:03:34.740
 of this division was the decimal number 

00:03:32.700 --> 00:03:36.630
 But at the time we gave you the 

00:03:34.740 --> 00:03:39.420
 first instead of leaving the decimal number 

00:03:36.630 --> 00:03:42.960
 For us , there has been a way 

00:03:39.420 --> 00:03:45.030
 to solve this is to divide and 

00:03:42.960 --> 00:03:46.620
 play the result and a variable of the 

00:03:45.030 --> 00:03:48.540
 The bank will only happen if I 

00:03:46.620 --> 00:03:52.260
 run now so i'm dividing x 

00:03:48.540 --> 00:03:54.290
 for 10.5 ysl to run 

00:03:52.260 --> 00:03:56.940
 now if we get the result 

00:03:54.290 --> 00:03:59.430
 including the value of this evil 

00:03:56.940 --> 00:04:04.620
 cool now to me evaluate the 

00:03:59.430 --> 00:04:06.510
 result if we change tokyo series 21 

00:04:04.620 --> 00:04:09.060
 change the value of the memory the drum 

00:04:06.510 --> 00:04:14.160
 y is I changed it here we will play there 

00:04:09.060 --> 00:04:19.230
 as in everything again and place here 33 

00:04:14.160 --> 00:04:21.989
 does not have to be 4 150 / how much would 

00:04:19.230 --> 00:04:23.700
 Broken value that would be this is the 

00:04:21.989 --> 00:04:26.170
 xv the result because of a value 

00:04:23.700 --> 00:04:30.430
 broken just run 

00:04:26.170 --> 00:04:31.690
 Look, it's only 37 hours left until you check it out. 

00:04:30.430 --> 00:04:35.320
 This here with I'm good at math 

00:04:31.690 --> 00:04:38.950
 then do the following 150 of 2014 

00:04:35.320 --> 00:04:40.810
 the answer would be 37.5 only because 

00:04:38.950 --> 00:04:42.400
 It happened that touch here is what 

00:04:40.810 --> 00:04:45.370
 matters is this important lesson 

00:04:42.400 --> 00:04:48.400
 if we divide a 

00:04:45.370 --> 00:04:50.770
 whole variable with another variable 

00:04:48.400 --> 00:04:52.330
 whole is not important. 

00:04:50.770 --> 00:04:55.300
 whole but a variable of a 

00:04:52.330 --> 00:04:58.780
 certain type I make an operation 

00:04:55.300 --> 00:05:01.660
 mathematics with another variable of the 

00:04:58.780 --> 00:05:05.800
 same kind as to understand / imt flu 

00:05:01.660 --> 00:05:09.100
 / flot my result the result of this 

00:05:05.800 --> 00:05:11.020
 a modification will be that of 

00:05:09.100 --> 00:05:12.610
 specified types will split a 

00:05:11.020 --> 00:05:15.490
 enter for an in 

00:05:12.610 --> 00:05:17.980
 the result will be other people there 

00:05:15.490 --> 00:05:20.740
 but what happens if the division was 

00:05:17.980 --> 00:05:23.800
 number broken from signal being 

00:05:20.740 --> 00:05:25.960
 The following will be ignored then the 

00:05:23.800 --> 00:05:30.190
 point 5 here what would be the division 

00:05:25.960 --> 00:05:32.530
 correct 37.5 was ignored the program did 

00:05:30.190 --> 00:05:34.810
 the division of 37 did not arrive because 

00:05:32.530 --> 00:05:36.040
 signal cut simply ignored 

00:05:34.810 --> 00:05:38.920
 Then I realized that he is not 

00:05:36.040 --> 00:05:42.820
 rounding up even if the result 

00:05:38.920 --> 00:05:46.630
 of this division was 37.9 I would not come 

00:05:42.820 --> 00:05:48.550
 here on the screen 38 speak 37.9 38 

00:05:46.630 --> 00:05:51.850
 rounded to the next 

00:05:48.550 --> 00:05:54.940
 it does not matter even if it is 37.1 or 

00:05:51.850 --> 00:05:58.090
 37.9 I would say 37 because what 

00:05:54.940 --> 00:06:00.880
 happens is that the value just ignored the 

00:05:58.090 --> 00:06:04.120
 From signal is ignored 

00:06:00.880 --> 00:06:06.250
 now speaks all right but instead of 

00:06:04.120 --> 00:06:09.850
 my share the result and if she changed 

00:06:06.250 --> 00:06:11.890
 to okay I'll put here but okay 

00:06:09.850 --> 00:06:14.380
 already hit speak now so I must 

00:06:11.890 --> 00:06:19.090
 get a broken value we do not 

00:06:14.380 --> 00:06:21.190
 run your 37 again because this 

00:06:19.090 --> 00:06:24.070
 happened because I 'm getting 

00:06:21.190 --> 00:06:26.590
 that point 5 this here comes almost a 

00:06:24.070 --> 00:06:28.000
 rule that it is important to know if you 

00:06:26.590 --> 00:06:30.610
 You're sharing like I said in the world. 

00:06:28.000 --> 00:06:32.410
 integer by an integer and its 

00:06:30.610 --> 00:06:34.240
 varied where this result here this O 

00:06:32.410 --> 00:06:36.640
 wheels and stored for more than 

00:06:34.240 --> 00:06:38.260
 he is so good he will already consider 

00:06:36.640 --> 00:06:39.520
 you are dividing the whole number by 

00:06:38.260 --> 00:06:42.389
 an integer and 

00:06:39.520 --> 00:06:44.590
 gives you an entire result that 

00:06:42.389 --> 00:06:46.030
 Weird but we have to learn. 

00:06:44.590 --> 00:06:47.830
 that this way 

00:06:46.030 --> 00:06:49.599
 right there is a lot of fixing this 

00:06:47.830 --> 00:06:51.789
 here and we'll see it here in the 

00:06:49.599 --> 00:06:53.289
 future but for now it's important 

00:06:51.789 --> 00:06:55.030
 know if you divide the world 

00:06:53.289 --> 00:06:57.340
 by an integer for more than 

00:06:55.030 --> 00:06:59.770
 evaluate whether it is capable of storing 

00:06:57.340 --> 00:07:01.659
 decimal numbers asking 

00:06:59.770 --> 00:07:05.199
 entire variable could receive 

00:07:01.659 --> 00:07:07.090
 an integer result is one more thing 

00:07:05.199 --> 00:07:09.129
 considered that the variable of the 

00:07:07.090 --> 00:07:11.110
 bank the entire variable operations 

00:07:09.129 --> 00:07:14.550
 math how to play their hotels 

00:07:11.110 --> 00:07:16.960
 Spanish is so good at print tout a 

00:07:14.550 --> 00:07:19.449
 body play this information until the 

00:07:16.960 --> 00:07:21.639
 user and that 's it past seven 

00:07:19.449 --> 00:07:24.250
 minutes as I stop here I'll see you in the 

00:07:21.639 --> 00:07:26.849
 class number 7 with more java programming 

00:07:24.250 --> 00:07:26.849
 and more 

