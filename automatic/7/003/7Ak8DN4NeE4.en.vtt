WEBVTT
Kind: captions
Language: en

00:00:00.949 --> 00:00:03.889 

this<00:00:01.949> is<00:00:02.159> an<00:00:02.310> important<00:00:02.820> lesson<00:00:03.030> for<00:00:03.510> a<00:00:03.540> number

00:00:03.889 --> 00:00:03.899 
this is an important lesson for a number

00:00:03.899 --> 00:00:04.730 
this is an important lesson for a number
of<00:00:03.929> reasons

00:00:04.730 --> 00:00:04.740 
of reasons

00:00:04.740 --> 00:00:08.560 
of reasons
first<00:00:05.730> of<00:00:06.000> all<00:00:06.120> it<00:00:06.330> is<00:00:06.779> an<00:00:07.259> easy<00:00:07.799> beginner

00:00:08.560 --> 00:00:08.570 
first of all it is an easy beginner

00:00:08.570 --> 00:00:10.879 
first of all it is an easy beginner
misunderstanding<00:00:09.570> to<00:00:09.719> not<00:00:09.960> realize<00:00:10.559> that

00:00:10.879 --> 00:00:10.889 
misunderstanding to not realize that

00:00:10.889 --> 00:00:14.390 
misunderstanding to not realize that
numbers<00:00:11.730> on<00:00:11.940> the<00:00:12.240> keyboard<00:00:12.780> are<00:00:13.049> not<00:00:13.740> treated

00:00:14.390 --> 00:00:14.400 
numbers on the keyboard are not treated

00:00:14.400 --> 00:00:17.960 
numbers on the keyboard are not treated
as<00:00:14.549> actual<00:00:15.389> numbers<00:00:15.960> by<00:00:16.560> the<00:00:16.619> computer<00:00:17.279> for

00:00:17.960 --> 00:00:17.970 
as actual numbers by the computer for

00:00:17.970 --> 00:00:20.900 
as actual numbers by the computer for
example<00:00:18.600> if<00:00:18.750> you<00:00:19.289> push<00:00:19.619> the<00:00:20.010> number<00:00:20.340> 4<00:00:20.640> on<00:00:20.880> your

00:00:20.900 --> 00:00:20.910 
example if you push the number 4 on your

00:00:20.910 --> 00:00:24.050 
example if you push the number 4 on your
keyboard<00:00:21.769> when<00:00:22.769> you're<00:00:22.980> writing<00:00:23.670> a<00:00:23.820> program

00:00:24.050 --> 00:00:24.060 
keyboard when you're writing a program

00:00:24.060 --> 00:00:26.990 
keyboard when you're writing a program
or<00:00:24.510> if<00:00:24.869> a<00:00:25.080> program<00:00:25.740> is<00:00:25.949> waiting<00:00:26.550> for<00:00:26.760> you<00:00:26.849> to

00:00:26.990 --> 00:00:27.000 
or if a program is waiting for you to

00:00:27.000 --> 00:00:29.060 
or if a program is waiting for you to
type<00:00:27.240> something<00:00:27.599> and<00:00:27.930> you<00:00:28.199> type<00:00:28.470> in<00:00:28.500> the

00:00:29.060 --> 00:00:29.070 
type something and you type in the

00:00:29.070 --> 00:00:33.170 
type something and you type in the
number<00:00:29.910> 4<00:00:30.179> on<00:00:30.420> your<00:00:30.630> keyboard<00:00:30.869> that<00:00:31.850> is<00:00:32.850> not

00:00:33.170 --> 00:00:33.180 
number 4 on your keyboard that is not

00:00:33.180 --> 00:00:37.160 
number 4 on your keyboard that is not
treated<00:00:33.600> as<00:00:33.960> an<00:00:34.260> actual<00:00:34.739> value<00:00:35.430> on<00:00:35.670> a<00:00:36.170> quantity

00:00:37.160 --> 00:00:37.170 
treated as an actual value on a quantity

00:00:37.170 --> 00:00:42.500 
treated as an actual value on a quantity
of<00:00:37.410> 4<00:00:37.829> rather<00:00:38.460> it<00:00:38.879> is<00:00:39.540> encoded<00:00:40.260> as<00:00:40.489> text<00:00:41.489> and<00:00:41.700> a

00:00:42.500 --> 00:00:42.510 
of 4 rather it is encoded as text and a

00:00:42.510 --> 00:00:45.650 
of 4 rather it is encoded as text and a
number<00:00:42.809> that<00:00:43.170> has<00:00:43.350> been<00:00:43.590> encoded<00:00:44.100> as<00:00:44.480> text<00:00:45.480> is

00:00:45.650 --> 00:00:45.660 
number that has been encoded as text is

00:00:45.660 --> 00:00:49.220 
number that has been encoded as text is
not<00:00:46.649> at<00:00:46.920> all<00:00:46.950> the<00:00:47.399> same<00:00:47.640> thing<00:00:47.700> as<00:00:48.239> an<00:00:48.600> actual

00:00:49.220 --> 00:00:49.230 
not at all the same thing as an actual

00:00:49.230 --> 00:00:53.299 
not at all the same thing as an actual
number<00:00:50.570> so<00:00:51.570> it<00:00:51.870> turns<00:00:52.170> out<00:00:52.469> that<00:00:52.710> just<00:00:52.770> as

00:00:53.299 --> 00:00:53.309 
number so it turns out that just as

00:00:53.309 --> 00:00:56.000 
number so it turns out that just as
capital<00:00:54.059> and<00:00:54.270> lowercase<00:00:55.050> letters<00:00:55.829> are

00:00:56.000 --> 00:00:56.010 
capital and lowercase letters are

00:00:56.010 --> 00:00:59.510 
capital and lowercase letters are
encoded<00:00:56.940> in<00:00:57.090> a<00:00:57.270> special<00:00:57.780> binary<00:00:58.230> format<00:00:58.800> the

00:00:59.510 --> 00:00:59.520 
encoded in a special binary format the

00:00:59.520 --> 00:01:02.630 
encoded in a special binary format the
same<00:00:59.879> is<00:01:00.149> also<00:01:00.180> true<00:01:00.629> for<00:01:01.140> numbers<00:01:01.559> so<00:01:02.340> first

00:01:02.630 --> 00:01:02.640 
same is also true for numbers so first

00:01:02.640 --> 00:01:05.390 
same is also true for numbers so first
of<00:01:02.879> all<00:01:02.969> let<00:01:03.539> me<00:01:03.660> show<00:01:03.870> you<00:01:03.930> the<00:01:04.229> table<00:01:04.500> and<00:01:04.830> the

00:01:05.390 --> 00:01:05.400 
of all let me show you the table and the

00:01:05.400 --> 00:01:10.460 
of all let me show you the table and the
rules<00:01:05.640> for<00:01:05.939> this<00:01:06.090> process<00:01:08.780> so<00:01:09.780> here<00:01:10.229> is<00:01:10.439> a

00:01:10.460 --> 00:01:10.470 
rules for this process so here is a

00:01:10.470 --> 00:01:14.410 
rules for this process so here is a
table<00:01:10.920> of<00:01:11.360> all<00:01:12.360> of<00:01:12.570> the<00:01:12.720> different<00:01:13.110> way<00:01:13.320> that

00:01:14.410 --> 00:01:14.420 
table of all of the different way that

00:01:14.420 --> 00:01:17.960 
table of all of the different way that
numbers<00:01:15.420> as<00:01:16.130> they're<00:01:17.130> typed<00:01:17.460> on<00:01:17.670> the<00:01:17.700> keyboard

00:01:17.960 --> 00:01:17.970 
numbers as they're typed on the keyboard

00:01:17.970 --> 00:01:22.999 
numbers as they're typed on the keyboard
are<00:01:19.040> encoded<00:01:20.040> as<00:01:20.299> ASCII<00:01:21.299> text<00:01:21.570> now<00:01:22.530> look<00:01:22.860> at

00:01:22.999 --> 00:01:23.009 
are encoded as ASCII text now look at

00:01:23.009 --> 00:01:25.550 
are encoded as ASCII text now look at
the<00:01:23.130> first<00:01:23.369> example<00:01:23.820> here<00:01:24.210> which<00:01:24.530> which<00:01:25.530> is

00:01:25.550 --> 00:01:25.560 
the first example here which which is

00:01:25.560 --> 00:01:28.730 
the first example here which which is
right<00:01:25.950> here<00:01:26.130> this<00:01:26.369> is<00:01:26.700> 0<00:01:27.659> on<00:01:27.990> your<00:01:28.680> keyboard

00:01:28.730 --> 00:01:28.740 
right here this is 0 on your keyboard

00:01:28.740 --> 00:01:32.420 
right here this is 0 on your keyboard
the<00:01:29.490> way<00:01:29.640> it's<00:01:29.820> actually<00:01:30.170> encoded<00:01:31.430> notice

00:01:32.420 --> 00:01:32.430 
the way it's actually encoded notice

00:01:32.430 --> 00:01:34.730 
the way it's actually encoded notice
that<00:01:32.640> it<00:01:32.939> is<00:01:33.060> not<00:01:33.329> the<00:01:33.720> same<00:01:33.960> thing<00:01:34.259> as<00:01:34.470> the

00:01:34.730 --> 00:01:34.740 
that it is not the same thing as the

00:01:34.740 --> 00:01:37.580 
that it is not the same thing as the
value<00:01:35.189> 0<00:01:35.670> or<00:01:35.939> take<00:01:36.810> a<00:01:36.840> look<00:01:37.079> at<00:01:37.229> this<00:01:37.350> example

00:01:37.580 --> 00:01:37.590 
value 0 or take a look at this example

00:01:37.590 --> 00:01:41.630 
value 0 or take a look at this example
this<00:01:38.130> right<00:01:38.340> here<00:01:38.729> if<00:01:39.200> you<00:01:40.200> push<00:01:40.500> 3<00:01:41.100> on<00:01:41.369> your

00:01:41.630 --> 00:01:41.640 
this right here if you push 3 on your

00:01:41.640 --> 00:01:44.359 
this right here if you push 3 on your
keyboard<00:01:41.880> it<00:01:42.360> actually<00:01:42.810> gets<00:01:43.020> encoded<00:01:43.439> like

00:01:44.359 --> 00:01:44.369 
keyboard it actually gets encoded like

00:01:44.369 --> 00:01:47.600 
keyboard it actually gets encoded like
this<00:01:44.640> which<00:01:44.970> is<00:01:45.210> certainly<00:01:45.899> not<00:01:46.170> the<00:01:46.500> value<00:01:47.189> 3

00:01:47.600 --> 00:01:47.610 
this which is certainly not the value 3

00:01:47.610 --> 00:01:51.109 
this which is certainly not the value 3
it's<00:01:48.180> actually<00:01:48.630> 33<00:01:49.320> in<00:01:49.439> hexadecimal<00:01:50.030> so<00:01:51.030> you

00:01:51.109 --> 00:01:51.119 
it's actually 33 in hexadecimal so you

00:01:51.119 --> 00:01:53.889 
it's actually 33 in hexadecimal so you
cannot<00:01:51.630> just<00:01:51.990> simply<00:01:52.380> add<00:01:52.590> together<00:01:52.979> values

00:01:53.889 --> 00:01:53.899 
cannot just simply add together values

00:01:53.899 --> 00:01:56.090 
cannot just simply add together values
for<00:01:54.899> numbers<00:01:55.320> that<00:01:55.530> are<00:01:55.649> typed<00:01:55.860> on<00:01:56.070> the

00:01:56.090 --> 00:01:56.100 
for numbers that are typed on the

00:01:56.100 --> 00:01:58.810 
for numbers that are typed on the
keyboard<00:01:56.299> because<00:01:57.299> they<00:01:57.479> are<00:01:57.719> not<00:01:57.990> treated<00:01:58.350> as

00:01:58.810 --> 00:01:58.820 
keyboard because they are not treated as

00:01:58.820 --> 00:02:03.260 
keyboard because they are not treated as
actual<00:01:59.820> numbers<00:02:01.070> so<00:02:02.070> if<00:02:02.340> you<00:02:02.579> take<00:02:02.820> a<00:02:02.880> look<00:02:03.119> at

00:02:03.260 --> 00:02:03.270 
actual numbers so if you take a look at

00:02:03.270 --> 00:02:06.230 
actual numbers so if you take a look at
this<00:02:03.420> table<00:02:03.770> you<00:02:04.770> should<00:02:04.799> be<00:02:05.310> able<00:02:05.490> to<00:02:05.670> see<00:02:06.030> the

00:02:06.230 --> 00:02:06.240 
this table you should be able to see the

00:02:06.240 --> 00:02:10.070 
this table you should be able to see the
structure<00:02:06.810> of<00:02:07.069> number<00:02:08.069> characters<00:02:09.080> every

00:02:10.070 --> 00:02:10.080 
structure of number characters every

00:02:10.080 --> 00:02:12.980 
structure of number characters every
number<00:02:10.590> character<00:02:11.370> starts<00:02:11.940> with<00:02:12.209> 0

00:02:12.980 --> 00:02:12.990 
number character starts with 0

00:02:12.990 --> 00:02:17.170 
number character starts with 0
0<00:02:13.320> 1<00:02:13.560> 1<00:02:13.830> and<00:02:14.570> then<00:02:15.570> immediately<00:02:15.960> after<00:02:16.680> that

00:02:17.170 --> 00:02:17.180 
0 1 1 and then immediately after that

00:02:17.180 --> 00:02:20.500 
0 1 1 and then immediately after that
the<00:02:18.180> actual<00:02:18.780> value<00:02:19.410> of<00:02:19.440> the<00:02:19.680> number<00:02:20.040> is

00:02:20.500 --> 00:02:20.510 
the actual value of the number is

00:02:20.510 --> 00:02:25.220 
the actual value of the number is
represented<00:02:21.510> by<00:02:21.720> the<00:02:22.530> next<00:02:22.920> four<00:02:23.480> bits<00:02:24.480> so<00:02:24.960> for

00:02:25.220 --> 00:02:25.230 
represented by the next four bits so for

00:02:25.230 --> 00:02:29.030 
represented by the next four bits so for
example<00:02:25.740> the<00:02:26.610> number<00:02:27.030> six<00:02:27.470> starts<00:02:28.470> with<00:02:28.680> zero

00:02:29.030 --> 00:02:29.040 
example the number six starts with zero

00:02:29.040 --> 00:02:31.550 
example the number six starts with zero
zero<00:02:29.400> 1<00:02:29.670> 1<00:02:29.700> and<00:02:30.180> then<00:02:30.780> the<00:02:30.900> next<00:02:31.140> four<00:02:31.350> bits

00:02:31.550 --> 00:02:31.560 
zero 1 1 and then the next four bits

00:02:31.560 --> 00:02:35.260 
zero 1 1 and then the next four bits
encode<00:02:32.130> the<00:02:32.310> actual<00:02:32.850> binary<00:02:33.300> value<00:02:33.720> for<00:02:33.960> six

00:02:35.260 --> 00:02:35.270 
encode the actual binary value for six

00:02:35.270 --> 00:02:38.510 
encode the actual binary value for six
so<00:02:36.270> if<00:02:36.510> you<00:02:36.690> remember<00:02:37.230> in<00:02:37.440> the<00:02:37.800> context<00:02:38.430> of

00:02:38.510 --> 00:02:38.520 
so if you remember in the context of

00:02:38.520 --> 00:02:41.420 
so if you remember in the context of
capital<00:02:39.090> and<00:02:39.270> lowercase<00:02:39.750> letters<00:02:40.430> capital

00:02:41.420 --> 00:02:41.430 
capital and lowercase letters capital

00:02:41.430 --> 00:02:44.740 
capital and lowercase letters capital
letters<00:02:41.730> always<00:02:42.000> began<00:02:42.660> with<00:02:42.960> zero<00:02:43.620> one<00:02:43.950> zero

00:02:44.740 --> 00:02:44.750 
letters always began with zero one zero

00:02:44.750 --> 00:02:49.370 
letters always began with zero one zero
lowercase<00:02:45.750> letters<00:02:46.200> always<00:02:46.740> began<00:02:47.430> with<00:02:48.150> 0<00:02:48.960> 1

00:02:49.370 --> 00:02:49.380 
lowercase letters always began with 0 1

00:02:49.380 --> 00:02:56.740 
lowercase letters always began with 0 1
1<00:02:49.740> and<00:02:50.900> numbers<00:02:52.040> always<00:02:53.040> begin<00:02:53.490> with<00:02:53.810> 0<00:02:54.810> 0<00:02:54.930> 1<00:02:55.710> 1

00:02:56.740 --> 00:02:56.750 
1 and numbers always begin with 0 0 1 1

00:02:56.750 --> 00:03:00.410 
1 and numbers always begin with 0 0 1 1
now<00:02:57.750> that's<00:02:58.050> really<00:02:58.350> all<00:02:58.680> the<00:02:59.070> ASCII<00:02:59.700> you<00:03:00.240> will

00:03:00.410 --> 00:03:00.420 
now that's really all the ASCII you will

00:03:00.420 --> 00:03:03.140 
now that's really all the ASCII you will
ever<00:03:00.690> have<00:03:01.020> to<00:03:01.260> remember<00:03:01.590> because<00:03:02.550> as<00:03:02.700> long<00:03:02.970> as

00:03:03.140 --> 00:03:03.150 
ever have to remember because as long as

00:03:03.150 --> 00:03:07.400 
ever have to remember because as long as
you<00:03:03.330> know<00:03:03.540> that<00:03:04.940> set<00:03:05.940> of<00:03:06.090> rules<00:03:06.360> you'll<00:03:07.230> be

00:03:07.400 --> 00:03:07.410 
you know that set of rules you'll be

00:03:07.410 --> 00:03:10.130 
you know that set of rules you'll be
able<00:03:07.560> to<00:03:07.800> form<00:03:08.100> any<00:03:08.280> letter<00:03:09.270> capital<00:03:09.990> or

00:03:10.130 --> 00:03:10.140 
able to form any letter capital or

00:03:10.140 --> 00:03:13.700 
able to form any letter capital or
lowercase<00:03:10.470> and<00:03:10.920> any<00:03:11.730> number<00:03:12.440> the<00:03:13.440> most

00:03:13.700 --> 00:03:13.710 
lowercase and any number the most

00:03:13.710 --> 00:03:16.010 
lowercase and any number the most
important<00:03:14.430> thing<00:03:14.670> to<00:03:14.910> understand<00:03:15.540> in<00:03:15.810> this

00:03:16.010 --> 00:03:16.020 
important thing to understand in this

00:03:16.020 --> 00:03:19.550 
important thing to understand in this
lesson<00:03:16.560> by<00:03:17.160> far<00:03:17.490> is<00:03:17.790> to<00:03:18.030> remember<00:03:18.360> that<00:03:18.720> a

00:03:19.550 --> 00:03:19.560 
lesson by far is to remember that a

00:03:19.560 --> 00:03:24.490 
lesson by far is to remember that a
number<00:03:20.430> typed<00:03:20.910> on<00:03:21.120> the<00:03:21.150> keyboard<00:03:21.300> is<00:03:22.430> encoded

00:03:24.490 --> 00:03:24.500 
number typed on the keyboard is encoded

00:03:24.500 --> 00:03:26.900 
number typed on the keyboard is encoded
differently<00:03:25.500> than<00:03:25.800> the<00:03:25.920> actual<00:03:26.370> value<00:03:26.880> of

00:03:26.900 --> 00:03:26.910 
differently than the actual value of

00:03:26.910 --> 00:03:30.520 
differently than the actual value of
that<00:03:27.210> number<00:03:27.480> and<00:03:27.980> this<00:03:28.980> goes<00:03:29.280> for<00:03:29.610> all

00:03:30.520 --> 00:03:30.530 
that number and this goes for all

00:03:30.530 --> 00:03:34.910 
that number and this goes for all
numeric<00:03:31.530> characters<00:03:32.690> however<00:03:33.690> as<00:03:34.170> you<00:03:34.890> can

00:03:34.910 --> 00:03:34.920 
numeric characters however as you can

00:03:34.920 --> 00:03:38.510 
numeric characters however as you can
see<00:03:35.370> from<00:03:35.700> the<00:03:35.820> above<00:03:36.120> table<00:03:37.340> translating<00:03:38.340> a

00:03:38.510 --> 00:03:38.520 
see from the above table translating a

00:03:38.520 --> 00:03:41.930 
see from the above table translating a
character<00:03:39.150> from<00:03:39.810> ASCII<00:03:40.680> to<00:03:40.950> a<00:03:40.980> real<00:03:41.370> number<00:03:41.790> is

00:03:41.930 --> 00:03:41.940 
character from ASCII to a real number is

00:03:41.940 --> 00:03:44.210 
character from ASCII to a real number is
not<00:03:42.210> very<00:03:42.480> hard<00:03:42.780> for<00:03:43.050> example<00:03:43.620> if<00:03:43.770> we<00:03:43.950> have

00:03:44.210 --> 00:03:44.220 
not very hard for example if we have

00:03:44.220 --> 00:03:48.590 
not very hard for example if we have
this<00:03:45.590> value<00:03:46.590> and<00:03:46.800> we<00:03:46.860> want<00:03:47.850> to<00:03:48.000> convert<00:03:48.240> it<00:03:48.570> to

00:03:48.590 --> 00:03:48.600 
this value and we want to convert it to

00:03:48.600 --> 00:03:52.040 
this value and we want to convert it to
the<00:03:48.810> actual<00:03:49.790> value<00:03:50.790> of<00:03:50.820> 3<00:03:51.270> all<00:03:51.480> we<00:03:51.660> have<00:03:51.810> to<00:03:51.930> do

00:03:52.040 --> 00:03:52.050 
the actual value of 3 all we have to do

00:03:52.050 --> 00:03:55.220 
the actual value of 3 all we have to do
is<00:03:52.170> just<00:03:52.380> set<00:03:52.560> these<00:03:52.770> two<00:03:53.190> ones<00:03:53.580> to<00:03:53.940> a<00:03:53.970> 0<00:03:54.330> so<00:03:55.110> in

00:03:55.220 --> 00:03:55.230 
is just set these two ones to a 0 so in

00:03:55.230 --> 00:03:57.590 
is just set these two ones to a 0 so in
other<00:03:55.380> words<00:03:55.680> if<00:03:55.890> you<00:03:56.640> have<00:03:56.880> a<00:03:56.910> single

00:03:57.590 --> 00:03:57.600 
other words if you have a single

00:03:57.600 --> 00:04:01.160 
other words if you have a single
character<00:03:58.400> that<00:03:59.400> is<00:03:59.610> a<00:03:59.640> number<00:04:00.000> and<00:04:00.420> you<00:04:00.960> want

00:04:01.160 --> 00:04:01.170 
character that is a number and you want

00:04:01.170 --> 00:04:03.530 
character that is a number and you want
to<00:04:01.350> convert<00:04:01.650> it<00:04:02.070> to<00:04:02.100> an<00:04:02.400> actual<00:04:02.940> number<00:04:03.150> all

00:04:03.530 --> 00:04:03.540 
to convert it to an actual number all

00:04:03.540 --> 00:04:08.480 
to convert it to an actual number all
you<00:04:04.110> have<00:04:04.320> to<00:04:04.470> do<00:04:04.620> is<00:04:04.910> take<00:04:05.910> these<00:04:06.180> two<00:04:07.490> binary

00:04:08.480 --> 00:04:08.490 
you have to do is take these two binary

00:04:08.490 --> 00:04:11.990 
you have to do is take these two binary
digits<00:04:09.180> and<00:04:09.330> set<00:04:09.720> them<00:04:09.930> to<00:04:10.110> 0<00:04:10.440> and<00:04:10.970> you<00:04:11.970> will

00:04:11.990 --> 00:04:12.000 
digits and set them to 0 and you will

00:04:12.000 --> 00:04:15.860 
digits and set them to 0 and you will
have<00:04:12.270> achieved<00:04:12.360> that<00:04:12.750> goal<00:04:12.990> so<00:04:14.330> for<00:04:15.330> example

00:04:15.860 --> 00:04:15.870 
have achieved that goal so for example

00:04:15.870 --> 00:04:19.190 
have achieved that goal so for example
if<00:04:16.020> we<00:04:16.620> have<00:04:16.890> the<00:04:17.070> character<00:04:17.489> 8<00:04:18.120> as<00:04:18.570> it<00:04:19.049> would

00:04:19.190 --> 00:04:19.200 
if we have the character 8 as it would

00:04:19.200 --> 00:04:22.640 
if we have the character 8 as it would
be<00:04:19.320> typed<00:04:19.590> on<00:04:19.770> your<00:04:19.950> keyboard<00:04:20.190> and<00:04:21.260> we<00:04:22.260> want<00:04:22.500> to

00:04:22.640 --> 00:04:22.650 
be typed on your keyboard and we want to

00:04:22.650 --> 00:04:25.100 
be typed on your keyboard and we want to
convert<00:04:23.010> that<00:04:23.250> to<00:04:23.310> the<00:04:23.520> value<00:04:23.760> 8<00:04:24.270> all<00:04:24.570> we<00:04:24.900> have

00:04:25.100 --> 00:04:25.110 
convert that to the value 8 all we have

00:04:25.110 --> 00:04:26.270 
convert that to the value 8 all we have
to<00:04:25.260> do<00:04:25.380> is<00:04:25.620> set<00:04:26.010> the

00:04:26.270 --> 00:04:26.280 
to do is set the

00:04:26.280 --> 00:04:31.850 
to do is set the
two<00:04:26.610> binary<00:04:27.570> digits<00:04:28.260> to<00:04:28.889> a<00:04:28.920> zero<00:04:30.380> now<00:04:31.380> remember

00:04:31.850 --> 00:04:31.860 
two binary digits to a zero now remember

00:04:31.860 --> 00:04:34.280 
two binary digits to a zero now remember
that<00:04:31.889> this<00:04:32.220> lesson<00:04:32.520> applies<00:04:33.090> to<00:04:33.480> ASCII

00:04:34.280 --> 00:04:34.290 
that this lesson applies to ASCII

00:04:34.290 --> 00:04:37.070 
that this lesson applies to ASCII
specifically<00:04:35.250> as<00:04:35.460> I<00:04:35.540> stated<00:04:36.540> in<00:04:36.810> the<00:04:36.930> last

00:04:37.070 --> 00:04:37.080 
specifically as I stated in the last

00:04:37.080 --> 00:04:40.010 
specifically as I stated in the last
lesson<00:04:37.639> ASCII<00:04:38.639> is<00:04:38.820> one<00:04:39.120> of<00:04:39.330> many<00:04:39.630> ways<00:04:39.810> to

00:04:40.010 --> 00:04:40.020 
lesson ASCII is one of many ways to

00:04:40.020 --> 00:04:42.590 
lesson ASCII is one of many ways to
encode<00:04:40.740> characters<00:04:41.370> and<00:04:41.639> you<00:04:42.120> should<00:04:42.389> not

00:04:42.590 --> 00:04:42.600 
encode characters and you should not

00:04:42.600 --> 00:04:45.530 
encode characters and you should not
assume<00:04:42.780> that<00:04:43.020> this<00:04:43.350> is<00:04:43.560> universally<00:04:44.310> true<00:04:44.540> the

00:04:45.530 --> 00:04:45.540 
assume that this is universally true the

00:04:45.540 --> 00:04:47.510 
assume that this is universally true the
purpose<00:04:46.020> of<00:04:46.230> this<00:04:46.350> lesson<00:04:46.650> is<00:04:47.010> to<00:04:47.250> show<00:04:47.280> you

00:04:47.510 --> 00:04:47.520 
purpose of this lesson is to show you

00:04:47.520 --> 00:04:51.260 
purpose of this lesson is to show you
that<00:04:48.000> even<00:04:48.960> numbers<00:04:49.500> have<00:04:50.070> to<00:04:50.310> be<00:04:50.460> encoded<00:04:50.910> as

00:04:51.260 --> 00:04:51.270 
that even numbers have to be encoded as

00:04:51.270 --> 00:04:54.260 
that even numbers have to be encoded as
characters<00:04:51.960> and<00:04:52.340> ASCII<00:04:53.340> is<00:04:53.520> one<00:04:53.850> way<00:04:54.060> that

00:04:54.260 --> 00:04:54.270 
characters and ASCII is one way that

00:04:54.270 --> 00:04:56.750 
characters and ASCII is one way that
this<00:04:54.450> is<00:04:54.660> done<00:04:54.900> we<00:04:55.770> will<00:04:55.800> explore<00:04:56.310> this<00:04:56.520> in

00:04:56.750 --> 00:04:56.760 
this is done we will explore this in

00:04:56.760 --> 00:04:59.720 
this is done we will explore this in
greater<00:04:57.000> detail<00:04:57.120> later

