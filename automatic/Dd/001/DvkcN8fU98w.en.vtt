WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.180 

I<00:00:00.060> also<00:00:01.050> wanted<00:00:01.380> to<00:00:01.500> run<00:00:01.740> through<00:00:01.770> some<00:00:02.100> of

00:00:02.180 --> 00:00:02.190 
I also wanted to run through some of

00:00:02.190 --> 00:00:05.390 
I also wanted to run through some of
these<00:00:02.310> other<00:00:02.370> cache<00:00:03.300> basics<00:00:04.130> to<00:00:05.130> make<00:00:05.250> sure

00:00:05.390 --> 00:00:05.400 
these other cache basics to make sure

00:00:05.400 --> 00:00:07.369 
these other cache basics to make sure
that<00:00:05.520> the<00:00:05.670> people<00:00:05.850> understand<00:00:06.509> all<00:00:07.109> of<00:00:07.170> these

00:00:07.369 --> 00:00:07.379 
that the people understand all of these

00:00:07.379 --> 00:00:09.709 
that the people understand all of these
terms<00:00:07.649> that<00:00:07.799> people<00:00:08.010> use<00:00:08.189> in<00:00:08.880> in<00:00:09.330> in<00:00:09.540> most

00:00:09.709 --> 00:00:09.719 
terms that people use in in in most

00:00:09.719 --> 00:00:11.959 
terms that people use in in in most
cache<00:00:10.019> discussions<00:00:10.590> we've<00:00:11.490> already<00:00:11.639> talked

00:00:11.959 --> 00:00:11.969 
cache discussions we've already talked

00:00:11.969 --> 00:00:13.879 
cache discussions we've already talked
about<00:00:12.090> the<00:00:12.630> l1<00:00:12.990> cache<00:00:13.230> being<00:00:13.500> split<00:00:13.769> as

00:00:13.879 --> 00:00:13.889 
about the l1 cache being split as

00:00:13.889 --> 00:00:15.350 
about the l1 cache being split as
instruction<00:00:14.400> and<00:00:14.549> data<00:00:14.639> right<00:00:15.120> so<00:00:15.240> I<00:00:15.269> said

00:00:15.350 --> 00:00:15.360 
instruction and data right so I said

00:00:15.360 --> 00:00:18.050 
instruction and data right so I said
that<00:00:15.599> if<00:00:15.690> this<00:00:15.839> is<00:00:15.960> your<00:00:16.139> core<00:00:16.940> right<00:00:17.940> it

00:00:18.050 --> 00:00:18.060 
that if this is your core right it

00:00:18.060 --> 00:00:20.840 
that if this is your core right it
usually<00:00:18.390> accesses<00:00:18.930> you<00:00:19.289> know<00:00:19.410> l1<00:00:19.890> there's<00:00:20.730> an

00:00:20.840 --> 00:00:20.850 
usually accesses you know l1 there's an

00:00:20.850 --> 00:00:23.900 
usually accesses you know l1 there's an
l1<00:00:21.150> data<00:00:21.359> cache<00:00:21.480> and<00:00:22.080> there's<00:00:23.070> also<00:00:23.220> an<00:00:23.519> l1

00:00:23.900 --> 00:00:23.910 
l1 data cache and there's also an l1

00:00:23.910 --> 00:00:26.480 
l1 data cache and there's also an l1
instruction<00:00:24.210> cache<00:00:24.779> but<00:00:25.769> then<00:00:25.920> these<00:00:26.099> go<00:00:26.369> on

00:00:26.480 --> 00:00:26.490 
instruction cache but then these go on

00:00:26.490 --> 00:00:28.790 
instruction cache but then these go on
to<00:00:26.640> share<00:00:26.849> the<00:00:27.029> same<00:00:27.269> l2<00:00:27.750> and<00:00:28.050> the<00:00:28.080> same<00:00:28.320> l3<00:00:28.769> and

00:00:28.790 --> 00:00:28.800 
to share the same l2 and the same l3 and

00:00:28.800 --> 00:00:32.030 
to share the same l2 and the same l3 and
so<00:00:29.070> on<00:00:29.220> right<00:00:29.580> so<00:00:29.900> once<00:00:30.900> you<00:00:31.019> move<00:00:31.170> past<00:00:31.500> the<00:00:31.710> l1

00:00:32.030 --> 00:00:32.040 
so on right so once you move past the l1

00:00:32.040 --> 00:00:35.630 
so on right so once you move past the l1
the<00:00:32.700> caches<00:00:33.030> are<00:00:33.149> usually<00:00:33.540> unified<00:00:34.230> I<00:00:34.640> also

00:00:35.630 --> 00:00:35.640 
the caches are usually unified I also

00:00:35.640 --> 00:00:36.770 
the caches are usually unified I also
talked<00:00:35.910> about<00:00:36.000> the<00:00:36.149> fact<00:00:36.420> that<00:00:36.510> these

00:00:36.770 --> 00:00:36.780 
talked about the fact that these

00:00:36.780 --> 00:00:39.650 
talked about the fact that these
hierarchies<00:00:37.649> can<00:00:37.890> be<00:00:38.610> inclusive<00:00:38.910> exclusive

00:00:39.650 --> 00:00:39.660 
hierarchies can be inclusive exclusive

00:00:39.660 --> 00:00:40.970 
hierarchies can be inclusive exclusive
or<00:00:39.870> non<00:00:40.290> inclusive

00:00:40.970 --> 00:00:40.980 
or non inclusive

00:00:40.980 --> 00:00:43.100 
or non inclusive
okay<00:00:41.940> now<00:00:42.090> let's<00:00:42.300> talk<00:00:42.480> about<00:00:42.540> you<00:00:42.870> know<00:00:42.960> what

00:00:43.100 --> 00:00:43.110 
okay now let's talk about you know what

00:00:43.110 --> 00:00:45.020 
okay now let's talk about you know what
is<00:00:43.230> right<00:00:43.410> allocate<00:00:43.950> what<00:00:44.219> is<00:00:44.340> right<00:00:44.670> no

00:00:45.020 --> 00:00:45.030 
is right allocate what is right no

00:00:45.030 --> 00:00:48.350 
is right allocate what is right no
allocate<00:00:45.480> so<00:00:46.379> if<00:00:46.710> my<00:00:47.100> core<00:00:47.399> issues<00:00:47.820> oh<00:00:48.090> right

00:00:48.350 --> 00:00:48.360 
allocate so if my core issues oh right

00:00:48.360 --> 00:00:50.420 
allocate so if my core issues oh right
right<00:00:48.629> so<00:00:48.840> and<00:00:49.020> rights<00:00:49.200> are<00:00:49.350> done<00:00:49.500> by<00:00:49.739> doing<00:00:50.219> a

00:00:50.420 --> 00:00:50.430 
right so and rights are done by doing a

00:00:50.430 --> 00:00:53.000 
right so and rights are done by doing a
store<00:00:50.700> instruction<00:00:51.079> so<00:00:52.079> when<00:00:52.230> I<00:00:52.289> do<00:00:52.350> a<00:00:52.440> do<00:00:52.980> a

00:00:53.000 --> 00:00:53.010 
store instruction so when I do a do a

00:00:53.010 --> 00:00:56.630 
store instruction so when I do a do a
right<00:00:53.280> and<00:00:53.629> I<00:00:54.629> ended<00:00:54.899> up<00:00:54.960> having<00:00:55.230> a<00:00:55.680> Miss<00:00:56.370> in<00:00:56.520> my

00:00:56.630 --> 00:00:56.640 
right and I ended up having a Miss in my

00:00:56.640 --> 00:01:01.279 
right and I ended up having a Miss in my
l1<00:00:57.469> but<00:00:58.469> I<00:00:58.500> find<00:00:58.829> data<00:00:59.070> in<00:00:59.280> my<00:00:59.430> l2<00:01:00.109> okay<00:01:01.109> now<00:01:01.230> the

00:01:01.279 --> 00:01:01.289 
l1 but I find data in my l2 okay now the

00:01:01.289 --> 00:01:02.840 
l1 but I find data in my l2 okay now the
question<00:01:01.350> before<00:01:01.920> me<00:01:02.039> is<00:01:02.219> do<00:01:02.460> I<00:01:02.520> bring<00:01:02.789> this

00:01:02.840 --> 00:01:02.850 
question before me is do I bring this

00:01:02.850 --> 00:01:06.080 
question before me is do I bring this
block<00:01:03.300> into<00:01:03.600> l1<00:01:03.930> or<00:01:04.290> not<00:01:04.619> if<00:01:05.010> I<00:01:05.729> bring<00:01:05.939> the

00:01:06.080 --> 00:01:06.090 
block into l1 or not if I bring the

00:01:06.090 --> 00:01:07.730 
block into l1 or not if I bring the
block<00:01:06.299> into<00:01:06.570> l1<00:01:06.720> that's<00:01:07.080> called<00:01:07.350> a<00:01:07.530> write

00:01:07.730 --> 00:01:07.740 
block into l1 that's called a write

00:01:07.740 --> 00:01:10.219 
block into l1 that's called a write
allocate<00:01:08.040> policy<00:01:08.700> if<00:01:09.450> I<00:01:09.659> don't<00:01:09.930> bring<00:01:10.110> the

00:01:10.219 --> 00:01:10.229 
allocate policy if I don't bring the

00:01:10.229 --> 00:01:12.140 
allocate policy if I don't bring the
block<00:01:10.409> into<00:01:10.590> l1<00:01:10.950> that's<00:01:11.100> called<00:01:11.430> a<00:01:11.580> write<00:01:11.790> know

00:01:12.140 --> 00:01:12.150 
block into l1 that's called a write know

00:01:12.150 --> 00:01:14.630 
block into l1 that's called a write know
allocate<00:01:12.570> policy<00:01:13.020> okay<00:01:13.830> so<00:01:14.010> you<00:01:14.549> know

00:01:14.630 --> 00:01:14.640 
allocate policy okay so you know

00:01:14.640 --> 00:01:16.310 
allocate policy okay so you know
depending<00:01:15.060> on<00:01:15.180> the<00:01:15.240> data<00:01:15.509> access<00:01:15.840> pad<00:01:15.990> and<00:01:16.170> one

00:01:16.310 --> 00:01:16.320 
depending on the data access pad and one

00:01:16.320 --> 00:01:18.070 
depending on the data access pad and one
of<00:01:16.409> these<00:01:16.560> two<00:01:16.770> is<00:01:16.979> going<00:01:17.220> to<00:01:17.310> perform<00:01:17.580> better

00:01:18.070 --> 00:01:18.080 
of these two is going to perform better

00:01:18.080 --> 00:01:21.499 
of these two is going to perform better
okay<00:01:19.080> so<00:01:19.310> usually<00:01:20.310> when<00:01:20.610> I<00:01:20.640> do<00:01:20.759> a<00:01:20.880> store<00:01:21.299> it

00:01:21.499 --> 00:01:21.509 
okay so usually when I do a store it

00:01:21.509 --> 00:01:22.910 
okay so usually when I do a store it
means<00:01:21.780> that<00:01:21.990> I'm<00:01:22.080> kind<00:01:22.259> of<00:01:22.320> done<00:01:22.560> with<00:01:22.619> that

00:01:22.910 --> 00:01:22.920 
means that I'm kind of done with that

00:01:22.920 --> 00:01:24.890 
means that I'm kind of done with that
data<00:01:23.130> right<00:01:23.430> so<00:01:23.610> the<00:01:23.700> way<00:01:23.820> programs<00:01:24.240> behave<00:01:24.450> is

00:01:24.890 --> 00:01:24.900 
data right so the way programs behave is

00:01:24.900 --> 00:01:26.780 
data right so the way programs behave is
you<00:01:25.409> bring<00:01:25.619> in<00:01:25.710> some<00:01:25.860> data<00:01:26.040> into<00:01:26.340> registers

00:01:26.780 --> 00:01:26.790 
you bring in some data into registers

00:01:26.790 --> 00:01:29.149 
you bring in some data into registers
which<00:01:27.119> are<00:01:27.270> your<00:01:27.450> scratchpad<00:01:27.720> memory<00:01:28.009> you<00:01:29.009> do

00:01:29.149 --> 00:01:29.159 
which are your scratchpad memory you do

00:01:29.159 --> 00:01:31.190 
which are your scratchpad memory you do
various<00:01:29.460> computations<00:01:30.030> over<00:01:30.210> there<00:01:30.390> when

00:01:31.190 --> 00:01:31.200 
various computations over there when

00:01:31.200 --> 00:01:32.300 
various computations over there when
you're<00:01:31.350> done<00:01:31.560> with<00:01:31.950> all<00:01:32.100> of<00:01:32.220> your

00:01:32.300 --> 00:01:32.310 
you're done with all of your

00:01:32.310 --> 00:01:34.219 
you're done with all of your
computations<00:01:32.880> you<00:01:33.360> then<00:01:33.509> store<00:01:33.869> the<00:01:34.079> data

00:01:34.219 --> 00:01:34.229 
computations you then store the data

00:01:34.229 --> 00:01:36.140 
computations you then store the data
back<00:01:34.530> into<00:01:34.770> memory<00:01:34.920> right<00:01:35.430> so<00:01:35.610> store<00:01:35.909> usually

00:01:36.140 --> 00:01:36.150 
back into memory right so store usually

00:01:36.150 --> 00:01:38.270 
back into memory right so store usually
means<00:01:36.570> that<00:01:37.320> this<00:01:37.439> is<00:01:37.619> the<00:01:37.740> end<00:01:37.890> of<00:01:38.070> my

00:01:38.270 --> 00:01:38.280 
means that this is the end of my

00:01:38.280 --> 00:01:40.520 
means that this is the end of my
temporal<00:01:38.909> locality<00:01:39.180> I'm<00:01:39.600> unlikely<00:01:40.110> to<00:01:40.259> use

00:01:40.520 --> 00:01:40.530 
temporal locality I'm unlikely to use

00:01:40.530 --> 00:01:43.130 
temporal locality I'm unlikely to use
this<00:01:40.710> data<00:01:40.950> again<00:01:41.340> okay<00:01:42.270> so<00:01:42.329> that<00:01:42.600> argues<00:01:43.110> for

00:01:43.130 --> 00:01:43.140 
this data again okay so that argues for

00:01:43.140 --> 00:01:45.289 
this data again okay so that argues for
using<00:01:43.649> a<00:01:43.799> right<00:01:44.070> know<00:01:44.549> allocate<00:01:44.939> policy

00:01:45.289 --> 00:01:45.299 
using a right know allocate policy

00:01:45.299 --> 00:01:46.460 
using a right know allocate policy
because<00:01:45.600> you<00:01:45.750> know<00:01:45.840> if<00:01:45.960> I'm<00:01:46.079> done<00:01:46.259> with<00:01:46.380> this

00:01:46.460 --> 00:01:46.470 
because you know if I'm done with this

00:01:46.470 --> 00:01:46.850 
because you know if I'm done with this
data

00:01:46.850 --> 00:01:46.860 
data

00:01:46.860 --> 00:01:49.679 
data
why<00:01:47.369> should<00:01:47.549> I<00:01:47.610> bring<00:01:47.790> it<00:01:47.939> in<00:01:48.060> into<00:01:48.570> the<00:01:48.659> l1

00:01:49.679 --> 00:01:49.689 
why should I bring it in into the l1

00:01:49.689 --> 00:01:52.230 
why should I bring it in into the l1
okay<00:01:50.320> but<00:01:50.560> there<00:01:51.280> are<00:01:51.369> also<00:01:51.520> many<00:01:51.819> other<00:01:51.969> cases

00:01:52.230 --> 00:01:52.240 
okay but there are also many other cases

00:01:52.240 --> 00:01:54.989 
okay but there are also many other cases
where<00:01:52.569> you<00:01:52.689> do<00:01:52.869> a<00:01:52.899> store<00:01:53.319> okay<00:01:54.280> so<00:01:54.340> for<00:01:54.640> example

00:01:54.989 --> 00:01:54.999 
where you do a store okay so for example

00:01:54.999 --> 00:01:55.980 
where you do a store okay so for example
when<00:01:55.090> I'm<00:01:55.179> caught<00:01:55.390> if<00:01:55.479> I'm<00:01:55.600> calling<00:01:55.899> a

00:01:55.980 --> 00:01:55.990 
when I'm caught if I'm calling a

00:01:55.990 --> 00:01:57.899 
when I'm caught if I'm calling a
function<00:01:56.499> then<00:01:57.219> before<00:01:57.490> I<00:01:57.520> call<00:01:57.759> that

00:01:57.899 --> 00:01:57.909 
function then before I call that

00:01:57.909 --> 00:01:59.279 
function then before I call that
function<00:01:58.060> I<00:01:58.240> have<00:01:58.270> to<00:01:58.479> put<00:01:58.659> all<00:01:58.689> my<00:01:58.810> registers

00:01:59.279 --> 00:01:59.289 
function I have to put all my registers

00:01:59.289 --> 00:02:00.870 
function I have to put all my registers
back<00:01:59.530> into<00:01:59.799> memory<00:01:59.950> right<00:02:00.460> so<00:02:00.609> that's<00:02:00.729> an

00:02:00.870 --> 00:02:00.880 
back into memory right so that's an

00:02:00.880 --> 00:02:03.090 
back into memory right so that's an
example<00:02:01.119> of<00:02:01.299> a<00:02:01.420> store<00:02:01.689> and<00:02:01.929> that's<00:02:02.500> an<00:02:02.709> example

00:02:03.090 --> 00:02:03.100 
example of a store and that's an example

00:02:03.100 --> 00:02:04.709 
example of a store and that's an example
where<00:02:03.310> I<00:02:03.340> am<00:02:03.640> going<00:02:03.880> to<00:02:03.969> touch<00:02:04.090> the<00:02:04.270> data<00:02:04.479> in

00:02:04.709 --> 00:02:04.719 
where I am going to touch the data in

00:02:04.719 --> 00:02:06.090 
where I am going to touch the data in
the<00:02:04.869> near<00:02:05.020> future<00:02:05.229> all<00:02:05.560> right<00:02:05.679> as<00:02:05.859> soon<00:02:05.979> as

00:02:06.090 --> 00:02:06.100 
the near future all right as soon as

00:02:06.100 --> 00:02:08.009 
the near future all right as soon as
that<00:02:06.219> function<00:02:06.549> finishes<00:02:06.939> I'm<00:02:07.119> going<00:02:07.810> to<00:02:07.899> get

00:02:08.009 --> 00:02:08.019 
that function finishes I'm going to get

00:02:08.019 --> 00:02:09.839 
that function finishes I'm going to get
back<00:02:08.229> to<00:02:08.410> accessing<00:02:08.860> this<00:02:08.950> data<00:02:09.190> and<00:02:09.399> working

00:02:09.839 --> 00:02:09.849 
back to accessing this data and working

00:02:09.849 --> 00:02:12.150 
back to accessing this data and working
with<00:02:10.119> it<00:02:10.269> right<00:02:11.140> so<00:02:11.260> that's<00:02:11.440> an<00:02:11.560> example<00:02:11.950> where

00:02:12.150 --> 00:02:12.160 
with it right so that's an example where

00:02:12.160 --> 00:02:13.800 
with it right so that's an example where
a<00:02:12.310> write<00:02:12.549> allocate<00:02:12.790> policy<00:02:13.390> would<00:02:13.510> do<00:02:13.629> well

00:02:13.800 --> 00:02:13.810 
a write allocate policy would do well

00:02:13.810 --> 00:02:16.530 
a write allocate policy would do well
because<00:02:14.230> the<00:02:14.980> store<00:02:15.280> does<00:02:15.519> not<00:02:15.670> imply<00:02:16.180> that

00:02:16.530 --> 00:02:16.540 
because the store does not imply that

00:02:16.540 --> 00:02:19.050 
because the store does not imply that
your<00:02:17.110> temporal<00:02:17.440> locality<00:02:17.739> has<00:02:18.280> ended

00:02:19.050 --> 00:02:19.060 
your temporal locality has ended

00:02:19.060 --> 00:02:21.960 
your temporal locality has ended
okay<00:02:19.930> so<00:02:19.989> depending<00:02:20.620> on<00:02:20.769> the<00:02:21.670> kinds<00:02:21.940> of

00:02:21.960 --> 00:02:21.970 
okay so depending on the kinds of

00:02:21.970 --> 00:02:23.910 
okay so depending on the kinds of
programs<00:02:22.360> that<00:02:22.510> you<00:02:22.569> run<00:02:22.780> you'll<00:02:23.500> either<00:02:23.650> use

00:02:23.910 --> 00:02:23.920 
programs that you run you'll either use

00:02:23.920 --> 00:02:25.680 
programs that you run you'll either use
a<00:02:23.950> write<00:02:24.340> allocate<00:02:24.549> or<00:02:25.030> a<00:02:25.060> write<00:02:25.299> know

00:02:25.680 --> 00:02:25.690 
a write allocate or a write know

00:02:25.690 --> 00:02:27.869 
a write allocate or a write know
allocate<00:02:26.079> policy<00:02:26.470> and<00:02:26.680> the<00:02:27.250> write<00:02:27.430> allocate

00:02:27.869 --> 00:02:27.879 
allocate policy and the write allocate

00:02:27.879 --> 00:02:30.559 
allocate policy and the write allocate
policy<00:02:28.239> ends<00:02:28.480> up<00:02:28.569> being<00:02:28.720> the<00:02:28.870> most<00:02:29.019> popular

00:02:30.559 --> 00:02:30.569 
policy ends up being the most popular

00:02:30.569 --> 00:02:33.270 
policy ends up being the most popular
then<00:02:31.569> also<00:02:31.840> on<00:02:32.200> a<00:02:32.230> write<00:02:32.500> you<00:02:32.739> can<00:02:32.920> do<00:02:33.069> right

00:02:33.270 --> 00:02:33.280 
then also on a write you can do right

00:02:33.280 --> 00:02:35.880 
then also on a write you can do right
back<00:02:33.579> or<00:02:33.849> right<00:02:34.060> through<00:02:34.329> okay<00:02:35.230> so<00:02:35.290> in<00:02:35.650> a<00:02:35.709> write

00:02:35.880 --> 00:02:35.890 
back or right through okay so in a write

00:02:35.890 --> 00:02:37.199 
back or right through okay so in a write
through<00:02:36.099> policy<00:02:36.129> you<00:02:36.700> know<00:02:36.790> let's<00:02:36.970> assume

00:02:37.199 --> 00:02:37.209 
through policy you know let's assume

00:02:37.209 --> 00:02:38.970 
through policy you know let's assume
that<00:02:37.269> you're<00:02:37.540> using<00:02:37.750> an<00:02:37.959> inclusive<00:02:38.349> hierarchy

00:02:38.970 --> 00:02:38.980 
that you're using an inclusive hierarchy

00:02:38.980 --> 00:02:41.069 
that you're using an inclusive hierarchy
where<00:02:39.819> there's<00:02:40.000> a<00:02:40.060> copy<00:02:40.269> of<00:02:40.450> block<00:02:40.690> a<00:02:40.900> over

00:02:41.069 --> 00:02:41.079 
where there's a copy of block a over

00:02:41.079 --> 00:02:44.729 
where there's a copy of block a over
here<00:02:41.349> here<00:02:41.980> and<00:02:42.310> let's<00:02:42.700> say<00:02:42.819> over<00:02:42.849> here<00:02:43.620> in<00:02:44.620> a

00:02:44.729 --> 00:02:44.739 
here here and let's say over here in a

00:02:44.739 --> 00:02:46.229 
here here and let's say over here in a
write<00:02:44.920> through<00:02:44.950> policy<00:02:45.190> when<00:02:45.670> I<00:02:45.700> do<00:02:45.819> a<00:02:45.910> write

00:02:46.229 --> 00:02:46.239 
write through policy when I do a write

00:02:46.239 --> 00:02:48.569 
write through policy when I do a write
into<00:02:46.629> a<00:02:46.750> I<00:02:47.170> don't<00:02:47.620> just<00:02:47.829> update<00:02:48.160> this<00:02:48.340> copy

00:02:48.569 --> 00:02:48.579 
into a I don't just update this copy

00:02:48.579 --> 00:02:49.199 
into a I don't just update this copy
over<00:02:48.849> here

00:02:49.199 --> 00:02:49.209 
over here

00:02:49.209 --> 00:02:51.960 
over here
I<00:02:49.239> also<00:02:49.840> update<00:02:50.260> the<00:02:50.290> copy<00:02:50.530> in<00:02:50.799> l2<00:02:51.160> all<00:02:51.849> right<00:02:51.940> I

00:02:51.960 --> 00:02:51.970 
I also update the copy in l2 all right I

00:02:51.970 --> 00:02:53.990 
I also update the copy in l2 all right I
also<00:02:52.269> go<00:02:52.540> ahead<00:02:52.599> and<00:02:52.810> update<00:02:52.900> the<00:02:53.140> copy<00:02:53.290> in<00:02:53.500> l3

00:02:53.990 --> 00:02:54.000 
also go ahead and update the copy in l3

00:02:54.000 --> 00:02:56.490 
also go ahead and update the copy in l3
okay<00:02:55.000> so<00:02:55.060> this<00:02:55.209> would<00:02:55.359> be<00:02:55.540> note<00:02:55.720> this<00:02:55.900> is<00:02:56.349> known

00:02:56.490 --> 00:02:56.500 
okay so this would be note this is known

00:02:56.500 --> 00:02:57.900 
okay so this would be note this is known
as<00:02:56.650> a<00:02:56.680> write<00:02:56.859> through<00:02:56.889> policy<00:02:57.130> where<00:02:57.579> every

00:02:57.900 --> 00:02:57.910 
as a write through policy where every

00:02:57.910 --> 00:02:59.520 
as a write through policy where every
write<00:02:58.150> basically<00:02:58.690> you<00:02:58.959> know<00:02:59.049> propagates

00:02:59.520 --> 00:02:59.530 
write basically you know propagates

00:02:59.530 --> 00:03:00.990 
write basically you know propagates
through<00:02:59.799> the<00:02:59.829> different<00:03:00.280> levels<00:03:00.639> of<00:03:00.849> the

00:03:00.990 --> 00:03:01.000 
through the different levels of the

00:03:01.000 --> 00:03:03.539 
through the different levels of the
hierarchy<00:03:01.180> and<00:03:01.720> this<00:03:02.530> ensures<00:03:02.980> that<00:03:03.010> you<00:03:03.459> know

00:03:03.539 --> 00:03:03.549 
hierarchy and this ensures that you know

00:03:03.549 --> 00:03:06.479 
hierarchy and this ensures that you know
all<00:03:03.670> of<00:03:03.700> these<00:03:03.970> copies<00:03:04.630> of<00:03:04.780> a<00:03:05.530> are<00:03:05.919> kept

00:03:06.479 --> 00:03:06.489 
all of these copies of a are kept

00:03:06.489 --> 00:03:08.370 
all of these copies of a are kept
consistent<00:03:07.120> okay<00:03:07.720> so<00:03:07.780> later<00:03:08.019> we'll<00:03:08.230> talk

00:03:08.370 --> 00:03:08.380 
consistent okay so later we'll talk

00:03:08.380 --> 00:03:10.379 
consistent okay so later we'll talk
about<00:03:08.650> cache<00:03:08.859> governance<00:03:09.340> and<00:03:09.519> so<00:03:10.180> write

00:03:10.379 --> 00:03:10.389 
about cache governance and so write

00:03:10.389 --> 00:03:12.330 
about cache governance and so write
through<00:03:10.599> policy<00:03:10.660> certainly<00:03:11.200> simplifies<00:03:11.950> your

00:03:12.330 --> 00:03:12.340 
through policy certainly simplifies your

00:03:12.340 --> 00:03:14.159 
through policy certainly simplifies your
Korins<00:03:12.940> policy<00:03:13.359> your<00:03:13.630> your<00:03:13.810> currents

00:03:14.159 --> 00:03:14.169 
Korins policy your your currents

00:03:14.169 --> 00:03:18.360 
Korins policy your your currents
mechanism<00:03:15.209> okay<00:03:16.209> but<00:03:16.450> when<00:03:16.780> you<00:03:17.099> do<00:03:18.099> a<00:03:18.130> write

00:03:18.360 --> 00:03:18.370 
mechanism okay but when you do a write

00:03:18.370 --> 00:03:19.740 
mechanism okay but when you do a write
through<00:03:18.549> policy<00:03:18.579> like<00:03:19.000> this<00:03:19.030> it<00:03:19.299> increases

00:03:19.740 --> 00:03:19.750 
through policy like this it increases

00:03:19.750 --> 00:03:21.120 
through policy like this it increases
the<00:03:19.840> level<00:03:20.079> of<00:03:20.139> traffic<00:03:20.410> between<00:03:20.739> all<00:03:21.040> of

00:03:21.120 --> 00:03:21.130 
the level of traffic between all of

00:03:21.130 --> 00:03:23.400 
the level of traffic between all of
these<00:03:21.310> many<00:03:21.730> different<00:03:22.060> levels<00:03:22.200> okay<00:03:23.200> so<00:03:23.260> to

00:03:23.400 --> 00:03:23.410 
these many different levels okay so to

00:03:23.410 --> 00:03:25.020 
these many different levels okay so to
reduce<00:03:23.590> the<00:03:23.739> traffic<00:03:24.190> you<00:03:24.310> could<00:03:24.459> use<00:03:24.669> what<00:03:24.910> is

00:03:25.020 --> 00:03:25.030 
reduce the traffic you could use what is

00:03:25.030 --> 00:03:27.479 
reduce the traffic you could use what is
called<00:03:25.090> a<00:03:25.389> write<00:03:25.660> back<00:03:25.900> policy<00:03:26.250> which<00:03:27.250> says

00:03:27.479 --> 00:03:27.489 
called a write back policy which says

00:03:27.489 --> 00:03:29.759 
called a write back policy which says
that<00:03:27.519> when<00:03:27.790> I<00:03:27.849> do<00:03:27.970> a<00:03:28.060> write<00:03:28.329> into<00:03:28.750> this<00:03:28.840> l1<00:03:29.079> copy

00:03:29.759 --> 00:03:29.769 
that when I do a write into this l1 copy

00:03:29.769 --> 00:03:32.849 
that when I do a write into this l1 copy
I<00:03:29.970> don't<00:03:30.970> update<00:03:31.269> my<00:03:31.630> l2<00:03:31.989> copy<00:03:32.200> so<00:03:32.470> those<00:03:32.650> two

00:03:32.849 --> 00:03:32.859 
I don't update my l2 copy so those two

00:03:32.859 --> 00:03:34.860 
I don't update my l2 copy so those two
copies<00:03:33.579> are<00:03:33.700> going<00:03:33.849> to<00:03:33.910> differ<00:03:34.120> in<00:03:34.450> the<00:03:34.540> value

00:03:34.860 --> 00:03:34.870 
copies are going to differ in the value

00:03:34.870 --> 00:03:37.800 
copies are going to differ in the value
of<00:03:34.930> a<00:03:35.609> okay<00:03:36.609> and<00:03:36.639> much<00:03:36.910> later<00:03:37.150> when<00:03:37.450> a<00:03:37.599> gets

00:03:37.800 --> 00:03:37.810 
of a okay and much later when a gets

00:03:37.810 --> 00:03:40.199 
of a okay and much later when a gets
evicted<00:03:38.109> out<00:03:38.470> of<00:03:38.560> cache<00:03:38.889> that's<00:03:39.700> when<00:03:39.970> you<00:03:40.060> go

00:03:40.199 --> 00:03:40.209 
evicted out of cache that's when you go

00:03:40.209 --> 00:03:42.330 
evicted out of cache that's when you go
in<00:03:40.359> and<00:03:40.510> update<00:03:40.660> the<00:03:40.930> copy<00:03:41.109> in<00:03:41.380> l2<00:03:41.709> right<00:03:42.220> so

00:03:42.330 --> 00:03:42.340 
in and update the copy in l2 right so

00:03:42.340 --> 00:03:44.309 
in and update the copy in l2 right so
this<00:03:42.430> is<00:03:42.579> known<00:03:42.700> as<00:03:42.790> a<00:03:42.849> write<00:03:43.030> back<00:03:43.209> policy<00:03:43.319> and

00:03:44.309 --> 00:03:44.319 
this is known as a write back policy and

00:03:44.319 --> 00:03:46.740 
this is known as a write back policy and
it<00:03:44.440> reduces<00:03:44.859> traffic<00:03:45.040> because<00:03:45.579> it<00:03:45.970> it

00:03:46.740 --> 00:03:46.750 
it reduces traffic because it it

00:03:46.750 --> 00:03:48.750 
it reduces traffic because it it
advocates<00:03:47.079> multiple<00:03:47.859> writes<00:03:48.129> into<00:03:48.489> the<00:03:48.579> same

00:03:48.750 --> 00:03:48.760 
advocates multiple writes into the same

00:03:48.760 --> 00:03:51.390 
advocates multiple writes into the same
block<00:03:49.079> before<00:03:50.079> finally<00:03:50.620> you<00:03:50.769> know<00:03:50.859> making<00:03:51.040> one

00:03:51.390 --> 00:03:51.400 
block before finally you know making one

00:03:51.400 --> 00:03:53.360 
block before finally you know making one
final<00:03:51.609> right<00:03:51.940> into<00:03:52.359> the<00:03:52.450> l2<00:03:52.750> cache

00:03:53.360 --> 00:03:53.370 
final right into the l2 cache

00:03:53.370 --> 00:03:55.729 
final right into the l2 cache
okay<00:03:54.120> but<00:03:54.360> you<00:03:54.629> know<00:03:54.720> this<00:03:54.870> also<00:03:55.080> complicates

00:03:55.729 --> 00:03:55.739 
okay but you know this also complicates

00:03:55.739 --> 00:03:58.070 
okay but you know this also complicates
your<00:03:56.040> cash<00:03:56.250> Goering's<00:03:56.550> policy<00:03:57.150> or<00:03:57.750> cash

00:03:58.070 --> 00:03:58.080 
your cash Goering's policy or cash

00:03:58.080 --> 00:03:59.660 
your cash Goering's policy or cash
currents<00:03:58.410> protocol<00:03:58.830> because<00:03:59.220> now<00:03:59.459> you<00:03:59.519> have

00:03:59.660 --> 00:03:59.670 
currents protocol because now you have

00:03:59.670 --> 00:04:01.339 
currents protocol because now you have
to<00:03:59.910> keep<00:04:00.090> track<00:04:00.390> of<00:04:00.690> these<00:04:00.930> multiple

00:04:01.339 --> 00:04:01.349 
to keep track of these multiple

00:04:01.349 --> 00:04:05.240 
to keep track of these multiple
different<00:04:01.680> copies<00:04:02.010> of<00:04:02.160> a<00:04:03.260> then<00:04:04.260> a<00:04:04.500> last<00:04:04.920> couple

00:04:05.240 --> 00:04:05.250 
different copies of a then a last couple

00:04:05.250 --> 00:04:07.460 
different copies of a then a last couple
of<00:04:05.340> points<00:04:05.670> is<00:04:05.879> that<00:04:06.269> you<00:04:06.540> know<00:04:06.660> these<00:04:07.080> caches

00:04:07.460 --> 00:04:07.470 
of points is that you know these caches

00:04:07.470 --> 00:04:09.080 
of points is that you know these caches
are<00:04:07.860> dealing<00:04:08.129> with<00:04:08.280> both<00:04:08.430> reads<00:04:08.760> and<00:04:08.940> writes

00:04:09.080 --> 00:04:09.090 
are dealing with both reads and writes

00:04:09.090 --> 00:04:11.270 
are dealing with both reads and writes
and<00:04:09.900> usually<00:04:10.349> reads<00:04:10.560> get<00:04:10.799> higher<00:04:10.980> priority

00:04:11.270 --> 00:04:11.280 
and usually reads get higher priority

00:04:11.280 --> 00:04:14.690 
and usually reads get higher priority
because<00:04:11.760> you<00:04:12.420> know<00:04:12.540> the<00:04:13.260> read<00:04:13.470> is<00:04:14.250> something

00:04:14.690 --> 00:04:14.700 
because you know the read is something

00:04:14.700 --> 00:04:18.469 
because you know the read is something
that<00:04:15.049> the<00:04:16.049> processor<00:04:16.470> needs<00:04:16.739> to<00:04:17.729> move<00:04:18.000> on<00:04:18.060> with

00:04:18.469 --> 00:04:18.479 
that the processor needs to move on with

00:04:18.479 --> 00:04:21.280 
that the processor needs to move on with
subsequent<00:04:19.380> computations<00:04:19.579> whereas<00:04:20.579> a<00:04:20.790> write

00:04:21.280 --> 00:04:21.290 
subsequent computations whereas a write

00:04:21.290 --> 00:04:23.480 
subsequent computations whereas a write
you<00:04:22.290> know<00:04:22.380> there's<00:04:22.590> really<00:04:22.740> no<00:04:22.949> instruction

00:04:23.480 --> 00:04:23.490 
you know there's really no instruction

00:04:23.490 --> 00:04:24.890 
you know there's really no instruction
waiting<00:04:23.820> for<00:04:23.970> the<00:04:24.030> result<00:04:24.330> of<00:04:24.449> a<00:04:24.510> write

00:04:24.890 --> 00:04:24.900 
waiting for the result of a write

00:04:24.900 --> 00:04:27.170 
waiting for the result of a write
okay<00:04:25.620> so<00:04:25.680> reads<00:04:26.040> always<00:04:26.340> get<00:04:26.520> higher<00:04:26.669> priority

00:04:27.170 --> 00:04:27.180 
okay so reads always get higher priority

00:04:27.180 --> 00:04:29.510 
okay so reads always get higher priority
and<00:04:27.300> the<00:04:27.990> write<00:04:28.169> usually<00:04:28.560> get<00:04:28.680> placed<00:04:28.979> writes

00:04:29.510 --> 00:04:29.520 
and the write usually get placed writes

00:04:29.520 --> 00:04:31.550 
and the write usually get placed writes
used<00:04:29.729> to<00:04:29.820> get<00:04:29.940> placed<00:04:30.180> in<00:04:30.300> a<00:04:30.360> write<00:04:30.510> buffer<00:04:30.870> so

00:04:31.550 --> 00:04:31.560 
used to get placed in a write buffer so

00:04:31.560 --> 00:04:32.930 
used to get placed in a write buffer so
that<00:04:31.590> the<00:04:31.860> reads<00:04:32.040> can<00:04:32.250> move<00:04:32.430> ahead<00:04:32.550> of<00:04:32.790> them

00:04:32.930 --> 00:04:32.940 
that the reads can move ahead of them

00:04:32.940 --> 00:04:34.940 
that the reads can move ahead of them
okay<00:04:33.780> but<00:04:33.960> once<00:04:34.139> this<00:04:34.320> write<00:04:34.470> buffer<00:04:34.680> gets

00:04:34.940 --> 00:04:34.950 
okay but once this write buffer gets

00:04:34.950 --> 00:04:36.440 
okay but once this write buffer gets
full<00:04:35.130> you<00:04:35.430> know<00:04:35.550> those<00:04:35.729> have<00:04:35.940> to<00:04:36.090> be<00:04:36.180> drained

00:04:36.440 --> 00:04:36.450 
full you know those have to be drained

00:04:36.450 --> 00:04:38.810 
full you know those have to be drained
at<00:04:36.600> some<00:04:36.750> point<00:04:36.990> and<00:04:37.200> so<00:04:38.040> at<00:04:38.130> that<00:04:38.280> point<00:04:38.550> the

00:04:38.810 --> 00:04:38.820 
at some point and so at that point the

00:04:38.820 --> 00:04:40.310 
at some point and so at that point the
writes<00:04:39.000> will<00:04:39.240> get<00:04:39.419> higher<00:04:39.630> priority<00:04:39.930> than<00:04:40.139> the

00:04:40.310 --> 00:04:40.320 
writes will get higher priority than the

00:04:40.320 --> 00:04:44.810 
writes will get higher priority than the
reads<00:04:40.710> I<00:04:41.990> should<00:04:42.990> also<00:04:43.169> mention<00:04:43.590> that<00:04:43.860> you

00:04:44.810 --> 00:04:44.820 
reads I should also mention that you

00:04:44.820 --> 00:04:47.570 
reads I should also mention that you
know<00:04:44.940> if<00:04:45.450> you<00:04:45.570> look<00:04:45.720> at<00:04:45.840> our<00:04:46.139> pipeline<00:04:47.010> we<00:04:47.340> said

00:04:47.570 --> 00:04:47.580 
know if you look at our pipeline we said

00:04:47.580 --> 00:04:51.740 
know if you look at our pipeline we said
that<00:04:48.350> given<00:04:49.350> an<00:04:49.440> address<00:04:50.330> I'm<00:04:51.330> going<00:04:51.570> to<00:04:51.630> look

00:04:51.740 --> 00:04:51.750 
that given an address I'm going to look

00:04:51.750 --> 00:04:53.360 
that given an address I'm going to look
up<00:04:51.870> my<00:04:51.990> cash<00:04:52.229> and<00:04:52.470> my<00:04:52.590> cash<00:04:52.800> has<00:04:53.010> two<00:04:53.160> elements

00:04:53.360 --> 00:04:53.370 
up my cash and my cash has two elements

00:04:53.370 --> 00:04:56.390 
up my cash and my cash has two elements
it<00:04:53.760> has<00:04:53.789> the<00:04:54.270> data<00:04:54.419> array<00:04:54.780> and<00:04:55.169> it<00:04:55.889> has<00:04:56.070> the<00:04:56.220> tag

00:04:56.390 --> 00:04:56.400 
it has the data array and it has the tag

00:04:56.400 --> 00:04:58.700 
it has the data array and it has the tag
array<00:04:56.610> and<00:04:56.850> so<00:04:57.539> in<00:04:57.870> parallel<00:04:58.110> I'm<00:04:58.470> going<00:04:58.650> to

00:04:58.700 --> 00:04:58.710 
array and so in parallel I'm going to

00:04:58.710 --> 00:05:00.980 
array and so in parallel I'm going to
look<00:04:58.770> up<00:04:58.860> my<00:04:59.010> tags<00:04:59.250> and<00:04:59.550> my<00:04:59.700> data<00:04:59.990> okay

00:05:00.980 --> 00:05:00.990 
look up my tags and my data okay

00:05:00.990 --> 00:05:02.480 
look up my tags and my data okay
hopefully<00:05:01.229> one<00:05:01.590> of<00:05:01.680> the<00:05:01.800> tags<00:05:02.010> is<00:05:02.190> going<00:05:02.400> to

00:05:02.480 --> 00:05:02.490 
hopefully one of the tags is going to

00:05:02.490 --> 00:05:04.790 
hopefully one of the tags is going to
yield<00:05:02.700> a<00:05:02.940> cache<00:05:03.180> hit<00:05:03.210> and<00:05:03.690> accordingly<00:05:04.590> you

00:05:04.790 --> 00:05:04.800 
yield a cache hit and accordingly you

00:05:04.800 --> 00:05:06.409 
yield a cache hit and accordingly you
know<00:05:04.919> that<00:05:05.100> data<00:05:05.340> element<00:05:05.550> gets<00:05:05.940> sent<00:05:06.150> back<00:05:06.180> to

00:05:06.409 --> 00:05:06.419 
know that data element gets sent back to

00:05:06.419 --> 00:05:08.480 
know that data element gets sent back to
the<00:05:06.479> CPU<00:05:06.660> okay<00:05:07.470> so<00:05:07.590> the<00:05:07.770> way<00:05:07.860> I<00:05:07.889> described<00:05:08.340> it

00:05:08.480 --> 00:05:08.490 
the CPU okay so the way I described it

00:05:08.490 --> 00:05:10.790 
the CPU okay so the way I described it
the<00:05:09.120> tag<00:05:09.360> access<00:05:09.780> and<00:05:10.020> the<00:05:10.139> data<00:05:10.320> access

00:05:10.790 --> 00:05:10.800 
the tag access and the data access

00:05:10.800 --> 00:05:13.760 
the tag access and the data access
happens<00:05:11.550> in<00:05:11.789> parallel<00:05:12.289> okay<00:05:13.289> and<00:05:13.500> you<00:05:13.680> know

00:05:13.760 --> 00:05:13.770 
happens in parallel okay and you know

00:05:13.770 --> 00:05:15.710 
happens in parallel okay and you know
this<00:05:13.979> will<00:05:14.460> improve<00:05:14.880> your<00:05:15.000> access<00:05:15.300> time<00:05:15.479> and

00:05:15.710 --> 00:05:15.720 
this will improve your access time and

00:05:15.720 --> 00:05:17.180 
this will improve your access time and
this<00:05:15.780> is<00:05:15.900> what<00:05:16.080> is<00:05:16.200> usually<00:05:16.470> done<00:05:16.500> for<00:05:16.800> the<00:05:16.889> l1

00:05:17.180 --> 00:05:17.190 
this is what is usually done for the l1

00:05:17.190 --> 00:05:19.190 
this is what is usually done for the l1
because<00:05:17.550> for<00:05:18.270> the<00:05:18.330> l1<00:05:18.630> you<00:05:18.780> want<00:05:18.960> to<00:05:19.050> make<00:05:19.169> sure

00:05:19.190 --> 00:05:19.200 
because for the l1 you want to make sure

00:05:19.200 --> 00:05:21.140 
because for the l1 you want to make sure
that<00:05:19.530> the<00:05:19.830> data<00:05:19.919> lookup<00:05:20.340> happens<00:05:20.729> say<00:05:20.940> within

00:05:21.140 --> 00:05:21.150 
that the data lookup happens say within

00:05:21.150 --> 00:05:23.710 
that the data lookup happens say within
a<00:05:21.270> cycle<00:05:21.680> when<00:05:22.680> you<00:05:22.770> move<00:05:22.919> to<00:05:23.039> the<00:05:23.160> l2<00:05:23.370> and<00:05:23.490> l3

00:05:23.710 --> 00:05:23.720 
a cycle when you move to the l2 and l3

00:05:23.720 --> 00:05:26.629 
a cycle when you move to the l2 and l3
you<00:05:24.720> know<00:05:24.810> these<00:05:24.990> caches<00:05:25.320> are<00:05:25.560> larger<00:05:25.979> they

00:05:26.629 --> 00:05:26.639 
you know these caches are larger they

00:05:26.639 --> 00:05:28.250 
you know these caches are larger they
are<00:05:26.669> they're<00:05:27.030> also<00:05:27.180> you<00:05:27.389> know<00:05:27.510> much<00:05:27.690> more<00:05:27.990> set

00:05:28.250 --> 00:05:28.260 
are they're also you know much more set

00:05:28.260 --> 00:05:30.650 
are they're also you know much more set
associative<00:05:28.710> and<00:05:29.099> so<00:05:29.970> if<00:05:30.150> you<00:05:30.270> were<00:05:30.389> to<00:05:30.539> do

00:05:30.650 --> 00:05:30.660 
associative and so if you were to do

00:05:30.660 --> 00:05:33.020 
associative and so if you were to do
parallel<00:05:30.900> tag<00:05:31.289> and<00:05:31.440> data<00:05:31.560> access<00:05:31.880> you<00:05:32.880> would

00:05:33.020 --> 00:05:33.030 
parallel tag and data access you would

00:05:33.030 --> 00:05:35.029 
parallel tag and data access you would
end<00:05:33.180> up<00:05:33.300> reading<00:05:33.510> a<00:05:33.660> whole<00:05:33.810> bunch<00:05:34.080> of<00:05:34.260> ways

00:05:35.029 --> 00:05:35.039 
end up reading a whole bunch of ways

00:05:35.039 --> 00:05:37.070 
end up reading a whole bunch of ways
from<00:05:35.430> the<00:05:35.550> data<00:05:35.729> array<00:05:36.030> and<00:05:36.240> then<00:05:36.930> ultimately

00:05:37.070 --> 00:05:37.080 
from the data array and then ultimately

00:05:37.080 --> 00:05:38.870 
from the data array and then ultimately
only<00:05:37.710> one<00:05:37.889> of<00:05:38.010> them<00:05:38.190> is<00:05:38.370> going<00:05:38.550> to<00:05:38.639> be<00:05:38.700> useful

00:05:38.870 --> 00:05:38.880 
only one of them is going to be useful

00:05:38.880 --> 00:05:41.270 
only one of them is going to be useful
right<00:05:39.210> so<00:05:39.389> that<00:05:39.539> leads<00:05:39.810> to<00:05:39.930> a<00:05:40.050> huge<00:05:40.349> loss<00:05:41.010> in

00:05:41.270 --> 00:05:41.280 
right so that leads to a huge loss in

00:05:41.280 --> 00:05:43.640 
right so that leads to a huge loss in
energy<00:05:41.430> consumption<00:05:42.020> so<00:05:43.020> instead<00:05:43.349> what<00:05:43.500> is

00:05:43.640 --> 00:05:43.650 
energy consumption so instead what is

00:05:43.650 --> 00:05:45.260 
energy consumption so instead what is
done<00:05:43.830> is<00:05:44.010> you<00:05:44.039> first<00:05:44.340> look<00:05:44.580> up<00:05:44.700> the<00:05:44.820> tags<00:05:45.030> and

00:05:45.260 --> 00:05:45.270 
done is you first look up the tags and

00:05:45.270 --> 00:05:47.690 
done is you first look up the tags and
you<00:05:46.050> determine<00:05:46.380> that<00:05:46.590> say<00:05:46.950> you<00:05:47.400> know<00:05:47.520> way

00:05:47.690 --> 00:05:47.700 
you determine that say you know way

00:05:47.700 --> 00:05:50.300 
you determine that say you know way
three<00:05:48.000> has<00:05:48.210> my<00:05:48.419> data<00:05:48.660> so<00:05:49.590> at<00:05:49.710> that<00:05:49.860> point<00:05:50.130> you

00:05:50.300 --> 00:05:50.310 
three has my data so at that point you

00:05:50.310 --> 00:05:52.189 
three has my data so at that point you
then<00:05:50.520> look<00:05:50.700> up<00:05:50.820> your<00:05:51.000> data<00:05:51.180> array

00:05:52.189 --> 00:05:52.199 
then look up your data array

00:05:52.199 --> 00:05:54.320 
then look up your data array
and<00:05:52.680> you<00:05:52.889> only<00:05:53.039> read<00:05:53.340> out<00:05:53.490> way<00:05:53.849> three<00:05:54.090> and<00:05:54.240> then

00:05:54.320 --> 00:05:54.330 
and you only read out way three and then

00:05:54.330 --> 00:05:56.089 
and you only read out way three and then
send<00:05:54.539> it<00:05:54.599> back<00:05:54.659> to<00:05:54.900> the<00:05:54.990> CPU<00:05:55.139> so<00:05:55.620> this<00:05:55.800> reduces

00:05:56.089 --> 00:05:56.099 
send it back to the CPU so this reduces

00:05:56.099 --> 00:05:58.339 
send it back to the CPU so this reduces
your<00:05:56.370> energy<00:05:56.939> consumption<00:05:57.270> when<00:05:58.229> it

00:05:58.339 --> 00:05:58.349 
your energy consumption when it

00:05:58.349 --> 00:05:59.899 
your energy consumption when it
increases<00:05:58.800> your<00:05:58.919> access<00:05:59.310> time<00:05:59.520> because<00:05:59.819> you

00:05:59.899 --> 00:05:59.909 
increases your access time because you

00:05:59.909 --> 00:06:01.700 
increases your access time because you
are<00:05:59.999> sequentially<00:06:00.629> looking<00:06:00.930> up<00:06:01.050> the<00:06:01.199> tags<00:06:01.409> and

00:06:01.700 --> 00:06:01.710 
are sequentially looking up the tags and

00:06:01.710 --> 00:06:03.890 
are sequentially looking up the tags and
then<00:06:01.889> the<00:06:02.009> data<00:06:02.189> elements<00:06:02.639> okay<00:06:03.539> but<00:06:03.719> you<00:06:03.810> know

00:06:03.890 --> 00:06:03.900 
then the data elements okay but you know

00:06:03.900 --> 00:06:06.439 
then the data elements okay but you know
once<00:06:04.050> you<00:06:04.169> get<00:06:04.259> to<00:06:04.379> the<00:06:04.469> l2<00:06:04.800> or<00:06:04.830> l3<00:06:05.180> you<00:06:06.180> are<00:06:06.270> not

00:06:06.439 --> 00:06:06.449 
once you get to the l2 or l3 you are not

00:06:06.449 --> 00:06:08.239 
once you get to the l2 or l3 you are not
as<00:06:06.689> concerned<00:06:07.139> about<00:06:07.259> access<00:06:07.650> time<00:06:08.009> you're

00:06:08.239 --> 00:06:08.249 
as concerned about access time you're

00:06:08.249 --> 00:06:09.649 
as concerned about access time you're
more<00:06:08.400> concerned<00:06:08.849> about<00:06:08.909> you<00:06:09.300> know<00:06:09.360> making

00:06:09.649 --> 00:06:09.659 
more concerned about you know making

00:06:09.659 --> 00:06:11.570 
more concerned about you know making
sure<00:06:09.810> that<00:06:10.050> the<00:06:10.319> hit<00:06:10.499> rate<00:06:10.680> is<00:06:10.710> high<00:06:11.009> and

00:06:11.570 --> 00:06:11.580 
sure that the hit rate is high and

00:06:11.580 --> 00:06:13.459 
sure that the hit rate is high and
you're<00:06:12.479> also<00:06:12.629> concerned<00:06:12.960> about<00:06:13.080> reducing

00:06:13.459 --> 00:06:13.469 
you're also concerned about reducing

00:06:13.469 --> 00:06:14.959 
you're also concerned about reducing
energy<00:06:13.889> consumption<00:06:14.340> because<00:06:14.819> these

00:06:14.959 --> 00:06:14.969 
energy consumption because these

00:06:14.969 --> 00:06:16.939 
energy consumption because these
structures<00:06:15.389> are<00:06:15.539> so<00:06:15.689> large<00:06:15.900> and<00:06:16.199> so<00:06:16.770> that's

00:06:16.939 --> 00:06:16.949 
structures are so large and so that's

00:06:16.949 --> 00:06:18.499 
structures are so large and so that's
why<00:06:17.129> you<00:06:17.189> know<00:06:17.370> this<00:06:17.490> the<00:06:17.759> serial<00:06:18.060> tag<00:06:18.270> data

00:06:18.499 --> 00:06:18.509 
why you know this the serial tag data

00:06:18.509 --> 00:06:22.070 
why you know this the serial tag data
policy<00:06:19.050> is<00:06:19.710> employed<00:06:20.189> for<00:06:20.279> l2<00:06:20.939> l3<00:06:21.150> and<00:06:21.389> beyond

00:06:22.070 --> 00:06:22.080 
policy is employed for l2 l3 and beyond

00:06:22.080 --> 00:06:24.709 
policy is employed for l2 l3 and beyond
ok<00:06:22.949> so<00:06:23.009> in<00:06:23.340> the<00:06:23.580> next<00:06:23.729> video<00:06:24.150> I'll<00:06:24.509> start

00:06:24.709 --> 00:06:24.719 
ok so in the next video I'll start

00:06:24.719 --> 00:06:28.639 
ok so in the next video I'll start
discussing<00:06:25.349> various<00:06:25.770> cache<00:06:26.039> innovations

