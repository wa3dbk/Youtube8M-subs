WEBVTT
Kind: captions
Language: en

00:00:01.580 --> 00:00:04.670 

hello<00:00:02.580> this<00:00:02.879> is<00:00:03.120> a<00:00:03.149> special<00:00:03.929> guest<00:00:04.110> Jake<00:00:04.440> with

00:00:04.670 --> 00:00:04.680 
hello this is a special guest Jake with

00:00:04.680 --> 00:00:06.920 
hello this is a special guest Jake with
Mack<00:00:04.950> heads<00:00:05.220> 101<00:00:05.730> it's<00:00:06.390> going<00:00:06.600> to<00:00:06.660> be<00:00:06.750> another

00:00:06.920 --> 00:00:06.930 
Mack heads 101 it's going to be another

00:00:06.930 --> 00:00:10.400 
Mack heads 101 it's going to be another
Java<00:00:07.319> tutorial<00:00:07.950> and<00:00:08.780> right<00:00:09.780> now<00:00:09.960> I'm<00:00:10.230> just

00:00:10.400 --> 00:00:10.410 
Java tutorial and right now I'm just

00:00:10.410 --> 00:00:11.959 
Java tutorial and right now I'm just
going<00:00:10.559> to<00:00:10.650> be<00:00:10.769> building<00:00:11.099> a<00:00:11.190> program<00:00:11.460> with<00:00:11.849> you

00:00:11.959 --> 00:00:11.969 
going to be building a program with you

00:00:11.969 --> 00:00:13.730 
going to be building a program with you
guys<00:00:12.179> there's<00:00:12.870> not<00:00:13.080> really<00:00:13.259> going<00:00:13.440> to<00:00:13.500> be<00:00:13.559> that

00:00:13.730 --> 00:00:13.740 
guys there's not really going to be that

00:00:13.740 --> 00:00:15.740 
guys there's not really going to be that
much<00:00:13.920> new<00:00:14.190> stuff<00:00:14.219> maybe<00:00:14.940> one<00:00:15.269> or<00:00:15.389> two<00:00:15.420> new

00:00:15.740 --> 00:00:15.750 
much new stuff maybe one or two new

00:00:15.750 --> 00:00:17.359 
much new stuff maybe one or two new
things<00:00:16.080> but<00:00:16.320> they<00:00:16.440> won't<00:00:16.619> really<00:00:16.800> require

00:00:17.359 --> 00:00:17.369 
things but they won't really require

00:00:17.369 --> 00:00:20.210 
things but they won't really require
that<00:00:17.580> much<00:00:17.730> explanation<00:00:18.539> but<00:00:19.410> the<00:00:19.710> main<00:00:19.920> point

00:00:20.210 --> 00:00:20.220 
that much explanation but the main point

00:00:20.220 --> 00:00:25.750 
that much explanation but the main point
of<00:00:20.310> this<00:00:20.460> is<00:00:20.699> just<00:00:20.730> to<00:00:22.220> sort<00:00:23.220> of<00:00:23.400> sit<00:00:23.880> back<00:00:23.910> and

00:00:25.750 --> 00:00:25.760 
of this is just to sort of sit back and

00:00:25.760 --> 00:00:28.790 
of this is just to sort of sit back and
build<00:00:26.760> a<00:00:26.880> program<00:00:27.119> with<00:00:27.510> you<00:00:27.660> so<00:00:27.960> what<00:00:28.529> this<00:00:28.650> is

00:00:28.790 --> 00:00:28.800 
build a program with you so what this is

00:00:28.800 --> 00:00:30.259 
build a program with you so what this is
a<00:00:28.830> good<00:00:28.980> program<00:00:29.340> is<00:00:29.640> going<00:00:29.760> to<00:00:29.849> do<00:00:30.000> is<00:00:30.150> you

00:00:30.259 --> 00:00:30.269 
a good program is going to do is you

00:00:30.269 --> 00:00:32.209 
a good program is going to do is you
enter<00:00:30.449> a<00:00:30.660> number<00:00:30.929> and<00:00:31.320> it<00:00:31.769> tells<00:00:31.949> you<00:00:32.099> whether

00:00:32.209 --> 00:00:32.219 
enter a number and it tells you whether

00:00:32.219 --> 00:00:34.130 
enter a number and it tells you whether
or<00:00:32.340> not<00:00:32.399> it's<00:00:32.489> prime<00:00:33.059> and<00:00:33.450> in<00:00:33.809> case<00:00:33.960> you<00:00:34.050> know

00:00:34.130 --> 00:00:34.140 
or not it's prime and in case you know

00:00:34.140 --> 00:00:36.500 
or not it's prime and in case you know
what<00:00:34.290> prime<00:00:34.620> means<00:00:34.950> it<00:00:35.219> means<00:00:35.550> it's<00:00:35.880> only

00:00:36.500 --> 00:00:36.510 
what prime means it means it's only

00:00:36.510 --> 00:00:40.160 
what prime means it means it's only
evenly<00:00:37.410> divisible<00:00:37.680> by<00:00:38.010> 1<00:00:38.460> and<00:00:38.489> itself<00:00:39.170> which

00:00:40.160 --> 00:00:40.170 
evenly divisible by 1 and itself which

00:00:40.170 --> 00:00:43.990 
evenly divisible by 1 and itself which
means<00:00:40.469> it<00:00:40.770> is<00:00:41.160> not<00:00:41.670> evenly<00:00:42.149> divisible<00:00:42.450> by<00:00:42.719> any

00:00:43.990 --> 00:00:44.000 
means it is not evenly divisible by any

00:00:44.000 --> 00:00:47.150 
means it is not evenly divisible by any
other<00:00:45.000> number<00:00:45.270> of<00:00:45.480> course<00:00:46.469> besides<00:00:46.620> 1<00:00:47.070> in

00:00:47.150 --> 00:00:47.160 
other number of course besides 1 in

00:00:47.160 --> 00:00:50.660 
other number of course besides 1 in
itself<00:00:47.480> so<00:00:48.920> the<00:00:49.920> first<00:00:50.190> thing<00:00:50.370> we're<00:00:50.520> going<00:00:50.610> to

00:00:50.660 --> 00:00:50.670 
itself so the first thing we're going to

00:00:50.670 --> 00:00:53.720 
itself so the first thing we're going to
do<00:00:50.879> has<00:00:51.750> already<00:00:52.079> got<00:00:52.260> here<00:00:52.649> Java<00:00:53.010> dot<00:00:53.219> util<00:00:53.550> so

00:00:53.720 --> 00:00:53.730 
do has already got here Java dot util so

00:00:53.730 --> 00:00:55.670 
do has already got here Java dot util so
we<00:00:53.820> can<00:00:53.940> use<00:00:54.090> the<00:00:54.210> scanner<00:00:54.570> so<00:00:55.350> we're<00:00:55.500> going<00:00:55.590> to

00:00:55.670 --> 00:00:55.680 
we can use the scanner so we're going to

00:00:55.680 --> 00:00:57.740 
we can use the scanner so we're going to
just<00:00:55.860> get<00:00:56.070> in<00:00:56.309> some<00:00:56.460> input<00:00:56.850> from<00:00:56.879> them<00:00:57.270> equals

00:00:57.740 --> 00:00:57.750 
just get in some input from them equals

00:00:57.750 --> 00:01:02.150 
just get in some input from them equals
and<00:00:59.149> of<00:01:00.149> course<00:01:00.539> I've<00:01:00.840> gone<00:01:01.289> over<00:01:01.350> this<00:01:01.680> before

00:01:02.150 --> 00:01:02.160 
and of course I've gone over this before

00:01:02.160 --> 00:01:03.349 
and of course I've gone over this before
so<00:01:02.430> if<00:01:02.520> you<00:01:02.579> don't<00:01:02.760> know<00:01:02.850> what<00:01:02.940> I'm<00:01:03.030> doing<00:01:03.329> just

00:01:03.349 --> 00:01:03.359 
so if you don't know what I'm doing just

00:01:03.359 --> 00:01:07.910 
so if you don't know what I'm doing just
watch<00:01:03.690> the<00:01:03.930> past<00:01:04.170> tutorials<00:01:06.650> vanish<00:01:07.650> and

00:01:07.910 --> 00:01:07.920 
watch the past tutorials vanish and

00:01:07.920 --> 00:01:11.800 
watch the past tutorials vanish and
equals<00:01:08.369> oh<00:01:09.240> yeah<00:01:09.510> equals<00:01:10.439> new<00:01:10.740> scanner<00:01:10.979> and

00:01:11.800 --> 00:01:11.810 
equals oh yeah equals new scanner and

00:01:11.810 --> 00:01:18.440 
equals oh yeah equals new scanner and
then<00:01:12.810> I'm<00:01:13.140> just<00:01:13.200> going<00:01:13.740> to<00:01:16.640> put<00:01:17.640> out<00:01:17.729> a<00:01:17.759> prompt

00:01:18.440 --> 00:01:18.450 
then I'm just going to put out a prompt

00:01:18.450 --> 00:01:25.310 
then I'm just going to put out a prompt
enter<00:01:19.439> a<00:01:19.740> number<00:01:22.400> all<00:01:23.400> right<00:01:23.520> and<00:01:24.049> then<00:01:25.049> I'm

00:01:25.310 --> 00:01:25.320 
enter a number all right and then I'm

00:01:25.320 --> 00:01:29.630 
enter a number all right and then I'm
going<00:01:25.500> to<00:01:25.530> make<00:01:25.799> an<00:01:26.009> int<00:01:26.310> input<00:01:28.070> equal<00:01:29.070> scan

00:01:29.630 --> 00:01:29.640 
going to make an int input equal scan

00:01:29.640 --> 00:01:35.990 
going to make an int input equal scan
dot<00:01:30.090> next<00:01:31.490> int<00:01:33.770> all<00:01:34.770> right<00:01:34.920> so<00:01:35.250> it's<00:01:35.759> going<00:01:35.909> to

00:01:35.990 --> 00:01:36.000 
dot next int all right so it's going to

00:01:36.000 --> 00:01:37.249 
dot next int all right so it's going to
ask<00:01:36.090> you<00:01:36.180> answer<00:01:36.420> number<00:01:36.720> whatever<00:01:37.170> they

00:01:37.249 --> 00:01:37.259 
ask you answer number whatever they

00:01:37.259 --> 00:01:38.450 
ask you answer number whatever they
enter<00:01:37.590> is<00:01:37.710> going<00:01:37.890> to<00:01:37.950> be<00:01:38.009> stored<00:01:38.220> in<00:01:38.310> that

00:01:38.450 --> 00:01:38.460 
enter is going to be stored in that

00:01:38.460 --> 00:01:47.149 
enter is going to be stored in that
variable<00:01:39.240> input<00:01:39.860> so<00:01:41.119> now<00:01:45.470> we're<00:01:46.470> how<00:01:46.920> we're

00:01:47.149 --> 00:01:47.159 
variable input so now we're how we're

00:01:47.159 --> 00:01:48.440 
variable input so now we're how we're
going<00:01:47.310> to<00:01:47.369> determine<00:01:47.729> whether<00:01:48.060> or<00:01:48.119> not<00:01:48.180> it's

00:01:48.440 --> 00:01:48.450 
going to determine whether or not it's

00:01:48.450 --> 00:01:51.850 
going to determine whether or not it's
prime<00:01:48.930> is<00:01:49.320> we're<00:01:50.250> going<00:01:50.369> to<00:01:50.430> use<00:01:50.820> a<00:01:50.850> loop<00:01:51.240> and

00:01:51.850 --> 00:01:51.860 
prime is we're going to use a loop and

00:01:51.860 --> 00:01:54.590 
prime is we're going to use a loop and
something<00:01:52.860> called<00:01:53.009> the<00:01:53.130> modulus<00:01:53.729> operator<00:01:53.909> so

00:01:54.590 --> 00:01:54.600 
something called the modulus operator so

00:01:54.600 --> 00:01:56.030 
something called the modulus operator so
I'm<00:01:54.659> going<00:01:54.810> to<00:01:54.869> build<00:01:55.079> the<00:01:55.200> whole<00:01:55.229> thing<00:01:55.439> first

00:01:56.030 --> 00:01:56.040 
I'm going to build the whole thing first

00:01:56.040 --> 00:01:58.999 
I'm going to build the whole thing first
and<00:01:56.310> then<00:01:57.030> I'm<00:01:57.180> going<00:01:57.390> to<00:01:57.450> explain<00:01:57.810> on<00:01:58.350> how<00:01:58.799> it

00:01:58.999 --> 00:01:59.009 
and then I'm going to explain on how it

00:01:59.009 --> 00:02:00.380 
and then I'm going to explain on how it
works<00:01:59.159> because<00:01:59.490> I<00:01:59.700> think<00:01:59.759> that's<00:01:59.969> the<00:02:00.119> best

00:02:00.380 --> 00:02:00.390 
works because I think that's the best

00:02:00.390 --> 00:02:04.310 
works because I think that's the best
way<00:02:00.570> to<00:02:00.600> show<00:02:00.930> so<00:02:01.710> for<00:02:02.219> I'll<00:02:02.549> just<00:02:03.390> write<00:02:03.630> int<00:02:03.960> I

00:02:04.310 --> 00:02:04.320 
way to show so for I'll just write int I

00:02:04.320 --> 00:02:06.590 
way to show so for I'll just write int I
equals<00:02:04.740> two<00:02:05.549> and<00:02:05.790> it's<00:02:06.060> important<00:02:06.420> that<00:02:06.450> it

00:02:06.590 --> 00:02:06.600 
equals two and it's important that it

00:02:06.600 --> 00:02:12.290 
equals two and it's important that it
equals<00:02:06.810> to<00:02:06.960> I<00:02:07.500> is<00:02:08.220> less<00:02:08.759> than<00:02:08.819> input<00:02:09.270> I<00:02:11.300> plus

00:02:12.290 --> 00:02:12.300 
equals to I is less than input I plus

00:02:12.300 --> 00:02:13.370 
equals to I is less than input I plus
plus

00:02:13.370 --> 00:02:13.380 
plus

00:02:13.380 --> 00:02:16.550 
plus
and<00:02:14.540> then<00:02:15.540> it's<00:02:15.960> going<00:02:16.110> to<00:02:16.170> have<00:02:16.320> an<00:02:16.410> if

00:02:16.550 --> 00:02:16.560 
and then it's going to have an if

00:02:16.560 --> 00:02:20.060 
and then it's going to have an if
statement<00:02:16.800> in<00:02:17.130> here<00:02:17.430> and<00:02:18.680> so<00:02:19.680> what<00:02:19.860> this<00:02:20.010> does

00:02:20.060 --> 00:02:20.070 
statement in here and so what this does

00:02:20.070 --> 00:02:26.060 
statement in here and so what this does
is<00:02:20.580> um<00:02:21.180> I<00:02:23.420> will<00:02:24.420> at<00:02:24.600> some<00:02:24.660> point<00:02:25.050> equal<00:02:25.860> and

00:02:26.060 --> 00:02:26.070 
is um I will at some point equal and

00:02:26.070 --> 00:02:32.450 
is um I will at some point equal and
every<00:02:26.880> positive<00:02:27.510> number<00:02:28.290> between<00:02:28.700> um<00:02:31.100> two<00:02:32.100> and

00:02:32.450 --> 00:02:32.460 
every positive number between um two and

00:02:32.460 --> 00:02:34.730 
every positive number between um two and
the<00:02:32.550> number<00:02:32.700> right<00:02:33.060> before<00:02:33.510> it<00:02:33.690> so<00:02:34.410> it'll

00:02:34.730 --> 00:02:34.740 
the number right before it so it'll

00:02:34.740 --> 00:02:38.450 
the number right before it so it'll
basically<00:02:35.100> equal<00:02:36.060> everything<00:02:36.630> um<00:02:37.460> but

00:02:38.450 --> 00:02:38.460 
basically equal everything um but

00:02:38.460 --> 00:02:43.070 
basically equal everything um but
besides<00:02:39.060> one<00:02:39.360> in<00:02:39.480> itself<00:02:39.840> and<00:02:41.090> so<00:02:42.090> if<00:02:42.450> let's

00:02:43.070 --> 00:02:43.080 
besides one in itself and so if let's

00:02:43.080 --> 00:02:45.110 
besides one in itself and so if let's
say<00:02:43.140> the<00:02:43.290> number<00:02:43.530> is<00:02:43.560> five<00:02:43.890> it'll<00:02:44.760> be<00:02:44.850> two

00:02:45.110 --> 00:02:45.120 
say the number is five it'll be two

00:02:45.120 --> 00:02:48.680 
say the number is five it'll be two
three<00:02:45.570> four<00:02:46.130> all<00:02:47.130> right<00:02:47.280> let's<00:02:47.550> say<00:02:48.390> you<00:02:48.450> don't

00:02:48.680 --> 00:02:48.690 
three four all right let's say you don't

00:02:48.690 --> 00:02:50.570 
three four all right let's say you don't
at<00:02:48.870> some<00:02:49.140> point<00:02:49.380> before<00:02:49.620> the<00:02:49.890> loop<00:02:50.100> breaks<00:02:50.400> I

00:02:50.570 --> 00:02:50.580 
at some point before the loop breaks I

00:02:50.580 --> 00:02:53.540 
at some point before the loop breaks I
will<00:02:50.700> once<00:02:51.330> B<00:02:51.690> to<00:02:52.440> once<00:02:52.770> be<00:02:52.980> three<00:02:53.220> and<00:02:53.400> once

00:02:53.540 --> 00:02:53.550 
will once B to once be three and once

00:02:53.550 --> 00:02:56.240 
will once B to once be three and once
before<00:02:53.730> so<00:02:54.290> here's<00:02:55.290> the<00:02:55.440> important<00:02:55.860> part<00:02:56.040> on

00:02:56.240 --> 00:02:56.250 
before so here's the important part on

00:02:56.250 --> 00:03:00.710 
before so here's the important part on
the<00:02:56.790> modulus<00:02:57.300> operator<00:02:58.040> so<00:02:59.090> with<00:03:00.090> the<00:03:00.210> modulus

00:03:00.710 --> 00:03:00.720 
the modulus operator so with the modulus

00:03:00.720 --> 00:03:03.140 
the modulus operator so with the modulus
operator<00:03:00.930> does<00:03:01.410> is<00:03:01.650> like<00:03:02.100> adding<00:03:02.370> you<00:03:03.120> know

00:03:03.140 --> 00:03:03.150 
operator does is like adding you know

00:03:03.150 --> 00:03:06.320 
operator does is like adding you know
the<00:03:03.870> plus<00:03:04.110> sign<00:03:04.380> will<00:03:04.560> add<00:03:04.680> two<00:03:05.040> well<00:03:05.940> if<00:03:06.090> you

00:03:06.320 --> 00:03:06.330 
the plus sign will add two well if you

00:03:06.330 --> 00:03:08.990 
the plus sign will add two well if you
do<00:03:06.480> something<00:03:06.930> modulus<00:03:07.530> something<00:03:08.070> what<00:03:08.880> it

00:03:08.990 --> 00:03:09.000 
do something modulus something what it

00:03:09.000 --> 00:03:11.900 
do something modulus something what it
returns<00:03:09.240> is<00:03:09.870> the<00:03:09.960> remainder<00:03:10.950> of<00:03:11.490> them<00:03:11.700> when

00:03:11.900 --> 00:03:11.910 
returns is the remainder of them when

00:03:11.910 --> 00:03:15.650 
returns is the remainder of them when
divided<00:03:12.600> so<00:03:13.500> like<00:03:13.710> let's<00:03:13.950> say<00:03:14.130> you<00:03:14.190> have<00:03:14.660> 17

00:03:15.650 --> 00:03:15.660 
divided so like let's say you have 17

00:03:15.660 --> 00:03:21.170 
divided so like let's say you have 17
modulus<00:03:16.530> two<00:03:16.920> it<00:03:17.420> would<00:03:18.420> equal<00:03:18.630> 1<00:03:19.080> because<00:03:20.180> 17

00:03:21.170 --> 00:03:21.180 
modulus two it would equal 1 because 17

00:03:21.180 --> 00:03:23.360 
modulus two it would equal 1 because 17
divided<00:03:21.690> by<00:03:21.780> two<00:03:21.840> is<00:03:22.230> eight<00:03:22.440> with<00:03:22.890> a<00:03:22.920> remainder

00:03:23.360 --> 00:03:23.370 
divided by two is eight with a remainder

00:03:23.370 --> 00:03:30.650 
divided by two is eight with a remainder
of<00:03:23.640> 1<00:03:24.290> so<00:03:25.290> if<00:03:25.970> input<00:03:28.190> modulus<00:03:29.190> I<00:03:29.400> equals<00:03:30.270> equals

00:03:30.650 --> 00:03:30.660 
of 1 so if input modulus I equals equals

00:03:30.660 --> 00:03:34.790 
of 1 so if input modulus I equals equals
zero<00:03:31.580> we're<00:03:32.580> going<00:03:32.610> to<00:03:32.760> do<00:03:32.970> something<00:03:33.300> and<00:03:33.800> so

00:03:34.790 --> 00:03:34.800 
zero we're going to do something and so

00:03:34.800 --> 00:03:37.820 
zero we're going to do something and so
if<00:03:35.100> anything<00:03:35.910> modulus<00:03:36.480> anything<00:03:37.020> equals<00:03:37.410> zero

00:03:37.820 --> 00:03:37.830 
if anything modulus anything equals zero

00:03:37.830 --> 00:03:39.920 
if anything modulus anything equals zero
there's<00:03:38.490> no<00:03:38.820> remainder<00:03:39.210> which<00:03:39.570> means<00:03:39.780> it's

00:03:39.920 --> 00:03:39.930 
there's no remainder which means it's

00:03:39.930 --> 00:03:43.670 
there's no remainder which means it's
evenly<00:03:40.590> divisible<00:03:41.090> so<00:03:42.090> it's<00:03:42.480> going<00:03:43.050> to<00:03:43.170> try<00:03:43.530> to

00:03:43.670 --> 00:03:43.680 
evenly divisible so it's going to try to

00:03:43.680 --> 00:03:48.520 
evenly divisible so it's going to try to
divide<00:03:44.280> it<00:03:44.580> by<00:03:45.060> anything<00:03:45.450> but<00:03:46.910> everything

00:03:48.520 --> 00:03:48.530 
divide it by anything but everything

00:03:48.530 --> 00:03:51.800 
divide it by anything but everything
besides<00:03:49.530> one<00:03:49.830> in<00:03:49.920> itself<00:03:50.310> and<00:03:50.670> if<00:03:51.330> at<00:03:51.750> any

00:03:51.800 --> 00:03:51.810 
besides one in itself and if at any

00:03:51.810 --> 00:03:55.880 
besides one in itself and if at any
point<00:03:52.230> it's<00:03:53.570> evenly<00:03:54.570> divisible<00:03:54.930> by<00:03:55.230> something

00:03:55.880 --> 00:03:55.890 
point it's evenly divisible by something

00:03:55.890 --> 00:03:59.240 
point it's evenly divisible by something
we're<00:03:56.670> going<00:03:56.820> to<00:03:56.880> do<00:03:57.150> this<00:03:57.840> and<00:03:58.170> I'm<00:03:58.800> going<00:03:59.010> to

00:03:59.240 --> 00:03:59.250 
we're going to do this and I'm going to

00:03:59.250 --> 00:04:01.070 
we're going to do this and I'm going to
make<00:03:59.430> something<00:03:59.700> called<00:03:59.820> a<00:04:00.060> boolean<00:04:00.540> which<00:04:00.900> is

00:04:01.070 --> 00:04:01.080 
make something called a boolean which is

00:04:01.080 --> 00:04:04.460 
make something called a boolean which is
the<00:04:01.890> only<00:04:02.040> new<00:04:02.640> thing<00:04:02.900> besides<00:04:03.900> the<00:04:04.020> mazels

00:04:04.460 --> 00:04:04.470 
the only new thing besides the mazels

00:04:04.470 --> 00:04:05.990 
the only new thing besides the mazels
that<00:04:04.590> I'm<00:04:04.680> going<00:04:04.800> to<00:04:04.830> mention<00:04:04.980> here<00:04:05.370> which<00:04:05.820> is

00:04:05.990 --> 00:04:06.000 
that I'm going to mention here which is

00:04:06.000 --> 00:04:07.670 
that I'm going to mention here which is
a<00:04:06.030> variable<00:04:06.690> that<00:04:06.720> can<00:04:06.960> be<00:04:07.020> set<00:04:07.410> to<00:04:07.650> either

00:04:07.670 --> 00:04:07.680 
a variable that can be set to either

00:04:07.680 --> 00:04:09.230 
a variable that can be set to either
true<00:04:08.550> or<00:04:08.580> false

00:04:09.230 --> 00:04:09.240 
true or false

00:04:09.240 --> 00:04:12.610 
true or false
it<00:04:09.330> can<00:04:09.450> only<00:04:09.540> be<00:04:09.660> set<00:04:09.930> to<00:04:10.080> two<00:04:10.290> things<00:04:11.510> boolean

00:04:12.610 --> 00:04:12.620 
it can only be set to two things boolean

00:04:12.620 --> 00:04:18.770 
it can only be set to two things boolean
prime<00:04:13.620> and<00:04:14.990> so<00:04:15.990> if<00:04:16.290> input<00:04:16.710> modulus<00:04:17.780> prime

00:04:18.770 --> 00:04:18.780 
prime and so if input modulus prime

00:04:18.780 --> 00:04:22.640 
prime and so if input modulus prime
equals<00:04:19.590> false<00:04:20.600> which<00:04:21.600> means<00:04:21.630> if<00:04:22.169> at<00:04:22.410> any<00:04:22.560> point

00:04:22.640 --> 00:04:22.650 
equals false which means if at any point

00:04:22.650 --> 00:04:26.960 
equals false which means if at any point
it's<00:04:23.190> divisible<00:04:23.550> by<00:04:23.790> something<00:04:24.210> like<00:04:25.040> three

00:04:26.960 --> 00:04:26.970 
it's divisible by something like three

00:04:26.970 --> 00:04:30.740 
it's divisible by something like three
our<00:04:27.920> prime<00:04:28.920> equals<00:04:29.280> false<00:04:29.580> it's<00:04:29.970> not<00:04:30.300> prime

00:04:30.740 --> 00:04:30.750 
our prime equals false it's not prime

00:04:30.750 --> 00:04:34.100 
our prime equals false it's not prime
and<00:04:32.390> otherwise<00:04:33.390> we're<00:04:33.690> going<00:04:33.780> to<00:04:33.840> just<00:04:34.020> say

00:04:34.100 --> 00:04:34.110 
and otherwise we're going to just say

00:04:34.110 --> 00:04:37.130 
and otherwise we're going to just say
prime<00:04:34.380> equals<00:04:34.740> true<00:04:35.420> which<00:04:36.420> means<00:04:36.690> if<00:04:36.930> it's

00:04:37.130 --> 00:04:37.140 
prime equals true which means if it's

00:04:37.140 --> 00:04:41.710 
prime equals true which means if it's
not<00:04:37.320> proven<00:04:37.680> false<00:04:38.010> it's<00:04:38.630> if<00:04:39.630> it's<00:04:39.960> never<00:04:40.320> um

00:04:41.710 --> 00:04:41.720 
not proven false it's if it's never um

00:04:41.720 --> 00:04:45.380 
not proven false it's if it's never um
what's<00:04:42.720> it<00:04:42.810> called<00:04:43.550> if<00:04:44.550> it<00:04:44.640> never<00:04:44.820> gets<00:04:45.000> set<00:04:45.270> to

00:04:45.380 --> 00:04:45.390 
what's it called if it never gets set to

00:04:45.390 --> 00:04:47.660 
what's it called if it never gets set to
false<00:04:45.660> it<00:04:46.380> also<00:04:46.530> be<00:04:46.680> true<00:04:46.890> it's<00:04:47.250> kind<00:04:47.490> of<00:04:47.520> like

00:04:47.660 --> 00:04:47.670 
false it also be true it's kind of like

00:04:47.670 --> 00:04:49.520 
false it also be true it's kind of like
a<00:04:47.700> guilty<00:04:48.180> till<00:04:48.360> proven<00:04:48.420> innocent<00:04:48.840> kind<00:04:49.380> of

00:04:49.520 --> 00:04:49.530 
a guilty till proven innocent kind of

00:04:49.530 --> 00:04:52.910 
a guilty till proven innocent kind of
thing<00:04:49.770> um<00:04:50.360> and<00:04:51.380> then<00:04:52.380> I'm<00:04:52.470> just<00:04:52.560> going<00:04:52.710> to<00:04:52.770> make

00:04:52.910 --> 00:04:52.920 
thing um and then I'm just going to make

00:04:52.920 --> 00:04:56.750 
thing um and then I'm just going to make
this<00:04:53.100> if<00:04:53.310> statement<00:04:53.490> if<00:04:54.650> prime<00:04:55.650> equals<00:04:56.400> equals

00:04:56.750 --> 00:04:56.760 
this if statement if prime equals equals

00:04:56.760 --> 00:05:03.710 
this if statement if prime equals equals
false<00:04:59.240> then<00:05:00.240> system<00:05:01.110> dot<00:05:01.350> out<00:05:01.860> dot<00:05:02.720> println

00:05:03.710 --> 00:05:03.720 
false then system dot out dot println

00:05:03.720 --> 00:05:10.730 
false then system dot out dot println
arm<00:05:06.950> input<00:05:07.950> plus<00:05:09.290> spit<00:05:10.290> I'm<00:05:10.470> gonna<00:05:10.590> put<00:05:10.710> a

00:05:10.730 --> 00:05:10.740 
arm input plus spit I'm gonna put a

00:05:10.740 --> 00:05:12.020 
arm input plus spit I'm gonna put a
space<00:05:11.010> says<00:05:11.220> it's<00:05:11.400> not<00:05:11.550> smushed<00:05:11.910> together

00:05:12.020 --> 00:05:12.030 
space says it's not smushed together

00:05:12.030 --> 00:05:24.350 
space says it's not smushed together
like<00:05:12.390> that<00:05:12.420> is<00:05:14.000> not<00:05:15.000> prime<00:05:18.800> and<00:05:21.740> else/if<00:05:23.360> prime

00:05:24.350 --> 00:05:24.360 
like that is not prime and else/if prime

00:05:24.360 --> 00:05:29.740 
like that is not prime and else/if prime
equals<00:05:24.900> equals<00:05:25.230> true<00:05:27.560> system<00:05:28.560> dot<00:05:28.860> out<00:05:29.040> dot

00:05:29.740 --> 00:05:29.750 
equals equals true system dot out dot

00:05:29.750 --> 00:05:39.470 
equals equals true system dot out dot
println<00:05:33.140> input<00:05:34.140> plus<00:05:35.960> is<00:05:36.960> prime<00:05:38.180> all<00:05:39.180> right<00:05:39.270> so

00:05:39.470 --> 00:05:39.480 
println input plus is prime all right so

00:05:39.480 --> 00:05:41.420 
println input plus is prime all right so
I'm<00:05:39.540> just<00:05:39.720> going<00:05:39.870> to<00:05:40.020> run<00:05:40.680> over<00:05:40.710> what<00:05:41.070> this<00:05:41.250> did

00:05:41.420 --> 00:05:41.430 
I'm just going to run over what this did

00:05:41.430 --> 00:05:43.000 
I'm just going to run over what this did
one<00:05:41.610> more<00:05:41.700> time

00:05:43.000 --> 00:05:43.010 
one more time

00:05:43.010 --> 00:05:45.530 
one more time
we<00:05:44.010> got<00:05:44.220> the<00:05:44.400> input<00:05:44.520> from<00:05:44.820> the<00:05:44.940> user<00:05:45.000> and

00:05:45.530 --> 00:05:45.540 
we got the input from the user and

00:05:45.540 --> 00:05:47.330 
we got the input from the user and
prompted<00:05:46.290> them<00:05:46.410> to<00:05:46.440> an<00:05:46.590> assign<00:05:46.890> we<00:05:47.070> got<00:05:47.220> the

00:05:47.330 --> 00:05:47.340 
prompted them to an assign we got the

00:05:47.340 --> 00:05:50.060 
prompted them to an assign we got the
input<00:05:47.460> that<00:05:47.880> became<00:05:48.150> input<00:05:48.780> we<00:05:49.740> have<00:05:49.770> this

00:05:50.060 --> 00:05:50.070 
input that became input we have this

00:05:50.070 --> 00:05:52.690 
input that became input we have this
boolean<00:05:50.580> Prime<00:05:50.910> and<00:05:51.150> it<00:05:51.240> starts<00:05:51.510> off<00:05:51.660> as<00:05:51.810> true

00:05:52.690 --> 00:05:52.700 
boolean Prime and it starts off as true

00:05:52.700 --> 00:05:54.980 
boolean Prime and it starts off as true
then<00:05:53.700> we're<00:05:54.030> going<00:05:54.210> to<00:05:54.240> make<00:05:54.510> this<00:05:54.690> loop<00:05:54.930> to

00:05:54.980 --> 00:05:54.990 
then we're going to make this loop to

00:05:54.990 --> 00:05:57.740 
then we're going to make this loop to
see<00:05:55.590> if<00:05:55.950> we<00:05:56.910> should<00:05:56.940> set<00:05:57.270> it<00:05:57.300> equal<00:05:57.450> to<00:05:57.660> false

00:05:57.740 --> 00:05:57.750 
see if we should set it equal to false

00:05:57.750 --> 00:06:01.250 
see if we should set it equal to false
it<00:05:58.410> starts<00:05:59.340> at<00:05:59.490> two<00:05:59.790> which<00:06:00.600> means<00:06:00.870> it<00:06:00.990> doesn't

00:06:01.250 --> 00:06:01.260 
it starts at two which means it doesn't

00:06:01.260 --> 00:06:04.640 
it starts at two which means it doesn't
include<00:06:01.440> one<00:06:01.800> and<00:06:02.010> stops<00:06:02.690> right<00:06:03.690> before<00:06:03.720> it

00:06:04.640 --> 00:06:04.650 
include one and stops right before it

00:06:04.650 --> 00:06:07.850 
include one and stops right before it
gets<00:06:05.220> to<00:06:05.340> the<00:06:05.460> number<00:06:06.169> because<00:06:07.169> if<00:06:07.380> I<00:06:07.620> is<00:06:07.680> less

00:06:07.850 --> 00:06:07.860 
gets to the number because if I is less

00:06:07.860 --> 00:06:15.170 
gets to the number because if I is less
than<00:06:08.190> input<00:06:08.720> so<00:06:10.160> let's<00:06:11.160> say<00:06:11.280> it's<00:06:11.400> 17<00:06:11.970> um<00:06:14.180> when

00:06:15.170 --> 00:06:15.180 
than input so let's say it's 17 um when

00:06:15.180 --> 00:06:18.560 
than input so let's say it's 17 um when
it<00:06:15.300> loops<00:06:15.570> I'll<00:06:15.900> be<00:06:16.260> 2<00:06:16.530> then<00:06:16.770> 3<00:06:16.980> 4<00:06:17.280> 5<00:06:17.520> 6<00:06:17.760> 7<00:06:18.090> 8<00:06:18.180> 9<00:06:18.390> 10

00:06:18.560 --> 00:06:18.570 
it loops I'll be 2 then 3 4 5 6 7 8 9 10

00:06:18.570 --> 00:06:22.300 
it loops I'll be 2 then 3 4 5 6 7 8 9 10
all<00:06:18.810> the<00:06:18.840> way<00:06:18.990> up<00:06:19.230> to<00:06:19.530> 16<00:06:20.490> so<00:06:21.090> if<00:06:21.210> at<00:06:21.330> any<00:06:21.510> point

00:06:22.300 --> 00:06:22.310 
all the way up to 16 so if at any point

00:06:22.310 --> 00:06:27.230 
all the way up to 16 so if at any point
input<00:06:23.390> modulus<00:06:24.650> that<00:06:25.650> equals<00:06:26.400> 0<00:06:26.760> which<00:06:26.970> means

00:06:27.230 --> 00:06:27.240 
input modulus that equals 0 which means

00:06:27.240 --> 00:06:29.630 
input modulus that equals 0 which means
as<00:06:27.390> evenly<00:06:27.960> divisible<00:06:28.290> prime<00:06:28.980> equals<00:06:29.340> false

00:06:29.630 --> 00:06:29.640 
as evenly divisible prime equals false

00:06:29.640 --> 00:06:32.180 
as evenly divisible prime equals false
because<00:06:30.570> if<00:06:30.720> it's<00:06:30.870> evenly<00:06:31.290> divisible<00:06:31.560> by<00:06:31.860> one

00:06:32.180 --> 00:06:32.190 
because if it's evenly divisible by one

00:06:32.190 --> 00:06:34.930 
because if it's evenly divisible by one
of<00:06:32.280> those<00:06:32.400> numbers<00:06:32.820> it<00:06:33.090> is<00:06:33.720> not<00:06:34.020> prime<00:06:34.440> if

00:06:34.930 --> 00:06:34.940 
of those numbers it is not prime if

00:06:34.940 --> 00:06:39.080 
of those numbers it is not prime if
prime<00:06:35.940> is<00:06:36.120> false<00:06:36.470> it<00:06:37.470> prints<00:06:37.770> out<00:06:38.090> whatever

00:06:39.080 --> 00:06:39.090 
prime is false it prints out whatever

00:06:39.090 --> 00:06:40.670 
prime is false it prints out whatever
the<00:06:39.210> answer<00:06:39.360> is<00:06:39.690> not<00:06:39.870> prime

00:06:40.670 --> 00:06:40.680 
the answer is not prime

00:06:40.680 --> 00:06:42.590 
the answer is not prime
if<00:06:40.740> Primus<00:06:41.400> -<00:06:41.580> it<00:06:41.699> prints<00:06:42.030> out<00:06:42.120> whatever<00:06:42.360> they

00:06:42.590 --> 00:06:42.600 
if Primus - it prints out whatever they

00:06:42.600 --> 00:06:44.719 
if Primus - it prints out whatever they
entered<00:06:42.840> is<00:06:43.020> prime<00:06:43.620> so<00:06:44.310> I'm<00:06:44.400> just<00:06:44.520> going<00:06:44.639> to

00:06:44.719 --> 00:06:44.729 
entered is prime so I'm just going to

00:06:44.729 --> 00:06:49.340 
entered is prime so I'm just going to
run<00:06:45.030> this<00:06:45.240> and<00:06:45.509> prove<00:06:45.840> it<00:06:46.020> to<00:06:46.169> you<00:06:48.350> enter

00:06:49.340 --> 00:06:49.350 
run this and prove it to you enter

00:06:49.350 --> 00:06:54.560 
run this and prove it to you enter
number<00:06:49.620> I'll<00:06:49.800> enter<00:06:50.160> um<00:06:51.740> 19<00:06:52.740> which<00:06:53.130> is<00:06:53.370> prime

00:06:54.560 --> 00:06:54.570 
number I'll enter um 19 which is prime

00:06:54.570 --> 00:07:01.340 
number I'll enter um 19 which is prime
I<00:06:54.600> know<00:06:54.930> it's<00:06:55.199> prime<00:06:55.530> and<00:06:58.340> I'll<00:06:59.340> enter<00:07:00.350> 20

00:07:01.340 --> 00:07:01.350 
I know it's prime and I'll enter 20

00:07:01.350 --> 00:07:05.240 
I know it's prime and I'll enter 20
which<00:07:02.070> is<00:07:02.160> not<00:07:02.430> prime<00:07:02.789> 20<00:07:03.690> is<00:07:03.750> not<00:07:03.990> prime<00:07:04.410> and

00:07:05.240 --> 00:07:05.250 
which is not prime 20 is not prime and

00:07:05.250 --> 00:07:08.170 
which is not prime 20 is not prime and
of<00:07:05.490> course<00:07:05.789> I<00:07:06.090> know<00:07:06.479> if<00:07:06.960> you're<00:07:07.289> going<00:07:07.440> to<00:07:07.500> be

00:07:08.170 --> 00:07:08.180 
of course I know if you're going to be

00:07:08.180 --> 00:07:13.010 
of course I know if you're going to be
entering<00:07:09.180> something<00:07:09.600> like<00:07:09.810> 1<00:07:10.710> or<00:07:11.160> 2<00:07:12.020> it'll

00:07:13.010 --> 00:07:13.020 
entering something like 1 or 2 it'll

00:07:13.020 --> 00:07:16.969 
entering something like 1 or 2 it'll
probably<00:07:13.229> mess<00:07:13.560> things<00:07:13.770> up<00:07:14.039> um<00:07:14.340> if<00:07:15.229> you<00:07:16.229> that's

00:07:16.969 --> 00:07:16.979 
probably mess things up um if you that's

00:07:16.979 --> 00:07:18.080 
probably mess things up um if you that's
why<00:07:17.190> you<00:07:17.250> could<00:07:17.520> just<00:07:17.669> make<00:07:17.820> some<00:07:17.970> if

00:07:18.080 --> 00:07:18.090 
why you could just make some if

00:07:18.090 --> 00:07:21.110 
why you could just make some if
statements<00:07:18.600> like<00:07:18.720> if<00:07:18.930> input<00:07:19.260> equals<00:07:19.979> 1<00:07:20.400> then

00:07:21.110 --> 00:07:21.120 
statements like if input equals 1 then

00:07:21.120 --> 00:07:22.700 
statements like if input equals 1 then
you're<00:07:21.240> just<00:07:21.389> going<00:07:21.570> to<00:07:21.600> print<00:07:22.050> out<00:07:22.199> is<00:07:22.410> not

00:07:22.700 --> 00:07:22.710 
you're just going to print out is not

00:07:22.710 --> 00:07:25.879 
you're just going to print out is not
prime<00:07:23.130> and<00:07:23.430> if<00:07:24.030> input<00:07:24.270> equals<00:07:24.960> 2<00:07:25.350> just<00:07:25.650> print

00:07:25.879 --> 00:07:25.889 
prime and if input equals 2 just print

00:07:25.889 --> 00:07:28.100 
prime and if input equals 2 just print
out<00:07:25.949> is<00:07:26.160> prime<00:07:26.490> and<00:07:26.820> you<00:07:27.449> don't<00:07:27.630> have<00:07:27.780> to<00:07:27.870> do<00:07:27.990> it

00:07:28.100 --> 00:07:28.110 
out is prime and you don't have to do it

00:07:28.110 --> 00:07:31.879 
out is prime and you don't have to do it
for<00:07:28.229> those<00:07:28.440> two<00:07:29.130> numbers<00:07:29.340> because<00:07:30.710> it<00:07:31.710> would

00:07:31.879 --> 00:07:31.889 
for those two numbers because it would

00:07:31.889 --> 00:07:35.770 
for those two numbers because it would
just<00:07:31.919> be<00:07:32.190> funky<00:07:33.060> with<00:07:33.210> this<00:07:33.419> so<00:07:33.750> um<00:07:34.340> yeah

00:07:35.770 --> 00:07:35.780 
just be funky with this so um yeah

00:07:35.780 --> 00:07:39.490 
just be funky with this so um yeah
that's<00:07:36.780> just<00:07:37.110> a<00:07:37.320> prime<00:07:38.010> number<00:07:38.039> program<00:07:38.820> just

00:07:39.490 --> 00:07:39.500 
that's just a prime number program just

00:07:39.500 --> 00:07:43.580 
that's just a prime number program just
you<00:07:40.500> know<00:07:40.940> sit<00:07:41.940> back<00:07:42.180> and<00:07:42.479> build<00:07:43.289> the<00:07:43.349> program

00:07:43.580 --> 00:07:43.590 
you know sit back and build the program

00:07:43.590 --> 00:07:49.400 
you know sit back and build the program
with<00:07:43.889> you<00:07:44.009> guys<00:07:44.190> so<00:07:45.500> I'll<00:07:46.500> see<00:07:47.250> ya

