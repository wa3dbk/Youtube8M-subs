WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:01.280 

so<00:00:00.299> now<00:00:00.390> let's<00:00:00.570> let's<00:00:00.780> go<00:00:00.900> back<00:00:00.930> to<00:00:01.199> this

00:00:01.280 --> 00:00:01.290 
so now let's let's go back to this

00:00:01.290 --> 00:00:03.919 
so now let's let's go back to this
figure<00:00:01.469> again<00:00:01.709> over<00:00:02.040> here<00:00:02.360> so<00:00:03.360> if<00:00:03.600> you<00:00:03.689> look<00:00:03.720> at

00:00:03.919 --> 00:00:03.929 
figure again over here so if you look at

00:00:03.929 --> 00:00:07.550 
figure again over here so if you look at
my<00:00:04.370> processor<00:00:05.660> you<00:00:06.660> know<00:00:06.750> I<00:00:06.779> have<00:00:07.020> my<00:00:07.230> core

00:00:07.550 --> 00:00:07.560 
my processor you know I have my core

00:00:07.560 --> 00:00:09.799 
my processor you know I have my core
over<00:00:07.799> here<00:00:08.010> that<00:00:08.220> I<00:00:08.250> have<00:00:08.490> an<00:00:08.670> l1<00:00:09.090> cache<00:00:09.330> I<00:00:09.630> have

00:00:09.799 --> 00:00:09.809 
over here that I have an l1 cache I have

00:00:09.809 --> 00:00:13.009 
over here that I have an l1 cache I have
a<00:00:09.840> larger<00:00:10.230> l2<00:00:10.679> cache<00:00:10.860> and<00:00:11.099> so<00:00:11.130> on<00:00:11.599> so<00:00:12.599> you<00:00:12.929> know

00:00:13.009 --> 00:00:13.019 
a larger l2 cache and so on so you know

00:00:13.019 --> 00:00:14.299 
a larger l2 cache and so on so you know
let's<00:00:13.259> say<00:00:13.349> that<00:00:13.440> I<00:00:13.500> have<00:00:13.679> a<00:00:13.710> Miss<00:00:13.950> on<00:00:13.980> all<00:00:14.190> of

00:00:14.299 --> 00:00:14.309 
let's say that I have a Miss on all of

00:00:14.309 --> 00:00:15.950 
let's say that I have a Miss on all of
these<00:00:14.429> caches<00:00:14.790> and<00:00:15.030> I<00:00:15.089> ultimately<00:00:15.540> need<00:00:15.809> to

00:00:15.950 --> 00:00:15.960 
these caches and I ultimately need to

00:00:15.960 --> 00:00:18.849 
these caches and I ultimately need to
get<00:00:16.109> my<00:00:16.289> data<00:00:16.500> from<00:00:16.800> physical<00:00:16.920> memory<00:00:17.690> okay<00:00:18.690> so

00:00:18.849 --> 00:00:18.859 
get my data from physical memory okay so

00:00:18.859 --> 00:00:21.410 
get my data from physical memory okay so
now<00:00:19.859> you<00:00:20.279> know<00:00:20.400> having<00:00:20.820> the<00:00:20.850> virtual<00:00:21.300> address

00:00:21.410 --> 00:00:21.420 
now you know having the virtual address

00:00:21.420 --> 00:00:22.880 
now you know having the virtual address
so<00:00:21.720> you<00:00:21.779> know<00:00:21.960> the<00:00:22.199> core<00:00:22.439> issues<00:00:22.740> are

00:00:22.880 --> 00:00:22.890 
so you know the core issues are

00:00:22.890 --> 00:00:25.450 
so you know the core issues are
requesting<00:00:23.400> a<00:00:23.789> load<00:00:24.150> load<00:00:24.600> something<00:00:24.840> in<00:00:25.140> and

00:00:25.450 --> 00:00:25.460 
requesting a load load something in and

00:00:25.460 --> 00:00:27.380 
requesting a load load something in and
it's<00:00:26.460> always<00:00:26.699> going<00:00:26.880> to<00:00:26.910> refer<00:00:27.180> to<00:00:27.210> the

00:00:27.380 --> 00:00:27.390 
it's always going to refer to the

00:00:27.390 --> 00:00:29.509 
it's always going to refer to the
virtual<00:00:27.660> address<00:00:27.810> okay<00:00:28.650> because<00:00:28.800> the

00:00:29.509 --> 00:00:29.519 
virtual address okay because the

00:00:29.519 --> 00:00:31.189 
virtual address okay because the
application<00:00:30.090> and<00:00:30.179> the<00:00:30.240> binary<00:00:30.449> always<00:00:30.990> deal

00:00:31.189 --> 00:00:31.199 
application and the binary always deal

00:00:31.199 --> 00:00:32.780 
application and the binary always deal
with<00:00:31.230> just<00:00:31.590> virtual<00:00:31.920> addresses<00:00:32.219> because<00:00:32.640> that

00:00:32.780 --> 00:00:32.790 
with just virtual addresses because that

00:00:32.790 --> 00:00:34.670 
with just virtual addresses because that
is<00:00:32.910> all<00:00:33.059> that<00:00:33.750> is<00:00:33.870> visible<00:00:34.020> to<00:00:34.290> that<00:00:34.469> right

00:00:34.670 --> 00:00:34.680 
is all that is visible to that right

00:00:34.680 --> 00:00:35.930 
is all that is visible to that right
we're<00:00:34.860> giving<00:00:35.100> them<00:00:35.190> the<00:00:35.340> illusion<00:00:35.700> that<00:00:35.730> they

00:00:35.930 --> 00:00:35.940 
we're giving them the illusion that they

00:00:35.940 --> 00:00:37.610 
we're giving them the illusion that they
have<00:00:36.090> access<00:00:36.450> to<00:00:36.600> this<00:00:36.719> contiguous<00:00:37.320> eight

00:00:37.610 --> 00:00:37.620 
have access to this contiguous eight

00:00:37.620 --> 00:00:40.100 
have access to this contiguous eight
gigabytes<00:00:38.040> of<00:00:38.129> space<00:00:38.420> the<00:00:39.420> application<00:00:40.020> has

00:00:40.100 --> 00:00:40.110 
gigabytes of space the application has

00:00:40.110 --> 00:00:42.319 
gigabytes of space the application has
no<00:00:40.290> idea<00:00:40.590> that<00:00:40.649> these<00:00:40.920> these<00:00:41.790> virtual

00:00:42.319 --> 00:00:42.329 
no idea that these these virtual

00:00:42.329 --> 00:00:43.900 
no idea that these these virtual
addresses<00:00:42.629> that<00:00:42.809> are<00:00:42.870> being<00:00:43.079> issued

00:00:43.900 --> 00:00:43.910 
addresses that are being issued

00:00:43.910 --> 00:00:46.220 
addresses that are being issued
ultimately<00:00:44.910> translate<00:00:45.420> into<00:00:45.570> in<00:00:45.840> a<00:00:45.899> virtual

00:00:46.220 --> 00:00:46.230 
ultimately translate into in a virtual

00:00:46.230 --> 00:00:47.930 
ultimately translate into in a virtual
page<00:00:46.410> numbers<00:00:46.770> which<00:00:47.070> get<00:00:47.280> mapped<00:00:47.520> to<00:00:47.670> some

00:00:47.930 --> 00:00:47.940 
page numbers which get mapped to some

00:00:47.940 --> 00:00:49.819 
page numbers which get mapped to some
arbitrary<00:00:48.120> physical<00:00:48.870> page<00:00:49.230> number<00:00:49.260> right

00:00:49.819 --> 00:00:49.829 
arbitrary physical page number right

00:00:49.829 --> 00:00:51.380 
arbitrary physical page number right
this<00:00:50.039> is<00:00:50.129> obviously<00:00:50.460> not<00:00:50.640> known<00:00:50.910> at<00:00:51.090> compile

00:00:51.380 --> 00:00:51.390 
this is obviously not known at compile

00:00:51.390 --> 00:00:53.360 
this is obviously not known at compile
time<00:00:51.420> so<00:00:52.379> the<00:00:52.469> application<00:00:52.890> is<00:00:52.980> issuing<00:00:53.219> these

00:00:53.360 --> 00:00:53.370 
time so the application is issuing these

00:00:53.370 --> 00:00:55.639 
time so the application is issuing these
virtual<00:00:53.670> addresses<00:00:53.969> at<00:00:54.449> runtime<00:00:55.199> these

00:00:55.639 --> 00:00:55.649 
virtual addresses at runtime these

00:00:55.649 --> 00:00:57.470 
virtual addresses at runtime these
virtual<00:00:56.190> pages<00:00:56.399> are<00:00:56.610> being<00:00:56.789> mapped<00:00:56.940> to<00:00:57.180> some

00:00:57.470 --> 00:00:57.480 
virtual pages are being mapped to some

00:00:57.480 --> 00:01:00.619 
virtual pages are being mapped to some
arbitrary<00:00:57.890> physical<00:00:58.890> page<00:00:59.070> okay<00:01:00.059> so<00:01:00.090> if<00:01:00.449> I<00:01:00.570> do

00:01:00.619 --> 00:01:00.629 
arbitrary physical page okay so if I do

00:01:00.629 --> 00:01:02.689 
arbitrary physical page okay so if I do
need<00:01:00.899> to<00:01:00.960> get<00:01:01.170> the<00:01:01.230> data<00:01:01.469> from<00:01:01.559> the<00:01:02.309> physical

00:01:02.689 --> 00:01:02.699 
need to get the data from the physical

00:01:02.699 --> 00:01:04.880 
need to get the data from the physical
main<00:01:02.910> memory<00:01:03.239> I<00:01:03.420> have<00:01:04.110> to<00:01:04.260> translate<00:01:04.650> this

00:01:04.880 --> 00:01:04.890 
main memory I have to translate this

00:01:04.890 --> 00:01:06.940 
main memory I have to translate this
virtual<00:01:05.250> address<00:01:05.369> to<00:01:05.700> a<00:01:06.090> physical<00:01:06.180> address

00:01:06.940 --> 00:01:06.950 
virtual address to a physical address

00:01:06.950 --> 00:01:09.320 
virtual address to a physical address
okay<00:01:07.950> and<00:01:08.100> that<00:01:08.250> translation<00:01:08.790> is<00:01:08.909> being<00:01:08.939> done

00:01:09.320 --> 00:01:09.330 
okay and that translation is being done

00:01:09.330 --> 00:01:12.969 
okay and that translation is being done
through<00:01:10.140> this<00:01:10.380> page<00:01:10.590> table<00:01:10.860> that<00:01:11.010> I<00:01:11.159> mentioned

00:01:12.969 --> 00:01:12.979 
through this page table that I mentioned

00:01:12.979 --> 00:01:15.109 
through this page table that I mentioned
okay<00:01:13.979> and<00:01:14.100> these<00:01:14.189> page<00:01:14.490> tables<00:01:14.909> themselves

00:01:15.109 --> 00:01:15.119 
okay and these page tables themselves

00:01:15.119 --> 00:01:17.300 
okay and these page tables themselves
are<00:01:15.720> fairly<00:01:16.049> large<00:01:16.320> structures<00:01:16.770> right<00:01:17.009> it<00:01:17.130> has

00:01:17.300 --> 00:01:17.310 
are fairly large structures right it has

00:01:17.310 --> 00:01:19.700 
are fairly large structures right it has
a<00:01:17.340> million<00:01:17.820> entries<00:01:18.119> and<00:01:18.750> there<00:01:19.320> could<00:01:19.470> be<00:01:19.560> say

00:01:19.700 --> 00:01:19.710 
a million entries and there could be say

00:01:19.710 --> 00:01:21.800 
a million entries and there could be say
20<00:01:19.770> programs<00:01:20.430> running<00:01:20.820> together<00:01:21.180> so<00:01:21.450> you<00:01:21.509> have

00:01:21.800 --> 00:01:21.810 
20 programs running together so you have

00:01:21.810 --> 00:01:24.590 
20 programs running together so you have
in<00:01:21.990> a<00:01:22.049> 20<00:01:22.380> million<00:01:22.590> entries<00:01:23.040> each<00:01:23.280> entry<00:01:24.240> needs

00:01:24.590 --> 00:01:24.600 
in a 20 million entries each entry needs

00:01:24.600 --> 00:01:27.499 
in a 20 million entries each entry needs
a<00:01:25.020> few<00:01:25.229> bytes<00:01:25.740> of<00:01:25.979> data<00:01:26.040> and<00:01:26.670> so<00:01:27.270> if<00:01:27.360> you<00:01:27.450> are

00:01:27.499 --> 00:01:27.509 
a few bytes of data and so if you are

00:01:27.509 --> 00:01:29.420 
a few bytes of data and so if you are
talking<00:01:27.720> about<00:01:27.900> capacities<00:01:28.590> that<00:01:28.829> cannot<00:01:29.100> fit

00:01:29.420 --> 00:01:29.430 
talking about capacities that cannot fit

00:01:29.430 --> 00:01:31.539 
talking about capacities that cannot fit
in<00:01:29.549> the<00:01:29.640> l2<00:01:29.939> cache<00:01:29.970> right<00:01:30.479> or<00:01:30.720> on<00:01:30.930> the<00:01:31.020> l3<00:01:31.320> cache

00:01:31.539 --> 00:01:31.549 
in the l2 cache right or on the l3 cache

00:01:31.549 --> 00:01:33.859 
in the l2 cache right or on the l3 cache
so<00:01:32.549> these<00:01:32.670> page<00:01:32.909> tables<00:01:33.240> are<00:01:33.360> large<00:01:33.570> enough

00:01:33.859 --> 00:01:33.869 
so these page tables are large enough

00:01:33.869 --> 00:01:35.450 
so these page tables are large enough
that<00:01:34.079> they<00:01:34.320> have<00:01:34.500> to<00:01:34.619> be<00:01:34.740> stored<00:01:35.009> in<00:01:35.070> memory

00:01:35.450 --> 00:01:35.460 
that they have to be stored in memory

00:01:35.460 --> 00:01:37.880 
that they have to be stored in memory
somewhere<00:01:35.780> ok<00:01:36.780> so<00:01:36.840> let's<00:01:37.079> say<00:01:37.170> that<00:01:37.290> there's<00:01:37.530> a

00:01:37.880 --> 00:01:37.890 
somewhere ok so let's say that there's a

00:01:37.890 --> 00:01:39.830 
somewhere ok so let's say that there's a
region<00:01:38.250> of<00:01:38.340> memory<00:01:38.549> that<00:01:38.970> is<00:01:39.090> being<00:01:39.299> used<00:01:39.540> and

00:01:39.830 --> 00:01:39.840 
region of memory that is being used and

00:01:39.840 --> 00:01:41.390 
region of memory that is being used and
managed<00:01:40.500> by<00:01:40.560> the<00:01:40.650> operating<00:01:40.770> system

00:01:41.390 --> 00:01:41.400 
managed by the operating system

00:01:41.400 --> 00:01:45.020 
managed by the operating system
to<00:01:42.000> store<00:01:42.299> all<00:01:42.540> the<00:01:42.720> page<00:01:42.899> table<00:01:43.229> entries<00:01:44.030> ok

00:01:45.020 --> 00:01:45.030 
to store all the page table entries ok

00:01:45.030 --> 00:01:47.810 
to store all the page table entries ok
so<00:01:45.530> in<00:01:46.530> order<00:01:46.770> to<00:01:47.009> translate<00:01:47.369> the<00:01:47.549> virtual

00:01:47.810 --> 00:01:47.820 
so in order to translate the virtual

00:01:47.820 --> 00:01:50.480 
so in order to translate the virtual
address<00:01:47.909> to<00:01:48.119> physical<00:01:48.270> address<00:01:48.689> I<00:01:49.250> first<00:01:50.250> need

00:01:50.480 --> 00:01:50.490 
address to physical address I first need

00:01:50.490 --> 00:01:53.480 
address to physical address I first need
to<00:01:50.520> read<00:01:50.939> the<00:01:51.390> page<00:01:51.630> table<00:01:52.070> once<00:01:53.070> I<00:01:53.220> have<00:01:53.369> the

00:01:53.480 --> 00:01:53.490 
to read the page table once I have the

00:01:53.490 --> 00:01:54.889 
to read the page table once I have the
page<00:01:53.640> table<00:01:53.970> I<00:01:54.030> know<00:01:54.090> that<00:01:54.360> you<00:01:54.479> know<00:01:54.570> virtual

00:01:54.889 --> 00:01:54.899 
page table I know that you know virtual

00:01:54.899 --> 00:01:56.899 
page table I know that you know virtual
address<00:01:55.229> ABC<00:01:55.890> is<00:01:56.040> being<00:01:56.280> translated<00:01:56.640> to

00:01:56.899 --> 00:01:56.909 
address ABC is being translated to

00:01:56.909 --> 00:02:00.289 
address ABC is being translated to
physical<00:01:57.630> address<00:01:57.899> PQR<00:01:58.759> ok<00:01:59.759> now<00:01:59.969> I<00:02:00.000> can

00:02:00.289 --> 00:02:00.299 
physical address PQR ok now I can

00:02:00.299 --> 00:02:03.020 
physical address PQR ok now I can
actually<00:02:00.450> issue<00:02:00.780> my<00:02:01.200> request<00:02:01.619> to<00:02:02.030> physical

00:02:03.020 --> 00:02:03.030 
actually issue my request to physical

00:02:03.030 --> 00:02:05.389 
actually issue my request to physical
page<00:02:03.240> PQR<00:02:03.719> get<00:02:03.960> the<00:02:04.049> data<00:02:04.229> and<00:02:04.530> now<00:02:05.340> the

00:02:05.389 --> 00:02:05.399 
page PQR get the data and now the

00:02:05.399 --> 00:02:07.310 
page PQR get the data and now the
application<00:02:05.610> finally<00:02:06.390> has<00:02:06.540> the<00:02:06.719> data<00:02:06.869> that<00:02:07.229> it

00:02:07.310 --> 00:02:07.320 
application finally has the data that it

00:02:07.320 --> 00:02:09.260 
application finally has the data that it
needs<00:02:07.350> right<00:02:07.920> so<00:02:08.160> just<00:02:08.459> to<00:02:08.580> get<00:02:08.729> you<00:02:08.789> know<00:02:09.000> one

00:02:09.260 --> 00:02:09.270 
needs right so just to get you know one

00:02:09.270 --> 00:02:11.839 
needs right so just to get you know one
block<00:02:10.110> of<00:02:10.289> data<00:02:10.440> from<00:02:10.679> memory<00:02:11.069> I<00:02:11.280> actually

00:02:11.839 --> 00:02:11.849 
block of data from memory I actually

00:02:11.849 --> 00:02:13.610 
block of data from memory I actually
need<00:02:12.209> to<00:02:12.239> issue<00:02:12.540> two<00:02:12.959> different

00:02:13.610 --> 00:02:13.620 
need to issue two different

00:02:13.620 --> 00:02:15.470 
need to issue two different
to<00:02:13.769> memory<00:02:14.040> want<00:02:14.580> to<00:02:14.730> get<00:02:14.879> the<00:02:15.000> page<00:02:15.180> table

00:02:15.470 --> 00:02:15.480 
to memory want to get the page table

00:02:15.480 --> 00:02:17.479 
to memory want to get the page table
translation<00:02:16.049> and<00:02:16.230> want<00:02:16.980> to<00:02:17.040> get<00:02:17.190> the<00:02:17.370> data

00:02:17.479 --> 00:02:17.489 
translation and want to get the data

00:02:17.489 --> 00:02:20.030 
translation and want to get the data
itself<00:02:18.049> okay<00:02:19.049> so<00:02:19.110> this<00:02:19.260> is<00:02:19.440> you<00:02:19.590> know<00:02:19.620> clearly

00:02:20.030 --> 00:02:20.040 
itself okay so this is you know clearly

00:02:20.040 --> 00:02:22.640 
itself okay so this is you know clearly
very<00:02:20.190> very<00:02:20.310> expensive<00:02:21.230> okay<00:02:22.230> and<00:02:22.349> so<00:02:22.500> to<00:02:22.560> avoid

00:02:22.640 --> 00:02:22.650 
very very expensive okay and so to avoid

00:02:22.650 --> 00:02:23.839 
very very expensive okay and so to avoid
this<00:02:23.129> high-cost

00:02:23.839 --> 00:02:23.849 
this high-cost

00:02:23.849 --> 00:02:26.780 
this high-cost
what<00:02:24.750> is<00:02:24.900> done<00:02:25.080> is<00:02:25.349> that<00:02:25.379> a<00:02:26.010> portion<00:02:26.580> of<00:02:26.700> the

00:02:26.780 --> 00:02:26.790 
what is done is that a portion of the

00:02:26.790 --> 00:02:29.809 
what is done is that a portion of the
page<00:02:26.970> table<00:02:27.330> is<00:02:27.659> stored<00:02:28.530> on<00:02:28.799> the<00:02:29.069> processor<00:02:29.580> in

00:02:29.809 --> 00:02:29.819 
page table is stored on the processor in

00:02:29.819 --> 00:02:32.240 
page table is stored on the processor in
a<00:02:29.970> structure<00:02:30.390> called<00:02:30.420> the<00:02:30.870> TLB<00:02:31.379> okay<00:02:32.010> so<00:02:32.069> let

00:02:32.240 --> 00:02:32.250 
a structure called the TLB okay so let

00:02:32.250 --> 00:02:33.500 
a structure called the TLB okay so let
me<00:02:32.280> just<00:02:32.370> blow<00:02:32.610> up<00:02:32.700> the<00:02:32.940> structure<00:02:33.269> over<00:02:33.299> here

00:02:33.500 --> 00:02:33.510 
me just blow up the structure over here

00:02:33.510 --> 00:02:36.170 
me just blow up the structure over here
so<00:02:33.750> this<00:02:33.840> is<00:02:33.989> called<00:02:34.200> the<00:02:34.319> TLB<00:02:34.769> which<00:02:35.730> is<00:02:35.970> a

00:02:36.170 --> 00:02:36.180 
so this is called the TLB which is a

00:02:36.180 --> 00:02:38.899 
so this is called the TLB which is a
translation<00:02:37.019> lookaside<00:02:37.409> buffer<00:02:37.760> which<00:02:38.760> is<00:02:38.879> a

00:02:38.899 --> 00:02:38.909 
translation lookaside buffer which is a

00:02:38.909 --> 00:02:41.539 
translation lookaside buffer which is a
bit<00:02:39.180> of<00:02:39.299> a<00:02:39.360> fairly<00:02:39.599> complicated<00:02:39.959> name<00:02:40.560> for

00:02:41.539 --> 00:02:41.549 
bit of a fairly complicated name for

00:02:41.549 --> 00:02:43.430 
bit of a fairly complicated name for
something<00:02:41.849> that<00:02:42.000> can<00:02:42.180> also<00:02:42.420> be<00:02:42.599> called<00:02:42.900> a<00:02:43.140> page

00:02:43.430 --> 00:02:43.440 
something that can also be called a page

00:02:43.440 --> 00:02:47.059 
something that can also be called a page
table<00:02:43.680> cache<00:02:45.349> okay<00:02:46.349> so<00:02:46.530> instead<00:02:46.680> of<00:02:46.859> keeping

00:02:47.059 --> 00:02:47.069 
table cache okay so instead of keeping

00:02:47.069 --> 00:02:49.369 
table cache okay so instead of keeping
so<00:02:47.640> you<00:02:47.819> know<00:02:47.910> since<00:02:48.540> the<00:02:48.720> page<00:02:48.900> table<00:02:49.200> has<00:02:49.349> a

00:02:49.369 --> 00:02:49.379 
so you know since the page table has a

00:02:49.379 --> 00:02:51.740 
so you know since the page table has a
million<00:02:49.799> entries<00:02:50.040> it<00:02:50.879> is<00:02:51.030> hard<00:02:51.239> to<00:02:51.299> keep<00:02:51.540> all

00:02:51.740 --> 00:02:51.750 
million entries it is hard to keep all

00:02:51.750 --> 00:02:53.869 
million entries it is hard to keep all
of<00:02:51.780> it<00:02:51.989> on<00:02:52.140> chip<00:02:52.500> so<00:02:52.709> only<00:02:52.890> a<00:02:53.010> small<00:02:53.370> portion<00:02:53.609> is

00:02:53.869 --> 00:02:53.879 
of it on chip so only a small portion is

00:02:53.879 --> 00:02:56.479 
of it on chip so only a small portion is
being<00:02:54.090> kept<00:02:54.329> in<00:02:54.569> this<00:02:54.870> TLB<00:02:55.260> structure<00:02:55.650> so<00:02:56.400> the

00:02:56.479 --> 00:02:56.489 
being kept in this TLB structure so the

00:02:56.489 --> 00:02:57.949 
being kept in this TLB structure so the
TLB<00:02:56.819> could<00:02:57.000> be<00:02:57.180> you<00:02:57.390> know<00:02:57.510> let's<00:02:57.690> say<00:02:57.840> as

00:02:57.949 --> 00:02:57.959 
TLB could be you know let's say as

00:02:57.959 --> 00:03:02.630 
TLB could be you know let's say as
little<00:02:58.170> as<00:02:58.640> 64<00:02:59.640> entries<00:02:59.909> and<00:03:01.370> you<00:03:02.370> know<00:03:02.459> what

00:03:02.630 --> 00:03:02.640 
little as 64 entries and you know what

00:03:02.640 --> 00:03:04.430 
little as 64 entries and you know what
entry<00:03:02.940> over<00:03:03.120> here<00:03:03.299> for<00:03:03.480> example<00:03:03.870> say<00:03:04.049> is<00:03:04.109> that

00:03:04.430 --> 00:03:04.440 
entry over here for example say is that

00:03:04.440 --> 00:03:08.990 
entry over here for example say is that
for<00:03:05.159> process<00:03:05.549> ID<00:03:05.760> 7<00:03:06.530> virtual<00:03:07.530> page<00:03:07.980> number<00:03:08.489> ABC

00:03:08.990 --> 00:03:09.000 
for process ID 7 virtual page number ABC

00:03:09.000 --> 00:03:13.099 
for process ID 7 virtual page number ABC
maps<00:03:09.299> to<00:03:09.540> a<00:03:09.569> physical<00:03:09.989> page<00:03:10.170> number<00:03:10.370> PQR<00:03:12.109> okay

00:03:13.099 --> 00:03:13.109 
maps to a physical page number PQR okay

00:03:13.109 --> 00:03:15.259 
maps to a physical page number PQR okay
so<00:03:13.170> if<00:03:13.379> this<00:03:13.470> is<00:03:13.620> a<00:03:13.650> page<00:03:13.920> ABC<00:03:14.579> that<00:03:14.730> is<00:03:14.879> that

00:03:15.259 --> 00:03:15.269 
so if this is a page ABC that is that

00:03:15.269 --> 00:03:18.259 
so if this is a page ABC that is that
has<00:03:15.390> been<00:03:15.569> touched<00:03:15.810> recently<00:03:16.440> then<00:03:17.430> that<00:03:17.970> that

00:03:18.259 --> 00:03:18.269 
has been touched recently then that that

00:03:18.269 --> 00:03:20.780 
has been touched recently then that that
translation<00:03:18.840> is<00:03:18.959> being<00:03:18.989> cashed<00:03:19.590> in<00:03:20.340> the<00:03:20.579> ste

00:03:20.780 --> 00:03:20.790 
translation is being cashed in the ste

00:03:20.790 --> 00:03:23.780 
translation is being cashed in the ste
lb<00:03:21.030> structure<00:03:21.450> and<00:03:21.840> so<00:03:22.709> instead<00:03:23.340> of<00:03:23.430> having<00:03:23.609> to

00:03:23.780 --> 00:03:23.790 
lb structure and so instead of having to

00:03:23.790 --> 00:03:25.430 
lb structure and so instead of having to
go<00:03:23.970> to<00:03:24.030> memory<00:03:24.299> to<00:03:24.569> look<00:03:24.720> up<00:03:24.810> the<00:03:24.930> page<00:03:25.079> table

00:03:25.430 --> 00:03:25.440 
go to memory to look up the page table

00:03:25.440 --> 00:03:26.900 
go to memory to look up the page table
you<00:03:25.530> can<00:03:25.680> just<00:03:25.829> look<00:03:25.950> up<00:03:26.069> the<00:03:26.130> small<00:03:26.489> structure

00:03:26.900 --> 00:03:26.910 
you can just look up the small structure

00:03:26.910 --> 00:03:28.039 
you can just look up the small structure
which<00:03:27.060> you<00:03:27.090> know<00:03:27.269> perhaps<00:03:27.599> takes<00:03:27.810> a<00:03:27.900> single

00:03:28.039 --> 00:03:28.049 
which you know perhaps takes a single

00:03:28.049 --> 00:03:30.440 
which you know perhaps takes a single
cycle<00:03:28.380> to<00:03:28.590> access<00:03:28.950> and<00:03:29.310> you<00:03:29.970> can<00:03:30.120> say<00:03:30.269> well<00:03:30.389> you

00:03:30.440 --> 00:03:30.450 
cycle to access and you can say well you

00:03:30.450 --> 00:03:32.240 
cycle to access and you can say well you
know<00:03:30.629> virtual<00:03:30.959> page<00:03:31.139> number<00:03:31.169> ABC<00:03:31.829> translates

00:03:32.240 --> 00:03:32.250 
know virtual page number ABC translates

00:03:32.250 --> 00:03:35.000 
know virtual page number ABC translates
to<00:03:32.459> physical<00:03:33.030> page<00:03:33.180> number<00:03:33.209> PQR<00:03:33.930> right<00:03:34.769> there

00:03:35.000 --> 00:03:35.010 
to physical page number PQR right there

00:03:35.010 --> 00:03:36.559 
to physical page number PQR right there
I<00:03:35.040> have<00:03:35.160> the<00:03:35.700> physical<00:03:36.030> address<00:03:36.180> that<00:03:36.480> I'm

00:03:36.559 --> 00:03:36.569 
I have the physical address that I'm

00:03:36.569 --> 00:03:38.990 
I have the physical address that I'm
dealing<00:03:36.780> with<00:03:36.930> so<00:03:37.919> with<00:03:38.040> the<00:03:38.129> single<00:03:38.489> memory

00:03:38.990 --> 00:03:39.000 
dealing with so with the single memory

00:03:39.000 --> 00:03:41.000 
dealing with so with the single memory
access<00:03:39.329> I<00:03:39.419> can<00:03:39.569> now<00:03:39.720> get<00:03:39.989> my<00:03:40.230> data

00:03:41.000 --> 00:03:41.010 
access I can now get my data

00:03:41.010 --> 00:03:44.659 
access I can now get my data
okay<00:03:41.819> so<00:03:41.989> TLB<00:03:42.989> has<00:03:43.109> a<00:03:43.139> certain<00:03:43.440> coverage<00:03:43.889> that

00:03:44.659 --> 00:03:44.669 
okay so TLB has a certain coverage that

00:03:44.669 --> 00:03:47.750 
okay so TLB has a certain coverage that
is<00:03:44.910> if<00:03:45.720> it<00:03:46.230> has<00:03:46.319> 64<00:03:46.829> entries<00:03:47.010> and<00:03:47.370> each<00:03:47.519> entry

00:03:47.750 --> 00:03:47.760 
is if it has 64 entries and each entry

00:03:47.760 --> 00:03:51.020 
is if it has 64 entries and each entry
can<00:03:48.209> deal<00:03:48.419> with<00:03:48.449> an<00:03:48.780> 8<00:03:48.930> kilobyte<00:03:49.379> page<00:03:49.970> at<00:03:50.970> a

00:03:51.020 --> 00:03:51.030 
can deal with an 8 kilobyte page at a

00:03:51.030 --> 00:03:52.970 
can deal with an 8 kilobyte page at a
time<00:03:51.359> you're<00:03:51.540> essentially<00:03:52.019> keeping<00:03:52.470> track<00:03:52.949> of

00:03:52.970 --> 00:03:52.980 
time you're essentially keeping track of

00:03:52.980 --> 00:03:56.750 
time you're essentially keeping track of
translations<00:03:53.730> for<00:03:54.799> 512<00:03:55.799> kilobytes<00:03:55.980> worth<00:03:56.549> of

00:03:56.750 --> 00:03:56.760 
translations for 512 kilobytes worth of

00:03:56.760 --> 00:03:58.610 
translations for 512 kilobytes worth of
memory<00:03:57.269> space<00:03:57.389> right<00:03:57.840> so<00:03:57.989> you<00:03:58.079> can<00:03:58.199> handle<00:03:58.530> a

00:03:58.610 --> 00:03:58.620 
memory space right so you can handle a

00:03:58.620 --> 00:04:00.759 
memory space right so you can handle a
working<00:03:58.980> set<00:03:59.190> size<00:03:59.430> of<00:03:59.639> 512<00:04:00.180> kilobytes

00:04:00.759 --> 00:04:00.769 
working set size of 512 kilobytes

00:04:00.769 --> 00:04:03.500 
working set size of 512 kilobytes
without<00:04:01.769> ever<00:04:02.040> having<00:04:02.250> a<00:04:02.459> miss<00:04:02.669> in<00:04:02.849> the<00:04:02.940> TLB<00:04:03.180> if

00:04:03.500 --> 00:04:03.510 
without ever having a miss in the TLB if

00:04:03.510 --> 00:04:05.479 
without ever having a miss in the TLB if
you<00:04:03.599> have<00:04:03.720> a<00:04:03.750> mess<00:04:03.959> in<00:04:04.079> the<00:04:04.169> TLB<00:04:04.410> then<00:04:04.739> again

00:04:05.479 --> 00:04:05.489 
you have a mess in the TLB then again

00:04:05.489 --> 00:04:07.699 
you have a mess in the TLB then again
you<00:04:05.639> do<00:04:05.790> have<00:04:05.970> to<00:04:06.090> access<00:04:06.239> memory<00:04:06.780> to<00:04:06.959> get<00:04:07.169> the

00:04:07.699 --> 00:04:07.709 
you do have to access memory to get the

00:04:07.709 --> 00:04:11.059 
you do have to access memory to get the
page<00:04:07.889> table<00:04:08.220> translation<00:04:08.900> okay<00:04:09.900> but<00:04:10.109> you<00:04:10.980> know

00:04:11.059 --> 00:04:11.069 
page table translation okay but you know

00:04:11.069 --> 00:04:12.619 
page table translation okay but you know
if<00:04:11.160> you're<00:04:11.250> just<00:04:11.310> dealing<00:04:11.609> with<00:04:11.699> this<00:04:11.910> let's

00:04:12.619 --> 00:04:12.629 
if you're just dealing with this let's

00:04:12.629 --> 00:04:15.470 
if you're just dealing with this let's
say<00:04:12.780> 512<00:04:13.530> kilobytes<00:04:13.620> worth<00:04:14.040> of<00:04:14.190> data<00:04:14.370> the<00:04:15.269> hope

00:04:15.470 --> 00:04:15.480 
say 512 kilobytes worth of data the hope

00:04:15.480 --> 00:04:17.569 
say 512 kilobytes worth of data the hope
is<00:04:15.690> that<00:04:15.720> you<00:04:16.079> will<00:04:16.260> that<00:04:17.190> you<00:04:17.310> will<00:04:17.430> always

00:04:17.569 --> 00:04:17.579 
is that you will that you will always

00:04:17.579 --> 00:04:20.360 
is that you will that you will always
have<00:04:18.030> a<00:04:18.090> TLB<00:04:18.419> hit<00:04:18.570> and<00:04:18.989> you<00:04:19.709> won't<00:04:19.919> have<00:04:20.070> to<00:04:20.250> do

00:04:20.360 --> 00:04:20.370 
have a TLB hit and you won't have to do

00:04:20.370 --> 00:04:23.899 
have a TLB hit and you won't have to do
multiple<00:04:21.209> memory<00:04:21.449> accesses<00:04:21.930> to<00:04:22.590> get<00:04:22.860> to<00:04:23.640> get

00:04:23.899 --> 00:04:23.909 
multiple memory accesses to get to get

00:04:23.909 --> 00:04:26.129 
multiple memory accesses to get to get
your<00:04:24.150> your<00:04:24.479> data<00:04:24.719> elements

00:04:26.129 --> 00:04:26.139 
your your data elements

00:04:26.139 --> 00:04:28.110 
your your data elements
okay<00:04:26.530> so<00:04:26.590> if<00:04:26.919> you<00:04:27.039> want<00:04:27.189> to<00:04:27.280> increase<00:04:27.610> your<00:04:27.669> TLB

00:04:28.110 --> 00:04:28.120 
okay so if you want to increase your TLB

00:04:28.120 --> 00:04:29.909 
okay so if you want to increase your TLB
coverage<00:04:28.419> one<00:04:28.659> option<00:04:28.990> is<00:04:29.080> to<00:04:29.229> increase<00:04:29.650> the

00:04:29.909 --> 00:04:29.919 
coverage one option is to increase the

00:04:29.919 --> 00:04:31.890 
coverage one option is to increase the
page<00:04:30.099> size<00:04:30.340> if<00:04:30.729> you<00:04:31.090> went<00:04:31.240> from<00:04:31.360> an<00:04:31.539> 8<00:04:31.689> kilobyte

00:04:31.890 --> 00:04:31.900 
page size if you went from an 8 kilobyte

00:04:31.900 --> 00:04:34.050 
page size if you went from an 8 kilobyte
page<00:04:32.319> size<00:04:32.620> to<00:04:32.860> a<00:04:32.889> 16<00:04:33.249> kilobyte<00:04:33.639> page<00:04:33.789> size

00:04:34.050 --> 00:04:34.060 
page size to a 16 kilobyte page size

00:04:34.060 --> 00:04:36.540 
page size to a 16 kilobyte page size
then<00:04:34.960> your<00:04:35.139> TLB<00:04:35.529> coverage<00:04:35.860> would<00:04:36.039> also<00:04:36.189> grow

00:04:36.540 --> 00:04:36.550 
then your TLB coverage would also grow

00:04:36.550 --> 00:04:40.050 
then your TLB coverage would also grow
to<00:04:36.610> 1<00:04:37.240> megabyte<00:04:37.629> in<00:04:37.840> size<00:04:38.340> okay<00:04:39.340> but<00:04:39.520> then<00:04:39.669> the

00:04:40.050 --> 00:04:40.060 
to 1 megabyte in size okay but then the

00:04:40.060 --> 00:04:42.659 
to 1 megabyte in size okay but then the
laws<00:04:40.210> of<00:04:40.360> the<00:04:40.419> page<00:04:40.599> size<00:04:40.810> the<00:04:41.110> more<00:04:41.669> memory

00:04:42.659 --> 00:04:42.669 
laws of the page size the more memory

00:04:42.669 --> 00:04:44.760 
laws of the page size the more memory
space<00:04:42.969> that<00:04:43.180> also<00:04:43.449> gets<00:04:43.629> wasted<00:04:43.840> so<00:04:44.650> the

00:04:44.760 --> 00:04:44.770 
space that also gets wasted so the

00:04:44.770 --> 00:04:46.260 
space that also gets wasted so the
operating<00:04:45.099> system<00:04:45.430> has<00:04:45.580> to<00:04:45.699> take<00:04:45.879> these<00:04:46.029> into

00:04:46.260 --> 00:04:46.270 
operating system has to take these into

00:04:46.270 --> 00:04:47.999 
operating system has to take these into
account<00:04:46.389> when<00:04:47.020> it<00:04:47.110> defines<00:04:47.469> the<00:04:47.560> page<00:04:47.800> size

00:04:47.999 --> 00:04:48.009 
account when it defines the page size

00:04:48.009 --> 00:04:49.860 
account when it defines the page size
okay<00:04:48.789> and<00:04:48.879> you<00:04:48.969> know<00:04:49.029> later<00:04:49.240> we'll<00:04:49.449> also<00:04:49.599> talk

00:04:49.860 --> 00:04:49.870 
okay and you know later we'll also talk

00:04:49.870 --> 00:04:52.679 
okay and you know later we'll also talk
about<00:04:49.900> a<00:04:50.889> concept<00:04:51.520> of<00:04:51.699> super<00:04:52.029> pages<00:04:52.360> which

00:04:52.679 --> 00:04:52.689 
about a concept of super pages which

00:04:52.689 --> 00:04:55.080 
about a concept of super pages which
allows<00:04:52.960> you<00:04:53.080> to<00:04:53.110> dynamically<00:04:53.650> create<00:04:54.090> larger

00:04:55.080 --> 00:04:55.090 
allows you to dynamically create larger

00:04:55.090 --> 00:04:57.420 
allows you to dynamically create larger
page<00:04:55.330> sizes<00:04:55.710> okay<00:04:56.710> so<00:04:56.889> let<00:04:57.069> me<00:04:57.129> just<00:04:57.310> do<00:04:57.400> a

00:04:57.420 --> 00:04:57.430 
page sizes okay so let me just do a

00:04:57.430 --> 00:05:00.959 
page sizes okay so let me just do a
quick<00:04:57.490> recap<00:04:58.060> before<00:04:58.629> I<00:04:58.659> end<00:04:59.379> this<00:04:59.560> video<00:04:59.969> so

00:05:00.959 --> 00:05:00.969 
quick recap before I end this video so

00:05:00.969 --> 00:05:03.839 
quick recap before I end this video so
as<00:05:01.090> I<00:05:01.180> said<00:05:01.740> you<00:05:02.740> know<00:05:02.830> your<00:05:03.039> application<00:05:03.310> is

00:05:03.839 --> 00:05:03.849 
as I said you know your application is

00:05:03.849 --> 00:05:06.869 
as I said you know your application is
producing<00:05:04.300> virtual<00:05:04.810> addresses<00:05:05.139> and<00:05:05.759> you<00:05:06.759> know

00:05:06.869 --> 00:05:06.879 
producing virtual addresses and you know

00:05:06.879 --> 00:05:09.869 
producing virtual addresses and you know
not<00:05:07.060> a<00:05:07.449> each<00:05:08.199> application<00:05:08.800> need<00:05:09.009> not<00:05:09.159> use<00:05:09.460> its

00:05:09.869 --> 00:05:09.879 
not a each application need not use its

00:05:09.879 --> 00:05:11.850 
not a each application need not use its
entire<00:05:10.240> 8<00:05:10.479> gigabytes<00:05:10.990> worth<00:05:11.319> of<00:05:11.500> virtual

00:05:11.850 --> 00:05:11.860 
entire 8 gigabytes worth of virtual

00:05:11.860 --> 00:05:14.129 
entire 8 gigabytes worth of virtual
space<00:05:12.310> right<00:05:13.060> you're<00:05:13.210> usually<00:05:13.599> using<00:05:14.050> a

00:05:14.129 --> 00:05:14.139 
space right you're usually using a

00:05:14.139 --> 00:05:16.379 
space right you're usually using a
smaller<00:05:14.409> fraction<00:05:14.680> of<00:05:14.949> that<00:05:15.000> so<00:05:16.000> if<00:05:16.090> every

00:05:16.379 --> 00:05:16.389 
smaller fraction of that so if every

00:05:16.389 --> 00:05:17.879 
smaller fraction of that so if every
application<00:05:16.900> that<00:05:17.020> is<00:05:17.110> currently<00:05:17.409> running<00:05:17.650> is

00:05:17.879 --> 00:05:17.889 
application that is currently running is

00:05:17.889 --> 00:05:19.890 
application that is currently running is
using<00:05:18.250> a<00:05:18.400> small<00:05:18.550> fraction<00:05:19.120> of<00:05:19.210> its<00:05:19.389> entire<00:05:19.689> a

00:05:19.890 --> 00:05:19.900 
using a small fraction of its entire a

00:05:19.900 --> 00:05:22.379 
using a small fraction of its entire a
gigabytes<00:05:20.319> of<00:05:20.469> virtual<00:05:21.069> memory<00:05:21.250> space<00:05:21.389> it's

00:05:22.379 --> 00:05:22.389 
gigabytes of virtual memory space it's

00:05:22.389 --> 00:05:24.360 
gigabytes of virtual memory space it's
possible<00:05:22.870> that<00:05:22.990> all<00:05:23.139> of<00:05:23.169> that<00:05:23.379> memory<00:05:23.529> fits<00:05:24.039> in

00:05:24.360 --> 00:05:24.370 
possible that all of that memory fits in

00:05:24.370 --> 00:05:26.969 
possible that all of that memory fits in
physical<00:05:24.789> memory<00:05:25.050> ok<00:05:26.050> so<00:05:26.110> you<00:05:26.259> may<00:05:26.469> not<00:05:26.620> use

00:05:26.969 --> 00:05:26.979 
physical memory ok so you may not use

00:05:26.979 --> 00:05:30.899 
physical memory ok so you may not use
your<00:05:27.539> swap<00:05:28.539> space<00:05:28.839> on<00:05:29.110> disk<00:05:29.139> if<00:05:29.979> if<00:05:30.699> your

00:05:30.899 --> 00:05:30.909 
your swap space on disk if if your

00:05:30.909 --> 00:05:32.700 
your swap space on disk if if your
memory<00:05:31.120> requirement<00:05:31.629> is<00:05:31.719> very<00:05:31.750> small<00:05:32.259> now<00:05:32.500> as

00:05:32.700 --> 00:05:32.710 
memory requirement is very small now as

00:05:32.710 --> 00:05:35.189 
memory requirement is very small now as
the<00:05:32.949> memory<00:05:33.219> requirement<00:05:33.759> grows<00:05:34.050> you<00:05:35.050> will

00:05:35.189 --> 00:05:35.199 
the memory requirement grows you will

00:05:35.199 --> 00:05:36.839 
the memory requirement grows you will
end<00:05:35.409> up<00:05:35.560> needing<00:05:35.919> more<00:05:36.219> pages<00:05:36.430> and<00:05:36.550> you<00:05:36.729> may

00:05:36.839 --> 00:05:36.849 
end up needing more pages and you may

00:05:36.849 --> 00:05:38.760 
end up needing more pages and you may
end<00:05:37.000> up<00:05:37.089> spilling<00:05:37.419> some<00:05:37.689> pages<00:05:37.870> into<00:05:38.409> the<00:05:38.529> swap

00:05:38.760 --> 00:05:38.770 
end up spilling some pages into the swap

00:05:38.770 --> 00:05:43.079 
end up spilling some pages into the swap
space<00:05:39.719> ok<00:05:40.719> so<00:05:41.250> every<00:05:42.250> virtual<00:05:42.580> address<00:05:42.849> gets

00:05:43.079 --> 00:05:43.089 
space ok so every virtual address gets

00:05:43.089 --> 00:05:45.659 
space ok so every virtual address gets
translated<00:05:43.479> into<00:05:43.810> a<00:05:43.930> physical<00:05:43.990> address<00:05:44.669> ok

00:05:45.659 --> 00:05:45.669 
translated into a physical address ok

00:05:45.669 --> 00:05:47.219 
translated into a physical address ok
and<00:05:45.759> that<00:05:45.909> translation<00:05:46.479> is<00:05:46.569> kept<00:05:46.810> track<00:05:47.020> off

00:05:47.219 --> 00:05:47.229 
and that translation is kept track off

00:05:47.229 --> 00:05:50.999 
and that translation is kept track off
in<00:05:47.529> the<00:05:47.680> page<00:05:47.860> table<00:05:48.120> and<00:05:49.500> some<00:05:50.500> page<00:05:50.710> table

00:05:50.999 --> 00:05:51.009 
in the page table and some page table

00:05:51.009 --> 00:05:54.119 
in the page table and some page table
entries<00:05:51.279> are<00:05:51.550> being<00:05:51.789> kept<00:05:52.029> in<00:05:52.479> the<00:05:52.539> TLB<00:05:53.129> okay

00:05:54.119 --> 00:05:54.129 
entries are being kept in the TLB okay

00:05:54.129 --> 00:05:56.730 
entries are being kept in the TLB okay
the<00:05:54.360> you<00:05:55.360> know<00:05:55.449> we<00:05:55.779> are<00:05:55.870> managing<00:05:56.110> the

00:05:56.730 --> 00:05:56.740 
the you know we are managing the

00:05:56.740 --> 00:05:58.079 
the you know we are managing the
physical<00:05:57.099> memory<00:05:57.250> space<00:05:57.580> has<00:05:57.759> a<00:05:57.789> fully

00:05:58.079 --> 00:05:58.089 
physical memory space has a fully

00:05:58.089 --> 00:06:00.059 
physical memory space has a fully
associative<00:05:58.449> cache<00:05:58.689> so<00:05:59.199> your<00:05:59.379> page<00:05:59.800> could<00:06:00.009> be

00:06:00.059 --> 00:06:00.069 
associative cache so your page could be

00:06:00.069 --> 00:06:02.159 
associative cache so your page could be
placed<00:06:00.339> anywhere<00:06:00.550> in<00:06:00.969> physical<00:06:01.330> memory<00:06:01.569> and

00:06:02.159 --> 00:06:02.169 
placed anywhere in physical memory and

00:06:02.169 --> 00:06:04.260 
placed anywhere in physical memory and
the<00:06:02.349> replacement<00:06:02.860> policy<00:06:03.039> is<00:06:03.310> usually<00:06:03.759> at

00:06:04.260 --> 00:06:04.270 
the replacement policy is usually at

00:06:04.270 --> 00:06:08.129 
the replacement policy is usually at
least<00:06:04.449> recently<00:06:04.810> used<00:06:04.899> and<00:06:06.599> the<00:06:07.599> memory<00:06:07.930> disk

00:06:08.129 --> 00:06:08.139 
least recently used and the memory disk

00:06:08.139 --> 00:06:09.869 
least recently used and the memory disk
hierarchy<00:06:08.620> can<00:06:08.800> you<00:06:09.039> know<00:06:09.159> is<00:06:09.250> usually

00:06:09.869 --> 00:06:09.879 
hierarchy can you know is usually

00:06:09.879 --> 00:06:12.420 
hierarchy can you know is usually
exclusive<00:06:10.330> and<00:06:10.629> the<00:06:11.289> write<00:06:11.409> policy<00:06:11.889> is<00:06:12.069> almost

00:06:12.420 --> 00:06:12.430 
exclusive and the write policy is almost

00:06:12.430 --> 00:06:14.219 
exclusive and the write policy is almost
always<00:06:12.699> right<00:06:13.120> back<00:06:13.509> because<00:06:13.930> of<00:06:14.050> the<00:06:14.110> high

00:06:14.219 --> 00:06:14.229 
always right back because of the high

00:06:14.229 --> 00:06:18.420 
always right back because of the high
cost<00:06:14.589> of<00:06:14.889> doing<00:06:15.460> any<00:06:15.729> disk<00:06:16.029> access<00:06:17.250> ok<00:06:18.250> as<00:06:18.339> I

00:06:18.420 --> 00:06:18.430 
cost of doing any disk access ok as I

00:06:18.430 --> 00:06:21.059 
cost of doing any disk access ok as I
said<00:06:18.580> the<00:06:18.669> TLB<00:06:19.000> is<00:06:19.210> a<00:06:19.539> small<00:06:19.990> fraction<00:06:20.529> of<00:06:20.770> your

00:06:21.059 --> 00:06:21.069 
said the TLB is a small fraction of your

00:06:21.069 --> 00:06:24.510 
said the TLB is a small fraction of your
page<00:06:21.370> table<00:06:21.729> entries<00:06:22.229> and<00:06:23.229> it<00:06:23.800> prevents

00:06:24.510 --> 00:06:24.520 
page table entries and it prevents

00:06:24.520 --> 00:06:26.339 
page table entries and it prevents
having<00:06:24.789> to<00:06:24.879> do<00:06:25.029> in<00:06:25.210> a<00:06:25.270> too<00:06:25.449> expensive<00:06:25.839> memory

00:06:26.339 --> 00:06:26.349 
having to do in a too expensive memory

00:06:26.349 --> 00:06:28.980 
having to do in a too expensive memory
lookups<00:06:26.680> to<00:06:26.800> get<00:06:26.979> one<00:06:27.370> word<00:06:27.580> of<00:06:27.729> data<00:06:28.000> and<00:06:28.270> by

00:06:28.980 --> 00:06:28.990 
lookups to get one word of data and by

00:06:28.990 --> 00:06:30.389 
lookups to get one word of data and by
using<00:06:29.169> a<00:06:29.349> large<00:06:29.529> page<00:06:29.770> size<00:06:30.009> you<00:06:30.129> can<00:06:30.279> also

00:06:30.389 --> 00:06:30.399 
using a large page size you can also

00:06:30.399 --> 00:06:34.469 
using a large page size you can also
increase<00:06:30.819> the<00:06:31.689> coverage<00:06:31.899> of<00:06:32.379> the<00:06:32.589> TLB<00:06:33.419> ok<00:06:34.419> so

00:06:34.469 --> 00:06:34.479 
increase the coverage of the TLB ok so

00:06:34.479 --> 00:06:35.790 
increase the coverage of the TLB ok so
in<00:06:34.629> the<00:06:34.690> next<00:06:34.839> video<00:06:34.990> I'll<00:06:35.229> show<00:06:35.440> you<00:06:35.500> how<00:06:35.740> the

00:06:35.790 --> 00:06:35.800 
in the next video I'll show you how the

00:06:35.800 --> 00:06:38.339 
in the next video I'll show you how the
TLB<00:06:36.370> and<00:06:36.610> the<00:06:36.789> cache<00:06:37.029> how<00:06:37.629> those<00:06:38.169> two

00:06:38.339 --> 00:06:38.349 
TLB and the cache how those two

00:06:38.349 --> 00:06:39.470 
TLB and the cache how those two
structures<00:06:38.589> interact

00:06:39.470 --> 00:06:39.480 
structures interact

00:06:39.480 --> 00:06:41.900 
structures interact
to<00:06:39.630> each<00:06:39.750> other

