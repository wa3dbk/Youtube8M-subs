WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:02.180 

in<00:00:00.210> this<00:00:00.840> lesson<00:00:01.050> we<00:00:01.290> will<00:00:01.319> solve<00:00:01.650> a<00:00:01.890> very

00:00:02.180 --> 00:00:02.190 
in this lesson we will solve a very

00:00:02.190 --> 00:00:06.079 
in this lesson we will solve a very
simple<00:00:02.730> problem<00:00:03.200> given<00:00:04.200> a<00:00:04.319> number<00:00:05.040> n<00:00:05.220> which<00:00:05.910> is

00:00:06.079 --> 00:00:06.089 
simple problem given a number n which is

00:00:06.089 --> 00:00:08.450 
simple problem given a number n which is
a<00:00:06.120> natural<00:00:06.690> number<00:00:06.779> we<00:00:07.500> want<00:00:07.649> to<00:00:07.799> find<00:00:08.010> out<00:00:08.250> all

00:00:08.450 --> 00:00:08.460 
a natural number we want to find out all

00:00:08.460 --> 00:00:12.320 
a natural number we want to find out all
its<00:00:08.820> factors<00:00:09.500> for<00:00:10.500> example<00:00:10.950> if<00:00:11.099> n<00:00:11.400> is<00:00:11.910> let<00:00:12.300> us

00:00:12.320 --> 00:00:12.330 
its factors for example if n is let us

00:00:12.330 --> 00:00:19.840 
its factors for example if n is let us
say<00:00:12.679> 12<00:00:14.360> then<00:00:15.360> its<00:00:16.160> factors<00:00:17.160> are<00:00:18.170> 1<00:00:19.170> and<00:00:19.470> 1

00:00:19.840 --> 00:00:19.850 
say 12 then its factors are 1 and 1

00:00:19.850 --> 00:00:25.939 
say 12 then its factors are 1 and 1
divides<00:00:20.850> all<00:00:21.119> natural<00:00:21.570> numbers<00:00:21.859> 2<00:00:22.859> 3<00:00:24.080> 4<00:00:25.080> 6<00:00:25.680> and

00:00:25.939 --> 00:00:25.949 
divides all natural numbers 2 3 4 6 and

00:00:25.949 --> 00:00:30.380 
divides all natural numbers 2 3 4 6 and
12<00:00:26.150> so<00:00:27.150> 12<00:00:27.930> has<00:00:28.230> 6<00:00:28.619> factors<00:00:29.039> in<00:00:29.250> all<00:00:29.400> these<00:00:30.090> 6

00:00:30.380 --> 00:00:30.390 
12 so 12 has 6 factors in all these 6

00:00:30.390 --> 00:00:33.580 
12 so 12 has 6 factors in all these 6
numbers<00:00:30.449> divide<00:00:31.140> 12<00:00:31.520> ok<00:00:32.520> so<00:00:32.579> if<00:00:32.850> we<00:00:33.090> have<00:00:33.329> n

00:00:33.580 --> 00:00:33.590 
numbers divide 12 ok so if we have n

00:00:33.590 --> 00:00:38.030 
numbers divide 12 ok so if we have n
equal<00:00:34.590> to<00:00:34.800> 17<00:00:35.760> we<00:00:36.030> will<00:00:36.149> have<00:00:36.410> only<00:00:37.410> 2<00:00:37.649> factors

00:00:38.030 --> 00:00:38.040 
equal to 17 we will have only 2 factors

00:00:38.040 --> 00:00:39.290 
equal to 17 we will have only 2 factors
1<00:00:38.489> and<00:00:38.520> 17

00:00:39.290 --> 00:00:39.300 
1 and 17

00:00:39.300 --> 00:00:42.290 
1 and 17
that's<00:00:39.480> because<00:00:39.809> 17<00:00:40.350> is<00:00:40.500> a<00:00:40.530> prime<00:00:40.620> number<00:00:40.860> if<00:00:41.790> n

00:00:42.290 --> 00:00:42.300 
that's because 17 is a prime number if n

00:00:42.300 --> 00:00:48.310 
that's because 17 is a prime number if n
is<00:00:42.420> 36<00:00:42.989> then<00:00:43.500> the<00:00:44.370> factors<00:00:44.700> would<00:00:44.820> be<00:00:45.030> 1<00:00:45.780> 2<00:00:46.350> 3<00:00:46.739> 4

00:00:48.310 --> 00:00:48.320 
is 36 then the factors would be 1 2 3 4

00:00:48.320 --> 00:00:55.819 
is 36 then the factors would be 1 2 3 4
6<00:00:49.320> 9<00:00:49.940> 12<00:00:51.980> 18<00:00:52.980> and<00:00:53.370> 36<00:00:53.940> so<00:00:54.329> there<00:00:54.510> are<00:00:54.660> 9<00:00:55.379> factors

00:00:55.819 --> 00:00:55.829 
6 9 12 18 and 36 so there are 9 factors

00:00:55.829 --> 00:00:58.790 
6 9 12 18 and 36 so there are 9 factors
of<00:00:55.980> 36<00:00:56.870> so<00:00:57.870> how<00:00:58.140> do<00:00:58.199> we<00:00:58.320> solve<00:00:58.530> this<00:00:58.710> problem

00:00:58.790 --> 00:00:58.800 
of 36 so how do we solve this problem

00:00:58.800 --> 00:01:01.010 
of 36 so how do we solve this problem
programmatically<00:00:59.730> the<00:01:00.449> simplest<00:01:00.870> approach

00:01:01.010 --> 00:01:01.020 
programmatically the simplest approach

00:01:01.020 --> 00:01:05.630 
programmatically the simplest approach
is<00:01:01.879> trial<00:01:02.879> division<00:01:03.650> what<00:01:04.650> we<00:01:04.769> can<00:01:04.920> do<00:01:05.070> is<00:01:05.400> we

00:01:05.630 --> 00:01:05.640 
is trial division what we can do is we

00:01:05.640 --> 00:01:08.570 
is trial division what we can do is we
can<00:01:05.760> try<00:01:06.119> dividing<00:01:06.720> n<00:01:06.900> by<00:01:07.799> all<00:01:08.070> numbers

00:01:08.570 --> 00:01:08.580 
can try dividing n by all numbers

00:01:08.580 --> 00:01:11.990 
can try dividing n by all numbers
starting<00:01:09.299> 1<00:01:09.600> to<00:01:09.900> n<00:01:10.110> and<00:01:10.590> find<00:01:11.549> out<00:01:11.700> all<00:01:11.729> the

00:01:11.990 --> 00:01:12.000 
starting 1 to n and find out all the

00:01:12.000 --> 00:01:14.390 
starting 1 to n and find out all the
factors<00:01:12.360> so<00:01:12.510> algorithm<00:01:13.110> would<00:01:13.260> go<00:01:13.439> like<00:01:13.650> let's

00:01:14.390 --> 00:01:14.400 
factors so algorithm would go like let's

00:01:14.400 --> 00:01:17.480 
factors so algorithm would go like let's
say<00:01:14.580> we<00:01:14.790> start<00:01:15.119> with<00:01:15.330> an<00:01:15.509> empty<00:01:16.020> list<00:01:16.439> named<00:01:17.250> a

00:01:17.480 --> 00:01:17.490 
say we start with an empty list named a

00:01:17.490 --> 00:01:22.100 
say we start with an empty list named a
and<00:01:18.049> then<00:01:19.049> we<00:01:19.680> run<00:01:19.799> a<00:01:19.860> loop<00:01:20.330> starting<00:01:21.330> 1<00:01:21.810> all

00:01:22.100 --> 00:01:22.110 
and then we run a loop starting 1 all

00:01:22.110 --> 00:01:26.420 
and then we run a loop starting 1 all
the<00:01:22.259> way<00:01:22.350> till<00:01:22.560> n<00:01:23.270> so<00:01:24.270> for<00:01:24.840> I<00:01:24.990> starting<00:01:25.770> 1<00:01:25.979> to<00:01:26.220> n

00:01:26.420 --> 00:01:26.430 
the way till n so for I starting 1 to n

00:01:26.430 --> 00:01:31.330 
the way till n so for I starting 1 to n
if<00:01:26.990> I<00:01:27.990> divides<00:01:28.710> N<00:01:28.979> or<00:01:29.430> in<00:01:30.420> other<00:01:30.600> words<00:01:30.840> n

00:01:31.330 --> 00:01:31.340 
if I divides N or in other words n

00:01:31.340 --> 00:01:37.550 
if I divides N or in other words n
modulo<00:01:32.340> I<00:01:32.520> is<00:01:32.579> 0<00:01:33.119> then<00:01:33.990> we<00:01:34.140> add<00:01:34.320> I<00:01:34.770> to<00:01:35.310> list<00:01:36.210> a<00:01:36.560> so

00:01:37.550 --> 00:01:37.560 
modulo I is 0 then we add I to list a so

00:01:37.560 --> 00:01:40.460 
modulo I is 0 then we add I to list a so
once<00:01:37.740> we<00:01:37.890> exit<00:01:38.280> this<00:01:38.430> loop<00:01:38.490> the<00:01:39.210> list<00:01:39.450> a<00:01:39.720> has

00:01:40.460 --> 00:01:40.470 
once we exit this loop the list a has

00:01:40.470 --> 00:01:43.700 
once we exit this loop the list a has
all<00:01:40.680> the<00:01:40.979> factors<00:01:41.310> of<00:01:41.340> n<00:01:42.200> now<00:01:43.200> there<00:01:43.560> is<00:01:43.680> a

00:01:43.700 --> 00:01:43.710 
all the factors of n now there is a

00:01:43.710 --> 00:01:46.399 
all the factors of n now there is a
simple<00:01:44.159> observation<00:01:44.909> here<00:01:45.119> a<00:01:45.299> number<00:01:45.990> is

00:01:46.399 --> 00:01:46.409 
simple observation here a number is

00:01:46.409 --> 00:01:49.940 
simple observation here a number is
always<00:01:46.710> divided<00:01:47.280> by<00:01:47.430> 1<00:01:47.759> and<00:01:48.000> itself<00:01:48.950> apart

00:01:49.940 --> 00:01:49.950 
always divided by 1 and itself apart

00:01:49.950 --> 00:01:52.850 
always divided by 1 and itself apart
from<00:01:50.070> 1<00:01:50.430> and<00:01:50.610> itself<00:01:51.240> the<00:01:52.049> smallest<00:01:52.380> factor

00:01:52.850 --> 00:01:52.860 
from 1 and itself the smallest factor

00:01:52.860 --> 00:01:55.850 
from 1 and itself the smallest factor
that<00:01:53.310> it<00:01:53.460> can<00:01:53.640> have<00:01:53.880> is<00:01:54.149> 2<00:01:54.630> and<00:01:54.899> the<00:01:55.500> largest

00:01:55.850 --> 00:01:55.860 
that it can have is 2 and the largest

00:01:55.860 --> 00:01:59.380 
that it can have is 2 and the largest
factor<00:01:56.040> that<00:01:56.430> it<00:01:56.579> can<00:01:56.729> have<00:01:56.939> will<00:01:57.899> be<00:01:58.079> n<00:01:58.320> by<00:01:58.770> 2

00:01:59.380 --> 00:01:59.390 
factor that it can have will be n by 2

00:01:59.390 --> 00:02:02.539 
factor that it can have will be n by 2
there<00:02:00.390> would<00:02:00.509> be<00:02:00.540> no<00:02:00.869> factor<00:02:01.290> of<00:02:01.409> n<00:02:01.619> other<00:02:02.250> than

00:02:02.539 --> 00:02:02.549 
there would be no factor of n other than

00:02:02.549 --> 00:02:06.020 
there would be no factor of n other than
n<00:02:02.790> itself<00:02:03.270> after<00:02:03.540> N<00:02:03.840> by<00:02:03.990> 2<00:02:04.070> so<00:02:05.070> we<00:02:05.610> can<00:02:05.759> improve

00:02:06.020 --> 00:02:06.030 
n itself after N by 2 so we can improve

00:02:06.030 --> 00:02:08.690 
n itself after N by 2 so we can improve
this<00:02:06.210> algorithm<00:02:06.719> a<00:02:06.810> little<00:02:06.840> here<00:02:07.429> what<00:02:08.429> we<00:02:08.550> can

00:02:08.690 --> 00:02:08.700 
this algorithm a little here what we can

00:02:08.700 --> 00:02:12.080 
this algorithm a little here what we can
do<00:02:08.849> is<00:02:09.060> let's<00:02:09.899> say<00:02:10.170> instead<00:02:10.830> of<00:02:11.039> starting<00:02:11.970> with

00:02:12.080 --> 00:02:12.090 
do is let's say instead of starting with

00:02:12.090 --> 00:02:13.979 
do is let's say instead of starting with
an<00:02:12.239> empty<00:02:12.720> list<00:02:12.870> we<00:02:13.140> start<00:02:13.470> with

00:02:13.979 --> 00:02:13.989 
an empty list we start with

00:02:13.989 --> 00:02:18.119 
an empty list we start with
1<00:02:14.769> &amp;<00:02:15.040> n<00:02:15.400> already<00:02:16.060> in<00:02:16.629> the<00:02:16.810> list<00:02:17.019> and<00:02:17.260> then<00:02:18.010> we

00:02:18.119 --> 00:02:18.129 
1 &amp; n already in the list and then we

00:02:18.129 --> 00:02:22.619 
1 &amp; n already in the list and then we
can<00:02:18.280> run<00:02:18.489> our<00:02:18.670> loop<00:02:18.969> through<00:02:20.189> to<00:02:21.189> two<00:02:22.060> n<00:02:22.269> by<00:02:22.569> 2

00:02:22.619 --> 00:02:22.629 
can run our loop through to two n by 2

00:02:22.629 --> 00:02:24.990 
can run our loop through to two n by 2
we<00:02:23.260> do<00:02:23.379> not<00:02:23.530> run<00:02:23.799> the<00:02:23.950> loop<00:02:24.129> all<00:02:24.459> the<00:02:24.609> way<00:02:24.730> till

00:02:24.990 --> 00:02:25.000 
we do not run the loop all the way till

00:02:25.000 --> 00:02:27.300 
we do not run the loop all the way till
n<00:02:25.239> this<00:02:25.959> is<00:02:26.019> definitely<00:02:26.680> better<00:02:26.829> than<00:02:27.099> running

00:02:27.300 --> 00:02:27.310 
n this is definitely better than running

00:02:27.310 --> 00:02:31.860 
n this is definitely better than running
loop<00:02:28.000> till<00:02:28.599> n<00:02:29.280> now<00:02:30.280> what<00:02:30.700> will<00:02:30.879> be<00:02:30.909> the<00:02:31.060> running

00:02:31.860 --> 00:02:31.870 
loop till n now what will be the running

00:02:31.870 --> 00:02:34.500 
loop till n now what will be the running
time<00:02:32.079> of<00:02:32.109> this<00:02:32.349> algorithm<00:02:32.879> we<00:02:33.879> have<00:02:34.060> a<00:02:34.269> loop

00:02:34.500 --> 00:02:34.510 
time of this algorithm we have a loop

00:02:34.510 --> 00:02:38.000 
time of this algorithm we have a loop
running<00:02:35.019> till<00:02:35.200> n<00:02:35.349> by<00:02:35.500> 2<00:02:35.560> so<00:02:36.219> the<00:02:37.060> time<00:02:37.359> taken<00:02:37.629> is

00:02:38.000 --> 00:02:38.010 
running till n by 2 so the time taken is

00:02:38.010 --> 00:02:40.949 
running till n by 2 so the time taken is
proportional<00:02:39.010> to<00:02:39.040> n<00:02:39.400> which<00:02:40.209> in<00:02:40.450> other<00:02:40.629> words

00:02:40.949 --> 00:02:40.959 
proportional to n which in other words

00:02:40.959 --> 00:02:44.250 
proportional to n which in other words
we<00:02:41.170> also<00:02:41.409> say<00:02:41.650> that<00:02:42.519> this<00:02:42.700> is<00:02:42.849> Big<00:02:43.120> O<00:02:43.299> of<00:02:43.329> n<00:02:43.810> in

00:02:44.250 --> 00:02:44.260 
we also say that this is Big O of n in

00:02:44.260 --> 00:02:46.679 
we also say that this is Big O of n in
terms<00:02:44.439> of<00:02:44.680> time<00:02:44.889> complexity<00:02:45.419> can<00:02:46.419> we<00:02:46.540> do

00:02:46.679 --> 00:02:46.689 
terms of time complexity can we do

00:02:46.689 --> 00:02:49.199 
terms of time complexity can we do
something<00:02:47.049> better<00:02:47.230> than<00:02:47.530> this<00:02:47.769> well<00:02:48.700> let's

00:02:49.199 --> 00:02:49.209 
something better than this well let's

00:02:49.209 --> 00:02:51.929 
something better than this well let's
see<00:02:49.450> as<00:02:49.720> we<00:02:50.500> know<00:02:50.650> and<00:02:50.919> as<00:02:51.159> we<00:02:51.340> had<00:02:51.459> discussed

00:02:51.929 --> 00:02:51.939 
see as we know and as we had discussed

00:02:51.939 --> 00:02:54.360 
see as we know and as we had discussed
in<00:02:52.150> our<00:02:52.239> previous<00:02:52.720> lesson<00:02:53.109> on<00:02:53.290> parity<00:02:53.950> testing

00:02:54.360 --> 00:02:54.370 
in our previous lesson on parity testing

00:02:54.370 --> 00:02:57.360 
in our previous lesson on parity testing
also<00:02:54.549> if<00:02:54.849> there<00:02:55.389> is<00:02:55.480> a<00:02:55.510> number<00:02:55.989> a<00:02:56.169> that<00:02:56.919> divides

00:02:57.360 --> 00:02:57.370 
also if there is a number a that divides

00:02:57.370 --> 00:03:00.780 
also if there is a number a that divides
number<00:02:58.269> n<00:02:58.530> then<00:02:59.530> there<00:02:59.769> is<00:02:59.859> another<00:02:59.889> number<00:03:00.370> B

00:03:00.780 --> 00:03:00.790 
number n then there is another number B

00:03:00.790 --> 00:03:05.309 
number n then there is another number B
equal<00:03:01.329> n<00:03:01.989> by<00:03:02.590> a<00:03:02.859> that<00:03:03.579> also<00:03:04.090> divides<00:03:04.419> n<00:03:04.599> the

00:03:05.309 --> 00:03:05.319 
equal n by a that also divides n the

00:03:05.319 --> 00:03:07.619 
equal n by a that also divides n the
factors<00:03:05.829> of<00:03:06.069> a<00:03:06.159> number<00:03:06.189> always<00:03:06.849> exist<00:03:07.180> in<00:03:07.299> pair

00:03:07.619 --> 00:03:07.629 
factors of a number always exist in pair

00:03:07.629 --> 00:03:10.589 
factors of a number always exist in pair
and<00:03:07.900> we<00:03:08.079> call<00:03:08.290> them<00:03:08.909> cofactors<00:03:09.909> we<00:03:10.299> always

00:03:10.589 --> 00:03:10.599 
and we call them cofactors we always

00:03:10.599 --> 00:03:13.830 
and we call them cofactors we always
have<00:03:10.750> a<00:03:10.780> relationship<00:03:11.379> like<00:03:11.590> a<00:03:11.889> into<00:03:12.669> B<00:03:12.879> equal

00:03:13.830 --> 00:03:13.840 
have a relationship like a into B equal

00:03:13.840 --> 00:03:17.520 
have a relationship like a into B equal
n<00:03:14.370> for<00:03:15.370> example<00:03:15.400> if<00:03:15.879> we<00:03:16.000> pick<00:03:16.180> up<00:03:16.269> the<00:03:16.510> case<00:03:17.319> of

00:03:17.520 --> 00:03:17.530 
n for example if we pick up the case of

00:03:17.530 --> 00:03:22.259 
n for example if we pick up the case of
36<00:03:18.040> here<00:03:18.250> then<00:03:18.790> if<00:03:18.940> a<00:03:19.120> is<00:03:19.569> 1<00:03:19.709> then<00:03:20.709> B<00:03:20.919> is<00:03:21.220> 36<00:03:21.849> by<00:03:22.030> 1

00:03:22.259 --> 00:03:22.269 
36 here then if a is 1 then B is 36 by 1

00:03:22.269 --> 00:03:28.140 
36 here then if a is 1 then B is 36 by 1
which<00:03:22.419> is<00:03:22.569> 36<00:03:23.079> if<00:03:23.949> a<00:03:24.220> is<00:03:24.519> 2<00:03:24.819> B<00:03:25.060> would<00:03:25.599> be<00:03:25.979> 18<00:03:26.979> if<00:03:27.909> a

00:03:28.140 --> 00:03:28.150 
which is 36 if a is 2 B would be 18 if a

00:03:28.150 --> 00:03:32.009 
which is 36 if a is 2 B would be 18 if a
is<00:03:28.269> 3<00:03:28.569> B<00:03:28.599> would<00:03:29.290> be<00:03:29.319> 12<00:03:29.889> if<00:03:30.189> a<00:03:30.909> is<00:03:31.060> 4<00:03:31.389> B<00:03:31.689> would<00:03:31.900> be

00:03:32.009 --> 00:03:32.019 
is 3 B would be 12 if a is 4 B would be

00:03:32.019 --> 00:03:36.509 
is 3 B would be 12 if a is 4 B would be
9<00:03:32.319> and<00:03:32.650> if<00:03:33.519> a<00:03:33.699> is<00:03:34.090> 6<00:03:34.870> then<00:03:35.530> B<00:03:35.769> is<00:03:35.979> also<00:03:36.250> equal<00:03:36.489> to

00:03:36.509 --> 00:03:36.519 
9 and if a is 6 then B is also equal to

00:03:36.519 --> 00:03:40.140 
9 and if a is 6 then B is also equal to
6<00:03:36.819> this<00:03:37.030> happens<00:03:37.930> only<00:03:38.079> when<00:03:38.349> a<00:03:38.560> is<00:03:39.280> square

00:03:40.140 --> 00:03:40.150 
6 this happens only when a is square

00:03:40.150 --> 00:03:42.449 
6 this happens only when a is square
root<00:03:40.180> of<00:03:40.449> n<00:03:40.599> so<00:03:40.629> in<00:03:40.870> this<00:03:40.959> case<00:03:41.199> 6<00:03:41.470> is<00:03:41.739> square

00:03:42.449 --> 00:03:42.459 
root of n so in this case 6 is square

00:03:42.459 --> 00:03:45.809 
root of n so in this case 6 is square
root<00:03:42.489> of<00:03:42.790> 36<00:03:43.239> so<00:03:44.169> in<00:03:44.319> the<00:03:44.439> case<00:03:44.620> when<00:03:44.889> a<00:03:45.040> is<00:03:45.430> not

00:03:45.809 --> 00:03:45.819 
root of 36 so in the case when a is not

00:03:45.819 --> 00:03:49.140 
root of 36 so in the case when a is not
equal<00:03:46.180> to<00:03:46.209> B<00:03:46.329> and<00:03:47.099> let's<00:03:48.099> say<00:03:48.250> if<00:03:48.459> is<00:03:48.759> the

00:03:49.140 --> 00:03:49.150 
equal to B and let's say if is the

00:03:49.150 --> 00:03:51.599 
equal to B and let's say if is the
smaller<00:03:49.540> one<00:03:49.689> in<00:03:50.049> the<00:03:50.199> pair<00:03:50.439> if<00:03:51.040> a<00:03:51.340> is<00:03:51.400> less

00:03:51.599 --> 00:03:51.609 
smaller one in the pair if a is less

00:03:51.609 --> 00:03:54.089 
smaller one in the pair if a is less
than<00:03:51.669> B<00:03:52.000> then<00:03:52.180> a<00:03:52.359> is<00:03:52.780> less<00:03:53.560> than<00:03:53.769> square<00:03:54.040> root

00:03:54.089 --> 00:03:54.099 
than B then a is less than square root

00:03:54.099 --> 00:03:56.849 
than B then a is less than square root
of<00:03:54.340> n<00:03:54.489> and<00:03:54.669> B<00:03:55.479> is<00:03:55.750> always<00:03:56.139> greater<00:03:56.530> than<00:03:56.620> square

00:03:56.849 --> 00:03:56.859 
of n and B is always greater than square

00:03:56.859 --> 00:04:00.119 
of n and B is always greater than square
root<00:03:57.040> of<00:03:57.280> n<00:03:57.430> and<00:03:57.639> if<00:03:58.239> a<00:03:58.389> is<00:03:58.659> equal<00:03:59.319> to<00:03:59.439> B<00:03:59.590> like<00:03:59.979> in

00:04:00.119 --> 00:04:00.129 
root of n and if a is equal to B like in

00:04:00.129 --> 00:04:02.610 
root of n and if a is equal to B like in
the<00:04:00.189> case<00:04:00.370> of<00:04:00.519> 6<00:04:00.819> here<00:04:01.139> then<00:04:02.139> they<00:04:02.379> are<00:04:02.439> both

00:04:02.610 --> 00:04:02.620 
the case of 6 here then they are both

00:04:02.620 --> 00:04:06.149 
the case of 6 here then they are both
equal<00:04:03.009> to<00:04:03.040> square<00:04:03.250> root<00:04:03.430> of<00:04:03.639> n<00:04:04.799> we<00:04:05.799> can<00:04:05.919> use

00:04:06.149 --> 00:04:06.159 
equal to square root of n we can use

00:04:06.159 --> 00:04:08.280 
equal to square root of n we can use
this<00:04:06.370> property<00:04:06.639> to<00:04:07.000> improve<00:04:07.479> our<00:04:07.659> algorithm

00:04:08.280 --> 00:04:08.290 
this property to improve our algorithm

00:04:08.290 --> 00:04:11.490 
this property to improve our algorithm
so<00:04:09.250> what<00:04:09.459> we<00:04:09.579> can<00:04:09.729> do<00:04:09.849> now<00:04:10.030> is<00:04:10.299> we<00:04:11.079> can<00:04:11.109> again

00:04:11.490 --> 00:04:11.500 
so what we can do now is we can again

00:04:11.500 --> 00:04:15.539 
so what we can do now is we can again
start<00:04:11.650> with<00:04:12.009> an<00:04:12.340> empty<00:04:12.939> list<00:04:13.060> and<00:04:14.159> we<00:04:15.159> can<00:04:15.340> run

00:04:15.539 --> 00:04:15.549 
start with an empty list and we can run

00:04:15.549 --> 00:04:20.460 
start with an empty list and we can run
the<00:04:15.759> loop<00:04:16.320> from<00:04:17.320> 1<00:04:17.769> to<00:04:18.070> square<00:04:18.250> root<00:04:18.489> of<00:04:18.789> n<00:04:19.470> so

00:04:20.460 --> 00:04:20.470 
the loop from 1 to square root of n so

00:04:20.470 --> 00:04:23.070 
the loop from 1 to square root of n so
we<00:04:20.829> say<00:04:21.009> for<00:04:21.370> I<00:04:21.549> starting<00:04:22.270> 1<00:04:22.510> to<00:04:22.750> square<00:04:22.870> root

00:04:23.070 --> 00:04:23.080 
we say for I starting 1 to square root

00:04:23.080 --> 00:04:27.660 
we say for I starting 1 to square root
of<00:04:23.320> n<00:04:23.500> if<00:04:24.180> I<00:04:25.180> divides<00:04:26.050> N<00:04:26.380> or<00:04:26.590> if<00:04:27.039> n<00:04:27.219> modulo

00:04:27.660 --> 00:04:27.670 
of n if I divides N or if n modulo

00:04:27.670 --> 00:04:33.930 
of n if I divides N or if n modulo
I<00:04:27.700> is<00:04:27.910> 0<00:04:29.550> then<00:04:30.550> we<00:04:31.150> add<00:04:31.330> I<00:04:31.660> to<00:04:31.780> list<00:04:32.350> a<00:04:32.500> and<00:04:32.940> we

00:04:33.930 --> 00:04:33.940 
I is 0 then we add I to list a and we

00:04:33.940 --> 00:04:38.040 
I is 0 then we add I to list a and we
also<00:04:34.150> add<00:04:34.540> n<00:04:34.920> upon<00:04:35.920> I<00:04:36.100> to<00:04:36.220> list<00:04:36.640> a<00:04:36.820> so<00:04:37.720> this<00:04:37.840> will

00:04:38.040 --> 00:04:38.050 
also add n upon I to list a so this will

00:04:38.050 --> 00:04:43.020 
also add n upon I to list a so this will
be<00:04:38.200> our<00:04:38.320> a<00:04:38.530> and<00:04:38.950> this<00:04:39.100> will<00:04:39.310> be<00:04:39.430> our<00:04:39.630> B<00:04:41.820> ok<00:04:42.820> we

00:04:43.020 --> 00:04:43.030 
be our a and this will be our B ok we

00:04:43.030 --> 00:04:46.110 
be our a and this will be our B ok we
could<00:04:43.150> have<00:04:43.270> chosen<00:04:43.510> to<00:04:43.720> start<00:04:44.680> with<00:04:44.980> 1<00:04:45.490> and<00:04:45.760> n

00:04:46.110 --> 00:04:46.120 
could have chosen to start with 1 and n

00:04:46.120 --> 00:04:49.680 
could have chosen to start with 1 and n
in<00:04:46.420> the<00:04:46.570> list<00:04:46.860> initially<00:04:47.860> only<00:04:48.030> then<00:04:49.030> we<00:04:49.210> would

00:04:49.680 --> 00:04:49.690 
in the list initially only then we would

00:04:49.690 --> 00:04:52.140 
in the list initially only then we would
be<00:04:49.810> running<00:04:49.990> the<00:04:50.170> loop<00:04:50.350> starting<00:04:50.980> too<00:04:51.250> but<00:04:51.940> if

00:04:52.140 --> 00:04:52.150 
be running the loop starting too but if

00:04:52.150 --> 00:04:54.360 
be running the loop starting too but if
we<00:04:52.480> are<00:04:52.600> running<00:04:52.690> the<00:04:52.900> loop<00:04:53.020> starting<00:04:53.440> 1<00:04:53.650> then

00:04:54.360 --> 00:04:54.370 
we are running the loop starting 1 then

00:04:54.370 --> 00:04:57.180 
we are running the loop starting 1 then
1<00:04:54.610> and<00:04:54.850> n<00:04:55.150> will<00:04:56.050> also<00:04:56.110> come<00:04:56.410> into<00:04:56.590> the<00:04:56.770> list<00:04:56.980> in

00:04:57.180 --> 00:04:57.190 
1 and n will also come into the list in

00:04:57.190 --> 00:05:00.210 
1 and n will also come into the list in
the<00:04:57.790> loop<00:04:57.940> itself<00:04:58.240> now<00:04:59.140> there<00:04:59.380> still<00:04:59.590> is<00:04:59.890> one

00:05:00.210 --> 00:05:00.220 
the loop itself now there still is one

00:05:00.220 --> 00:05:03.750 
the loop itself now there still is one
issue<00:05:00.460> with<00:05:00.820> this<00:05:01.030> code<00:05:02.160> we<00:05:03.160> have<00:05:03.310> we<00:05:03.550> have<00:05:03.670> not

00:05:03.750 --> 00:05:03.760 
issue with this code we have we have not

00:05:03.760 --> 00:05:06.630 
issue with this code we have we have not
handled<00:05:04.150> the<00:05:04.240> case<00:05:04.420> when<00:05:05.170> a<00:05:05.410> is<00:05:05.590> equal<00:05:05.620> to<00:05:06.010> B<00:05:06.190> so

00:05:06.630 --> 00:05:06.640 
handled the case when a is equal to B so

00:05:06.640 --> 00:05:09.180 
handled the case when a is equal to B so
when<00:05:07.060> a<00:05:07.330> is<00:05:07.690> equal<00:05:08.170> to<00:05:08.200> B<00:05:08.470> using<00:05:09.070> this

00:05:09.180 --> 00:05:09.190 
when a is equal to B using this

00:05:09.190 --> 00:05:12.030 
when a is equal to B using this
algorithm<00:05:09.730> we<00:05:09.850> will<00:05:09.880> add<00:05:10.380> the<00:05:11.380> factor<00:05:11.740> twice

00:05:12.030 --> 00:05:12.040 
algorithm we will add the factor twice

00:05:12.040 --> 00:05:15.630 
algorithm we will add the factor twice
in<00:05:12.250> the<00:05:12.340> list<00:05:12.990> so<00:05:13.990> we<00:05:14.140> need<00:05:14.260> to<00:05:14.380> do<00:05:14.530> only<00:05:15.460> a

00:05:15.630 --> 00:05:15.640 
in the list so we need to do only a

00:05:15.640 --> 00:05:18.750 
in the list so we need to do only a
little<00:05:16.000> change<00:05:16.360> to<00:05:16.660> handle<00:05:16.960> this<00:05:17.160> all<00:05:18.160> we<00:05:18.610> need

00:05:18.750 --> 00:05:18.760 
little change to handle this all we need

00:05:18.760 --> 00:05:22.530 
little change to handle this all we need
to<00:05:18.790> say<00:05:19.030> that<00:05:19.270> if<00:05:19.510> I<00:05:20.070> is<00:05:21.070> not<00:05:21.760> equal<00:05:21.820> to<00:05:22.390> square

00:05:22.530 --> 00:05:22.540 
to say that if I is not equal to square

00:05:22.540 --> 00:05:24.570 
to say that if I is not equal to square
root<00:05:22.720> of<00:05:22.960> n<00:05:23.230> which<00:05:23.590> will<00:05:23.740> be<00:05:23.890> the<00:05:23.980> case<00:05:24.190> when<00:05:24.430> a

00:05:24.570 --> 00:05:24.580 
root of n which will be the case when a

00:05:24.580 --> 00:05:28.170 
root of n which will be the case when a
will<00:05:24.850> be<00:05:24.970> equal<00:05:25.000> to<00:05:25.330> B<00:05:25.510> then<00:05:26.290> only<00:05:26.590> add<00:05:26.980> n<00:05:27.340> upon

00:05:28.170 --> 00:05:28.180 
will be equal to B then only add n upon

00:05:28.180 --> 00:05:34.230 
will be equal to B then only add n upon
I<00:05:28.360> to<00:05:28.690> list<00:05:28.930> a<00:05:29.940> as<00:05:31.860> we<00:05:32.860> know<00:05:33.010> when<00:05:33.220> and<00:05:33.700> the

00:05:34.230 --> 00:05:34.240 
I to list a as we know when and the

00:05:34.240 --> 00:05:36.450 
I to list a as we know when and the
cofactors<00:05:34.750> are<00:05:34.870> equal<00:05:35.110> then<00:05:35.890> the<00:05:36.010> factor<00:05:36.310> is

00:05:36.450 --> 00:05:36.460 
cofactors are equal then the factor is

00:05:36.460 --> 00:05:39.570 
cofactors are equal then the factor is
square<00:05:36.970> root<00:05:37.000> of<00:05:37.180> n<00:05:37.740> now<00:05:38.740> a<00:05:38.920> couple<00:05:39.310> of<00:05:39.430> things

00:05:39.570 --> 00:05:39.580 
square root of n now a couple of things

00:05:39.580 --> 00:05:40.020 
square root of n now a couple of things
here

00:05:40.020 --> 00:05:40.030 
here

00:05:40.030 --> 00:05:42.390 
here
I<00:05:40.060> have<00:05:40.510> only<00:05:40.660> written<00:05:41.050> a<00:05:41.110> pseudocode<00:05:41.530> in<00:05:41.950> an

00:05:42.390 --> 00:05:42.400 
I have only written a pseudocode in an

00:05:42.400 --> 00:05:45.150 
I have only written a pseudocode in an
actual<00:05:42.640> program<00:05:42.730> a<00:05:43.240> can<00:05:43.780> be<00:05:43.990> an<00:05:44.200> array<00:05:44.620> or<00:05:44.830> a

00:05:45.150 --> 00:05:45.160 
actual program a can be an array or a

00:05:45.160 --> 00:05:47.340 
actual program a can be an array or a
can<00:05:45.400> be<00:05:45.580> any<00:05:45.820> other<00:05:46.120> dynamic<00:05:46.720> list<00:05:46.900> available

00:05:47.340 --> 00:05:47.350 
can be any other dynamic list available

00:05:47.350 --> 00:05:51.810 
can be any other dynamic list available
in<00:05:48.040> your<00:05:48.130> language<00:05:48.540> like<00:05:49.540> vector<00:05:49.990> in<00:05:50.200> C++<00:05:50.830> when

00:05:51.810 --> 00:05:51.820 
in your language like vector in C++ when

00:05:51.820 --> 00:05:53.340 
in your language like vector in C++ when
we<00:05:51.940> are<00:05:52.030> adding<00:05:52.330> the<00:05:52.420> elements<00:05:52.870> we<00:05:53.080> are<00:05:53.170> not

00:05:53.340 --> 00:05:53.350 
we are adding the elements we are not

00:05:53.350 --> 00:05:56.490 
we are adding the elements we are not
adding<00:05:53.890> them<00:05:54.100> in<00:05:54.760> a<00:05:54.910> sorted<00:05:55.360> order<00:05:55.540> so<00:05:56.350> the

00:05:56.490 --> 00:05:56.500 
adding them in a sorted order so the

00:05:56.500 --> 00:05:58.860 
adding them in a sorted order so the
factors<00:05:56.860> in<00:05:56.980> the<00:05:57.070> list<00:05:57.280> will<00:05:57.550> not<00:05:57.730> appear<00:05:58.210> in

00:05:58.860 --> 00:05:58.870 
factors in the list will not appear in

00:05:58.870 --> 00:06:01.650 
factors in the list will not appear in
an<00:05:59.080> increasing<00:05:59.680> order<00:05:59.830> if<00:06:00.130> we<00:06:00.820> want<00:06:01.090> a<00:06:01.240> sorted

00:06:01.650 --> 00:06:01.660 
an increasing order if we want a sorted

00:06:01.660 --> 00:06:03.450 
an increasing order if we want a sorted
list<00:06:01.690> then<00:06:02.530> we<00:06:02.710> need<00:06:02.830> to<00:06:02.980> do<00:06:03.130> some

00:06:03.450 --> 00:06:03.460 
list then we need to do some

00:06:03.460 --> 00:06:06.000 
list then we need to do some
modifications<00:06:03.700> to<00:06:04.120> the<00:06:04.300> algorithm<00:06:04.890> to<00:06:05.890> add

00:06:06.000 --> 00:06:06.010 
modifications to the algorithm to add

00:06:06.010 --> 00:06:08.460 
modifications to the algorithm to add
the<00:06:06.190> factors<00:06:06.520> in<00:06:06.670> a<00:06:06.760> sorted<00:06:07.090> manner<00:06:07.330> I<00:06:07.630> leave

00:06:08.460 --> 00:06:08.470 
the factors in a sorted manner I leave

00:06:08.470 --> 00:06:10.950 
the factors in a sorted manner I leave
that<00:06:08.710> as<00:06:08.950> an<00:06:09.310> exercise<00:06:09.550> for<00:06:09.910> you<00:06:09.970> ok<00:06:10.720> so<00:06:10.780> what

00:06:10.950 --> 00:06:10.960 
that as an exercise for you ok so what

00:06:10.960 --> 00:06:12.600 
that as an exercise for you ok so what
will<00:06:11.110> be<00:06:11.140> the<00:06:11.620> running<00:06:11.830> time<00:06:12.130> or<00:06:12.280> the<00:06:12.400> time

00:06:12.600 --> 00:06:12.610 
will be the running time or the time

00:06:12.610 --> 00:06:15.060 
will be the running time or the time
complexity<00:06:13.090> of<00:06:13.210> this<00:06:13.390> algorithm<00:06:13.890> we<00:06:14.890> have<00:06:15.040> a

00:06:15.060 --> 00:06:15.070 
complexity of this algorithm we have a

00:06:15.070 --> 00:06:19.290 
complexity of this algorithm we have a
loop<00:06:15.420> running<00:06:16.420> 1<00:06:17.110> to<00:06:17.950> square<00:06:18.250> root<00:06:18.280> of<00:06:18.460> n<00:06:18.640> so

00:06:19.290 --> 00:06:19.300 
loop running 1 to square root of n so

00:06:19.300 --> 00:06:20.700 
loop running 1 to square root of n so
clearly<00:06:19.540> the<00:06:19.810> time<00:06:20.020> taken<00:06:20.380> here<00:06:20.530> is

00:06:20.700 --> 00:06:20.710 
clearly the time taken here is

00:06:20.710 --> 00:06:23.040 
clearly the time taken here is
proportional<00:06:21.340> to<00:06:21.370> square<00:06:21.640> root<00:06:21.850> of<00:06:22.060> n<00:06:22.240> we<00:06:22.930> have

00:06:23.040 --> 00:06:23.050 
proportional to square root of n we have

00:06:23.050 --> 00:06:24.420 
proportional to square root of n we have
just<00:06:23.260> one<00:06:23.440> loop<00:06:23.620> running<00:06:23.920> till<00:06:24.070> square<00:06:24.310> root

00:06:24.420 --> 00:06:24.430 
just one loop running till square root

00:06:24.430 --> 00:06:27.470 
just one loop running till square root
of<00:06:24.550> n<00:06:24.700> or<00:06:25.000> in<00:06:25.240> other<00:06:25.390> words<00:06:25.630> this<00:06:26.020> is<00:06:26.230> Big<00:06:26.440> O<00:06:26.650> of

00:06:27.470 --> 00:06:27.480 
of n or in other words this is Big O of

00:06:27.480 --> 00:06:31.080 
of n or in other words this is Big O of
square<00:06:28.480> root<00:06:28.660> of<00:06:28.780> n<00:06:29.020> in<00:06:29.410> terms<00:06:29.920> of<00:06:30.100> Big<00:06:30.940> O

00:06:31.080 --> 00:06:31.090 
square root of n in terms of Big O

00:06:31.090 --> 00:06:33.450 
square root of n in terms of Big O
notation<00:06:31.390> the<00:06:31.810> time<00:06:31.990> complexity<00:06:32.470> is<00:06:32.590> big<00:06:33.280> o<00:06:33.430> of

00:06:33.450 --> 00:06:33.460 
notation the time complexity is big o of

00:06:33.460 --> 00:06:36.150 
notation the time complexity is big o of
square<00:06:33.670> root<00:06:34.090> of<00:06:34.120> n<00:06:34.420> Big<00:06:35.140> O<00:06:35.320> of<00:06:35.350> square<00:06:35.860> root<00:06:36.010> of

00:06:36.150 --> 00:06:36.160 
square root of n Big O of square root of

00:06:36.160 --> 00:06:39.630 
square root of n Big O of square root of
n<00:06:36.370> is<00:06:36.550> a<00:06:37.090> lot<00:06:37.420> lot<00:06:37.750> lot<00:06:38.080> better<00:06:38.140> than<00:06:38.830> Big<00:06:39.430> O<00:06:39.610> of

00:06:39.630 --> 00:06:39.640 
n is a lot lot lot better than Big O of

00:06:39.640 --> 00:06:41.210 
n is a lot lot lot better than Big O of
n<00:06:40.030> algorithm<00:06:40.420> any

00:06:41.210 --> 00:06:41.220 
n algorithm any

00:06:41.220 --> 00:06:43.670 
n algorithm any
and<00:06:41.640> algorithm<00:06:42.240> so<00:06:42.840> this<00:06:42.990> was<00:06:43.170> finding<00:06:43.560> out

00:06:43.670 --> 00:06:43.680 
and algorithm so this was finding out

00:06:43.680 --> 00:06:45.740 
and algorithm so this was finding out
all<00:06:43.890> the<00:06:44.010> factors<00:06:44.370> of<00:06:44.400> a<00:06:44.610> number<00:06:44.850> in<00:06:45.330> the<00:06:45.630> next

00:06:45.740 --> 00:06:45.750 
all the factors of a number in the next

00:06:45.750 --> 00:06:48.890 
all the factors of a number in the next
lesson<00:06:46.140> we<00:06:46.290> will<00:06:46.440> see<00:06:47.430> algorithm<00:06:48.270> to<00:06:48.450> find<00:06:48.660> out

00:06:48.890 --> 00:06:48.900 
lesson we will see algorithm to find out

00:06:48.900 --> 00:06:51.320 
lesson we will see algorithm to find out
prime<00:06:49.500> factorization<00:06:50.340> of<00:06:50.430> a<00:06:50.550> number<00:06:50.580> so

00:06:51.320 --> 00:06:51.330 
prime factorization of a number so

00:06:51.330 --> 00:06:54.050 
prime factorization of a number so
thanks<00:06:51.600> for<00:06:51.720> watching

