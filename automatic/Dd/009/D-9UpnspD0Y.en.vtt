WEBVTT
Kind: captions
Language: en

00:00:00.949 --> 00:00:03.500 

introduction<00:00:01.949> to<00:00:02.100> computer<00:00:02.580> memory<00:00:02.970> I<00:00:03.149> have

00:00:03.500 --> 00:00:03.510 
introduction to computer memory I have

00:00:03.510 --> 00:00:06.860 
introduction to computer memory I have
any<00:00:03.720> register<00:00:05.060> when<00:00:06.060> you<00:00:06.150> think<00:00:06.420> about<00:00:06.509> it

00:00:06.860 --> 00:00:06.870 
any register when you think about it

00:00:06.870 --> 00:00:08.870 
any register when you think about it
it's<00:00:07.259> amazing<00:00:07.799> how<00:00:07.890> many<00:00:08.010> different<00:00:08.160> types<00:00:08.580> of

00:00:08.870 --> 00:00:08.880 
it's amazing how many different types of

00:00:08.880 --> 00:00:11.240 
it's amazing how many different types of
electronic<00:00:09.360> memory<00:00:09.690> you<00:00:10.290> encounter<00:00:10.740> in<00:00:10.920> daily

00:00:11.240 --> 00:00:11.250 
electronic memory you encounter in daily

00:00:11.250 --> 00:00:13.640 
electronic memory you encounter in daily
life<00:00:11.300> you<00:00:12.300> already<00:00:12.660> know<00:00:12.870> that<00:00:13.019> the<00:00:13.139> computer

00:00:13.640 --> 00:00:13.650 
life you already know that the computer

00:00:13.650 --> 00:00:15.709 
life you already know that the computer
in<00:00:13.769> front<00:00:13.920> of<00:00:14.130> the<00:00:14.250> it<00:00:14.340> has<00:00:14.519> memory<00:00:14.790> but<00:00:15.630> you

00:00:15.709 --> 00:00:15.719 
in front of the it has memory but you

00:00:15.719 --> 00:00:17.689 
in front of the it has memory but you
may<00:00:15.870> not<00:00:16.080> know<00:00:16.320> is<00:00:16.619> most<00:00:17.010> of<00:00:17.100> the<00:00:17.190> electronic

00:00:17.689 --> 00:00:17.699 
may not know is most of the electronic

00:00:17.699 --> 00:00:19.730 
may not know is most of the electronic
items<00:00:18.119> you<00:00:18.210> use<00:00:18.390> everyday<00:00:18.779> have<00:00:19.109> some<00:00:19.350> form<00:00:19.650> of

00:00:19.730 --> 00:00:19.740 
items you use everyday have some form of

00:00:19.740 --> 00:00:22.550 
items you use everyday have some form of
memory<00:00:20.070> also<00:00:20.279> each<00:00:21.210> of<00:00:21.449> these<00:00:21.570> devices<00:00:21.930> uses<00:00:22.529> a

00:00:22.550 --> 00:00:22.560 
memory also each of these devices uses a

00:00:22.560 --> 00:00:24.080 
memory also each of these devices uses a
different<00:00:22.859> type<00:00:23.130> of<00:00:23.160> memory<00:00:23.460> in<00:00:23.640> different

00:00:24.080 --> 00:00:24.090 
different type of memory in different

00:00:24.090 --> 00:00:27.890 
different type of memory in different
ways<00:00:25.490> although<00:00:26.490> memory<00:00:26.880> is<00:00:27.090> technically<00:00:27.599> any

00:00:27.890 --> 00:00:27.900 
ways although memory is technically any

00:00:27.900 --> 00:00:30.410 
ways although memory is technically any
form<00:00:28.199> of<00:00:28.289> electronic<00:00:28.769> storage<00:00:29.220> is<00:00:29.550> used<00:00:30.150> most

00:00:30.410 --> 00:00:30.420 
form of electronic storage is used most

00:00:30.420 --> 00:00:32.659 
form of electronic storage is used most
often<00:00:30.660> to<00:00:30.840> identify<00:00:31.380> the<00:00:31.410> fast<00:00:31.890> temporary

00:00:32.659 --> 00:00:32.669 
often to identify the fast temporary

00:00:32.669 --> 00:00:35.389 
often to identify the fast temporary
forms<00:00:33.000> of<00:00:33.120> storage<00:00:33.480> if<00:00:33.870> your<00:00:34.410> computer<00:00:34.860> CPU

00:00:35.389 --> 00:00:35.399 
forms of storage if your computer CPU

00:00:35.399 --> 00:00:37.400 
forms of storage if your computer CPU
had<00:00:35.700> to<00:00:35.850> constantly<00:00:36.149> access<00:00:36.719> the<00:00:36.899> hard<00:00:37.050> drives

00:00:37.400 --> 00:00:37.410 
had to constantly access the hard drives

00:00:37.410 --> 00:00:39.049 
had to constantly access the hard drives
to<00:00:37.590> retrieve<00:00:37.890> every<00:00:38.250> piece<00:00:38.430> of<00:00:38.460> data<00:00:38.640> it<00:00:39.030> needs

00:00:39.049 --> 00:00:39.059 
to retrieve every piece of data it needs

00:00:39.059 --> 00:00:42.350 
to retrieve every piece of data it needs
it<00:00:39.780> will<00:00:39.989> operate<00:00:40.110> very<00:00:40.649> slowly<00:00:41.239> when<00:00:42.239> the

00:00:42.350 --> 00:00:42.360 
it will operate very slowly when the

00:00:42.360 --> 00:00:44.930 
it will operate very slowly when the
information<00:00:42.629> is<00:00:43.079> kept<00:00:43.350> in<00:00:43.530> memory<00:00:43.890> the<00:00:44.370> CPU

00:00:44.930 --> 00:00:44.940 
information is kept in memory the CPU

00:00:44.940 --> 00:00:47.600 
information is kept in memory the CPU
can<00:00:45.149> access<00:00:45.539> it<00:00:45.690> more<00:00:45.870> quickly<00:00:46.190> most<00:00:47.190> forms<00:00:47.520> of

00:00:47.600 --> 00:00:47.610 
can access it more quickly most forms of

00:00:47.610 --> 00:00:49.010 
can access it more quickly most forms of
memory<00:00:47.910> are<00:00:48.030> intended<00:00:48.360> to<00:00:48.510> store<00:00:48.840> data

00:00:49.010 --> 00:00:49.020 
memory are intended to store data

00:00:49.020 --> 00:00:50.800 
memory are intended to store data
temporarily

00:00:50.800 --> 00:00:50.810 
temporarily

00:00:50.810 --> 00:00:53.320 
temporarily
by<00:00:51.410> the<00:00:51.470> way<00:00:51.800> here's<00:00:52.310> some<00:00:52.610> quick<00:00:52.790> turns<00:00:53.060> so

00:00:53.320 --> 00:00:53.330 
by the way here's some quick turns so

00:00:53.330 --> 00:00:55.450 
by the way here's some quick turns so
you<00:00:53.450> should<00:00:53.630> come<00:00:53.810> familiar<00:00:54.380> with<00:00:54.560> before<00:00:55.310> we

00:00:55.450 --> 00:00:55.460 
you should come familiar with before we

00:00:55.460 --> 00:00:57.070 
you should come familiar with before we
continue<00:00:55.640> as<00:00:56.180> they<00:00:56.450> may<00:00:56.600> appear<00:00:56.900> often

00:00:57.070 --> 00:00:57.080 
continue as they may appear often

00:00:57.080 --> 00:01:02.170 
continue as they may appear often
throughout<00:00:57.410> the<00:00:57.560> presentation

00:01:02.170 --> 00:01:02.180 

00:01:02.180 --> 00:01:04.960 

as<00:01:02.390> you<00:01:02.870> can<00:01:03.020> see<00:01:03.230> in<00:01:03.350> the<00:01:03.440> diagram<00:01:03.970> CPU

00:01:04.960 --> 00:01:04.970 
as you can see in the diagram CPU

00:01:04.970 --> 00:01:07.360 
as you can see in the diagram CPU
accesses<00:01:05.210> memory<00:01:06.140> according<00:01:06.530> to<00:01:06.800> a<00:01:06.830> distinct

00:01:07.360 --> 00:01:07.370 
accesses memory according to a distinct

00:01:07.370 --> 00:01:09.280 
accesses memory according to a distinct
hierarchy<00:01:07.910> whether<00:01:08.780> it<00:01:09.020> comes<00:01:09.200> from

00:01:09.280 --> 00:01:09.290 
hierarchy whether it comes from

00:01:09.290 --> 00:01:11.620 
hierarchy whether it comes from
permanent<00:01:09.650> storage<00:01:10.160> the<00:01:10.790> hard<00:01:11.030> drive<00:01:11.330> or

00:01:11.620 --> 00:01:11.630 
permanent storage the hard drive or

00:01:11.630 --> 00:01:14.650 
permanent storage the hard drive or
input<00:01:12.350> the<00:01:12.650> keyboard<00:01:13.130> most<00:01:13.820> articles<00:01:14.180> and

00:01:14.650 --> 00:01:14.660 
input the keyboard most articles and

00:01:14.660 --> 00:01:18.070 
input the keyboard most articles and
random<00:01:15.020> access<00:01:15.410> memory<00:01:15.830> are<00:01:16.130> am<00:01:17.080> the

00:01:18.070 --> 00:01:18.080 
random access memory are am the

00:01:18.080 --> 00:01:20.080 
random access memory are am the
computers<00:01:18.560> and<00:01:18.770> storage<00:01:19.130> pieces<00:01:19.490> of<00:01:19.640> data<00:01:19.790> it

00:01:20.080 --> 00:01:20.090 
computers and storage pieces of data it

00:01:20.090 --> 00:01:22.359 
computers and storage pieces of data it
will<00:01:20.120> need<00:01:20.420> to<00:01:20.450> access<00:01:20.750> often<00:01:21.619> in<00:01:21.740> a<00:01:21.800> cache<00:01:22.040> and

00:01:22.359 --> 00:01:22.369 
will need to access often in a cache and

00:01:22.369 --> 00:01:24.820 
will need to access often in a cache and
maintain<00:01:23.330> certain<00:01:23.660> special<00:01:24.170> instructions<00:01:24.710> in

00:01:24.820 --> 00:01:24.830 
maintain certain special instructions in

00:01:24.830 --> 00:01:29.109 
maintain certain special instructions in
a<00:01:24.920> register<00:01:26.110> that's<00:01:27.110> powerful<00:01:27.680> CPUs<00:01:28.520> need

00:01:29.109 --> 00:01:29.119 
a register that's powerful CPUs need

00:01:29.119 --> 00:01:31.450 
a register that's powerful CPUs need
quick<00:01:29.390> and<00:01:29.540> easy<00:01:29.720> access<00:01:30.260> to<00:01:30.530> large<00:01:31.070> amounts

00:01:31.450 --> 00:01:31.460 
quick and easy access to large amounts

00:01:31.460 --> 00:01:33.010 
quick and easy access to large amounts
of<00:01:31.550> data<00:01:31.729> in<00:01:31.940> order<00:01:32.119> to<00:01:32.330> maximize<00:01:32.780> their

00:01:33.010 --> 00:01:33.020 
of data in order to maximize their

00:01:33.020 --> 00:01:35.590 
of data in order to maximize their
performance<00:01:33.619> and<00:01:33.740> run<00:01:33.920> smoothly<00:01:34.310> if<00:01:34.940> the<00:01:35.180> CPU

00:01:35.590 --> 00:01:35.600 
performance and run smoothly if the CPU

00:01:35.600 --> 00:01:37.510 
performance and run smoothly if the CPU
cannot<00:01:35.990> get<00:01:36.200> the<00:01:36.350> data<00:01:36.530> it<00:01:36.740> needs<00:01:36.770> it

00:01:37.510 --> 00:01:37.520 
cannot get the data it needs it

00:01:37.520 --> 00:01:39.270 
cannot get the data it needs it
literally<00:01:38.030> stops<00:01:38.390> and<00:01:38.630> wait<00:01:38.780> for<00:01:39.050> it

00:01:39.270 --> 00:01:39.280 
literally stops and wait for it

00:01:39.280 --> 00:01:41.800 
literally stops and wait for it
therefore<00:01:40.280> to<00:01:40.790> make<00:01:40.940> sure<00:01:41.090> every<00:01:41.360> process

00:01:41.800 --> 00:01:41.810 
therefore to make sure every process

00:01:41.810 --> 00:01:43.870 
therefore to make sure every process
runs<00:01:42.080> quickly<00:01:42.350> and<00:01:42.710> smoothly<00:01:42.979> a<00:01:43.369> typical

00:01:43.870 --> 00:01:43.880 
runs quickly and smoothly a typical

00:01:43.880 --> 00:01:47.160 
runs quickly and smoothly a typical
computer<00:01:44.390> has<00:01:44.979> level<00:01:45.979> 1<00:01:46.160> and<00:01:46.190> level<00:01:46.369> 2<00:01:46.640> cache

00:01:47.160 --> 00:01:47.170 
computer has level 1 and level 2 cache

00:01:47.170 --> 00:01:50.320 
computer has level 1 and level 2 cache
normal<00:01:48.170> system<00:01:48.530> ram<00:01:48.710> and<00:01:49.040> virtual<00:01:49.520> memory<00:01:49.759> and

00:01:50.320 --> 00:01:50.330 
normal system ram and virtual memory and

00:01:50.330 --> 00:01:53.920 
normal system ram and virtual memory and
also<00:01:50.720> a<00:01:50.750> hard<00:01:51.020> disk<00:01:51.880> system<00:01:52.880> ram<00:01:53.119> speed<00:01:53.450> is

00:01:53.920 --> 00:01:53.930 
also a hard disk system ram speed is

00:01:53.930 --> 00:01:55.990 
also a hard disk system ram speed is
controlled<00:01:54.500> by<00:01:54.590> bus<00:01:54.950> width<00:01:55.220> and<00:01:55.460> bus<00:01:55.670> speed

00:01:55.990 --> 00:01:56.000 
controlled by bus width and bus speed

00:01:56.000 --> 00:01:58.600 
controlled by bus width and bus speed
bus<00:01:56.810> with<00:01:57.110> refers<00:01:57.590> to<00:01:57.860> the<00:01:57.979> number<00:01:58.009> of<00:01:58.399> bits

00:01:58.600 --> 00:01:58.610 
bus with refers to the number of bits

00:01:58.610 --> 00:02:00.270 
bus with refers to the number of bits
that<00:01:58.880> can<00:01:59.060> be<00:01:59.149> sent<00:01:59.420> to<00:01:59.600> the<00:01:59.630> cpu

00:02:00.270 --> 00:02:00.280 
that can be sent to the cpu

00:02:00.280 --> 00:02:03.010 
that can be sent to the cpu
simultaneously<00:02:01.280> and<00:02:01.520> bus<00:02:02.270> speed<00:02:02.600> your<00:02:02.780> first

00:02:03.010 --> 00:02:03.020 
simultaneously and bus speed your first

00:02:03.020 --> 00:02:04.900 
simultaneously and bus speed your first
at<00:02:03.200> a<00:02:03.259> number<00:02:03.440> of<00:02:03.619> time<00:02:03.860> a<00:02:03.890> group<00:02:04.310> of<00:02:04.490> this<00:02:04.700> can

00:02:04.900 --> 00:02:04.910 
at a number of time a group of this can

00:02:04.910 --> 00:02:07.570 
at a number of time a group of this can
be<00:02:05.030> set<00:02:05.240> each<00:02:05.479> second<00:02:05.930> a<00:02:06.140> bus<00:02:06.860> cycle<00:02:07.280> occurs

00:02:07.570 --> 00:02:07.580 
be set each second a bus cycle occurs

00:02:07.580 --> 00:02:11.680 
be set each second a bus cycle occurs
every<00:02:08.119> time<00:02:08.299> data<00:02:08.630> travels<00:02:09.140> for<00:02:09.320> me<00:02:09.619> to<00:02:09.830> CPU

00:02:11.680 --> 00:02:11.690 
every time data travels for me to CPU

00:02:11.690 --> 00:02:14.320 
every time data travels for me to CPU
cash<00:02:12.350> are<00:02:12.770> designed<00:02:13.250> to<00:02:13.430> alleviate<00:02:13.820> this

00:02:14.320 --> 00:02:14.330 
cash are designed to alleviate this

00:02:14.330 --> 00:02:17.710 
cash are designed to alleviate this
bottleneck<00:02:14.780> by<00:02:15.230> making<00:02:15.620> the<00:02:15.790> data<00:02:16.790> use<00:02:17.300> most

00:02:17.710 --> 00:02:17.720 
bottleneck by making the data use most

00:02:17.720 --> 00:02:19.240 
bottleneck by making the data use most
often<00:02:17.990> by<00:02:18.200> the<00:02:18.350> computer<00:02:18.800> instantly

00:02:19.240 --> 00:02:19.250 
often by the computer instantly

00:02:19.250 --> 00:02:21.370 
often by the computer instantly
available<00:02:19.540> this<00:02:20.540> is<00:02:20.690> accomplished<00:02:20.840> rather

00:02:21.370 --> 00:02:21.380 
available this is accomplished rather

00:02:21.380 --> 00:02:23.440 
available this is accomplished rather
than<00:02:21.590> a<00:02:21.740> small<00:02:22.010> amount<00:02:22.310> of<00:02:22.400> memory<00:02:22.550> known<00:02:23.270> as

00:02:23.440 --> 00:02:23.450 
than a small amount of memory known as

00:02:23.450 --> 00:02:26.050 
than a small amount of memory known as
primary<00:02:23.930> level<00:02:24.110> one<00:02:24.440> cache<00:02:24.740> right<00:02:25.640> into<00:02:25.910> the

00:02:26.050 --> 00:02:26.060 
primary level one cache right into the

00:02:26.060 --> 00:02:28.780 
primary level one cache right into the
CPU<00:02:26.590> level<00:02:27.590> one<00:02:27.740> cache<00:02:27.920> is<00:02:28.220> very<00:02:28.460> strong

00:02:28.780 --> 00:02:28.790 
CPU level one cache is very strong

00:02:28.790 --> 00:02:31.900 
CPU level one cache is very strong
normally<00:02:29.510> raging<00:02:29.960> between<00:02:30.080> two<00:02:30.800> kilo<00:02:31.670> bytes

00:02:31.900 --> 00:02:31.910 
normally raging between two kilo bytes

00:02:31.910 --> 00:02:36.520 
normally raging between two kilo bytes
and<00:02:32.740> 64<00:02:33.740> kilobytes<00:02:34.330> the<00:02:35.330> secondary<00:02:35.840> level<00:02:35.930> or

00:02:36.520 --> 00:02:36.530 
and 64 kilobytes the secondary level or

00:02:36.530 --> 00:02:38.740 
and 64 kilobytes the secondary level or
level<00:02:36.980> two<00:02:37.160> cache<00:02:37.400> typically<00:02:37.970> resides<00:02:38.390> on<00:02:38.630> the

00:02:38.740 --> 00:02:38.750 
level two cache typically resides on the

00:02:38.750 --> 00:02:41.320 
level two cache typically resides on the
memory<00:02:38.900> card<00:02:39.080> located<00:02:39.830> near<00:02:39.980> the<00:02:40.010> CPU<00:02:40.550> the

00:02:41.320 --> 00:02:41.330 
memory card located near the CPU the

00:02:41.330 --> 00:02:43.000 
memory card located near the CPU the
level<00:02:41.660> two<00:02:41.810> cache<00:02:41.990> has<00:02:42.260> a<00:02:42.320> direct<00:02:42.650> connection

00:02:43.000 --> 00:02:43.010 
level two cache has a direct connection

00:02:43.010 --> 00:02:46.660 
level two cache has a direct connection
to<00:02:43.250> the<00:02:43.520> CPU<00:02:44.050> depending<00:02:45.050> on<00:02:45.200> the<00:02:45.320> CPU<00:02:45.860> the<00:02:46.400> size

00:02:46.660 --> 00:02:46.670 
to the CPU depending on the CPU the size

00:02:46.670 --> 00:02:50.140 
to the CPU depending on the CPU the size
of<00:02:46.910> the<00:02:47.000> level<00:02:47.300> two<00:02:47.450> cache<00:02:47.690> ranges<00:02:48.380> from<00:02:49.150> 256

00:02:50.140 --> 00:02:50.150 
of the level two cache ranges from 256

00:02:50.150 --> 00:02:53.920 
of the level two cache ranges from 256
to<00:02:51.080> 2<00:02:51.440> megabytes

00:02:53.920 --> 00:02:53.930 
to 2 megabytes

00:02:53.930 --> 00:02:55.899 
to 2 megabytes
for<00:02:54.530> more<00:02:54.739> information<00:02:55.099> on<00:02:55.670> this<00:02:55.849> topic

00:02:55.899 --> 00:02:55.909 
for more information on this topic

00:02:55.909 --> 00:02:59.170 
for more information on this topic
please<00:02:56.599> visit<00:02:56.739> howstuffworks<00:02:57.739> com<00:02:58.000> this<00:02:59.000> is

00:02:59.170 --> 00:02:59.180 
please visit howstuffworks com this is

00:02:59.180 --> 00:03:02.000 
please visit howstuffworks com this is
the<00:02:59.329> credit<00:02:59.629> for<00:02:59.780> the<00:02:59.870> presentation

00:03:02.000 --> 00:03:02.010 
the credit for the presentation

00:03:02.010 --> 00:03:04.340 
the credit for the presentation
fit<00:03:02.159> in

