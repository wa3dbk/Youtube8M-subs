WEBVTT
Kind: captions
Language: en

00:00:05.180 --> 00:00:08.270 

if<00:00:06.180> you<00:00:06.359> look<00:00:06.660> at<00:00:06.839> this<00:00:06.990> slide<00:00:07.290> here<00:00:07.980> we<00:00:08.250> are

00:00:08.270 --> 00:00:08.280 
if you look at this slide here we are

00:00:08.280 --> 00:00:14.950 
if you look at this slide here we are
having<00:00:09.380> 64<00:00:10.380> K<00:00:10.740> by<00:00:11.040> 1<00:00:11.179> 1<00:00:12.179> bit<00:00:12.360> static<00:00:13.230> Ram<00:00:13.440> mine

00:00:14.950 --> 00:00:14.960 
having 64 K by 1 1 bit static Ram mine

00:00:14.960 --> 00:00:21.769 
having 64 K by 1 1 bit static Ram mine
static<00:00:15.960> none<00:00:16.670> no<00:00:18.830> look<00:00:19.830> at<00:00:19.980> here<00:00:20.220> here<00:00:20.640> 256<00:00:21.480> by

00:00:21.769 --> 00:00:21.779 
static none no look at here here 256 by

00:00:21.779 --> 00:00:25.330 
static none no look at here here 256 by
256<00:00:22.230> salary<00:00:23.100> okay

00:00:25.330 --> 00:00:25.340 
256 salary okay

00:00:25.340 --> 00:00:30.200 
256 salary okay
in<00:00:26.340> general<00:00:27.470> the<00:00:28.470> address<00:00:28.830> will<00:00:29.160> be<00:00:29.369> divided

00:00:30.200 --> 00:00:30.210 
in general the address will be divided

00:00:30.210 --> 00:00:32.120 
in general the address will be divided
into<00:00:30.359> two<00:00:30.630> parts<00:00:30.990> first<00:00:31.050> one<00:00:31.410> is<00:00:31.560> row<00:00:31.949> decoder

00:00:32.120 --> 00:00:32.130 
into two parts first one is row decoder

00:00:32.130 --> 00:00:34.010 
into two parts first one is row decoder
and<00:00:32.520> second<00:00:32.790> one<00:00:32.910> is<00:00:32.940> column<00:00:33.420> decoder<00:00:33.570> okay

00:00:34.010 --> 00:00:34.020 
and second one is column decoder okay

00:00:34.020 --> 00:00:39.410 
and second one is column decoder okay
now<00:00:34.920> this<00:00:35.850> is<00:00:35.969> our<00:00:36.290> celery<00:00:37.290> okay

00:00:39.410 --> 00:00:39.420 
now this is our celery okay

00:00:39.420 --> 00:00:42.850 
now this is our celery okay
this<00:00:39.989> row<00:00:40.530> decoder<00:00:40.770> this<00:00:41.760> is<00:00:41.879> a<00:00:41.910> row<00:00:42.149> decoder

00:00:42.850 --> 00:00:42.860 
this row decoder this is a row decoder

00:00:42.860 --> 00:00:46.310 
this row decoder this is a row decoder
look<00:00:43.860> at<00:00:43.980> here<00:00:44.219> the<00:00:44.489> row<00:00:44.670> address<00:00:44.820> is<00:00:45.270> from<00:00:45.539> 0

00:00:46.310 --> 00:00:46.320 
look at here the row address is from 0

00:00:46.320 --> 00:00:50.450 
look at here the row address is from 0
to<00:00:46.410> 7<00:00:47.539> so<00:00:48.539> how<00:00:48.629> many<00:00:48.690> bits<00:00:48.989> totally<00:00:49.829> eight<00:00:50.190> bits

00:00:50.450 --> 00:00:50.460 
to 7 so how many bits totally eight bits

00:00:50.460 --> 00:00:54.040 
to 7 so how many bits totally eight bits
so<00:00:51.270> by<00:00:51.449> using<00:00:51.660> 8<00:00:52.079> bits<00:00:52.289> we<00:00:52.559> can<00:00:52.800> decode<00:00:53.309> up<00:00:53.579> to

00:00:54.040 --> 00:00:54.050 
so by using 8 bits we can decode up to

00:00:54.050 --> 00:00:58.160 
so by using 8 bits we can decode up to
256<00:00:55.050> combinations<00:00:55.860> right<00:00:56.780> that's<00:00:57.780> why<00:00:57.899> here

00:00:58.160 --> 00:00:58.170 
256 combinations right that's why here

00:00:58.170 --> 00:00:59.930 
256 combinations right that's why here
what<00:00:58.320> they<00:00:58.469> mentioned<00:00:58.800> selecting<00:00:59.699> rows

00:00:59.930 --> 00:00:59.940 
what they mentioned selecting rows

00:00:59.940 --> 00:01:04.840 
what they mentioned selecting rows
separately<00:01:00.690> from<00:01:00.899> columns<00:01:01.440> means<00:01:02.270> 256<00:01:03.270> by<00:01:04.140> 2

00:01:04.840 --> 00:01:04.850 
separately from columns means 256 by 2

00:01:04.850 --> 00:01:07.910 
separately from columns means 256 by 2
that<00:01:05.850> is<00:01:05.909> nothing<00:01:06.119> but<00:01:06.270> fight<00:01:06.659> well<00:01:06.960> circuit

00:01:07.910 --> 00:01:07.920 
that is nothing but fight well circuit

00:01:07.920 --> 00:01:14.890 
that is nothing but fight well circuit
elements<00:01:08.790> instead<00:01:09.119> of<00:01:11.720> circuit<00:01:12.720> elements

00:01:14.890 --> 00:01:14.900 
elements instead of circuit elements

00:01:14.900 --> 00:01:18.410 
elements instead of circuit elements
reading<00:01:15.900> this<00:01:15.990> one<00:01:16.850> look<00:01:17.850> at<00:01:18.000> here<00:01:18.119> row

00:01:18.410 --> 00:01:18.420 
reading this one look at here row

00:01:18.420 --> 00:01:21.020 
reading this one look at here row
address<00:01:18.720> is<00:01:19.020> going<00:01:19.259> here<00:01:19.680> and<00:01:19.920> column<00:01:20.909> address

00:01:21.020 --> 00:01:21.030 
address is going here and column address

00:01:21.030 --> 00:01:28.520 
address is going here and column address
is<00:01:21.330> going<00:01:25.850> totally<00:01:26.850> address<00:01:27.360> versus<00:01:27.720> 16<00:01:28.290> bits

00:01:28.520 --> 00:01:28.530 
is going totally address versus 16 bits

00:01:28.530 --> 00:01:32.149 
is going totally address versus 16 bits
width<00:01:28.890> 0<00:01:29.820> to<00:01:29.970> 7<00:01:30.240> is<00:01:30.360> row<00:01:30.600> address<00:01:30.720> 8<00:01:31.320> to<00:01:31.619> 15<00:01:31.860> is

00:01:32.149 --> 00:01:32.159 
width 0 to 7 is row address 8 to 15 is

00:01:32.159 --> 00:01:34.280 
width 0 to 7 is row address 8 to 15 is
column<00:01:32.490> address<00:01:32.640> became<00:01:33.000> so<00:01:33.570> the<00:01:33.990> row<00:01:34.140> address

00:01:34.280 --> 00:01:34.290 
column address became so the row address

00:01:34.290 --> 00:01:36.770 
column address became so the row address
will<00:01:34.650> be<00:01:34.829> given<00:01:35.130> to<00:01:35.280> row<00:01:35.490> decoder<00:01:35.700> so<00:01:36.509> row

00:01:36.770 --> 00:01:36.780 
will be given to row decoder so row

00:01:36.780 --> 00:01:41.270 
will be given to row decoder so row
decoder<00:01:37.020> in<00:01:37.619> turn<00:01:37.920> will<00:01:38.299> pick<00:01:39.299> the<00:01:39.630> correct<00:01:40.280> or

00:01:41.270 --> 00:01:41.280 
decoder in turn will pick the correct or

00:01:41.280 --> 00:01:45.499 
decoder in turn will pick the correct or
corresponding<00:01:42.500> row<00:01:43.500> from<00:01:43.710> this<00:01:44.270> cell<00:01:45.270> array

00:01:45.499 --> 00:01:45.509 
corresponding row from this cell array

00:01:45.509 --> 00:01:48.710 
corresponding row from this cell array
so<00:01:46.200> similarly<00:01:46.680> column<00:01:47.340> that<00:01:47.820> does<00:01:48.030> will<00:01:48.479> pick

00:01:48.710 --> 00:01:48.720 
so similarly column that does will pick

00:01:48.720 --> 00:01:55.010 
so similarly column that does will pick
the<00:01:48.960> particular<00:01:49.200> column<00:01:50.899> in<00:01:51.899> getting<00:01:53.840> so<00:01:54.840> this

00:01:55.010 --> 00:01:55.020 
the particular column in getting so this

00:01:55.020 --> 00:01:57.770 
the particular column in getting so this
is<00:01:55.140> the<00:01:55.259> 256<00:01:55.829> width<00:01:56.130> of<00:01:56.310> us<00:01:56.490> and<00:01:56.790> it<00:01:56.939> is<00:01:57.090> a<00:01:57.149> 256

00:01:57.770 --> 00:01:57.780 
is the 256 width of us and it is a 256

00:01:57.780 --> 00:02:00.410 
is the 256 width of us and it is a 256
bit<00:01:57.840> of<00:01:58.110> a<00:01:58.229> shock<00:01:58.469> him<00:01:58.619> and<00:01:59.610> one<00:02:00.030> more<00:02:00.240> thing

00:02:00.410 --> 00:02:00.420 
bit of a shock him and one more thing

00:02:00.420 --> 00:02:03.170 
bit of a shock him and one more thing
here<00:02:00.840> we<00:02:00.990> are<00:02:01.079> having<00:02:01.229> two<00:02:01.500> more<00:02:01.710> lines<00:02:02.399> those

00:02:03.170 --> 00:02:03.180 
here we are having two more lines those

00:02:03.180 --> 00:02:08.990 
here we are having two more lines those
are<00:02:03.299> all<00:02:03.450> chips<00:02:04.110> select<00:02:04.619> and<00:02:07.610> read<00:02:08.610> or<00:02:08.819> write

00:02:08.990 --> 00:02:09.000 
are all chips select and read or write

00:02:09.000 --> 00:02:10.190 
are all chips select and read or write
signal<00:02:09.270> okay

00:02:10.190 --> 00:02:10.200 
signal okay

00:02:10.200 --> 00:02:13.840 
signal okay
CS<00:02:10.890> or<00:02:11.129> chip<00:02:11.640> select<00:02:11.970> allows<00:02:12.300> chip<00:02:12.930> in<00:02:13.260> our

00:02:13.840 --> 00:02:13.850 
CS or chip select allows chip in our

00:02:13.850 --> 00:02:17.350 
CS or chip select allows chip in our
is<00:02:13.910> to<00:02:14.450> be<00:02:14.570> selected<00:02:15.140> individually

