WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.680
so unlike a normal photograph additional
image is made up of pixels small

00:00:04.680 --> 00:00:08.670
individual locations of certain color or
a certain level of greyscale intensity

00:00:08.670 --> 00:00:13.740
and restore my memory as a basically a
very long list and along with other

00:00:13.740 --> 00:00:16.859
information about the width and the
height of the image we can then access

00:00:16.859 --> 00:00:21.160
those pixels and determine what color
they are and what we can do other things

00:00:21.160 --> 00:00:21.660

00:00:21.660 --> 00:00:25.890
like applying filters or compile them
into some other video or something like

00:00:25.890 --> 00:00:26.460
that

00:00:26.460 --> 00:00:31.920
so to keep it simple to begin with for
demonstration will talk only about

00:00:31.920 --> 00:00:36.149
uncompressed images already loaded into
memory so we'll have been a specific

00:00:36.149 --> 00:00:40.739
file format light like a GIF file or BMP
file

00:00:40.739 --> 00:00:43.770
we'll talk about that some other time
we'll talk just about uncompressed

00:00:43.770 --> 00:00:47.820
images in memory how they are stored and
how we use them usually a memory is a

00:00:47.820 --> 00:00:52.469
contiguous block so it's one long line
and so it's very helpful to us to

00:00:52.469 --> 00:00:57.570
represent two-dimensional images as
actually a very long line of of data so

00:00:57.570 --> 00:01:01.109
we usually start with an image is some
kind of header and that will tell us

00:01:01.109 --> 00:01:04.830
what the image file format is how wide
it is how tall it is and if there's any

00:01:04.830 --> 00:01:09.180
other information like exif data walking
a camera calibration data that sort of

00:01:09.180 --> 00:01:12.630
thing will be included in there and then
we essentially have a very very long

00:01:12.630 --> 00:01:18.240
list of pixels so we start here and this
point here will be our first row of our

00:01:18.240 --> 00:01:22.170
image and we will have a pixel here we
call picture 1 and then we'll have

00:01:22.170 --> 00:01:23.250
another pixel here

00:01:23.250 --> 00:01:27.180
pixel - and how long each of these
pictures in memory will depend on the

00:01:27.180 --> 00:01:28.500
type of image we're looking at

00:01:28.500 --> 00:01:32.400
so if we doing let's say a 2 by 2 image
then our image will look a bit like this

00:01:32.400 --> 00:01:33.450
when it's finished

00:01:33.450 --> 00:01:36.509
picture 1 2 3 &amp; 4

00:01:36.509 --> 00:01:40.290
so this is our image it's two pixels
high and two pixels wide and so in

00:01:40.290 --> 00:01:43.439
actual memory we have our header and
then we have the first picture on a

00:01:43.439 --> 00:01:44.220
second pixel

00:01:44.220 --> 00:01:47.579
that's right one and then we might have
some padding data that we won't worry

00:01:47.579 --> 00:01:50.490
too much about that depends on the file
format and then we'll just go on

00:01:50.490 --> 00:01:54.840
straight on to our second row so we have
pixel three and pixel for and that is

00:01:54.840 --> 00:01:58.829
essentially our image stored in memory
and then because we know how wide and

00:01:58.829 --> 00:02:03.270
how high the images we can index these
directly so we can say that if this is

00:02:03.270 --> 00:02:08.670
our stride which is 1 plus 2 plus P then
we can go one stride along to get to the

00:02:08.670 --> 00:02:12.130
next row and then two strikes long to
get to the next row and so on and we can

00:02:12.130 --> 00:02:15.370
the image like that so that's what the
image looks like on a very basic level

00:02:15.370 --> 00:02:19.450
each of these pixels represent some
amount of memory how much that is

00:02:19.450 --> 00:02:22.300
depends on the type of image that we're
looking at so if it's a grayscale image

00:02:22.300 --> 00:02:25.390
generally speaking there be less than
were used for me if it's an RGB image

00:02:25.390 --> 00:02:29.650
RGB images are by far the most common
most you know most images that we

00:02:29.650 --> 00:02:31.090
capture RGB

00:02:31.090 --> 00:02:34.210
oh geez red green yellow red green and
blue and they represent the primary

00:02:34.210 --> 00:02:36.970
colors that we detect in our eyes so
that's that's why it's helpful to think

00:02:36.970 --> 00:02:39.340
of more than a couple of extra
properties of our marriage that we look

00:02:39.340 --> 00:02:42.970
at is the bit depth and that is how many
bits how many thoughts and ones

00:02:42.970 --> 00:02:47.410
represent each individual element of
color or gray and a number of channels

00:02:47.410 --> 00:02:52.150
per pixel so that in an RGB image that
might be three or more before his an RGB

00:02:52.150 --> 00:02:56.650
alpha image is what absolute
transparency so a pixel will have a

00:02:56.650 --> 00:03:01.570
number of channels so let's say see in
this case is 3 so for r g and b i'm in a

00:03:01.570 --> 00:03:06.910
bit depth is usually eight you can get
bit depths ranging from one which was

00:03:06.910 --> 00:03:11.770
just an order one set of pixels I've
also off up to 60 may be 32

00:03:12.310 --> 00:03:15.790
that's very high just like with normal
binary encoding the more bits you use

00:03:15.790 --> 00:03:17.800
per pixel and / color channel

00:03:17.800 --> 00:03:23.140
the more information you can hold so 8
is a maximum level of 255 for a bite

00:03:23.140 --> 00:03:27.550
and so in this case we have free
channels r g and b each of which can be

00:03:27.550 --> 00:03:32.320
somewhere from north to 255 what with
those numbers represents a 0 will be

00:03:32.320 --> 00:03:37.720
what black yet so we'll be none of that
color tool and 255 will be the most of

00:03:37.720 --> 00:03:40.870
that color but the camera seen baby mine
but some people posting would have taken

00:03:40.870 --> 00:03:44.560
place because I so things like this and
then so only do when you increase in a

00:03:44.560 --> 00:03:44.950
bit

00:03:44.950 --> 00:03:49.030
death is giving more different includes
images relaxing yes that's exactly why

00:03:49.030 --> 00:03:55.450
it's unlikely that you would use it to
show even blighted because usually 255

00:03:55.450 --> 00:03:57.370
would mean as as red as you could get

00:03:57.370 --> 00:04:01.570
let's say so you would just have a fine
of range of colors in between the most

00:04:01.570 --> 00:04:05.740
general purpose use a bit depth of eight
is is perfectly adequate because you've

00:04:05.740 --> 00:04:09.340
got three different color channels doing
that so that's that's perfectly ample so

00:04:09.340 --> 00:04:13.150
and i'm a common file format would be an
eight bits per pixel grayscale image so

00:04:13.150 --> 00:04:16.570
if you go to image processing package
and you take your color image and

00:04:16.570 --> 00:04:20.049
convert it to grayscale what it usually
does is some averaging of the three

00:04:20.049 --> 00:04:21.760
color channels and then

00:04:21.760 --> 00:04:24.850
a much more memory efficient way of
storing that would be to represent it is

00:04:24.850 --> 00:04:25.600
great

00:04:25.600 --> 00:04:29.620
so in that case we have our header
information and then we literally have

00:04:29.620 --> 00:04:33.760
pics of one which will just be a
grayscale value from not to 255 so we'll

00:04:33.760 --> 00:04:38.020
have a bite here which pics a one and A
by here which is pixel -

00:04:38.680 --> 00:04:43.060
and by here which is pixel three and
each of those only takes up one bite

00:04:43.060 --> 00:04:47.650
rather than three or four for a normal
RGB image and that's why RGB image is

00:04:47.650 --> 00:04:50.830
generally much larger so alpha is very
common when you're doing

00:04:50.830 --> 00:04:54.250
image editing because it might be useful
for sort of combination of layers above

00:04:54.250 --> 00:04:55.660
the layers and things like this

00:04:55.660 --> 00:04:58.750
it's obviously not very common in normal
photographs because camera ,

00:04:58.750 --> 00:05:03.070
transparency that wouldn't make much
sense but in general 32-bit images that

00:05:03.070 --> 00:05:08.470
is four channels per pixel is very
common even when we're not using the

00:05:08.470 --> 00:05:12.400
Alpha so you might find that your
digital camera produces a 32-bit per

00:05:12.400 --> 00:05:16.960
pixel 4-channel image even though he
doesn't actually output transparency and

00:05:16.960 --> 00:05:20.830
that alpha is just held as a padding
bite and that way we can let we can

00:05:20.830 --> 00:05:25.030
indirectly to our pixels in integer
terms it makes it much more

00:05:25.030 --> 00:05:29.170
not much simpler to do the mathematics
of getting to a certain pixel and doing

00:05:29.170 --> 00:05:30.070
something with it

00:05:30.070 --> 00:05:34.090
if this is our header and this is our
color image here then what in fact p 1

00:05:34.090 --> 00:05:40.330
is is a low of RGB and then met possibly
an alpha channel possibly something that

00:05:40.330 --> 00:05:41.320
doesn't do anything

00:05:41.320 --> 00:05:47.650
so we'd have the red here the green blue
and this X here which may be an alpha

00:05:47.650 --> 00:05:51.730
channel may not be in each of these in
AP image will be eight bits long

00:05:51.730 --> 00:05:56.110
so that's one bite so this is eight bits
long this is eight to date and this is a

00:05:56.110 --> 00:06:01.090
here and then some the total size of
this pixel is 32 bits and that's what

00:06:01.090 --> 00:06:06.520
32-bit images now 32 happens to be a lot
of computer architecture slides with

00:06:06.520 --> 00:06:10.150
integer or at least if it isn't you can
get a 32-bit integer very easily and

00:06:10.150 --> 00:06:13.760
that allows us to jump to a specific
pixel somewhere in our image

00:06:14.170 --> 00:06:17.290
so the height of our image is useful for
knowing when we're going to go off the

00:06:17.290 --> 00:06:21.190
end of the images into some other memory
but in terms of indexing pixels we don't

00:06:21.190 --> 00:06:21.850
use it

00:06:21.850 --> 00:06:25.900
what we use is something called stride
which is the width of a row of an image

00:06:25.900 --> 00:06:27.689
bearing in mind any padding and that

00:06:27.689 --> 00:06:31.349
depends on the file format so so so
would you be fair to say that the

00:06:31.349 --> 00:06:35.369
highest energies have many stripes of
god that's exactly what yes but of

00:06:35.369 --> 00:06:38.309
course you're looking at a single block
of memory and if you're operating system

00:06:38.309 --> 00:06:40.739
isn't being careful you want to make
sure you don't go off the end if we know

00:06:40.739 --> 00:06:44.969
what our stride is here and that will be
some within bites of our image including

00:06:44.969 --> 00:06:49.259
any padding and then we know we have a
variable X and available why that tell

00:06:49.259 --> 00:06:52.619
us which picture we want then where we
want to go to is the very beginning of

00:06:52.619 --> 00:06:56.909
our average plus a certain number of
rows based on our y plus a certain

00:06:56.909 --> 00:07:03.209
number of pixels based on always so the
actual formula is the picture we want is

00:07:03.209 --> 00:07:10.860
why x astride plus X and that will take
us through a certain amount of loads of

00:07:10.860 --> 00:07:14.849
data and straight to the way we want and
then to the picture we want

00:07:14.849 --> 00:07:19.169
and so this formula we can use to jump
straight to the picture we want and they

00:07:19.169 --> 00:07:22.349
were using some slightly more advanced
programming and bit shifting we can

00:07:22.349 --> 00:07:27.569
obtain the actual RGB data out of that
integer and then we can do things to it

00:07:27.569 --> 00:07:31.229
we could average them to make it a
grayscale image or we could blur them or

00:07:31.229 --> 00:07:34.139
we could add an alpha channel if we were
doing some kind of more complicated

00:07:34.139 --> 00:07:35.699
image editing something like that

00:07:35.699 --> 00:07:38.939
I'll see you on i'm using image
manipulation to make these computers are

00:07:38.939 --> 00:07:39.839
videos all the time

00:07:39.839 --> 00:07:44.939
it's fine selecting a pixel in Photoshop
and decided to change my this is what's

00:07:44.939 --> 00:07:48.659
going on this is that he was going on
behind the scenes here so it will if you

00:07:48.659 --> 00:07:52.709
select an individual pixel little OBX my
location you will know how about images

00:07:52.709 --> 00:07:56.579
stored in a big row in memory and it
will index that location and alter the

00:07:56.579 --> 00:08:02.879
RGB values for you which makes it a lot
easier if we want to turn these into

00:08:02.879 --> 00:08:03.749
pixels

00:08:03.749 --> 00:08:08.009
all we need to do is look by the nearby
pixels that have the color were looking

00:08:08.009 --> 00:08:09.959
for an interplay that value

00:08:09.959 --> 00:08:13.199
so in this case we don't have a green
value here but we know what the screen

00:08:13.199 --> 00:08:15.149
value is and we know what this great
value ways

