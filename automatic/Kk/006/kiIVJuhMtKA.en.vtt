WEBVTT
Kind: captions
Language: en

00:00:07.639 --> 00:00:09.890 

let's<00:00:08.639> walk<00:00:08.849> through<00:00:08.880> the<00:00:09.120> first<00:00:09.360> example

00:00:09.890 --> 00:00:09.900 
let's walk through the first example

00:00:09.900 --> 00:00:11.959 
let's walk through the first example
from<00:00:10.019> the<00:00:10.139> article<00:00:10.500> this<00:00:11.460> is<00:00:11.670> a<00:00:11.700> pretty

00:00:11.959 --> 00:00:11.969 
from the article this is a pretty

00:00:11.969 --> 00:00:14.360 
from the article this is a pretty
complicated<00:00:12.360> pipeline<00:00:13.139> but<00:00:13.559> if<00:00:13.710> you<00:00:13.830> imagine

00:00:14.360 --> 00:00:14.370 
complicated pipeline but if you imagine

00:00:14.370 --> 00:00:17.630 
complicated pipeline but if you imagine
all<00:00:14.519> the<00:00:14.969> objects<00:00:15.690> as<00:00:15.839> physical<00:00:16.710> objects<00:00:17.220> like

00:00:17.630 --> 00:00:17.640 
all the objects as physical objects like

00:00:17.640 --> 00:00:19.490 
all the objects as physical objects like
ping-pong<00:00:18.119> balls<00:00:18.359> you<00:00:18.930> can<00:00:19.109> kind<00:00:19.289> of<00:00:19.350> imagine

00:00:19.490 --> 00:00:19.500 
ping-pong balls you can kind of imagine

00:00:19.500 --> 00:00:22.400 
ping-pong balls you can kind of imagine
what<00:00:19.949> it's<00:00:20.100> going<00:00:20.160> to<00:00:20.340> do<00:00:20.539> get<00:00:21.539> process<00:00:22.109> is

00:00:22.400 --> 00:00:22.410 
what it's going to do get process is

00:00:22.410 --> 00:00:24.679 
what it's going to do get process is
going<00:00:22.830> to<00:00:22.949> retrieve<00:00:23.310> a<00:00:23.490> bunch<00:00:23.789> of<00:00:23.910> processes

00:00:24.679 --> 00:00:24.689 
going to retrieve a bunch of processes

00:00:24.689 --> 00:00:27.679 
going to retrieve a bunch of processes
and<00:00:24.810> put<00:00:25.140> them<00:00:25.289> into<00:00:25.560> the<00:00:25.980> pipeline<00:00:26.689> the

00:00:27.679 --> 00:00:27.689 
and put them into the pipeline the

00:00:27.689 --> 00:00:30.410 
and put them into the pipeline the
pipeline<00:00:27.720> character<00:00:28.710> takes<00:00:29.460> those<00:00:29.760> objects

00:00:30.410 --> 00:00:30.420 
pipeline character takes those objects

00:00:30.420 --> 00:00:32.600 
pipeline character takes those objects
and<00:00:30.539> passes<00:00:31.080> them<00:00:31.230> to<00:00:31.439> the<00:00:31.560> next<00:00:31.920> command<00:00:32.279> in

00:00:32.600 --> 00:00:32.610 
and passes them to the next command in

00:00:32.610 --> 00:00:35.540 
and passes them to the next command in
this<00:00:32.850> case<00:00:33.090> where<00:00:33.570> object<00:00:34.309> it's<00:00:35.309> going<00:00:35.399> to

00:00:35.540 --> 00:00:35.550 
this case where object it's going to

00:00:35.550 --> 00:00:37.850 
this case where object it's going to
look<00:00:35.700> at<00:00:35.820> each<00:00:36.000> object<00:00:36.690> the<00:00:37.260> dollar<00:00:37.530> sign

00:00:37.850 --> 00:00:37.860 
look at each object the dollar sign

00:00:37.860 --> 00:00:40.549 
look at each object the dollar sign
underscore<00:00:38.390> variable<00:00:39.390> represents<00:00:40.170> each

00:00:40.549 --> 00:00:40.559 
underscore variable represents each

00:00:40.559 --> 00:00:43.340 
underscore variable represents each
object<00:00:41.219> that's<00:00:41.399> in<00:00:41.640> the<00:00:41.790> pipeline<00:00:42.000> and<00:00:42.480> this

00:00:43.340 --> 00:00:43.350 
object that's in the pipeline and this

00:00:43.350 --> 00:00:46.310 
object that's in the pipeline and this
script<00:00:43.980> block<00:00:44.280> will<00:00:44.550> execute<00:00:44.940> once<00:00:45.480> for<00:00:46.140> each

00:00:46.310 --> 00:00:46.320 
script block will execute once for each

00:00:46.320 --> 00:00:48.979 
script block will execute once for each
object<00:00:46.680> that's<00:00:47.190> in<00:00:47.309> the<00:00:47.370> pipeline<00:00:47.820> so<00:00:48.120> if

00:00:48.979 --> 00:00:48.989 
object that's in the pipeline so if

00:00:48.989 --> 00:00:51.200 
object that's in the pipeline so if
there<00:00:49.170> are<00:00:49.289> ten<00:00:49.590> processes<00:00:50.370> then<00:00:50.579> this<00:00:50.760> script

00:00:51.200 --> 00:00:51.210 
there are ten processes then this script

00:00:51.210 --> 00:00:54.020 
there are ten processes then this script
block<00:00:51.480> will<00:00:51.690> execute<00:00:51.780> ten<00:00:52.649> times<00:00:52.980> each<00:00:53.730> time

00:00:54.020 --> 00:00:54.030 
block will execute ten times each time

00:00:54.030 --> 00:00:55.670 
block will execute ten times each time
it<00:00:54.210> executes<00:00:54.300> it<00:00:54.870> looks<00:00:55.079> at<00:00:55.230> the<00:00:55.350> current

00:00:55.670 --> 00:00:55.680 
it executes it looks at the current

00:00:55.680 --> 00:00:59.569 
it executes it looks at the current
object<00:00:55.829> and<00:00:56.449> compares<00:00:57.449> its<00:00:57.719> VM<00:00:58.320> property<00:00:59.039> to

00:00:59.569 --> 00:00:59.579 
object and compares its VM property to

00:00:59.579 --> 00:01:02.599 
object and compares its VM property to
one<00:00:59.789> thousand<00:01:00.329> if<00:01:00.559> the<00:01:01.559> property<00:01:02.039> is<00:01:02.070> greater

00:01:02.599 --> 00:01:02.609 
one thousand if the property is greater

00:01:02.609 --> 00:01:05.149 
one thousand if the property is greater
than<00:01:02.910> 1000<00:01:03.600> then<00:01:04.019> the<00:01:04.110> object<00:01:04.559> is<00:01:04.680> put<00:01:04.890> back

00:01:05.149 --> 00:01:05.159 
than 1000 then the object is put back

00:01:05.159 --> 00:01:07.820 
than 1000 then the object is put back
into<00:01:05.489> the<00:01:05.670> pipeline<00:01:05.939> if<00:01:06.420> it's<00:01:07.200> not<00:01:07.470> greater

00:01:07.820 --> 00:01:07.830 
into the pipeline if it's not greater

00:01:07.830 --> 00:01:10.010 
into the pipeline if it's not greater
than<00:01:08.010> 1000<00:01:08.610> then<00:01:08.790> the<00:01:08.909> object<00:01:09.299> is<00:01:09.450> taken<00:01:09.810> out

00:01:10.010 --> 00:01:10.020 
than 1000 then the object is taken out

00:01:10.020 --> 00:01:12.740 
than 1000 then the object is taken out
of<00:01:10.049> the<00:01:10.260> pipeline<00:01:10.590> and<00:01:11.010> discarded<00:01:11.549> so<00:01:12.540> for

00:01:12.740 --> 00:01:12.750 
of the pipeline and discarded so for

00:01:12.750 --> 00:01:13.850 
of the pipeline and discarded so for
everything<00:01:13.049> that's<00:01:13.229> left<00:01:13.409> in<00:01:13.560> the<00:01:13.650> pipeline

00:01:13.850 --> 00:01:13.860 
everything that's left in the pipeline

00:01:13.860 --> 00:01:17.300 
everything that's left in the pipeline
they're<00:01:14.670> then<00:01:14.850> piped<00:01:15.270> to<00:01:15.509> sort<00:01:16.229> object<00:01:16.770> which

00:01:17.300 --> 00:01:17.310 
they're then piped to sort object which

00:01:17.310 --> 00:01:19.870 
they're then piped to sort object which
sorts<00:01:17.729> them<00:01:17.939> on<00:01:18.090> that<00:01:18.390> same<00:01:18.689> VM<00:01:19.140> property<00:01:19.710> in

00:01:19.870 --> 00:01:19.880 
sorts them on that same VM property in

00:01:19.880 --> 00:01:23.030 
sorts them on that same VM property in
descending<00:01:20.880> order<00:01:21.140> they're<00:01:22.140> placed<00:01:22.500> in<00:01:22.770> that

00:01:23.030 --> 00:01:23.040 
descending order they're placed in that

00:01:23.040 --> 00:01:25.280 
descending order they're placed in that
order<00:01:23.250> into<00:01:23.610> the<00:01:23.700> pipeline<00:01:24.150> and<00:01:24.360> sent<00:01:25.049> to<00:01:25.170> the

00:01:25.280 --> 00:01:25.290 
order into the pipeline and sent to the

00:01:25.290 --> 00:01:28.840 
order into the pipeline and sent to the
next<00:01:25.560> command<00:01:25.950> which<00:01:26.250> is<00:01:26.280> export<00:01:27.060> CSV<00:01:27.810> that

00:01:28.840 --> 00:01:28.850 
next command which is export CSV that

00:01:28.850 --> 00:01:31.490 
next command which is export CSV that
changes<00:01:29.850> the<00:01:29.970> objects<00:01:30.479> into<00:01:30.689> a<00:01:30.720> text<00:01:31.049> file<00:01:31.229> and

00:01:31.490 --> 00:01:31.500 
changes the objects into a text file and

00:01:31.500 --> 00:01:34.850 
changes the objects into a text file and
stores<00:01:31.740> them<00:01:31.950> in<00:01:32.009> C<00:01:32.340> proc<00:01:32.880> CSV<00:01:33.750> so<00:01:34.500> if<00:01:34.560> we<00:01:34.680> run

00:01:34.850 --> 00:01:34.860 
stores them in C proc CSV so if we run

00:01:34.860 --> 00:01:36.679 
stores them in C proc CSV so if we run
that<00:01:35.009> command<00:01:35.220> give<00:01:36.090> it<00:01:36.180> just<00:01:36.329> a<00:01:36.390> couple

00:01:36.679 --> 00:01:36.689 
that command give it just a couple

00:01:36.689 --> 00:01:38.630 
that command give it just a couple
moments<00:01:36.900> to<00:01:37.140> complete<00:01:37.290> we<00:01:38.189> can<00:01:38.220> then<00:01:38.490> use

00:01:38.630 --> 00:01:38.640 
moments to complete we can then use

00:01:38.640 --> 00:01:43.190 
moments to complete we can then use
notepad<00:01:39.210> to<00:01:39.509> open<00:01:39.540> practice<00:01:40.530> CSV<00:01:41.250> and<00:01:42.200> see

00:01:43.190 --> 00:01:43.200 
notepad to open practice CSV and see

00:01:43.200 --> 00:01:44.749 
notepad to open practice CSV and see
that<00:01:43.350> it<00:01:43.439> does<00:01:43.649> contain<00:01:44.100> all<00:01:44.369> the<00:01:44.729> information

00:01:44.749 --> 00:01:44.759 
that it does contain all the information

00:01:44.759 --> 00:01:47.749 
that it does contain all the information
that<00:01:45.420> we<00:01:45.659> asked<00:01:45.990> it<00:01:46.110> to<00:01:46.259> not<00:01:46.860> every<00:01:47.159> process<00:01:47.640> is

00:01:47.749 --> 00:01:47.759 
that we asked it to not every process is

00:01:47.759 --> 00:01:49.429 
that we asked it to not every process is
in<00:01:47.909> there<00:01:48.060> only<00:01:48.299> processes<00:01:49.079> which<00:01:49.229> we're

00:01:49.429 --> 00:01:49.439 
in there only processes which we're

00:01:49.439 --> 00:01:51.319 
in there only processes which we're
using<00:01:49.470> a<00:01:49.890> virtual<00:01:50.100> memory<00:01:50.430> more<00:01:51.060> than<00:01:51.270> a

00:01:51.319 --> 00:01:51.329 
using a virtual memory more than a

00:01:51.329 --> 00:01:53.630 
using a virtual memory more than a
thousand<00:01:51.780> were<00:01:52.200> included<00:01:52.770> and<00:01:52.950> they're

00:01:53.630 --> 00:01:53.640 
thousand were included and they're

00:01:53.640 --> 00:01:56.270 
thousand were included and they're
sorted<00:01:54.149> in<00:01:54.299> order<00:01:54.960> of<00:01:55.290> their<00:01:55.619> virtual<00:01:55.649> memory

00:01:56.270 --> 00:01:56.280 
sorted in order of their virtual memory

00:01:56.280 --> 00:02:00.080 
sorted in order of their virtual memory
utilization<00:01:58.219> so<00:01:59.219> the<00:01:59.340> next<00:01:59.520> example<00:01:59.670> is<00:02:00.060> a

00:02:00.080 --> 00:02:00.090 
utilization so the next example is a

00:02:00.090 --> 00:02:01.609 
utilization so the next example is a
little<00:02:00.240> more<00:02:00.420> complicated<00:02:00.780> so<00:02:01.110> let's<00:02:01.229> look<00:02:01.500> at

00:02:01.609 --> 00:02:01.619 
little more complicated so let's look at

00:02:01.619 --> 00:02:04.100 
little more complicated so let's look at
a<00:02:01.649> script<00:02:01.979> for<00:02:02.130> that<00:02:02.360> this<00:02:03.360> function<00:02:03.930> is<00:02:04.049> a

00:02:04.100 --> 00:02:04.110 
a script for that this function is a

00:02:04.110 --> 00:02:06.560 
a script for that this function is a
filtering<00:02:04.770> or<00:02:04.950> a<00:02:04.979> pipeline<00:02:05.250> function<00:02:05.880> now<00:02:06.540> the

00:02:06.560 --> 00:02:06.570 
filtering or a pipeline function now the

00:02:06.570 --> 00:02:09.410 
filtering or a pipeline function now the
begin<00:02:07.140> block<00:02:07.619> will<00:02:07.920> run<00:02:08.129> automatically<00:02:08.940> the

00:02:09.410 --> 00:02:09.420 
begin block will run automatically the

00:02:09.420 --> 00:02:11.550 
begin block will run automatically the
first<00:02:09.450> time<00:02:09.959> the<00:02:10.080> function<00:02:10.440> is<00:02:10.530> called

00:02:11.550 --> 00:02:11.560 
first time the function is called

00:02:11.560 --> 00:02:13.800 
first time the function is called
and<00:02:11.650> the<00:02:11.890> end<00:02:12.099> block<00:02:12.640> will<00:02:12.880> run<00:02:13.060> after<00:02:13.450> all<00:02:13.630> the

00:02:13.800 --> 00:02:13.810 
and the end block will run after all the

00:02:13.810 --> 00:02:16.440 
and the end block will run after all the
pipeline<00:02:14.230> objects<00:02:14.709> have<00:02:14.800> been<00:02:14.950> processed<00:02:15.450> the

00:02:16.440 --> 00:02:16.450 
pipeline objects have been processed the

00:02:16.450 --> 00:02:19.830 
pipeline objects have been processed the
process<00:02:17.020> script<00:02:17.500> block<00:02:17.680> will<00:02:18.130> run<00:02:18.370> once<00:02:19.000> for

00:02:19.830 --> 00:02:19.840 
process script block will run once for

00:02:19.840 --> 00:02:23.400 
process script block will run once for
each<00:02:20.080> pipeline<00:02:20.770> object<00:02:21.280> that's<00:02:21.459> sent<00:02:21.760> in<00:02:22.410> so

00:02:23.400 --> 00:02:23.410 
each pipeline object that's sent in so

00:02:23.410 --> 00:02:25.350 
each pipeline object that's sent in so
here's<00:02:23.620> one<00:02:24.010> on<00:02:24.040> line<00:02:24.340> 11<00:02:24.670> the<00:02:24.760> first<00:02:24.910> actual

00:02:25.350 --> 00:02:25.360 
here's one on line 11 the first actual

00:02:25.360 --> 00:02:28.110 
here's one on line 11 the first actual
executable<00:02:26.020> line<00:02:26.319> of<00:02:26.500> code<00:02:26.709> get<00:02:27.459> process<00:02:27.970> is

00:02:28.110 --> 00:02:28.120 
executable line of code get process is

00:02:28.120 --> 00:02:30.210 
executable line of code get process is
going<00:02:28.239> to<00:02:28.300> retrieve<00:02:28.690> all<00:02:28.840> the<00:02:28.870> processes<00:02:29.590> put

00:02:30.210 --> 00:02:30.220 
going to retrieve all the processes put

00:02:30.220 --> 00:02:32.250 
going to retrieve all the processes put
them<00:02:30.340> in<00:02:30.430> the<00:02:30.519> pipeline<00:02:30.970> and<00:02:31.209> then<00:02:31.840> send<00:02:32.140> them

00:02:32.250 --> 00:02:32.260 
them in the pipeline and then send them

00:02:32.260 --> 00:02:34.979 
them in the pipeline and then send them
to<00:02:32.319> the<00:02:32.590> do<00:02:32.920> something<00:02:33.430> function<00:02:33.880> for<00:02:34.870> each

00:02:34.979 --> 00:02:34.989 
to the do something function for each

00:02:34.989 --> 00:02:38.040 
to the do something function for each
process<00:02:35.650> I'm<00:02:36.400> going<00:02:36.459> to<00:02:36.700> create<00:02:37.120> a<00:02:37.209> new<00:02:37.690> PS

00:02:38.040 --> 00:02:38.050 
process I'm going to create a new PS

00:02:38.050 --> 00:02:41.610 
process I'm going to create a new PS
object<00:02:38.790> add<00:02:39.790> a<00:02:40.510> note<00:02:40.810> property<00:02:41.380> named

00:02:41.610 --> 00:02:41.620 
object add a note property named

00:02:41.620 --> 00:02:43.350 
object add a note property named
timestamp<00:02:42.340> to<00:02:42.610> it<00:02:42.760> and<00:02:42.970> that's<00:02:43.090> going<00:02:43.300> to

00:02:43.350 --> 00:02:43.360 
timestamp to it and that's going to

00:02:43.360 --> 00:02:45.539 
timestamp to it and that's going to
contain<00:02:43.690> the<00:02:43.870> date<00:02:44.080> and<00:02:44.319> then<00:02:45.250> I'm<00:02:45.370> going<00:02:45.489> to

00:02:45.539 --> 00:02:45.549 
contain the date and then I'm going to

00:02:45.549 --> 00:02:48.000 
contain the date and then I'm going to
add<00:02:45.730> another<00:02:46.269> note<00:02:46.569> property<00:02:47.080> named<00:02:47.350> process

00:02:48.000 --> 00:02:48.010 
add another note property named process

00:02:48.010 --> 00:02:50.550 
add another note property named process
name<00:02:48.280> in<00:02:48.910> it<00:02:49.330> I'm<00:02:49.510> going<00:02:49.540> to<00:02:49.720> take<00:02:49.930> the<00:02:50.260> current

00:02:50.550 --> 00:02:50.560 
name in it I'm going to take the current

00:02:50.560 --> 00:02:52.800 
name in it I'm going to take the current
pipeline<00:02:50.890> object<00:02:51.610> which<00:02:51.910> is<00:02:52.060> a<00:02:52.090> process<00:02:52.600> and

00:02:52.800 --> 00:02:52.810 
pipeline object which is a process and

00:02:52.810 --> 00:02:56.430 
pipeline object which is a process and
grab<00:02:53.500> its<00:02:53.830> name<00:02:54.160> property<00:02:54.959> that<00:02:55.959> custom

00:02:56.430 --> 00:02:56.440 
grab its name property that custom

00:02:56.440 --> 00:02:58.400 
grab its name property that custom
object<00:02:56.860> is<00:02:57.010> then<00:02:57.190> written<00:02:57.580> to<00:02:57.730> the<00:02:57.970> pipeline

00:02:58.400 --> 00:02:58.410 
object is then written to the pipeline

00:02:58.410 --> 00:03:01.740 
object is then written to the pipeline
which<00:02:59.410> means<00:02:59.709> it<00:02:59.950> is<00:02:59.980> then<00:03:00.370> passed<00:03:00.790> to<00:03:01.090> format

00:03:01.740 --> 00:03:01.750 
which means it is then passed to format

00:03:01.750 --> 00:03:03.960 
which means it is then passed to format
table<00:03:02.260> which<00:03:02.860> is<00:03:03.010> being<00:03:03.190> asked<00:03:03.519> to<00:03:03.580> display

00:03:03.960 --> 00:03:03.970 
table which is being asked to display

00:03:03.970 --> 00:03:06.960 
table which is being asked to display
all<00:03:04.209> of<00:03:04.269> its<00:03:04.720> properties<00:03:05.400> so<00:03:06.400> if<00:03:06.489> I<00:03:06.580> run<00:03:06.760> this

00:03:06.960 --> 00:03:06.970 
all of its properties so if I run this

00:03:06.970 --> 00:03:09.509 
all of its properties so if I run this
we<00:03:07.630> can<00:03:07.780> see<00:03:07.959> that<00:03:08.170> the<00:03:08.260> output<00:03:08.680> is<00:03:08.890> indeed<00:03:09.280> a

00:03:09.509 --> 00:03:09.519 
we can see that the output is indeed a

00:03:09.519 --> 00:03:12.990 
we can see that the output is indeed a
table<00:03:10.060> with<00:03:10.900> a<00:03:10.930> timestamp<00:03:11.500> property<00:03:12.130> and<00:03:12.310> a

00:03:12.990 --> 00:03:13.000 
table with a timestamp property and a

00:03:13.000 --> 00:03:15.120 
table with a timestamp property and a
process<00:03:13.569> name<00:03:13.780> property<00:03:14.230> those<00:03:14.650> are<00:03:14.830> the<00:03:14.890> two

00:03:15.120 --> 00:03:15.130 
process name property those are the two

00:03:15.130 --> 00:03:19.380 
process name property those are the two
properties<00:03:16.090> I<00:03:16.299> created<00:03:17.609> the<00:03:18.609> last<00:03:18.820> example<00:03:19.329> in

00:03:19.380 --> 00:03:19.390 
properties I created the last example in

00:03:19.390 --> 00:03:20.910 
properties I created the last example in
the<00:03:19.480> article<00:03:19.780> is<00:03:19.900> a<00:03:19.930> lot<00:03:20.410> more<00:03:20.590> complicated

00:03:20.910 --> 00:03:20.920 
the article is a lot more complicated

00:03:20.920 --> 00:03:23.099 
the article is a lot more complicated
let's<00:03:21.549> start<00:03:21.850> with<00:03:21.970> the<00:03:22.060> executable<00:03:22.780> code<00:03:22.959> on

00:03:23.099 --> 00:03:23.109 
let's start with the executable code on

00:03:23.109 --> 00:03:25.289 
let's start with the executable code on
line<00:03:23.290> 19<00:03:23.530> I'm<00:03:24.310> going<00:03:24.700> to<00:03:24.760> retrieve<00:03:25.120> the

00:03:25.289 --> 00:03:25.299 
line 19 I'm going to retrieve the

00:03:25.299 --> 00:03:27.809 
line 19 I'm going to retrieve the
contents<00:03:25.870> of<00:03:25.959> a<00:03:26.049> file<00:03:26.290> name<00:03:26.530> Computers<00:03:27.069> txt

00:03:27.809 --> 00:03:27.819 
contents of a file name Computers txt

00:03:27.819 --> 00:03:30.539 
contents of a file name Computers txt
pipe<00:03:28.720> it<00:03:28.870> to<00:03:28.900> a<00:03:29.049> custom<00:03:29.530> function<00:03:29.739> and<00:03:30.220> get

00:03:30.539 --> 00:03:30.549 
pipe it to a custom function and get

00:03:30.549 --> 00:03:32.610 
pipe it to a custom function and get
user<00:03:30.910> inventory<00:03:31.630> so<00:03:32.079> let's<00:03:32.200> go<00:03:32.319> see<00:03:32.500> what

00:03:32.610 --> 00:03:32.620 
user inventory so let's go see what

00:03:32.620 --> 00:03:35.849 
user inventory so let's go see what
that's<00:03:32.769> doing<00:03:33.010> if<00:03:33.989> computers<00:03:34.989> dot<00:03:35.319> txt<00:03:35.680> is

00:03:35.849 --> 00:03:35.859 
that's doing if computers dot txt is

00:03:35.859 --> 00:03:37.620 
that's doing if computers dot txt is
laid<00:03:36.040> out<00:03:36.069> like<00:03:36.220> this<00:03:36.640> with<00:03:36.910> one<00:03:36.940> computer

00:03:37.620 --> 00:03:37.630 
laid out like this with one computer

00:03:37.630 --> 00:03:40.379 
laid out like this with one computer
name<00:03:37.750> per<00:03:37.989> line<00:03:38.230> then<00:03:38.920> the<00:03:39.250> pipeline<00:03:39.910> object

00:03:40.379 --> 00:03:40.389 
name per line then the pipeline object

00:03:40.389 --> 00:03:42.150 
name per line then the pipeline object
dollar<00:03:40.569> sign<00:03:40.870> underscore<00:03:40.900> is<00:03:41.590> a<00:03:41.620> computer

00:03:42.150 --> 00:03:42.160 
dollar sign underscore is a computer

00:03:42.160 --> 00:03:44.729 
dollar sign underscore is a computer
name<00:03:42.450> so<00:03:43.450> I'm<00:03:43.569> setting<00:03:43.840> a<00:03:43.959> variable<00:03:44.200> users

00:03:44.729 --> 00:03:44.739 
name so I'm setting a variable users

00:03:44.739 --> 00:03:47.970 
name so I'm setting a variable users
equal<00:03:45.190> to<00:03:45.310> get<00:03:45.549> W<00:03:45.880> my<00:03:46.000> object<00:03:46.680> win32<00:03:47.680> user

00:03:47.970 --> 00:03:47.980 
equal to get W my object win32 user

00:03:47.980 --> 00:03:51.120 
equal to get W my object win32 user
account<00:03:48.400> from<00:03:49.389> whatever<00:03:49.989> computer<00:03:50.709> name<00:03:50.889> is

00:03:51.120 --> 00:03:51.130 
account from whatever computer name is

00:03:51.130 --> 00:03:54.210 
account from whatever computer name is
in<00:03:51.370> the<00:03:51.549> current<00:03:51.790> pipeline<00:03:52.060> object<00:03:53.069> now<00:03:54.069> that

00:03:54.210 --> 00:03:54.220 
in the current pipeline object now that

00:03:54.220 --> 00:03:55.740 
in the current pipeline object now that
could<00:03:54.400> return<00:03:54.639> multiple<00:03:55.180> local<00:03:55.420> user

00:03:55.740 --> 00:03:55.750 
could return multiple local user

00:03:55.750 --> 00:03:58.860 
could return multiple local user
accounts<00:03:56.260> so<00:03:56.500> for<00:03:56.889> each<00:03:57.069> user<00:03:57.760> that<00:03:58.660> was

00:03:58.860 --> 00:03:58.870 
accounts so for each user that was

00:03:58.870 --> 00:04:01.470 
accounts so for each user that was
returned<00:03:59.290> I'm<00:03:59.590> going<00:04:00.579> to<00:04:00.670> create<00:04:00.970> a<00:04:01.090> new

00:04:01.470 --> 00:04:01.480 
returned I'm going to create a new

00:04:01.480 --> 00:04:04.140 
returned I'm going to create a new
object<00:04:01.510> add<00:04:02.170> a<00:04:02.829> note<00:04:03.400> property<00:04:03.940> named

00:04:04.140 --> 00:04:04.150 
object add a note property named

00:04:04.150 --> 00:04:06.120 
object add a note property named
computer<00:04:04.750> with<00:04:05.290> the<00:04:05.590> current<00:04:05.920> pipeline

00:04:06.120 --> 00:04:06.130 
computer with the current pipeline

00:04:06.130 --> 00:04:07.770 
computer with the current pipeline
object<00:04:06.850> that<00:04:07.000> way<00:04:07.150> I'll<00:04:07.269> be<00:04:07.299> able<00:04:07.420> to<00:04:07.630> keep

00:04:07.770 --> 00:04:07.780 
object that way I'll be able to keep

00:04:07.780 --> 00:04:09.539 
object that way I'll be able to keep
track<00:04:08.079> of<00:04:08.260> what<00:04:08.410> computer<00:04:08.769> this<00:04:09.040> account<00:04:09.340> came

00:04:09.539 --> 00:04:09.549 
track of what computer this account came

00:04:09.549 --> 00:04:12.150 
track of what computer this account came
from<00:04:09.819> I'm<00:04:10.290> adding<00:04:11.290> a<00:04:11.350> note<00:04:11.500> property<00:04:11.980> for

00:04:12.150 --> 00:04:12.160 
from I'm adding a note property for

00:04:12.160 --> 00:04:15.210 
from I'm adding a note property for
password<00:04:12.609> expires<00:04:13.260> disabled<00:04:14.260> full<00:04:14.980> name

00:04:15.210 --> 00:04:15.220 
password expires disabled full name

00:04:15.220 --> 00:04:19.050 
password expires disabled full name
lockout<00:04:16.209> name<00:04:17.100> password<00:04:18.100> required<00:04:18.789> and

00:04:19.050 --> 00:04:19.060 
lockout name password required and

00:04:19.060 --> 00:04:21.390 
lockout name password required and
password<00:04:19.989> changeable<00:04:20.530> in<00:04:20.680> each<00:04:21.130> of<00:04:21.280> those

00:04:21.390 --> 00:04:21.400 
password changeable in each of those

00:04:21.400 --> 00:04:23.399 
password changeable in each of those
properties<00:04:21.970> is<00:04:22.120> simply<00:04:22.510> being<00:04:22.659> populated

00:04:23.399 --> 00:04:23.409 
properties is simply being populated

00:04:23.409 --> 00:04:25.280 
properties is simply being populated
with<00:04:24.039> some<00:04:24.310> of<00:04:24.400> the<00:04:24.460> information

00:04:25.280 --> 00:04:25.290 
with some of the information

00:04:25.290 --> 00:04:28.430 
with some of the information
from<00:04:25.440> the<00:04:25.890> WMI<00:04:26.340> object<00:04:26.730> I<00:04:26.820> got<00:04:27.000> back<00:04:27.210> the<00:04:28.170> main

00:04:28.430 --> 00:04:28.440 
from the WMI object I got back the main

00:04:28.440 --> 00:04:30.560 
from the WMI object I got back the main
reason<00:04:28.890> I'm<00:04:29.070> constructing<00:04:29.550> a<00:04:29.910> custom<00:04:30.480> object

00:04:30.560 --> 00:04:30.570 
reason I'm constructing a custom object

00:04:30.570 --> 00:04:32.360 
reason I'm constructing a custom object
instead<00:04:31.470> of<00:04:31.590> just<00:04:31.740> outputting<00:04:32.130> these

00:04:32.360 --> 00:04:32.370 
instead of just outputting these

00:04:32.370 --> 00:04:35.030 
instead of just outputting these
properties<00:04:32.880> directly<00:04:33.330> is<00:04:33.510> because<00:04:34.260> I<00:04:34.380> want<00:04:34.890> to

00:04:35.030 --> 00:04:35.040 
properties directly is because I want to

00:04:35.040 --> 00:04:38.090 
properties directly is because I want to
add<00:04:35.330> the<00:04:36.330> computer<00:04:36.900> name<00:04:37.110> to<00:04:37.620> this<00:04:37.860> object

00:04:38.090 --> 00:04:38.100 
add the computer name to this object

00:04:38.100 --> 00:04:40.700 
add the computer name to this object
that's<00:04:38.970> a<00:04:39.210> property<00:04:39.660> that's<00:04:39.810> not<00:04:39.930> present<00:04:40.590> in

00:04:40.700 --> 00:04:40.710 
that's a property that's not present in

00:04:40.710 --> 00:04:43.220 
that's a property that's not present in
the<00:04:41.010> WMI<00:04:41.430> information<00:04:42.060> so<00:04:42.600> I'm<00:04:42.720> constructing

00:04:43.220 --> 00:04:43.230 
the WMI information so I'm constructing

00:04:43.230 --> 00:04:45.200 
the WMI information so I'm constructing
a<00:04:43.290> custom<00:04:43.680> object<00:04:43.770> that<00:04:44.190> includes<00:04:44.580> some<00:04:45.180> of

00:04:45.200 --> 00:04:45.210 
a custom object that includes some of

00:04:45.210 --> 00:04:47.480 
a custom object that includes some of
the<00:04:45.450> WMI<00:04:45.840> information<00:04:46.440> but<00:04:47.220> which<00:04:47.370> also

00:04:47.480 --> 00:04:47.490 
the WMI information but which also

00:04:47.490 --> 00:04:49.550 
the WMI information but which also
includes<00:04:48.120> the<00:04:48.270> computer<00:04:48.690> name<00:04:48.870> that<00:04:49.050> the<00:04:49.140> WMI

00:04:49.550 --> 00:04:49.560 
includes the computer name that the WMI

00:04:49.560 --> 00:04:53.930 
includes the computer name that the WMI
object<00:04:49.950> came<00:04:50.100> from<00:04:52.190> the<00:04:53.190> last<00:04:53.400> thing<00:04:53.640> I<00:04:53.760> have

00:04:53.930 --> 00:04:53.940 
object came from the last thing I have

00:04:53.940 --> 00:04:56.390 
object came from the last thing I have
to<00:04:54.120> do<00:04:54.240> is<00:04:54.360> to<00:04:54.510> make<00:04:54.660> sure<00:04:54.690> that<00:04:55.230> I<00:04:55.290> write<00:04:56.130> this

00:04:56.390 --> 00:04:56.400 
to do is to make sure that I write this

00:04:56.400 --> 00:05:07.970 
to do is to make sure that I write this
object<00:04:56.640> to<00:04:58.130> the<00:04:59.130> pipeline<00:05:06.590> so<00:05:07.590> that's<00:05:07.770> what

00:05:07.970 --> 00:05:07.980 
object to the pipeline so that's what

00:05:07.980 --> 00:05:10.640 
object to the pipeline so that's what
comes<00:05:08.190> from<00:05:08.340> get<00:05:08.610> user<00:05:08.880> inventory<00:05:09.480> the<00:05:10.290> next

00:05:10.640 --> 00:05:10.650 
comes from get user inventory the next

00:05:10.650 --> 00:05:12.380 
comes from get user inventory the next
thing<00:05:10.770> I'm<00:05:10.890> going<00:05:11.010> to<00:05:11.070> do<00:05:11.280> is<00:05:11.490> filter<00:05:12.210> those

00:05:12.380 --> 00:05:12.390 
thing I'm going to do is filter those

00:05:12.390 --> 00:05:13.940 
thing I'm going to do is filter those
out<00:05:12.570> so<00:05:12.780> I'm<00:05:12.870> going<00:05:12.990> to<00:05:13.020> take<00:05:13.170> all<00:05:13.350> the<00:05:13.470> objects

00:05:13.940 --> 00:05:13.950 
out so I'm going to take all the objects

00:05:13.950 --> 00:05:16.520 
out so I'm going to take all the objects
out<00:05:14.070> of<00:05:14.130> the<00:05:14.520> pipeline<00:05:14.940> and<00:05:15.390> only<00:05:16.050> keep<00:05:16.230> those

00:05:16.520 --> 00:05:16.530 
out of the pipeline and only keep those

00:05:16.530 --> 00:05:18.770 
out of the pipeline and only keep those
where<00:05:16.920> the<00:05:17.070> password<00:05:17.670> required<00:05:18.090> property<00:05:18.630> is

00:05:18.770 --> 00:05:18.780 
where the password required property is

00:05:18.780 --> 00:05:22.610 
where the password required property is
equal<00:05:19.170> to<00:05:19.230> false<00:05:19.470> of<00:05:20.780> whatever<00:05:21.780> objects<00:05:22.470> are

00:05:22.610 --> 00:05:22.620 
equal to false of whatever objects are

00:05:22.620 --> 00:05:24.410 
equal to false of whatever objects are
left<00:05:22.920> in<00:05:23.100> the<00:05:23.190> pipeline<00:05:23.400> I'm<00:05:23.880> going<00:05:24.150> to<00:05:24.210> keep

00:05:24.410 --> 00:05:24.420 
left in the pipeline I'm going to keep

00:05:24.420 --> 00:05:26.960 
left in the pipeline I'm going to keep
just<00:05:24.870> the<00:05:25.020> computer<00:05:25.350> and<00:05:25.710> name<00:05:26.040> property<00:05:26.760> so

00:05:26.960 --> 00:05:26.970 
just the computer and name property so

00:05:26.970 --> 00:05:28.460 
just the computer and name property so
that's<00:05:27.120> the<00:05:27.210> computer<00:05:27.480> name<00:05:27.780> and<00:05:27.810> the<00:05:28.260> user

00:05:28.460 --> 00:05:28.470 
that's the computer name and the user

00:05:28.470 --> 00:05:30.500 
that's the computer name and the user
account<00:05:28.890> name<00:05:29.130> so<00:05:29.790> that's<00:05:29.910> all<00:05:30.180> that's<00:05:30.270> in<00:05:30.420> a

00:05:30.500 --> 00:05:30.510 
account name so that's all that's in a

00:05:30.510 --> 00:05:32.450 
account name so that's all that's in a
pipeline<00:05:30.720> at<00:05:31.020> this<00:05:31.170> point<00:05:31.440> and<00:05:31.650> I'm<00:05:32.280> going<00:05:32.430> to

00:05:32.450 --> 00:05:32.460 
pipeline at this point and I'm going to

00:05:32.460 --> 00:05:35.300 
pipeline at this point and I'm going to
export<00:05:33.150> the<00:05:33.390> remaining<00:05:33.870> ones<00:05:34.050> too<00:05:34.350> bad<00:05:34.830> users

00:05:35.300 --> 00:05:35.310 
export the remaining ones too bad users

00:05:35.310 --> 00:05:38.990 
export the remaining ones too bad users
bad<00:05:35.520> CSV<00:05:36.300> so<00:05:36.930> this<00:05:37.050> becomes<00:05:37.380> a<00:05:37.590> report<00:05:38.070> of<00:05:38.280> all

00:05:38.990 --> 00:05:39.000 
bad CSV so this becomes a report of all

00:05:39.000 --> 00:05:41.990 
bad CSV so this becomes a report of all
those<00:05:39.510> user<00:05:39.840> accounts<00:05:40.440> which<00:05:41.220> do<00:05:41.580> which<00:05:41.850> are

00:05:41.990 --> 00:05:42.000 
those user accounts which do which are

00:05:42.000 --> 00:05:45.710 
those user accounts which do which are
not<00:05:42.240> set<00:05:42.570> to<00:05:42.690> require<00:05:43.050> a<00:05:43.080> password

