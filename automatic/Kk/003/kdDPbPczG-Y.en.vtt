WEBVTT
Kind: captions
Language: en

00:00:04.930 --> 00:00:10.639
 in this class we will learn about the 

00:00:07.430 --> 00:00:13.309
 comparison operators to the past 

00:00:10.639 --> 00:00:17.570
 we have seen the mathematical operators and now 

00:00:13.309 --> 00:00:19.880
 let's learn how to compare by operating the 

00:00:17.570 --> 00:00:23.509
 javascript comparison operators 

00:00:19.880 --> 00:00:25.130
 are the same here to check if 

00:00:23.509 --> 00:00:27.529
 a value equal to the other 

00:00:25.130 --> 00:00:30.560
 three equal and dem signs are for 

00:00:27.529 --> 00:00:36.680
 identify both value and type of 

00:00:30.560 --> 00:00:39.170
 given is equal to the other point of 

00:00:36.680 --> 00:00:42.590
 exclamation equal checks whether the values 

00:00:39.170 --> 00:00:46.520
 are different and with two equals in 

00:00:42.590 --> 00:00:49.910
 front and check whether the data type 

00:00:46.520 --> 00:00:52.519
 plus the value is also different signal 

00:00:49.910 --> 00:00:54.170
 higher is verified by operating 

00:00:52.519 --> 00:00:57.230
 on the left side is larger than the chicken 

00:00:54.170 --> 00:00:59.390
 lower right side sign 

00:00:57.230 --> 00:01:01.219
 one is less than the other greater or equal 

00:00:59.390 --> 00:01:03.589
 and less than or equal to 

00:01:01.219 --> 00:01:06.760
 let's look at that in practice make some 

00:01:03.589 --> 00:01:10.700
 exercises with each of these operators 

00:01:06.760 --> 00:01:15.320
 Let's start here, leaving only the 

00:01:10.700 --> 00:01:18.650
 variable x and let's make our 

00:01:15.320 --> 00:01:21.560
 operations here within the direct alert 

00:01:18.650 --> 00:01:25.460
 so for example I have here is 

00:01:21.560 --> 00:01:28.550
 variable x can i compare if x is 

00:01:25.460 --> 00:01:34.790
 equal to 6 for example 

00:01:28.550 --> 00:01:38.440
 this operation is true here true in 

00:01:34.790 --> 00:01:43.580
 English is real people, let's see if 

00:01:38.440 --> 00:01:47.780
 x is equal to 7 

00:01:43.580 --> 00:01:55.130
 is false false attack and let's compare 

00:01:47.780 --> 00:01:57.770
 strings here if x is equal to 6 in stream 

00:01:55.130 --> 00:01:58.730
 it returns true because it returns to 

00:01:57.770 --> 00:02:02.450
 troupe 

00:01:58.730 --> 00:02:03.410
 here he is not comparing the type of 

00:02:02.450 --> 00:02:06.620
 given away 

00:02:03.410 --> 00:02:09.200
 he is only comparing here the value 

00:02:06.620 --> 00:02:12.290
 so he tries on the case when people 

00:02:09.200 --> 00:02:14.239
 only uses this 

00:02:12.290 --> 00:02:17.860
 equal comparison 

00:02:14.239 --> 00:02:20.140
 He's going to try to make a conversion. 

00:02:17.860 --> 00:02:24.250
 12 30 to check that the text of the 

00:02:20.140 --> 00:02:27.580
 spring beats the value of our 

00:02:24.250 --> 00:02:31.930
 our variable here then in this case the 

00:02:27.580 --> 00:02:36.040
 value returned but we have here 

00:02:31.930 --> 00:02:38.950
 another operator which is composed of three 

00:02:36.040 --> 00:02:41.320
 signs of equality that it does not 

00:02:38.950 --> 00:02:42.940
 only value but it checks also 

00:02:41.320 --> 00:02:45.670
 the data type 

00:02:42.940 --> 00:02:48.940
 then while this operation returns 

00:02:45.670 --> 00:02:53.230
 true to us this other operation 

00:02:48.940 --> 00:02:56.680
 here will return false because because the 

00:02:53.230 --> 00:02:58.480
 value is the same but the data type is 

00:02:56.680 --> 00:03:02.440
 different here I have a string 

00:02:58.480 --> 00:03:05.160
 trying to compare with a number is this 

00:03:02.440 --> 00:03:07.390
 which we call operator 

00:03:05.160 --> 00:03:10.420
 identity because he is checking the 

00:03:07.390 --> 00:03:13.360
 identity as a whole we also have 

00:03:10.420 --> 00:03:16.959
 here the different operator 

00:03:13.360 --> 00:03:25.090
 Let's see how it works. 

00:03:16.959 --> 00:03:26.920
 6 is different from 6 not the two values 

00:03:25.090 --> 00:03:29.140
 they are the same 

00:03:26.920 --> 00:03:31.269
 so if I'm asking if they 

00:03:29.140 --> 00:03:34.019
 are different the answer is not because 

00:03:31.269 --> 00:03:37.030
 is again comparing the values 

00:03:34.019 --> 00:03:40.590
 now if I put six here it 's 

00:03:37.030 --> 00:03:44.860
 other than 5 for example 

00:03:40.590 --> 00:03:46.350
 Then he'll tell me yes, but the six is 

00:03:44.860 --> 00:03:50.940
 different from 5 

00:03:46.350 --> 00:03:54.010
 now the same as I have the 

00:03:50.940 --> 00:03:56.590
 comparator of equality for the value that 

00:03:54.010 --> 00:03:58.900
 the buyer of equality for the value and 

00:03:56.590 --> 00:04:01.780
 kind of data we also have the 

00:03:58.900 --> 00:04:06.130
 different for value and type 

00:04:01.780 --> 00:04:09.910
 so let's see here that while here 

00:04:06.130 --> 00:04:12.250
 different returns me false indicating that 

00:04:09.910 --> 00:04:15.310
 this value is not different from you 

00:04:12.250 --> 00:04:20.489
 if we put another one here 

00:04:15.310 --> 00:04:23.080
 this different happens to be a 

00:04:20.489 --> 00:04:29.110
 different from identity then it goes 

00:04:23.080 --> 00:04:30.860
 compare value and type let's see here né 

00:04:29.110 --> 00:04:34.189
 these values 

00:04:30.860 --> 00:04:37.789
 considering that they are different see there 

00:04:34.189 --> 00:04:40.419
 the value is the same but the data type is 

00:04:37.789 --> 00:04:40.419
 different 

00:04:40.610 --> 00:04:52.699
 Let's go here now for operators 

00:04:43.129 --> 00:04:58.120
 major and minor 6 is greater than 7 

00:04:52.699 --> 00:05:01.669
 so false but it's bigger than five 

00:04:58.120 --> 00:05:05.090
 then it returns true 

00:05:01.669 --> 00:05:06.919
 we can also do operations here 

00:05:05.090 --> 00:05:09.620
 with strings 

00:05:06.919 --> 00:05:14.419
 so I could put it here compare 

00:05:09.620 --> 00:05:15.939
 a is larger than the baby is larger than 

00:05:14.419 --> 00:05:21.039
 see 

00:05:15.939 --> 00:05:26.479
 there is not less than I drink, right? 

00:05:21.039 --> 00:05:31.310
 we also have here the smaller operator 

00:05:26.479 --> 00:05:35.180
 which we can use here then is 

00:05:31.310 --> 00:05:38.990
 less than b and can also return 

00:05:35.180 --> 00:05:43.180
 here is our operation to check if 

00:05:38.990 --> 00:05:47.509
 x is less than 7 

00:05:43.180 --> 00:05:48.650
 true in the same way that we have 

00:05:47.509 --> 00:05:51.259
 the value 

00:05:48.650 --> 00:05:53.089
 the comparison if the value is higher or lower 

00:05:51.259 --> 00:05:55.520
 than another but we can also compare 

00:05:53.089 --> 00:05:57.110
 selection equal to or greater than one 

00:05:55.520 --> 00:05:59.539
 value 

00:05:57.110 --> 00:06:03.860
 so for example if I compare that if 

00:05:59.539 --> 00:06:06.949
 x is greater than 6 

00:06:03.860 --> 00:06:08.810
 There is none greater false right they are the 

00:06:06.949 --> 00:06:12.680
 same size 

00:06:08.810 --> 00:06:15.889
 now if I put here operator x is 

00:06:12.680 --> 00:06:17.949
 is less than or equal to six 

00:06:15.889 --> 00:06:20.319
 My condition becomes 

00:06:17.949 --> 00:06:24.680
 true 

00:06:20.319 --> 00:06:27.409
 this also applies to the minus sign 

00:06:24.680 --> 00:06:29.120
 or equal to or greater than six with 

00:06:27.409 --> 00:06:31.849
 less than or equal to six 

00:06:29.120 --> 00:06:34.669
 he's going to give me a condition he'll give me 

00:06:31.849 --> 00:06:37.460
 a true return here because it is 

00:06:34.669 --> 00:06:40.779
 either less than or equal to or greater than 

00:06:37.460 --> 00:06:44.600
 just like he's going to hit both values ​​here 

00:06:40.779 --> 00:06:47.120
 So these people are ours. 

00:06:44.600 --> 00:06:50.000
 the comparison operators that we 

00:06:47.120 --> 00:06:54.220
 we can use it here in java 

00:06:50.000 --> 00:06:54.220
 script until the next class 

