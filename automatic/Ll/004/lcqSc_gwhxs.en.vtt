WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.690 

so<00:00:01.020> we<00:00:01.110> want<00:00:01.319> to<00:00:01.439> schedule<00:00:01.650> this<00:00:01.979> diagraph<00:00:02.460> on

00:00:02.690 --> 00:00:02.700 
so we want to schedule this diagraph on

00:00:02.700 --> 00:00:04.789 
so we want to schedule this diagraph on
three<00:00:02.970> processors<00:00:03.629> using<00:00:03.959> the<00:00:04.170> critical<00:00:04.560> path

00:00:04.789 --> 00:00:04.799 
three processors using the critical path

00:00:04.799 --> 00:00:06.710 
three processors using the critical path
algorithm<00:00:05.279> so<00:00:06.089> we'll<00:00:06.210> go<00:00:06.330> ahead<00:00:06.359> and

00:00:06.710 --> 00:00:06.720 
algorithm so we'll go ahead and

00:00:06.720 --> 00:00:10.370 
algorithm so we'll go ahead and
introduce<00:00:06.870> an<00:00:07.379> end<00:00:07.620> vertex<00:00:08.370> and<00:00:09.200> this<00:00:10.200> is

00:00:10.370 --> 00:00:10.380 
introduce an end vertex and this is

00:00:10.380 --> 00:00:11.720 
introduce an end vertex and this is
gonna<00:00:10.500> be<00:00:10.590> a<00:00:10.650> little<00:00:10.740> tricky<00:00:11.070> to<00:00:11.099> draw<00:00:11.400> here

00:00:11.720 --> 00:00:11.730 
gonna be a little tricky to draw here

00:00:11.730 --> 00:00:13.970 
gonna be a little tricky to draw here
because<00:00:12.059> each<00:00:12.360> of<00:00:12.420> these<00:00:12.780> leads<00:00:13.320> to<00:00:13.620> the<00:00:13.740> end

00:00:13.970 --> 00:00:13.980 
because each of these leads to the end

00:00:13.980 --> 00:00:16.070 
because each of these leads to the end
notice<00:00:14.849> we<00:00:14.969> have<00:00:15.059> a<00:00:15.089> lot<00:00:15.179> of<00:00:15.420> sort<00:00:16.049> of

00:00:16.070 --> 00:00:16.080 
notice we have a lot of sort of

00:00:16.080 --> 00:00:17.870 
notice we have a lot of sort of
independent<00:00:16.949> tasks<00:00:17.430> that<00:00:17.550> can<00:00:17.699> be<00:00:17.760> completed

00:00:17.870 --> 00:00:17.880 
independent tasks that can be completed

00:00:17.880 --> 00:00:21.920 
independent tasks that can be completed
at<00:00:18.480> any<00:00:18.660> time<00:00:19.279> and<00:00:20.279> so<00:00:20.609> use<00:00:21.240> applying<00:00:21.779> the

00:00:21.920 --> 00:00:21.930 
at any time and so use applying the

00:00:21.930 --> 00:00:25.160 
at any time and so use applying the
backflow<00:00:22.529> algorithm<00:00:23.300> task<00:00:24.300> 9<00:00:24.600> here<00:00:25.019> is<00:00:25.140> a

00:00:25.160 --> 00:00:25.170 
backflow algorithm task 9 here is a

00:00:25.170 --> 00:00:29.689 
backflow algorithm task 9 here is a
distance<00:00:25.710> of<00:00:25.920> 6<00:00:26.220> from<00:00:26.430> the<00:00:26.519> end<00:00:26.820> task<00:00:27.710> 2<00:00:28.710> so

00:00:29.689 --> 00:00:29.699 
distance of 6 from the end task 2 so

00:00:29.699 --> 00:00:31.609 
distance of 6 from the end task 2 so
flowing<00:00:30.510> backwards<00:00:31.050> here<00:00:31.199> this<00:00:31.410> has<00:00:31.590> a

00:00:31.609 --> 00:00:31.619 
flowing backwards here this has a

00:00:31.619 --> 00:00:35.660 
flowing backwards here this has a
distance<00:00:32.160> of<00:00:32.369> 8<00:00:32.730> then<00:00:33.059> as<00:00:33.630> does<00:00:34.140> this<00:00:34.410> as<00:00:34.710> does

00:00:35.660 --> 00:00:35.670 
distance of 8 then as does this as does

00:00:35.670 --> 00:00:39.020 
distance of 8 then as does this as does
this<00:00:36.530> and<00:00:37.530> flowing<00:00:37.920> backwards<00:00:38.430> then<00:00:38.610> this<00:00:38.850> has

00:00:39.020 --> 00:00:39.030 
this and flowing backwards then this has

00:00:39.030 --> 00:00:43.040 
this and flowing backwards then this has
a<00:00:39.059> time<00:00:39.420> of<00:00:39.690> 9<00:00:40.550> flowing<00:00:41.550> backwards<00:00:42.030> from<00:00:42.300> here

00:00:43.040 --> 00:00:43.050 
a time of 9 flowing backwards from here

00:00:43.050 --> 00:00:44.900 
a time of 9 flowing backwards from here
this<00:00:43.680> is<00:00:43.950> going<00:00:44.129> to<00:00:44.190> have<00:00:44.309> a<00:00:44.340> time<00:00:44.670> critical

00:00:44.900 --> 00:00:44.910 
this is going to have a time critical

00:00:44.910 --> 00:00:51.709 
this is going to have a time critical
time<00:00:45.360> of<00:00:45.570> one<00:00:45.840> of<00:00:46.140> one<00:00:46.829> of<00:00:48.200> six<00:00:49.200> and<00:00:49.500> of<00:00:50.480> six<00:00:51.480> and

00:00:51.709 --> 00:00:51.719 
time of one of one of six and of six and

00:00:51.719 --> 00:00:54.229 
time of one of one of six and of six and
so<00:00:52.379> putting<00:00:52.680> that<00:00:52.770> together<00:00:52.980> we<00:00:53.820> get<00:00:54.030> a

00:00:54.229 --> 00:00:54.239 
so putting that together we get a

00:00:54.239 --> 00:00:59.750 
so putting that together we get a
priority<00:00:55.140> list<00:00:55.410> of<00:00:56.090> tasks<00:00:57.090> one<00:00:57.420> task<00:00:58.760> that's

00:00:59.750 --> 00:00:59.760 
priority list of tasks one task that's

00:00:59.760 --> 00:01:04.789 
priority list of tasks one task that's
one<00:00:59.969> task<00:01:00.710> six<00:01:01.710> task<00:01:02.280> seven<00:01:02.910> task<00:01:03.390> eight<00:01:03.799> right

00:01:04.789 --> 00:01:04.799 
one task six task seven task eight right

00:01:04.799 --> 00:01:09.170 
one task six task seven task eight right
and<00:01:05.270> now<00:01:06.270> we<00:01:07.049> hit<00:01:07.200> the<00:01:07.380> sixes<00:01:07.890> and<00:01:08.180> we

00:01:09.170 --> 00:01:09.180 
and now we hit the sixes and we

00:01:09.180 --> 00:01:11.870 
and now we hit the sixes and we
typically<00:01:09.720> give<00:01:09.990> those<00:01:10.229> in<00:01:10.590> order<00:01:11.040> of<00:01:11.280> task

00:01:11.870 --> 00:01:11.880 
typically give those in order of task

00:01:11.880 --> 00:01:16.580 
typically give those in order of task
number<00:01:12.210> and<00:01:12.570> so<00:01:13.380> there's<00:01:14.159> all<00:01:14.460> my<00:01:14.640> six<00:01:15.590> unit

00:01:16.580 --> 00:01:16.590 
number and so there's all my six unit

00:01:16.590 --> 00:01:20.420 
number and so there's all my six unit
time<00:01:16.850> tasks<00:01:17.850> and<00:01:18.030> then<00:01:18.659> finally<00:01:19.200> we<00:01:19.380> have<00:01:19.650> task

00:01:20.420 --> 00:01:20.430 
time tasks and then finally we have task

00:01:20.430 --> 00:01:24.200 
time tasks and then finally we have task
two<00:01:20.939> and<00:01:21.210> task<00:01:21.299> three<00:01:22.100> which<00:01:23.100> are<00:01:23.340> my<00:01:23.520> one<00:01:23.820> unit

00:01:24.200 --> 00:01:24.210 
two and task three which are my one unit

00:01:24.210 --> 00:01:26.990 
two and task three which are my one unit
time<00:01:24.509> tasks<00:01:25.259> and<00:01:25.470> so<00:01:26.159> if<00:01:26.280> we<00:01:26.400> go<00:01:26.549> ahead<00:01:26.700> and

00:01:26.990 --> 00:01:27.000 
time tasks and so if we go ahead and

00:01:27.000 --> 00:01:31.219 
time tasks and so if we go ahead and
schedule<00:01:27.360> this<00:01:27.780> on<00:01:28.040> three<00:01:29.040> processors<00:01:30.229> let's

00:01:31.219 --> 00:01:31.229 
schedule this on three processors let's

00:01:31.229 --> 00:01:33.410 
schedule this on three processors let's
see<00:01:31.619> what<00:01:31.890> happens<00:01:32.460> and<00:01:32.729> so<00:01:33.210> at<00:01:33.299> the<00:01:33.390> very

00:01:33.410 --> 00:01:33.420 
see what happens and so at the very

00:01:33.420 --> 00:01:38.929 
see what happens and so at the very
beginning<00:01:33.890> notice<00:01:34.890> task<00:01:35.189> one<00:01:35.700> two<00:01:36.740> three<00:01:37.939> four

00:01:38.929 --> 00:01:38.939 
beginning notice task one two three four

00:01:38.939 --> 00:01:43.760 
beginning notice task one two three four
and<00:01:39.509> five<00:01:40.189> are<00:01:41.210> ready<00:01:42.210> and<00:01:42.540> so<00:01:43.350> we'll<00:01:43.500> go<00:01:43.649> ahead

00:01:43.760 --> 00:01:43.770 
and five are ready and so we'll go ahead

00:01:43.770 --> 00:01:47.060 
and five are ready and so we'll go ahead
and<00:01:44.040> assign<00:01:44.280> task<00:01:44.790> one<00:01:45.180> four<00:01:46.020> and<00:01:46.290> five

00:01:47.060 --> 00:01:47.070 
and assign task one four and five

00:01:47.070 --> 00:01:50.060 
and assign task one four and five
remember<00:01:47.640> we've<00:01:47.759> got<00:01:48.030> three<00:01:48.479> processors<00:01:49.229> this

00:01:50.060 --> 00:01:50.070 
remember we've got three processors this

00:01:50.070 --> 00:01:52.399 
remember we've got three processors this
time<00:01:50.479> and<00:01:51.479> so<00:01:51.630> we'll<00:01:51.750> go<00:01:51.869> ahead<00:01:51.899> and<00:01:52.200> assign

00:01:52.399 --> 00:01:52.409 
time and so we'll go ahead and assign

00:01:52.409 --> 00:01:55.580 
time and so we'll go ahead and assign
those<00:01:52.829> three<00:01:53.100> tasks<00:01:53.869> so<00:01:54.869> there's<00:01:55.049> task<00:01:55.350> one

00:01:55.580 --> 00:01:55.590 
those three tasks so there's task one

00:01:55.590 --> 00:01:57.590 
those three tasks so there's task one
four<00:01:55.829> and<00:01:55.950> five<00:01:56.159> assigned<00:01:56.670> and<00:01:57.000> notice<00:01:57.450> after

00:01:57.590 --> 00:01:57.600 
four and five assigned and notice after

00:01:57.600 --> 00:02:00.830 
four and five assigned and notice after
one<00:01:57.960> unit<00:01:58.290> of<00:01:58.380> time<00:01:58.469> task<00:01:59.310> one<00:01:59.759> gets<00:02:00.299> complete

00:02:00.830 --> 00:02:00.840 
one unit of time task one gets complete

00:02:00.840 --> 00:02:03.530 
one unit of time task one gets complete
and<00:02:01.049> when<00:02:01.530> task<00:02:01.829> one<00:02:02.130> gets<00:02:02.399> complete<00:02:02.820> tasks

00:02:03.530 --> 00:02:03.540 
and when task one gets complete tasks

00:02:03.540 --> 00:02:07.639 
and when task one gets complete tasks
six<00:02:03.960> seven<00:02:04.950> and<00:02:05.159> eight<00:02:05.520> all<00:02:06.180> become<00:02:07.020> ready<00:02:07.350> and

00:02:07.639 --> 00:02:07.649 
six seven and eight all become ready and

00:02:07.649 --> 00:02:09.790 
six seven and eight all become ready and
so<00:02:07.950> now<00:02:08.099> we<00:02:08.160> can<00:02:08.369> just<00:02:08.399> go<00:02:08.610> ahead<00:02:08.729> and<00:02:08.970> assign

00:02:09.790 --> 00:02:09.800 
so now we can just go ahead and assign

00:02:09.800 --> 00:02:11.120 
so now we can just go ahead and assign
tasks

00:02:11.120 --> 00:02:11.130 
tasks

00:02:11.130 --> 00:02:14.240 
tasks
six<00:02:11.340> so<00:02:12.090> task<00:02:12.390> 6<00:02:12.840> gets<00:02:13.140> assigned<00:02:13.500> and<00:02:13.830> it<00:02:13.950> takes

00:02:14.240 --> 00:02:14.250 
six so task 6 gets assigned and it takes

00:02:14.250 --> 00:02:17.720 
six so task 6 gets assigned and it takes
two<00:02:14.820> units<00:02:15.270> of<00:02:15.480> time<00:02:15.780> taking<00:02:16.710> us<00:02:16.830> out<00:02:16.980> to<00:02:17.280> three

00:02:17.720 --> 00:02:17.730 
two units of time taking us out to three

00:02:17.730 --> 00:02:23.240 
two units of time taking us out to three
now<00:02:19.070> when<00:02:20.070> task<00:02:20.700> six<00:02:21.210> gets<00:02:21.510> complete<00:02:22.250> then

00:02:23.240 --> 00:02:23.250 
now when task six gets complete then

00:02:23.250 --> 00:02:26.180 
now when task six gets complete then
we'll<00:02:24.030> go<00:02:24.240> ahead<00:02:24.360> and<00:02:24.570> assign<00:02:24.720> task<00:02:25.440> 7<00:02:25.830> and

00:02:26.180 --> 00:02:26.190 
we'll go ahead and assign task 7 and

00:02:26.190 --> 00:02:30.200 
we'll go ahead and assign task 7 and
task<00:02:26.790> 7<00:02:27.090> takes<00:02:27.240> two<00:02:27.750> units<00:02:28.110> of<00:02:28.290> time<00:02:28.850> and<00:02:29.850> that

00:02:30.200 --> 00:02:30.210 
task 7 takes two units of time and that

00:02:30.210 --> 00:02:32.420 
task 7 takes two units of time and that
takes<00:02:30.420> us<00:02:30.600> out<00:02:30.780> to<00:02:30.810> five<00:02:31.230> units<00:02:31.710> of<00:02:31.830> time<00:02:32.160> and

00:02:32.420 --> 00:02:32.430 
takes us out to five units of time and

00:02:32.430 --> 00:02:35.570 
takes us out to five units of time and
when<00:02:32.580> task<00:02:32.910> seven<00:02:33.420> gets<00:02:33.660> complete<00:02:34.370> then<00:02:35.370> we'll

00:02:35.570 --> 00:02:35.580 
when task seven gets complete then we'll

00:02:35.580 --> 00:02:38.210 
when task seven gets complete then we'll
go<00:02:35.790> ahead<00:02:35.910> and<00:02:36.210> assign<00:02:36.510> I<00:02:36.570> guess<00:02:37.320> task<00:02:37.650> 8<00:02:37.920> and

00:02:38.210 --> 00:02:38.220 
go ahead and assign I guess task 8 and

00:02:38.220 --> 00:02:41.090 
go ahead and assign I guess task 8 and
so<00:02:38.730> task<00:02:39.030> 8<00:02:39.300> gets<00:02:39.540> assigned<00:02:39.930> again<00:02:40.650> with<00:02:40.830> two

00:02:41.090 --> 00:02:41.100 
so task 8 gets assigned again with two

00:02:41.100 --> 00:02:44.300 
so task 8 gets assigned again with two
units<00:02:41.490> of<00:02:41.670> time<00:02:41.940> taking<00:02:42.420> us<00:02:42.540> out<00:02:42.660> to<00:02:42.720> seven<00:02:43.350> so

00:02:44.300 --> 00:02:44.310 
units of time taking us out to seven so

00:02:44.310 --> 00:02:48.500 
units of time taking us out to seven so
now<00:02:44.990> when<00:02:45.990> tasks<00:02:46.500> four<00:02:46.830> and<00:02:47.040> five<00:02:47.370> get<00:02:47.820> done

00:02:48.500 --> 00:02:48.510 
now when tasks four and five get done

00:02:48.510 --> 00:02:50.840 
now when tasks four and five get done
let's<00:02:49.050> here<00:02:49.290> task<00:02:49.590> four<00:02:49.950> and<00:02:50.100> five<00:02:50.340> get<00:02:50.610> done

00:02:50.840 --> 00:02:50.850 
let's here task four and five get done

00:02:50.850 --> 00:02:55.520 
let's here task four and five get done
is<00:02:51.150> anything<00:02:51.570> new<00:02:51.840> ready<00:02:52.940> no<00:02:53.960> okay<00:02:54.960> so<00:02:55.020> I<00:02:55.200> guess

00:02:55.520 --> 00:02:55.530 
is anything new ready no okay so I guess

00:02:55.530 --> 00:02:57.260 
is anything new ready no okay so I guess
we'll<00:02:55.770> go<00:02:55.920> ahead<00:02:56.040> and<00:02:56.220> assign<00:02:56.610> the<00:02:56.820> next<00:02:57.090> thing

00:02:57.260 --> 00:02:57.270 
we'll go ahead and assign the next thing

00:02:57.270 --> 00:02:59.030 
we'll go ahead and assign the next thing
that<00:02:57.300> is<00:02:57.420> ready<00:02:57.810> on<00:02:57.990> the<00:02:58.020> priority<00:02:58.560> list<00:02:58.740> and

00:02:59.030 --> 00:02:59.040 
that is ready on the priority list and

00:02:59.040 --> 00:03:02.840 
that is ready on the priority list and
that<00:02:59.220> would<00:02:59.340> be<00:02:59.520> tasks<00:03:00.060> two<00:03:00.750> and<00:03:01.110> three<00:03:01.850> which

00:03:02.840 --> 00:03:02.850 
that would be tasks two and three which

00:03:02.850 --> 00:03:04.550 
that would be tasks two and three which
you<00:03:02.970> might<00:03:03.120> remember<00:03:03.240> both<00:03:03.600> have<00:03:03.810> a<00:03:03.840> time<00:03:04.230> of

00:03:04.550 --> 00:03:04.560 
you might remember both have a time of

00:03:04.560 --> 00:03:08.470 
you might remember both have a time of
one<00:03:05.370> so<00:03:06.090> task<00:03:06.420> three<00:03:06.810> gets<00:03:07.020> assigned<00:03:07.380> and

00:03:08.470 --> 00:03:08.480 
one so task three gets assigned and

00:03:08.480 --> 00:03:11.990 
one so task three gets assigned and
let's<00:03:09.480> see<00:03:09.660> our<00:03:09.750> task<00:03:10.050> it's<00:03:10.950> our<00:03:11.070> job<00:03:11.340> now<00:03:11.850> and

00:03:11.990 --> 00:03:12.000 
let's see our task it's our job now and

00:03:12.000 --> 00:03:14.200 
let's see our task it's our job now and
should<00:03:12.060> have<00:03:12.180> been<00:03:12.210> tasked<00:03:12.630> to<00:03:12.770> sorry<00:03:13.770> and

00:03:14.200 --> 00:03:14.210 
should have been tasked to sorry and

00:03:14.210 --> 00:03:17.210 
should have been tasked to sorry and
task<00:03:15.210> three<00:03:15.390> gets<00:03:15.900> assigned<00:03:16.260> here<00:03:16.830> and<00:03:17.040> both

00:03:17.210 --> 00:03:17.220 
task three gets assigned here and both

00:03:17.220 --> 00:03:19.940 
task three gets assigned here and both
those<00:03:17.460> can<00:03:17.670> take<00:03:17.850> till<00:03:18.060> times<00:03:18.300> seven<00:03:18.770> and<00:03:19.770> then

00:03:19.940 --> 00:03:19.950 
those can take till times seven and then

00:03:19.950 --> 00:03:23.630 
those can take till times seven and then
win<00:03:20.220> tasks<00:03:21.170> at<00:03:22.170> time<00:03:22.500> seven<00:03:23.010> when<00:03:23.220> all<00:03:23.400> of

00:03:23.630 --> 00:03:23.640 
win tasks at time seven when all of

00:03:23.640 --> 00:03:24.890 
win tasks at time seven when all of
those<00:03:23.790> tasks<00:03:24.390> get<00:03:24.570> done

00:03:24.890 --> 00:03:24.900 
those tasks get done

00:03:24.900 --> 00:03:28.460 
those tasks get done
finally<00:03:25.680> task<00:03:25.980> 9<00:03:26.460> is<00:03:26.520> ready<00:03:27.420> and<00:03:27.720> we<00:03:28.440> can

00:03:28.460 --> 00:03:28.470 
finally task 9 is ready and we can

00:03:28.470 --> 00:03:31.760 
finally task 9 is ready and we can
assign<00:03:28.980> it<00:03:29.270> and<00:03:30.290> so<00:03:31.290> we<00:03:31.410> could<00:03:31.500> go<00:03:31.590> ahead<00:03:31.680> and

00:03:31.760 --> 00:03:31.770 
assign it and so we could go ahead and

00:03:31.770 --> 00:03:34.190 
assign it and so we could go ahead and
assign<00:03:32.040> task<00:03:32.340> nine<00:03:32.640> here<00:03:33.030> and<00:03:33.300> that<00:03:33.420> has<00:03:33.510> six

00:03:34.190 --> 00:03:34.200 
assign task nine here and that has six

00:03:34.200 --> 00:03:38.600 
assign task nine here and that has six
units<00:03:34.560> of<00:03:34.680> time<00:03:34.980> which<00:03:35.880> takes<00:03:36.180> us<00:03:36.360> out<00:03:36.540> to<00:03:37.610> 13

00:03:38.600 --> 00:03:38.610 
units of time which takes us out to 13

00:03:38.610 --> 00:03:41.120 
units of time which takes us out to 13
and<00:03:38.910> there<00:03:39.540> is<00:03:39.720> our<00:03:39.870> schedule<00:03:40.470> and<00:03:40.740> of<00:03:40.920> course

00:03:41.120 --> 00:03:41.130 
and there is our schedule and of course

00:03:41.130 --> 00:03:43.730 
and there is our schedule and of course
all<00:03:41.370> of<00:03:41.520> this<00:03:41.640> time<00:03:42.000> here<00:03:42.330> is<00:03:42.480> idle<00:03:42.959> time<00:03:43.320> and

00:03:43.730 --> 00:03:43.740 
all of this time here is idle time and

00:03:43.740 --> 00:03:46.540 
all of this time here is idle time and
there's<00:03:44.400> our<00:03:44.550> schedule<00:03:45.000> created<00:03:45.510> by<00:03:45.720> the

00:03:46.540 --> 00:03:46.550 
there's our schedule created by the

00:03:46.550 --> 00:03:51.170 
there's our schedule created by the
critical<00:03:47.550> path<00:03:47.970> algorithm<00:03:48.620> now<00:03:49.970> this<00:03:50.970> has<00:03:51.150> a

00:03:51.170 --> 00:03:51.180 
critical path algorithm now this has a

00:03:51.180 --> 00:03:53.540 
critical path algorithm now this has a
total<00:03:51.540> finishing<00:03:52.110> time<00:03:52.290> of<00:03:52.440> 13<00:03:52.920> and<00:03:53.250> you

00:03:53.540 --> 00:03:53.550 
total finishing time of 13 and you

00:03:53.550 --> 00:03:55.190 
total finishing time of 13 and you
kindly<00:03:53.880> have<00:03:54.060> to<00:03:54.209> wonder<00:03:54.510> could<00:03:54.540> we<00:03:54.900> have<00:03:55.020> done

00:03:55.190 --> 00:03:55.200 
kindly have to wonder could we have done

00:03:55.200 --> 00:03:59.030 
kindly have to wonder could we have done
better<00:03:55.260> and<00:03:56.750> the<00:03:57.750> answer<00:03:58.110> is<00:03:58.260> absolutely<00:03:58.440> we

00:03:59.030 --> 00:03:59.040 
better and the answer is absolutely we

00:03:59.040 --> 00:04:00.230 
better and the answer is absolutely we
could<00:03:59.310> have<00:03:59.430> done<00:03:59.580> better<00:03:59.820> in<00:04:00.120> this

00:04:00.230 --> 00:04:00.240 
could have done better in this

00:04:00.240 --> 00:04:03.050 
could have done better in this
particular<00:04:00.630> case<00:04:01.110> and<00:04:02.070> here's<00:04:02.400> the<00:04:02.610> schedule

00:04:03.050 --> 00:04:03.060 
particular case and here's the schedule

00:04:03.060 --> 00:04:06.110 
particular case and here's the schedule
that<00:04:03.209> would<00:04:03.360> do<00:04:03.600> it<00:04:03.780> it<00:04:04.590> makes<00:04:04.860> sense<00:04:05.100> here<00:04:05.550> to

00:04:06.110 --> 00:04:06.120 
that would do it it makes sense here to

00:04:06.120 --> 00:04:08.000 
that would do it it makes sense here to
do<00:04:06.420> go<00:04:06.690> ahead<00:04:06.720> and<00:04:06.870> do<00:04:06.990> all<00:04:07.020> those<00:04:07.380> time<00:04:07.740> 1

00:04:08.000 --> 00:04:08.010 
do go ahead and do all those time 1

00:04:08.010 --> 00:04:10.340 
do go ahead and do all those time 1
tasks<00:04:08.670> and<00:04:08.820> then<00:04:09.270> we<00:04:09.420> can<00:04:09.570> do<00:04:09.660> these<00:04:09.780> time<00:04:10.080> 2

00:04:10.340 --> 00:04:10.350 
tasks and then we can do these time 2

00:04:10.350 --> 00:04:12.500 
tasks and then we can do these time 2
tasks<00:04:10.950> and<00:04:11.160> then<00:04:11.280> we<00:04:11.490> all<00:04:11.670> the<00:04:11.790> processors<00:04:12.300> can

00:04:12.500 --> 00:04:12.510 
tasks and then we all the processors can

00:04:12.510 --> 00:04:14.690 
tasks and then we all the processors can
work<00:04:12.660> on<00:04:12.810> the<00:04:12.900> time<00:04:13.110> 3<00:04:13.380> tasks<00:04:13.860> and<00:04:14.010> that<00:04:14.490> gives

00:04:14.690 --> 00:04:14.700 
work on the time 3 tasks and that gives

00:04:14.700 --> 00:04:17.060 
work on the time 3 tasks and that gives
us<00:04:14.820> a<00:04:14.910> completion<00:04:15.420> time<00:04:15.690> of<00:04:15.720> 9<00:04:16.080> the<00:04:16.830> point

00:04:17.060 --> 00:04:17.070 
us a completion time of 9 the point

00:04:17.070 --> 00:04:18.979 
us a completion time of 9 the point
being<00:04:17.340> here<00:04:17.609> is<00:04:17.730> that<00:04:17.910> while<00:04:18.090> the<00:04:18.209> critical

00:04:18.979 --> 00:04:18.989 
being here is that while the critical

00:04:18.989 --> 00:04:21.440 
being here is that while the critical
path<00:04:19.169> algorithm<00:04:19.620> will<00:04:20.130> often<00:04:20.700> lead<00:04:20.910> to<00:04:20.940> a<00:04:21.180> good

00:04:21.440 --> 00:04:21.450 
path algorithm will often lead to a good

00:04:21.450 --> 00:04:24.620 
path algorithm will often lead to a good
very<00:04:21.660> good<00:04:21.750> schedule<00:04:22.380> it<00:04:22.710> is<00:04:23.190> not<00:04:23.400> an<00:04:23.610> optimal

00:04:24.620 --> 00:04:24.630 
very good schedule it is not an optimal

00:04:24.630 --> 00:04:25.910 
very good schedule it is not an optimal
them<00:04:24.780> in<00:04:24.870> other<00:04:24.990> words<00:04:25.200> it<00:04:25.350> doesn't<00:04:25.710> always

00:04:25.910 --> 00:04:25.920 
them in other words it doesn't always

00:04:25.920 --> 00:04:30.350 
them in other words it doesn't always
produce<00:04:26.370> the<00:04:26.850> ideal<00:04:27.720> results

