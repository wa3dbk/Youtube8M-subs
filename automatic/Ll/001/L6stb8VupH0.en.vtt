WEBVTT
Kind: captions
Language: en

00:00:04.590 --> 00:00:08.450 

in<00:00:05.600> this<00:00:06.600> video<00:00:06.840> we'll<00:00:07.470> introduce<00:00:07.710> you<00:00:07.950> to<00:00:08.160> one

00:00:08.450 --> 00:00:08.460 
in this video we'll introduce you to one

00:00:08.460 --> 00:00:10.459 
in this video we'll introduce you to one
of<00:00:08.490> the<00:00:08.610> most<00:00:08.790> anticipated<00:00:09.030> new<00:00:09.629> features<00:00:10.170> for

00:00:10.459 --> 00:00:10.469 
of the most anticipated new features for

00:00:10.469 --> 00:00:15.709 
of the most anticipated new features for
v-ray<00:00:10.860> for<00:00:11.100> rhino<00:00:11.510> v-ray<00:00:12.510> proxy<00:00:14.270> by<00:00:15.270> using

00:00:15.709 --> 00:00:15.719 
v-ray for rhino v-ray proxy by using

00:00:15.719 --> 00:00:17.930 
v-ray for rhino v-ray proxy by using
v-ray<00:00:15.900> proxies<00:00:16.560> you<00:00:16.800> can<00:00:17.160> now<00:00:17.310> render<00:00:17.580> scenes

00:00:17.930 --> 00:00:17.940 
v-ray proxies you can now render scenes

00:00:17.940 --> 00:00:19.670 
v-ray proxies you can now render scenes
in<00:00:18.119> Rhino<00:00:18.359> that<00:00:18.900> have<00:00:19.050> millions<00:00:19.350> upon

00:00:19.670 --> 00:00:19.680 
in Rhino that have millions upon

00:00:19.680 --> 00:00:22.189 
in Rhino that have millions upon
millions<00:00:19.859> of<00:00:20.430> polygons<00:00:20.910> while<00:00:21.599> having<00:00:21.960> very

00:00:22.189 --> 00:00:22.199 
millions of polygons while having very

00:00:22.199 --> 00:00:23.900 
millions of polygons while having very
little<00:00:22.500> impact<00:00:22.890> on<00:00:23.099> the<00:00:23.369> RAM<00:00:23.550> of<00:00:23.580> your

00:00:23.900 --> 00:00:23.910 
little impact on the RAM of your

00:00:23.910 --> 00:00:26.989 
little impact on the RAM of your
computer<00:00:24.650> this<00:00:25.650> is<00:00:25.710> critical<00:00:26.400> when<00:00:26.580> using<00:00:26.789> the

00:00:26.989 --> 00:00:26.999 
computer this is critical when using the

00:00:26.999 --> 00:00:29.359 
computer this is critical when using the
32<00:00:27.449> bit<00:00:27.660> version<00:00:27.810> of<00:00:28.079> Rhino<00:00:28.349> and<00:00:28.679> still<00:00:29.339> very

00:00:29.359 --> 00:00:29.369 
32 bit version of Rhino and still very

00:00:29.369 --> 00:00:31.819 
32 bit version of Rhino and still very
useful<00:00:29.759> when<00:00:30.240> using<00:00:30.449> the<00:00:30.659> 64-bit<00:00:31.320> versions<00:00:31.710> of

00:00:31.819 --> 00:00:31.829 
useful when using the 64-bit versions of

00:00:31.829 --> 00:00:36.710 
useful when using the 64-bit versions of
Rhino<00:00:33.710> the<00:00:34.710> v-ray<00:00:35.070> proxy<00:00:35.100> is<00:00:35.790> also<00:00:36.239> known<00:00:36.450> as<00:00:36.660> a

00:00:36.710 --> 00:00:36.720 
Rhino the v-ray proxy is also known as a

00:00:36.720 --> 00:00:40.130 
Rhino the v-ray proxy is also known as a
veer<00:00:37.020> a<00:00:37.200> mesh<00:00:37.790> v-ray<00:00:38.790> meshes<00:00:39.240> are<00:00:39.390> dynamic

00:00:40.130 --> 00:00:40.140 
veer a mesh v-ray meshes are dynamic

00:00:40.140 --> 00:00:42.740 
veer a mesh v-ray meshes are dynamic
geometry<00:00:40.740> and<00:00:40.950> are<00:00:41.520> stored<00:00:41.850> as<00:00:42.120> an<00:00:42.390> external

00:00:42.740 --> 00:00:42.750 
geometry and are stored as an external

00:00:42.750 --> 00:00:45.590 
geometry and are stored as an external
file<00:00:43.110> on<00:00:43.350> your<00:00:43.470> hard<00:00:43.530> disk<00:00:44.030> the<00:00:45.030> meshes<00:00:45.450> are

00:00:45.590 --> 00:00:45.600 
file on your hard disk the meshes are

00:00:45.600 --> 00:00:47.530 
file on your hard disk the meshes are
loaded<00:00:46.020> up<00:00:46.170> during<00:00:46.470> the<00:00:46.680> rendering<00:00:46.860> process

00:00:47.530 --> 00:00:47.540 
loaded up during the rendering process

00:00:47.540 --> 00:00:50.660 
loaded up during the rendering process
this<00:00:48.540> is<00:00:48.780> why<00:00:48.900> v-ray<00:00:49.410> uses<00:00:49.860> less<00:00:50.070> RAM<00:00:50.340> than<00:00:50.580> you

00:00:50.660 --> 00:00:50.670 
this is why v-ray uses less RAM than you

00:00:50.670 --> 00:00:52.819 
this is why v-ray uses less RAM than you
would<00:00:50.820> expect

00:00:52.819 --> 00:00:52.829 
would expect

00:00:52.829 --> 00:00:55.099 
would expect
what<00:00:53.550> is<00:00:53.699> great<00:00:53.909> about<00:00:53.940> the<00:00:54.269> v-ray<00:00:54.570> mesh<00:00:54.839> is

00:00:55.099 --> 00:00:55.109 
what is great about the v-ray mesh is

00:00:55.109 --> 00:00:57.110 
what is great about the v-ray mesh is
that<00:00:55.530> you<00:00:55.649> can<00:00:55.829> create<00:00:55.980> v-ray<00:00:56.460> meshes<00:00:56.909> from

00:00:57.110 --> 00:00:57.120 
that you can create v-ray meshes from

00:00:57.120 --> 00:00:59.119 
that you can create v-ray meshes from
your<00:00:57.300> Rhino<00:00:57.510> models<00:00:58.019> or<00:00:58.530> you<00:00:58.769> can<00:00:58.920> import

00:00:59.119 --> 00:00:59.129 
your Rhino models or you can import

00:00:59.129 --> 00:01:02.450 
your Rhino models or you can import
v-ray<00:00:59.670> meshes<00:01:00.059> made<00:01:00.690> from<00:01:01.019> v-ray<00:01:01.409> for<00:01:01.469> 3ds<00:01:02.039> Max

00:01:02.450 --> 00:01:02.460 
v-ray meshes made from v-ray for 3ds Max

00:01:02.460 --> 00:01:06.320 
v-ray meshes made from v-ray for 3ds Max
and<00:01:02.640> Maya<00:01:03.140> in<00:01:04.430> addition<00:01:05.430> to<00:01:05.519> supporting<00:01:05.700> v-ray

00:01:06.320 --> 00:01:06.330 
and Maya in addition to supporting v-ray

00:01:06.330 --> 00:01:08.990 
and Maya in addition to supporting v-ray
proxies<00:01:06.869> we<00:01:07.290> have<00:01:07.439> also<00:01:07.770> optimized<00:01:08.369> the<00:01:08.670> v-ray

00:01:08.990 --> 00:01:09.000 
proxies we have also optimized the v-ray

00:01:09.000 --> 00:01:11.749 
proxies we have also optimized the v-ray
core<00:01:09.330> so<00:01:10.049> that<00:01:10.080> v-ray<00:01:10.590> will<00:01:10.770> render<00:01:11.130> dynamic

00:01:11.749 --> 00:01:11.759 
core so that v-ray will render dynamic

00:01:11.759 --> 00:01:13.880 
core so that v-ray will render dynamic
geometries<00:01:12.330> like<00:01:12.600> proxies<00:01:13.110> and<00:01:13.289> displacement

00:01:13.880 --> 00:01:13.890 
geometries like proxies and displacement

00:01:13.890 --> 00:01:16.480 
geometries like proxies and displacement
much<00:01:14.189> faster

00:01:16.480 --> 00:01:16.490 
much faster

00:01:16.490 --> 00:01:19.700 
much faster
here<00:01:17.490> is<00:01:17.640> a<00:01:17.670> model<00:01:18.060> of<00:01:18.180> a<00:01:18.300> lego<00:01:18.540> car<00:01:18.870> model<00:01:19.229> that

00:01:19.700 --> 00:01:19.710 
here is a model of a lego car model that

00:01:19.710 --> 00:01:21.380 
here is a model of a lego car model that
we<00:01:19.830> are<00:01:19.950> going<00:01:20.130> to<00:01:20.220> convert<00:01:20.430> into<00:01:20.790> a<00:01:21.000> v-ray

00:01:21.380 --> 00:01:21.390 
we are going to convert into a v-ray

00:01:21.390 --> 00:01:24.590 
we are going to convert into a v-ray
proxy<00:01:22.310> let's<00:01:23.310> right-click<00:01:23.640> on<00:01:24.120> the<00:01:24.270> v-ray

00:01:24.590 --> 00:01:24.600 
proxy let's right-click on the v-ray

00:01:24.600 --> 00:01:27.200 
proxy let's right-click on the v-ray
proxy<00:01:24.630> icon<00:01:25.200> to<00:01:25.800> access<00:01:26.010> the<00:01:26.430> proxy<00:01:26.850> options

00:01:27.200 --> 00:01:27.210 
proxy icon to access the proxy options

00:01:27.210 --> 00:01:30.870 
proxy icon to access the proxy options
window

00:01:30.870 --> 00:01:30.880 

00:01:30.880 --> 00:01:33.940 

give<00:01:31.880> the<00:01:32.060> proxy<00:01:32.450> a<00:01:32.479> name<00:01:32.750> and<00:01:33.020> then<00:01:33.320> click<00:01:33.590> OK

00:01:33.940 --> 00:01:33.950 
give the proxy a name and then click OK

00:01:33.950 --> 00:01:41.970 
give the proxy a name and then click OK
to<00:01:34.010> save<00:01:34.400> the<00:01:34.430> proxy

00:01:41.970 --> 00:01:41.980 

00:01:41.980 --> 00:01:45.290 

you

00:01:45.290 --> 00:01:45.300 

00:01:45.300 --> 00:01:48.240 

notice<00:01:46.300> that<00:01:46.510> v-ray<00:01:46.930> automatically<00:01:47.680> replaces

00:01:48.240 --> 00:01:48.250 
notice that v-ray automatically replaces

00:01:48.250 --> 00:01:51.180 
notice that v-ray automatically replaces
the<00:01:48.400> NURBS<00:01:48.610> model<00:01:49.060> with<00:01:49.210> a<00:01:49.240> v-ray<00:01:49.630> mesh<00:01:50.190> now

00:01:51.180 --> 00:01:51.190 
the NURBS model with a v-ray mesh now

00:01:51.190 --> 00:01:53.430 
the NURBS model with a v-ray mesh now
with<00:01:51.640> the<00:01:51.760> v-ray<00:01:52.090> proxy<00:01:52.120> in<00:01:52.720> the<00:01:52.810> scene<00:01:53.050> the

00:01:53.430 --> 00:01:53.440 
with the v-ray proxy in the scene the

00:01:53.440 --> 00:01:55.440 
with the v-ray proxy in the scene the
viewport<00:01:53.979> performance<00:01:54.010> of<00:01:54.640> Rhino<00:01:54.880> is<00:01:55.180> greatly

00:01:55.440 --> 00:01:55.450 
viewport performance of Rhino is greatly

00:01:55.450 --> 00:01:59.070 
viewport performance of Rhino is greatly
improved<00:01:55.690> and<00:01:56.260> we<00:01:56.620> are<00:01:56.740> using<00:01:57.130> less<00:01:57.340> RAM<00:01:58.080> the

00:01:59.070 --> 00:01:59.080 
improved and we are using less RAM the

00:01:59.080 --> 00:02:01.230 
improved and we are using less RAM the
original<00:01:59.590> lego<00:01:59.770> car<00:02:00.130> model<00:02:00.490> is<00:02:00.640> a<00:02:00.670> very<00:02:00.970> high

00:02:01.230 --> 00:02:01.240 
original lego car model is a very high

00:02:01.240 --> 00:02:04.020 
original lego car model is a very high
level<00:02:01.479> of<00:02:01.690> detail<00:02:02.100> when<00:02:03.100> the<00:02:03.250> nerves<00:02:03.460> model<00:02:03.940> is

00:02:04.020 --> 00:02:04.030 
level of detail when the nerves model is

00:02:04.030 --> 00:02:06.510 
level of detail when the nerves model is
converted<00:02:04.540> to<00:02:04.570> a<00:02:04.720> Rhino<00:02:04.990> render<00:02:05.470> mesh<00:02:05.680> it<00:02:06.190> has

00:02:06.510 --> 00:02:06.520 
converted to a Rhino render mesh it has

00:02:06.520 --> 00:02:10.710 
converted to a Rhino render mesh it has
a<00:02:06.550> total<00:02:07.000> of<00:02:07.090> 4.5<00:02:07.990> million<00:02:08.410> polygons<00:02:09.420> with<00:02:10.420> two

00:02:10.710 --> 00:02:10.720 
a total of 4.5 million polygons with two

00:02:10.720 --> 00:02:13.170 
a total of 4.5 million polygons with two
copies<00:02:11.140> of<00:02:11.170> the<00:02:11.410> car<00:02:11.620> proxy<00:02:12.100> object<00:02:12.520> and<00:02:12.700> a<00:02:12.910> few

00:02:13.170 --> 00:02:13.180 
copies of the car proxy object and a few

00:02:13.180 --> 00:02:15.540 
copies of the car proxy object and a few
extra<00:02:13.540> pieces<00:02:13.720> we<00:02:14.470> have<00:02:14.650> around<00:02:14.920> 10<00:02:15.190> million

00:02:15.540 --> 00:02:15.550 
extra pieces we have around 10 million

00:02:15.550 --> 00:02:18.630 
extra pieces we have around 10 million
polygons<00:02:16.180> in<00:02:16.420> the<00:02:16.510> scene<00:02:17.340> we<00:02:18.340> could<00:02:18.520> add

00:02:18.630 --> 00:02:18.640 
polygons in the scene we could add

00:02:18.640 --> 00:02:20.550 
polygons in the scene we could add
several<00:02:18.970> more<00:02:19.120> instances<00:02:19.810> of<00:02:19.870> the<00:02:20.080> Lego<00:02:20.260> car

00:02:20.550 --> 00:02:20.560 
several more instances of the Lego car

00:02:20.560 --> 00:02:22.890 
several more instances of the Lego car
proxy<00:02:21.070> and<00:02:21.220> there<00:02:21.700> is<00:02:21.820> very<00:02:22.060> little<00:02:22.300> change<00:02:22.630> in

00:02:22.890 --> 00:02:22.900 
proxy and there is very little change in

00:02:22.900 --> 00:02:25.490 
proxy and there is very little change in
the<00:02:23.050> viewport<00:02:23.500> performance<00:02:23.530> and<00:02:24.220> RAM<00:02:24.520> use

00:02:25.490 --> 00:02:25.500 
the viewport performance and RAM use

00:02:25.500 --> 00:02:30.200 
the viewport performance and RAM use
let's<00:02:26.500> render<00:02:26.800> the<00:02:27.070> scene

00:02:30.200 --> 00:02:30.210 

00:02:30.210 --> 00:02:33.050 

as<00:02:30.440> you<00:02:31.440> can<00:02:31.590> see<00:02:31.830> while<00:02:32.400> we<00:02:32.580> are<00:02:32.700> rendering

00:02:33.050 --> 00:02:33.060 
as you can see while we are rendering

00:02:33.060 --> 00:02:35.030 
as you can see while we are rendering
this<00:02:33.570> is<00:02:33.780> the<00:02:33.900> amount<00:02:34.080> of<00:02:34.260> memory<00:02:34.500> of<00:02:34.770> RAM<00:02:35.010> that

00:02:35.030 --> 00:02:35.040 
this is the amount of memory of RAM that

00:02:35.040 --> 00:02:38.990 
this is the amount of memory of RAM that
we<00:02:35.340> are<00:02:35.460> using<00:02:36.860> we<00:02:37.860> are<00:02:37.890> not<00:02:38.190> using<00:02:38.550> much<00:02:38.670> RAM

00:02:38.990 --> 00:02:39.000 
we are using we are not using much RAM

00:02:39.000 --> 00:02:48.640 
we are using we are not using much RAM
and<00:02:39.270> the<00:02:39.600> rendering<00:02:40.050> time<00:02:40.260> is<00:02:40.500> very<00:02:40.740> fast

00:02:48.640 --> 00:02:48.650 

00:02:48.650 --> 00:02:51.670 

you

00:02:51.670 --> 00:02:51.680 

00:02:51.680 --> 00:02:54.009 

here<00:02:52.400> is<00:02:52.519> a<00:02:52.549> high-resolution<00:02:53.060> rendering<00:02:53.870> of

00:02:54.009 --> 00:02:54.019 
here is a high-resolution rendering of

00:02:54.019 --> 00:02:56.120 
here is a high-resolution rendering of
the<00:02:54.170> same<00:02:54.409> scene

00:02:56.120 --> 00:02:56.130 
the same scene

00:02:56.130 --> 00:02:58.760 
the same scene
all<00:02:56.190> of<00:02:57.180> the<00:02:57.300> details<00:02:57.720> of<00:02:57.870> the<00:02:58.020> original<00:02:58.440> model

00:02:58.760 --> 00:02:58.770 
all of the details of the original model

00:02:58.770 --> 00:03:01.580 
all of the details of the original model
are<00:02:58.920> there<00:02:59.250> the<00:03:00.150> rendered<00:03:00.540> v-ray<00:03:00.900> proxy<00:03:00.930> has

00:03:01.580 --> 00:03:01.590 
are there the rendered v-ray proxy has

00:03:01.590 --> 00:03:03.800 
are there the rendered v-ray proxy has
exactly<00:03:02.010> the<00:03:02.340> same<00:03:02.580> level<00:03:02.910> of<00:03:02.970> detail<00:03:03.150> as<00:03:03.420> the

00:03:03.800 --> 00:03:03.810 
exactly the same level of detail as the

00:03:03.810 --> 00:03:12.670 
exactly the same level of detail as the
original<00:03:04.260> car<00:03:04.440> model

00:03:12.670 --> 00:03:12.680 

00:03:12.680 --> 00:03:15.280 

here<00:03:13.519> is<00:03:13.640> another<00:03:13.939> image<00:03:14.120> where<00:03:14.750> we<00:03:14.930> are<00:03:15.079> using

00:03:15.280 --> 00:03:15.290 
here is another image where we are using

00:03:15.290 --> 00:03:17.110 
here is another image where we are using
the<00:03:15.500> v-ray<00:03:15.829> proxies<00:03:16.340> for<00:03:16.549> the<00:03:16.670> grass<00:03:16.879> and

00:03:17.110 --> 00:03:17.120 
the v-ray proxies for the grass and

00:03:17.120 --> 00:03:19.539 
the v-ray proxies for the grass and
trees<00:03:17.390> as<00:03:17.689> well<00:03:18.349> as<00:03:18.500> using<00:03:18.680> displacement<00:03:19.010> in

00:03:19.539 --> 00:03:19.549 
trees as well as using displacement in

00:03:19.549 --> 00:03:22.750 
trees as well as using displacement in
other<00:03:19.760> key<00:03:20.090> areas<00:03:20.510> of<00:03:20.540> the<00:03:20.719> scene<00:03:21.019> it<00:03:21.579> is<00:03:22.579> now

00:03:22.750 --> 00:03:22.760 
other key areas of the scene it is now

00:03:22.760 --> 00:03:25.479 
other key areas of the scene it is now
possible<00:03:23.090> to<00:03:23.420> use<00:03:23.719> high<00:03:23.989> polygon<00:03:24.379> models<00:03:24.920> like

00:03:25.479 --> 00:03:25.489 
possible to use high polygon models like

00:03:25.489 --> 00:03:27.099 
possible to use high polygon models like
the<00:03:25.670> trees<00:03:25.909> and<00:03:26.060> grass<00:03:26.120> for<00:03:26.989> your

00:03:27.099 --> 00:03:27.109 
the trees and grass for your

00:03:27.109 --> 00:03:29.770 
the trees and grass for your
architectural<00:03:27.799> scenes<00:03:28.189> as<00:03:28.489> you<00:03:28.939> can<00:03:29.090> see<00:03:29.329> with

00:03:29.770 --> 00:03:29.780 
architectural scenes as you can see with

00:03:29.780 --> 00:03:32.199 
architectural scenes as you can see with
the<00:03:29.930> new<00:03:30.079> v-ray<00:03:30.500> proxy<00:03:30.530> feature<00:03:31.159> you<00:03:31.879> can<00:03:32.060> now

00:03:32.199 --> 00:03:32.209 
the new v-ray proxy feature you can now

00:03:32.209 --> 00:03:34.509 
the new v-ray proxy feature you can now
render<00:03:32.540> very<00:03:32.930> high<00:03:33.230> polygon<00:03:33.650> scenes<00:03:34.099> in<00:03:34.280> Rhino

00:03:34.509 --> 00:03:34.519 
render very high polygon scenes in Rhino

00:03:34.519 --> 00:03:37.209 
render very high polygon scenes in Rhino
we<00:03:35.450> hope<00:03:35.659> you<00:03:35.810> enjoy<00:03:36.170> this<00:03:36.500> powerful<00:03:36.889> new

00:03:37.209 --> 00:03:37.219 
we hope you enjoy this powerful new

00:03:37.219 --> 00:03:40.599 
we hope you enjoy this powerful new
feature<00:03:37.489> of<00:03:37.639> v-ray<00:03:38.299> for<00:03:38.540> rhino

