WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:01.309 

hello<00:00:00.299> and<00:00:00.420> welcome<00:00:00.690> to<00:00:00.719> the<00:00:00.930> seventh<00:00:01.170> video

00:00:01.309 --> 00:00:01.319 
hello and welcome to the seventh video

00:00:01.319 --> 00:00:03.110 
hello and welcome to the seventh video
in<00:00:01.500> this<00:00:01.620> series<00:00:01.890> of<00:00:02.100> videos<00:00:02.520> on<00:00:02.669> programming

00:00:03.110 --> 00:00:03.120 
in this series of videos on programming

00:00:03.120 --> 00:00:06.530 
in this series of videos on programming
a<00:00:03.149> chess<00:00:03.330> engine<00:00:03.689> in<00:00:03.870> C<00:00:04.609> still<00:00:05.609> not<00:00:05.850> at<00:00:06.299> the

00:00:06.530 --> 00:00:06.540 
a chess engine in C still not at the

00:00:06.540 --> 00:00:08.299 
a chess engine in C still not at the
stage<00:00:06.839> of<00:00:06.870> printing<00:00:07.290> out<00:00:07.379> a<00:00:07.649> board<00:00:08.010> on<00:00:08.220> the

00:00:08.299 --> 00:00:08.309 
stage of printing out a board on the

00:00:08.309 --> 00:00:09.950 
stage of printing out a board on the
screen<00:00:08.580> because<00:00:08.820> I<00:00:09.179> need<00:00:09.360> to<00:00:09.389> add<00:00:09.599> yet<00:00:09.780> a

00:00:09.950 --> 00:00:09.960 
screen because I need to add yet a

00:00:09.960 --> 00:00:12.110 
screen because I need to add yet a
couple<00:00:10.230> more<00:00:10.349> things<00:00:10.590> into<00:00:11.400> the<00:00:11.910> board

00:00:12.110 --> 00:00:12.120 
couple more things into the board

00:00:12.120 --> 00:00:13.700 
couple more things into the board
structure<00:00:12.420> before<00:00:12.929> we<00:00:12.990> can<00:00:13.139> actually<00:00:13.259> do<00:00:13.559> that

00:00:13.700 --> 00:00:13.710 
structure before we can actually do that

00:00:13.710 --> 00:00:15.829 
structure before we can actually do that
what<00:00:14.429> I<00:00:14.460> want<00:00:14.700> to<00:00:14.759> add<00:00:14.880> is<00:00:15.030> something<00:00:15.389> called<00:00:15.660> a

00:00:15.829 --> 00:00:15.839 
what I want to add is something called a

00:00:15.839 --> 00:00:19.160 
what I want to add is something called a
paste<00:00:16.139> list<00:00:16.820> if<00:00:17.820> you<00:00:18.119> imagine<00:00:18.300> as<00:00:18.570> generating

00:00:19.160 --> 00:00:19.170 
paste list if you imagine as generating

00:00:19.170 --> 00:00:21.140 
paste list if you imagine as generating
moves<00:00:19.410> say<00:00:19.980> white<00:00:20.250> is<00:00:20.430> to<00:00:20.609> move<00:00:20.730> we<00:00:20.910> want<00:00:21.090> to

00:00:21.140 --> 00:00:21.150 
moves say white is to move we want to

00:00:21.150 --> 00:00:22.640 
moves say white is to move we want to
generate<00:00:21.449> all<00:00:21.630> the<00:00:21.750> moves<00:00:21.960> to<00:00:22.170> white<00:00:22.380> you

00:00:22.640 --> 00:00:22.650 
generate all the moves to white you

00:00:22.650 --> 00:00:24.050 
generate all the moves to white you
might<00:00:23.010> think<00:00:23.279> well<00:00:23.400> how<00:00:23.490> are<00:00:23.550> we<00:00:23.640> going<00:00:23.789> to<00:00:23.939> do

00:00:24.050 --> 00:00:24.060 
might think well how are we going to do

00:00:24.060 --> 00:00:26.480 
might think well how are we going to do
that<00:00:24.090> well<00:00:24.779> porns<00:00:25.109> is<00:00:25.230> fairly<00:00:25.470> easy<00:00:25.740> we<00:00:26.250> have<00:00:26.460> a

00:00:26.480 --> 00:00:26.490 
that well porns is fairly easy we have a

00:00:26.490 --> 00:00:28.759 
that well porns is fairly easy we have a
64-bit<00:00:27.240> number<00:00:27.689> where<00:00:27.900> we<00:00:28.019> can<00:00:28.230> extract<00:00:28.590> the

00:00:28.759 --> 00:00:28.769 
64-bit number where we can extract the

00:00:28.769 --> 00:00:30.919 
64-bit number where we can extract the
bits<00:00:28.949> from<00:00:29.070> to<00:00:29.429> know<00:00:29.580> which<00:00:29.910> squares<00:00:30.330> the

00:00:30.919 --> 00:00:30.929 
bits from to know which squares the

00:00:30.929 --> 00:00:33.709 
bits from to know which squares the
white<00:00:31.109> pawns<00:00:31.380> are<00:00:31.590> on<00:00:31.710> no<00:00:32.279> problem<00:00:32.700> for<00:00:33.660> the

00:00:33.709 --> 00:00:33.719 
white pawns are on no problem for the

00:00:33.719 --> 00:00:35.810 
white pawns are on no problem for the
other<00:00:33.750> white<00:00:34.020> pieces<00:00:34.320> you<00:00:34.680> might<00:00:34.829> think<00:00:35.130> well

00:00:35.810 --> 00:00:35.820 
other white pieces you might think well

00:00:35.820 --> 00:00:37.910 
other white pieces you might think well
we<00:00:35.940> loop<00:00:36.120> through<00:00:36.329> each<00:00:36.360> square<00:00:36.870> in<00:00:37.469> our<00:00:37.649> array

00:00:37.910 --> 00:00:37.920 
we loop through each square in our array

00:00:37.920 --> 00:00:39.590 
we loop through each square in our array
until<00:00:38.309> we<00:00:38.399> come<00:00:38.550> across<00:00:38.670> a<00:00:38.850> white<00:00:39.090> piece<00:00:39.360> and

00:00:39.590 --> 00:00:39.600 
until we come across a white piece and

00:00:39.600 --> 00:00:41.450 
until we come across a white piece and
if<00:00:39.660> it<00:00:39.780> is<00:00:39.930> then<00:00:40.260> generate<00:00:40.680> the<00:00:40.710> moves<00:00:41.010> how

00:00:41.450 --> 00:00:41.460 
if it is then generate the moves how

00:00:41.460 --> 00:00:42.889 
if it is then generate the moves how
this<00:00:41.579> is<00:00:41.700> a<00:00:41.730> fine<00:00:41.969> way<00:00:42.180> of<00:00:42.210> doing<00:00:42.570> it<00:00:42.690> but

00:00:42.889 --> 00:00:42.899 
this is a fine way of doing it but

00:00:42.899 --> 00:00:44.779 
this is a fine way of doing it but
there's<00:00:43.170> a<00:00:43.230> much<00:00:43.379> faster<00:00:43.800> way<00:00:44.190> of<00:00:44.219> doing<00:00:44.370> it

00:00:44.779 --> 00:00:44.789 
there's a much faster way of doing it

00:00:44.789 --> 00:00:46.910 
there's a much faster way of doing it
and<00:00:45.329> that's<00:00:45.629> to<00:00:45.780> maintain<00:00:46.200> something<00:00:46.649> called

00:00:46.910 --> 00:00:46.920 
and that's to maintain something called

00:00:46.920 --> 00:00:50.500 
and that's to maintain something called
a<00:00:47.100> piece<00:00:47.340> list

00:00:50.500 --> 00:00:50.510 

00:00:50.510 --> 00:00:52.209 

and<00:00:50.600> the<00:00:50.960> piece<00:00:51.140> is<00:00:51.320> very<00:00:51.620> simple<00:00:52.010> it's<00:00:52.190> just

00:00:52.209 --> 00:00:52.219 
and the piece is very simple it's just

00:00:52.219 --> 00:00:54.430 
and the piece is very simple it's just
another<00:00:52.609> array<00:00:53.000> and<00:00:53.539> we'll<00:00:53.690> call<00:00:53.870> it<00:00:54.019> P<00:00:54.230> list

00:00:54.430 --> 00:00:54.440 
another array and we'll call it P list

00:00:54.440 --> 00:00:58.509 
another array and we'll call it P list
and<00:00:56.019> it's<00:00:57.019> got<00:00:57.350> to<00:00:57.530> first<00:00:57.739> of<00:00:57.949> all<00:00:58.070> enough

00:00:58.509 --> 00:00:58.519 
and it's got to first of all enough

00:00:58.519 --> 00:01:03.520 
and it's got to first of all enough
spaces<00:00:58.820> for<00:00:59.480> each<00:00:59.690> piece<00:01:00.229> type<00:01:00.559> and<00:01:01.210> then<00:01:02.530> will

00:01:03.520 --> 00:01:03.530 
spaces for each piece type and then will

00:01:03.530 --> 00:01:07.029 
spaces for each piece type and then will
allocate<00:01:04.630> of<00:01:05.630> each<00:01:05.869> type<00:01:06.229> of<00:01:06.439> piece<00:01:06.649> that<00:01:06.680> can

00:01:07.029 --> 00:01:07.039 
allocate of each type of piece that can

00:01:07.039 --> 00:01:09.520 
allocate of each type of piece that can
be<00:01:07.159> up<00:01:07.430> to<00:01:07.490> ten<00:01:08.299> of<00:01:08.509> those<00:01:08.720> on<00:01:09.110> the<00:01:09.259> board<00:01:09.440> at

00:01:09.520 --> 00:01:09.530 
be up to ten of those on the board at

00:01:09.530 --> 00:01:11.920 
be up to ten of those on the board at
any<00:01:09.649> one<00:01:09.830> time<00:01:09.860> because<00:01:10.729> in<00:01:10.850> extreme<00:01:11.210> cases<00:01:11.509> so

00:01:11.920 --> 00:01:11.930 
any one time because in extreme cases so

00:01:11.930 --> 00:01:15.630 
any one time because in extreme cases so
you<00:01:11.990> have<00:01:12.229> two<00:01:12.440> rooks<00:01:12.740> at<00:01:13.039> the<00:01:13.190> start<00:01:13.460> of<00:01:13.640> your

00:01:15.630 --> 00:01:15.640 
you have two rooks at the start of your

00:01:15.640 --> 00:01:18.249 
you have two rooks at the start of your
game<00:01:16.640> and<00:01:16.970> all<00:01:17.090> eight<00:01:17.299> pawns<00:01:17.600> promote<00:01:18.140> two

00:01:18.249 --> 00:01:18.259 
game and all eight pawns promote two

00:01:18.259 --> 00:01:19.630 
game and all eight pawns promote two
rooks<00:01:18.500> and<00:01:18.710> you'll<00:01:18.799> have<00:01:18.950> ten<00:01:19.100> rooks<00:01:19.340> on<00:01:19.549> the

00:01:19.630 --> 00:01:19.640 
rooks and you'll have ten rooks on the

00:01:19.640 --> 00:01:21.760 
rooks and you'll have ten rooks on the
board<00:01:19.850> so<00:01:19.970> we<00:01:20.030> need<00:01:20.180> at<00:01:20.299> least<00:01:20.330> ten<00:01:20.780> inside

00:01:21.760 --> 00:01:21.770 
board so we need at least ten inside

00:01:21.770 --> 00:01:24.550 
board so we need at least ten inside
here<00:01:22.210> how<00:01:23.210> does<00:01:23.450> the<00:01:23.539> piece<00:01:23.720> list<00:01:23.990> work<00:01:24.229> very

00:01:24.550 --> 00:01:24.560 
here how does the piece list work very

00:01:24.560 --> 00:01:25.600 
here how does the piece list work very
quickly<00:01:24.679> we'll<00:01:25.039> see<00:01:25.159> this<00:01:25.280> in<00:01:25.399> a<00:01:25.460> bit<00:01:25.580> more

00:01:25.600 --> 00:01:25.610 
quickly we'll see this in a bit more

00:01:25.610 --> 00:01:27.130 
quickly we'll see this in a bit more
detail<00:01:25.880> when<00:01:26.270> we<00:01:26.330> actually<00:01:26.659> start<00:01:26.869> adding

00:01:27.130 --> 00:01:27.140 
detail when we actually start adding

00:01:27.140 --> 00:01:30.940 
detail when we actually start adding
pieces<00:01:27.319> to<00:01:27.649> a<00:01:27.679> board<00:01:28.450> but<00:01:29.450> let's<00:01:30.170> say<00:01:30.500> we're

00:01:30.940 --> 00:01:30.950 
pieces to a board but let's say we're

00:01:30.950 --> 00:01:35.109 
pieces to a board but let's say we're
adding<00:01:31.610> two<00:01:32.210> knights<00:01:32.509> to<00:01:32.840> the<00:01:32.929> board<00:01:33.490> so<00:01:34.490> the

00:01:35.109 --> 00:01:35.119 
adding two knights to the board so the

00:01:35.119 --> 00:01:36.789 
adding two knights to the board so the
first<00:01:35.330> thing<00:01:35.509> that<00:01:35.600> happens<00:01:35.869> is<00:01:35.960> that<00:01:36.080> all<00:01:36.530> of

00:01:36.789 --> 00:01:36.799 
first thing that happens is that all of

00:01:36.799 --> 00:01:38.620 
first thing that happens is that all of
the<00:01:36.979> positions<00:01:37.340> in<00:01:37.729> this<00:01:37.850> piece<00:01:38.090> list<00:01:38.390> the

00:01:38.620 --> 00:01:38.630 
the positions in this piece list the

00:01:38.630 --> 00:01:40.719 
the positions in this piece list the
values<00:01:39.049> for<00:01:39.229> each<00:01:39.380> position<00:01:40.100> in<00:01:40.250> this<00:01:40.399> array

00:01:40.719 --> 00:01:40.729 
values for each position in this array

00:01:40.729 --> 00:01:45.219 
values for each position in this array
are<00:01:41.030> set<00:01:41.780> to<00:01:42.020> no<00:01:42.530> square<00:01:42.950> and<00:01:43.750> then<00:01:44.750> what<00:01:44.899> we<00:01:45.049> do

00:01:45.219 --> 00:01:45.229 
are set to no square and then what we do

00:01:45.229 --> 00:01:47.320 
are set to no square and then what we do
is<00:01:45.440> we<00:01:45.770> simply<00:01:45.950> say<00:01:46.340> in<00:01:46.729> the<00:01:46.880> case<00:01:47.060> of<00:01:47.240> the

00:01:47.320 --> 00:01:47.330 
is we simply say in the case of the

00:01:47.330 --> 00:01:49.719 
is we simply say in the case of the
white<00:01:47.479> knight<00:01:47.720> piece<00:01:48.080> plist<00:01:48.679> index<00:01:49.340> by<00:01:49.580> our

00:01:49.719 --> 00:01:49.729 
white knight piece plist index by our

00:01:49.729 --> 00:01:52.210 
white knight piece plist index by our
white<00:01:50.209> knight<00:01:50.450> constant<00:01:51.080> which<00:01:51.319> is<00:01:51.590> two<00:01:52.009> I

00:01:52.210 --> 00:01:52.220 
white knight constant which is two I

00:01:52.220 --> 00:01:54.910 
white knight constant which is two I
think<00:01:52.520> if<00:01:52.640> I<00:01:52.729> remember<00:01:52.789> correctly<00:01:53.920> starting

00:01:54.910 --> 00:01:54.920 
think if I remember correctly starting

00:01:54.920 --> 00:01:57.580 
think if I remember correctly starting
at<00:01:55.039> zero<00:01:55.369> equals<00:01:56.300> and<00:01:56.539> let's<00:01:56.660> say<00:01:56.780> e1<00:01:57.170> we<00:01:57.410> add

00:01:57.580 --> 00:01:57.590 
at zero equals and let's say e1 we add

00:01:57.590 --> 00:02:00.940 
at zero equals and let's say e1 we add
of<00:01:57.739> Knight<00:01:57.950> to<00:01:58.129> e1<00:01:59.170> now<00:02:00.170> say<00:02:00.410> we<00:02:00.530> want<00:02:00.560> to<00:02:00.739> add<00:02:00.830> a

00:02:00.940 --> 00:02:00.950 
of Knight to e1 now say we want to add a

00:02:00.950 --> 00:02:05.859 
of Knight to e1 now say we want to add a
knight<00:02:01.220> to<00:02:02.440> d4<00:02:03.789> then<00:02:04.789> simply<00:02:05.300> the<00:02:05.330> next<00:02:05.660> piece

00:02:05.859 --> 00:02:05.869 
knight to d4 then simply the next piece

00:02:05.869 --> 00:02:12.960 
knight to d4 then simply the next piece
in<00:02:06.769> the<00:02:07.099> array<00:02:07.310> is<00:02:08.239> set<00:02:08.479> to<00:02:08.860> d4<00:02:09.860> and<00:02:10.069> so<00:02:10.970> on

00:02:12.960 --> 00:02:12.970 
in the array is set to d4 and so on

00:02:12.970 --> 00:02:16.780 
in the array is set to d4 and so on
until<00:02:13.970> no<00:02:14.210> more<00:02:14.240> nights<00:02:14.870> are<00:02:15.080> being<00:02:15.290> added<00:02:15.790> and

00:02:16.780 --> 00:02:16.790 
until no more nights are being added and

00:02:16.790 --> 00:02:20.470 
until no more nights are being added and
what<00:02:17.720> that<00:02:17.870> means<00:02:18.110> is<00:02:18.440> is<00:02:18.800> that<00:02:19.180> when<00:02:20.180> we<00:02:20.300> then

00:02:20.470 --> 00:02:20.480 
what that means is is that when we then

00:02:20.480 --> 00:02:22.030 
what that means is is that when we then
need<00:02:20.690> to<00:02:20.720> loop<00:02:20.990> through<00:02:21.200> the<00:02:21.350> white<00:02:21.500> pieces<00:02:21.920> on

00:02:22.030 --> 00:02:22.040 
need to loop through the white pieces on

00:02:22.040 --> 00:02:25.360 
need to loop through the white pieces on
the<00:02:22.130> board<00:02:22.310> rather<00:02:22.790> than<00:02:23.180> shoot<00:02:24.050> through<00:02:24.470> this

00:02:25.360 --> 00:02:25.370 
the board rather than shoot through this

00:02:25.370 --> 00:02:27.100 
the board rather than shoot through this
array<00:02:25.580> looking<00:02:26.120> at<00:02:26.210> lots<00:02:26.360> of<00:02:26.480> empty<00:02:26.660> squares

00:02:27.100 --> 00:02:27.110 
array looking at lots of empty squares

00:02:27.110 --> 00:02:29.140 
array looking at lots of empty squares
and<00:02:27.320> skipping<00:02:27.530> to<00:02:27.740> the<00:02:27.770> next<00:02:28.160> we<00:02:28.640> simply<00:02:28.970> have

00:02:29.140 --> 00:02:29.150 
and skipping to the next we simply have

00:02:29.150 --> 00:02:32.380 
and skipping to the next we simply have
to<00:02:29.180> say<00:02:29.540> okay<00:02:30.140> take<00:02:30.590> the<00:02:30.740> Pete's<00:02:30.950> list<00:02:31.390> start

00:02:32.380 --> 00:02:32.390 
to say okay take the Pete's list start

00:02:32.390 --> 00:02:34.450 
to say okay take the Pete's list start
with<00:02:32.540> the<00:02:32.600> white<00:02:32.780> night<00:02:33.050> start<00:02:33.680> at<00:02:33.830> zero<00:02:34.130> and

00:02:34.450 --> 00:02:34.460 
with the white night start at zero and

00:02:34.460 --> 00:02:37.000 
with the white night start at zero and
keep<00:02:35.360> looping<00:02:35.600> and<00:02:35.930> incrementing<00:02:36.470> this<00:02:36.620> index

00:02:37.000 --> 00:02:37.010 
keep looping and incrementing this index

00:02:37.010 --> 00:02:40.060 
keep looping and incrementing this index
here<00:02:37.280> until<00:02:38.270> the<00:02:38.600> value<00:02:38.870> here<00:02:39.110> returned<00:02:39.470> is<00:02:39.740> no

00:02:40.060 --> 00:02:40.070 
here until the value here returned is no

00:02:40.070 --> 00:02:41.560 
here until the value here returned is no
square<00:02:40.430> and<00:02:40.670> then<00:02:40.850> we<00:02:40.970> know<00:02:41.120> we've<00:02:41.300> hit<00:02:41.450> the

00:02:41.560 --> 00:02:41.570 
square and then we know we've hit the

00:02:41.570 --> 00:02:43.570 
square and then we know we've hit the
last<00:02:41.720> piece<00:02:42.080> in<00:02:42.320> the<00:02:42.410> list<00:02:42.620> and<00:02:43.160> we<00:02:43.310> don't<00:02:43.490> need

00:02:43.570 --> 00:02:43.580 
last piece in the list and we don't need

00:02:43.580 --> 00:02:45.670 
last piece in the list and we don't need
to<00:02:43.700> look<00:02:43.820> any<00:02:43.970> more<00:02:44.240> and<00:02:44.450> in<00:02:45.260> the<00:02:45.290> long<00:02:45.500> run

00:02:45.670 --> 00:02:45.680 
to look any more and in the long run

00:02:45.680 --> 00:02:48.610 
to look any more and in the long run
this<00:02:45.860> this<00:02:46.640> saves<00:02:47.000> a<00:02:47.270> lot<00:02:47.420> of<00:02:47.480> time<00:02:48.200> and<00:02:48.470> makes

00:02:48.610 --> 00:02:48.620 
this this saves a lot of time and makes

00:02:48.620 --> 00:02:50.740 
this this saves a lot of time and makes
your<00:02:48.710> program<00:02:48.890> but<00:02:49.850> it<00:02:49.970> made<00:02:50.150> mine<00:02:50.450> when<00:02:50.660> I

00:02:50.740 --> 00:02:50.750 
your program but it made mine when I

00:02:50.750 --> 00:02:53.230 
your program but it made mine when I
first<00:02:50.959> started<00:02:51.380> a<00:02:51.500> good<00:02:51.650> 20%<00:02:52.250> faster<00:02:52.490> during

00:02:53.230 --> 00:02:53.240 
first started a good 20% faster during

00:02:53.240 --> 00:02:54.970 
first started a good 20% faster during
move<00:02:53.540> generation<00:02:54.230> and<00:02:54.410> in<00:02:54.500> fact<00:02:54.709> during<00:02:54.800> the

00:02:54.970 --> 00:02:54.980 
move generation and in fact during the

00:02:54.980 --> 00:02:56.560 
move generation and in fact during the
general<00:02:55.310> search<00:02:55.490> just<00:02:55.850> by<00:02:55.970> adding<00:02:56.240> a<00:02:56.420> piece

00:02:56.560 --> 00:02:56.570 
general search just by adding a piece

00:02:56.570 --> 00:03:00.699 
general search just by adding a piece
list<00:02:56.870> in<00:02:57.050> this<00:02:57.320> way<00:02:57.910> of<00:02:58.910> course<00:02:59.209> you<00:03:00.080> do<00:03:00.260> when

00:03:00.699 --> 00:03:00.709 
list in this way of course you do when

00:03:00.709 --> 00:03:02.980 
list in this way of course you do when
you're<00:03:00.830> making<00:03:01.100> and<00:03:01.610> unmaking<00:03:01.940> moves<00:03:02.660> during

00:03:02.980 --> 00:03:02.990 
you're making and unmaking moves during

00:03:02.990 --> 00:03:05.199 
you're making and unmaking moves during
the<00:03:03.200> search<00:03:03.410> then<00:03:03.800> have<00:03:03.980> to<00:03:04.100> also<00:03:04.520> deal<00:03:04.970> with

00:03:05.199 --> 00:03:05.209 
the search then have to also deal with

00:03:05.209 --> 00:03:08.380 
the search then have to also deal with
the<00:03:05.980> adding<00:03:06.980> and<00:03:07.250> subtracting<00:03:07.670> pieces<00:03:08.209> out<00:03:08.360> of

00:03:08.380 --> 00:03:08.390 
the adding and subtracting pieces out of

00:03:08.390 --> 00:03:11.230 
the adding and subtracting pieces out of
these<00:03:08.660> piece<00:03:08.900> lists<00:03:09.459> but<00:03:10.459> despite<00:03:10.880> that<00:03:10.910> the

00:03:11.230 --> 00:03:11.240 
these piece lists but despite that the

00:03:11.240 --> 00:03:13.150 
these piece lists but despite that the
overhead<00:03:11.630> is<00:03:11.870> a<00:03:11.900> lot<00:03:12.140> smaller<00:03:12.410> by<00:03:12.709> doing<00:03:12.920> it<00:03:13.070> in

00:03:13.150 --> 00:03:13.160 
overhead is a lot smaller by doing it in

00:03:13.160 --> 00:03:14.980 
overhead is a lot smaller by doing it in
this<00:03:13.280> manner<00:03:13.550> rather<00:03:14.150> than<00:03:14.420> looping<00:03:14.810> and

00:03:14.980 --> 00:03:14.990 
this manner rather than looping and

00:03:14.990 --> 00:03:16.750 
this manner rather than looping and
necessary<00:03:15.440> through<00:03:15.680> all<00:03:15.950> of<00:03:15.980> the<00:03:16.250> boards<00:03:16.610> on

00:03:16.750 --> 00:03:16.760 
necessary through all of the boards on

00:03:16.760 --> 00:03:19.000 
necessary through all of the boards on
the<00:03:16.970> guitar<00:03:17.360> the<00:03:17.720> spaces<00:03:18.200> on<00:03:18.470> the<00:03:18.500> game<00:03:18.769> board

00:03:19.000 --> 00:03:19.010 
the guitar the spaces on the game board

00:03:19.010 --> 00:03:21.580 
the guitar the spaces on the game board
especially<00:03:19.489> ours<00:03:20.030> which<00:03:20.209> has<00:03:20.360> 120<00:03:21.140> and<00:03:21.320> border

00:03:21.580 --> 00:03:21.590 
especially ours which has 120 and border

00:03:21.590 --> 00:03:23.020 
especially ours which has 120 and border
squares<00:03:21.890> which<00:03:22.040> are<00:03:22.190> me<00:03:22.370> aren't<00:03:22.640> even<00:03:22.880> on<00:03:22.970> the

00:03:23.020 --> 00:03:23.030 
squares which are me aren't even on the

00:03:23.030 --> 00:03:25.990 
squares which are me aren't even on the
game<00:03:23.989> board<00:03:24.260> okay<00:03:25.250> so<00:03:25.310> that's<00:03:25.489> one<00:03:25.670> thing<00:03:25.850> we

00:03:25.990 --> 00:03:26.000 
game board okay so that's one thing we

00:03:26.000 --> 00:03:28.360 
game board okay so that's one thing we
needed<00:03:26.180> to<00:03:26.360> add<00:03:26.510> to<00:03:26.660> our<00:03:26.690> structure<00:03:27.190> now<00:03:28.190> one

00:03:28.360 --> 00:03:28.370 
needed to add to our structure now one

00:03:28.370 --> 00:03:30.250 
needed to add to our structure now one
more<00:03:28.610> little<00:03:28.790> thing<00:03:28.940> we<00:03:29.239> need<00:03:29.420> to<00:03:29.450> do<00:03:29.720> and<00:03:30.200> I

00:03:30.250 --> 00:03:30.260 
more little thing we need to do and I

00:03:30.260 --> 00:03:32.170 
more little thing we need to do and I
want<00:03:30.440> to<00:03:30.500> talk<00:03:30.560> about<00:03:30.709> is<00:03:30.980> assertions<00:03:31.610> the<00:03:31.940> top

00:03:32.170 --> 00:03:32.180 
want to talk about is assertions the top

00:03:32.180 --> 00:03:35.550 
want to talk about is assertions the top
of<00:03:32.390> this<00:03:33.260> file<00:03:33.560> here<00:03:33.830> we're<00:03:34.040> going<00:03:34.220> to<00:03:34.370> include

00:03:35.550 --> 00:03:35.560 
of this file here we're going to include

00:03:35.560 --> 00:03:40.090 
of this file here we're going to include
STD<00:03:36.560> Li<00:03:37.010> be<00:03:37.310> I<00:03:37.550> think<00:03:37.810> H<00:03:38.810> so<00:03:39.380> the<00:03:39.560> standard

00:03:40.090 --> 00:03:40.100 
STD Li be I think H so the standard

00:03:40.100 --> 00:03:44.440 
STD Li be I think H so the standard
library<00:03:40.580> and<00:03:41.739> we're<00:03:42.739> going<00:03:42.890> to<00:03:42.980> add<00:03:43.239> some<00:03:44.239> code

00:03:44.440 --> 00:03:44.450 
library and we're going to add some code

00:03:44.450 --> 00:03:46.660 
library and we're going to add some code
that<00:03:44.690> I<00:03:44.840> found<00:03:45.350> in<00:03:45.440> a<00:03:45.530> book<00:03:45.650> called<00:03:45.980> beginning

00:03:46.660 --> 00:03:46.670 
that I found in a book called beginning

00:03:46.670 --> 00:03:48.940 
that I found in a book called beginning
programming<00:03:47.180> in<00:03:47.269> C++<00:03:47.510> and<00:03:48.230> I've<00:03:48.350> used<00:03:48.620> ever

00:03:48.940 --> 00:03:48.950 
programming in C++ and I've used ever

00:03:48.950 --> 00:03:50.380 
programming in C++ and I've used ever
since<00:03:49.190> I<00:03:49.310> saw<00:03:49.489> it<00:03:49.700> because<00:03:49.820> it's<00:03:50.030> very<00:03:50.090> very

00:03:50.380 --> 00:03:50.390 
since I saw it because it's very very

00:03:50.390 --> 00:03:52.730 
since I saw it because it's very very
handy

00:03:52.730 --> 00:03:52.740 

00:03:52.740 --> 00:03:54.950 

and<00:03:52.830> it<00:03:53.610> looks<00:03:53.820> big<00:03:54.060> and<00:03:54.090> complicated<00:03:54.750> but<00:03:54.780> it

00:03:54.950 --> 00:03:54.960 
and it looks big and complicated but it

00:03:54.960 --> 00:03:58.840 
and it looks big and complicated but it
isn't<00:03:55.260> it's<00:03:56.100> saying<00:03:56.460> if<00:03:57.030> debug<00:03:57.720> isn't<00:03:58.380> defined

00:03:58.840 --> 00:03:58.850 
isn't it's saying if debug isn't defined

00:03:58.850 --> 00:04:04.310 
isn't it's saying if debug isn't defined
then<00:04:00.350> define<00:04:01.350> a<00:04:01.380> macro<00:04:01.650> called<00:04:02.220> assert<00:04:02.700> and<00:04:03.320> an

00:04:04.310 --> 00:04:04.320 
then define a macro called assert and an

00:04:04.320 --> 00:04:06.050 
then define a macro called assert and an
argument<00:04:04.500> in<00:04:04.920> but<00:04:05.370> don't<00:04:05.520> actually<00:04:05.760> do

00:04:06.050 --> 00:04:06.060 
argument in but don't actually do

00:04:06.060 --> 00:04:08.840 
argument in but don't actually do
anything<00:04:06.330> so<00:04:06.750> this<00:04:06.900> just<00:04:07.080> does<00:04:07.320> nothing<00:04:07.850> else

00:04:08.840 --> 00:04:08.850 
anything so this just does nothing else

00:04:08.850 --> 00:04:11.420 
anything so this just does nothing else
so<00:04:09.510> otherwise<00:04:09.810> if<00:04:10.020> debug<00:04:10.380> is<00:04:10.590> defined<00:04:11.040> as<00:04:11.280> it

00:04:11.420 --> 00:04:11.430 
so otherwise if debug is defined as it

00:04:11.430 --> 00:04:15.710 
so otherwise if debug is defined as it
is<00:04:11.580> in<00:04:11.700> this<00:04:11.850> case<00:04:13.820> also<00:04:14.820> had<00:04:15.120> define<00:04:15.450> a<00:04:15.480> macro

00:04:15.710 --> 00:04:15.720 
is in this case also had define a macro

00:04:15.720 --> 00:04:19.460 
is in this case also had define a macro
called<00:04:16.110> assert<00:04:16.880> argument<00:04:17.880> N<00:04:18.090> and<00:04:18.330> say<00:04:19.080> that<00:04:19.260> if

00:04:19.460 --> 00:04:19.470 
called assert argument N and say that if

00:04:19.470 --> 00:04:25.580 
called assert argument N and say that if
n<00:04:19.739> is<00:04:20.010> false<00:04:20.810> then<00:04:21.810> print<00:04:22.440> to<00:04:22.560> the<00:04:22.680> screen<00:04:24.590> what

00:04:25.580 --> 00:04:25.590 
n is false then print to the screen what

00:04:25.590 --> 00:04:30.290 
n is false then print to the screen what
failed<00:04:25.950> on<00:04:26.340> what<00:04:26.760> date<00:04:27.060> on<00:04:27.960> what<00:04:28.200> time<00:04:29.300> what

00:04:30.290 --> 00:04:30.300 
failed on what date on what time what

00:04:30.300 --> 00:04:33.230 
failed on what date on what time what
file<00:04:30.660> and<00:04:30.990> at<00:04:31.560> what<00:04:31.740> line<00:04:32.010> and<00:04:32.310> then<00:04:32.700> exit<00:04:33.150> the

00:04:33.230 --> 00:04:33.240 
file and at what line and then exit the

00:04:33.240 --> 00:04:35.810 
file and at what line and then exit the
program<00:04:33.690> with<00:04:34.050> an<00:04:34.170> error<00:04:34.380> so<00:04:35.040> basically<00:04:35.490> this

00:04:35.810 --> 00:04:35.820 
program with an error so basically this

00:04:35.820 --> 00:04:40.000 
program with an error so basically this
is<00:04:36.590> another<00:04:37.590> version<00:04:37.830> of<00:04:38.160> the<00:04:38.340> assert<00:04:38.820> in<00:04:39.120> C

00:04:40.000 --> 00:04:40.010 
is another version of the assert in C

00:04:40.010 --> 00:04:42.860 
is another version of the assert in C
but<00:04:41.010> I<00:04:41.130> preferred<00:04:41.460> it<00:04:41.640> when<00:04:41.700> I<00:04:42.150> found<00:04:42.450> it<00:04:42.660> in

00:04:42.860 --> 00:04:42.870 
but I preferred it when I found it in

00:04:42.870 --> 00:04:44.840 
but I preferred it when I found it in
this<00:04:43.320> book<00:04:43.560> beginning<00:04:44.070> I<00:04:44.400> think<00:04:44.640> it's

00:04:44.840 --> 00:04:44.850 
this book beginning I think it's

00:04:44.850 --> 00:04:47.090 
this book beginning I think it's
beginning<00:04:45.210> programming<00:04:45.930> in<00:04:46.020> C++<00:04:46.200> ok<00:04:46.950> I'll

00:04:47.090 --> 00:04:47.100 
beginning programming in C++ ok I'll

00:04:47.100 --> 00:04:49.120 
beginning programming in C++ ok I'll
have<00:04:47.220> to<00:04:47.340> look<00:04:47.460> up<00:04:47.640> exactly<00:04:48.090> which<00:04:48.210> book<00:04:48.420> it<00:04:48.540> is

00:04:49.120 --> 00:04:49.130 
have to look up exactly which book it is

00:04:49.130 --> 00:04:51.980 
have to look up exactly which book it is
so<00:04:50.130> the<00:04:50.250> way<00:04:50.340> that<00:04:50.370> works<00:04:50.730> is<00:04:51.000> it's<00:04:51.780> very

00:04:51.980 --> 00:04:51.990 
so the way that works is it's very

00:04:51.990 --> 00:04:56.710 
so the way that works is it's very
simple<00:04:52.380> if<00:04:52.500> I<00:04:52.650> go<00:04:52.830> now<00:04:53.100> to<00:04:53.210> main<00:04:54.210> and<00:04:54.510> I<00:04:55.380> do<00:04:55.440> int

00:04:56.710 --> 00:04:56.720 
simple if I go now to main and I do int

00:04:56.720 --> 00:05:04.070 
simple if I go now to main and I do int
num2<00:04:58.040> and<00:04:59.120> int<00:05:00.120> let's<00:05:01.020> say<00:05:01.430> that's<00:05:02.630> equals<00:05:03.630> 4

00:05:04.070 --> 00:05:04.080 
num2 and int let's say that's equals 4

00:05:04.080 --> 00:05:10.820 
num2 and int let's say that's equals 4
and<00:05:04.380> now<00:05:04.770> I<00:05:04.800> could<00:05:05.130> say<00:05:05.430> assert<00:05:06.410> num<00:05:09.830> equals

00:05:10.820 --> 00:05:10.830 
and now I could say assert num equals

00:05:10.830 --> 00:05:14.150 
and now I could say assert num equals
nuts<00:05:11.550> and<00:05:12.360> that's<00:05:13.230> obviously<00:05:13.590> incorrect

00:05:14.150 --> 00:05:14.160 
nuts and that's obviously incorrect

00:05:14.160 --> 00:05:16.040 
nuts and that's obviously incorrect
because<00:05:14.640> they're<00:05:14.790> not<00:05:14.940> the<00:05:15.090> same<00:05:15.300> so<00:05:15.750> I

00:05:16.040 --> 00:05:16.050 
because they're not the same so I

00:05:16.050 --> 00:05:19.400 
because they're not the same so I
haven't<00:05:16.670> compiled<00:05:17.670> for<00:05:17.880> ages<00:05:18.240> I'll<00:05:18.450> have<00:05:19.170> a<00:05:19.200> go

00:05:19.400 --> 00:05:19.410 
haven't compiled for ages I'll have a go

00:05:19.410 --> 00:05:20.870 
haven't compiled for ages I'll have a go
at<00:05:19.530> doing<00:05:19.680> it<00:05:19.980> and<00:05:20.190> see<00:05:20.400> what<00:05:20.550> happens<00:05:20.790> it

00:05:20.870 --> 00:05:20.880 
at doing it and see what happens it

00:05:20.880 --> 00:05:22.250 
at doing it and see what happens it
seems<00:05:21.000> to<00:05:21.210> have<00:05:21.300> compared<00:05:21.690> now<00:05:21.900> if<00:05:21.960> I<00:05:22.080> were<00:05:22.170> in

00:05:22.250 --> 00:05:22.260 
seems to have compared now if I were in

00:05:22.260 --> 00:05:25.580 
seems to have compared now if I were in
vice<00:05:22.730> and<00:05:23.730> now<00:05:23.880> you<00:05:24.030> can<00:05:24.210> see<00:05:24.480> it<00:05:25.170> said<00:05:25.440> that

00:05:25.580 --> 00:05:25.590 
vice and now you can see it said that

00:05:25.590 --> 00:05:29.360 
vice and now you can see it said that
the<00:05:25.710> expression<00:05:26.010> nun<00:05:26.610> equals<00:05:27.390> nuts<00:05:27.710> failed<00:05:28.710> it

00:05:29.360 --> 00:05:29.370 
the expression nun equals nuts failed it

00:05:29.370 --> 00:05:32.390 
the expression nun equals nuts failed it
says<00:05:29.580> what<00:05:29.760> time<00:05:30.060> and<00:05:30.620> it<00:05:31.620> even<00:05:31.830> tells<00:05:31.980> us<00:05:32.220> what

00:05:32.390 --> 00:05:32.400 
says what time and it even tells us what

00:05:32.400 --> 00:05:34.430 
says what time and it even tells us what
line<00:05:32.640> and<00:05:32.880> what<00:05:33.000> file<00:05:33.300> it<00:05:33.600> failed<00:05:33.900> in<00:05:34.080> as<00:05:34.230> well

00:05:34.430 --> 00:05:34.440 
line and what file it failed in as well

00:05:34.440 --> 00:05:36.290 
line and what file it failed in as well
and<00:05:35.130> this<00:05:35.250> is<00:05:35.310> going<00:05:35.430> to<00:05:35.610> prove<00:05:35.820> during<00:05:36.180> the

00:05:36.290 --> 00:05:36.300 
and this is going to prove during the

00:05:36.300 --> 00:05:38.390 
and this is going to prove during the
creation<00:05:36.570> of<00:05:36.720> the<00:05:36.840> program<00:05:37.400> invaluable

00:05:38.390 --> 00:05:38.400 
creation of the program invaluable

00:05:38.400 --> 00:05:41.150 
creation of the program invaluable
because<00:05:39.300> as<00:05:39.750> you've<00:05:39.900> already<00:05:40.050> seen<00:05:40.470> we<00:05:40.920> start

00:05:41.150 --> 00:05:41.160 
because as you've already seen we start

00:05:41.160 --> 00:05:42.860 
because as you've already seen we start
messing<00:05:41.370> around<00:05:41.640> with<00:05:41.970> rather<00:05:42.240> complicated

00:05:42.860 --> 00:05:42.870 
messing around with rather complicated

00:05:42.870 --> 00:05:45.740 
messing around with rather complicated
indexes<00:05:43.800> and<00:05:43.980> things<00:05:44.390> switching<00:05:45.390> backwards

00:05:45.740 --> 00:05:45.750 
indexes and things switching backwards

00:05:45.750 --> 00:05:47.360 
indexes and things switching backwards
and<00:05:45.900> forth<00:05:46.140> and<00:05:46.590> also<00:05:46.710> particularly<00:05:47.070> with<00:05:47.280> the

00:05:47.360 --> 00:05:47.370 
and forth and also particularly with the

00:05:47.370 --> 00:05:49.910 
and forth and also particularly with the
peace<00:05:47.550> lists<00:05:48.000> and<00:05:48.150> in<00:05:49.110> the<00:05:49.290> functions<00:05:49.740> we're

00:05:49.910 --> 00:05:49.920 
peace lists and in the functions we're

00:05:49.920 --> 00:05:51.710 
peace lists and in the functions we're
going<00:05:50.070> to<00:05:50.190> do<00:05:50.370> a<00:05:50.580> lot<00:05:50.760> of<00:05:50.790> assertion<00:05:51.360> checking

00:05:51.710 --> 00:05:51.720 
going to do a lot of assertion checking

00:05:51.720 --> 00:05:53.270 
going to do a lot of assertion checking
to<00:05:51.840> make<00:05:51.870> sure<00:05:52.050> that<00:05:52.410> we're<00:05:52.590> always<00:05:52.800> within

00:05:53.270 --> 00:05:53.280 
to make sure that we're always within

00:05:53.280 --> 00:05:55.730 
to make sure that we're always within
the<00:05:53.430> expected<00:05:53.760> bounds<00:05:54.330> of<00:05:54.390> our<00:05:54.540> arrays<00:05:54.870> our

00:05:55.730 --> 00:05:55.740 
the expected bounds of our arrays our

00:05:55.740 --> 00:05:58.100 
the expected bounds of our arrays our
handy<00:05:56.040> thing<00:05:56.220> here<00:05:56.490> is<00:05:56.670> that<00:05:56.880> obviously<00:05:57.780> hits

00:05:58.100 --> 00:05:58.110 
handy thing here is that obviously hits

00:05:58.110 --> 00:06:00.530 
handy thing here is that obviously hits
our<00:05:58.320> performance<00:05:58.920> but<00:05:59.670> when<00:05:59.910> we<00:06:00.030> want<00:06:00.180> to<00:06:00.360> run

00:06:00.530 --> 00:06:00.540 
our performance but when we want to run

00:06:00.540 --> 00:06:02.360 
our performance but when we want to run
sort<00:06:00.780> of<00:06:00.900> in<00:06:01.050> full<00:06:01.260> speed<00:06:01.530> mode<00:06:01.770> we<00:06:02.040> simply

00:06:02.360 --> 00:06:02.370 
sort of in full speed mode we simply

00:06:02.370 --> 00:06:04.659 
sort of in full speed mode we simply
need<00:06:02.550> to<00:06:02.580> take<00:06:02.850> out<00:06:03.030> this<00:06:03.180> define<00:06:03.570> here

00:06:04.659 --> 00:06:04.669 
need to take out this define here

00:06:04.669 --> 00:06:08.320 
need to take out this define here
recompile

00:06:08.320 --> 00:06:08.330 

00:06:08.330 --> 00:06:11.680 

and<00:06:08.449> now<00:06:08.900> when<00:06:09.409> I<00:06:09.440> run<00:06:09.560> vice<00:06:09.979> the<00:06:10.970> program<00:06:11.419> just

00:06:11.680 --> 00:06:11.690 
and now when I run vice the program just

00:06:11.690 --> 00:06:13.510 
and now when I run vice the program just
runs<00:06:11.990> and<00:06:12.199> comes<00:06:12.409> to<00:06:12.590> an<00:06:12.710> end<00:06:12.889> and<00:06:13.069> the

00:06:13.510 --> 00:06:13.520 
runs and comes to an end and the

00:06:13.520 --> 00:06:14.950 
runs and comes to an end and the
assertion<00:06:13.789> doesn't<00:06:14.240> fail<00:06:14.419> because<00:06:14.659> it's<00:06:14.810> not

00:06:14.950 --> 00:06:14.960 
assertion doesn't fail because it's not

00:06:14.960 --> 00:06:16.629 
assertion doesn't fail because it's not
being<00:06:15.199> run<00:06:15.349> because<00:06:15.590> debug<00:06:16.159> hasn't<00:06:16.520> been

00:06:16.629 --> 00:06:16.639 
being run because debug hasn't been

00:06:16.639 --> 00:06:19.210 
being run because debug hasn't been
defined<00:06:17.030> so<00:06:17.300> for<00:06:17.900> now<00:06:18.020> we'll<00:06:18.229> leave<00:06:18.379> debug<00:06:18.979> on

00:06:19.210 --> 00:06:19.220 
defined so for now we'll leave debug on

00:06:19.220 --> 00:06:23.020 
defined so for now we'll leave debug on
and<00:06:19.460> I'll<00:06:19.639> take<00:06:19.849> out<00:06:21.220> this<00:06:22.220> but<00:06:22.699> you'll<00:06:23.000> be

00:06:23.020 --> 00:06:23.030 
and I'll take out this but you'll be

00:06:23.030 --> 00:06:24.999 
and I'll take out this but you'll be
seeing<00:06:23.360> a<00:06:23.449> lot<00:06:23.599> more<00:06:23.629> of<00:06:23.960> the<00:06:24.229> assert<00:06:24.530> as<00:06:24.740> we<00:06:24.889> go

00:06:24.999 --> 00:06:25.009 
seeing a lot more of the assert as we go

00:06:25.009 --> 00:06:27.550 
seeing a lot more of the assert as we go
through<00:06:25.220> building<00:06:25.580> the<00:06:25.669> program<00:06:26.560> okay

00:06:27.550 --> 00:06:27.560 
through building the program okay

00:06:27.560 --> 00:06:29.920 
through building the program okay
there's<00:06:28.490> one<00:06:28.580> more<00:06:28.909> little<00:06:29.240> thing<00:06:29.419> we<00:06:29.690> need<00:06:29.840> to

00:06:29.920 --> 00:06:29.930 
there's one more little thing we need to

00:06:29.930 --> 00:06:31.029 
there's one more little thing we need to
do<00:06:30.080> which<00:06:30.229> I'm<00:06:30.379> going<00:06:30.500> to<00:06:30.620> do<00:06:30.710> in<00:06:30.800> the<00:06:30.889> next

00:06:31.029 --> 00:06:31.039 
do which I'm going to do in the next

00:06:31.039 --> 00:06:35.730 
do which I'm going to do in the next
video<00:06:31.490> which<00:06:32.180> is<00:06:32.210> define<00:06:32.990> the<00:06:33.970> functions<00:06:34.970> and

00:06:35.730 --> 00:06:35.740 
video which is define the functions and

00:06:35.740 --> 00:06:38.379 
video which is define the functions and
some<00:06:36.740> Global's<00:06:37.220> we'll<00:06:37.400> need<00:06:37.580> actually<00:06:38.180> allow

00:06:38.379 --> 00:06:38.389 
some Global's we'll need actually allow

00:06:38.389 --> 00:06:41.920 
some Global's we'll need actually allow
us<00:06:38.599> to<00:06:38.930> set<00:06:39.590> and<00:06:39.889> clear<00:06:40.250> the<00:06:40.789> bits<00:06:41.030> in<00:06:41.240> our<00:06:41.389> 64

00:06:41.920 --> 00:06:41.930 
us to set and clear the bits in our 64

00:06:41.930 --> 00:06:43.779 
us to set and clear the bits in our 64
bit<00:06:42.139> numbers<00:06:42.530> representing<00:06:43.219> where<00:06:43.370> the<00:06:43.460> pawns

00:06:43.779 --> 00:06:43.789 
bit numbers representing where the pawns

00:06:43.789 --> 00:06:45.850 
bit numbers representing where the pawns
are<00:06:43.969> on<00:06:44.090> the<00:06:44.210> board<00:06:44.419> okay<00:06:45.289> thanks<00:06:45.560> very<00:06:45.590> much

00:06:45.850 --> 00:06:45.860 
are on the board okay thanks very much

00:06:45.860 --> 00:06:47.290 
are on the board okay thanks very much
for<00:06:46.039> listening<00:06:46.159> hope<00:06:46.580> that<00:06:46.759> made<00:06:46.940> a<00:06:46.969> little

00:06:47.290 --> 00:06:47.300 
for listening hope that made a little

00:06:47.300 --> 00:06:49.209 
for listening hope that made a little
bit<00:06:47.419> of<00:06:47.509> sense<00:06:47.719> comments<00:06:48.560> questions

00:06:49.209 --> 00:06:49.219 
bit of sense comments questions

00:06:49.219 --> 00:06:53.590 
bit of sense comments questions
criticisms<00:06:49.879> welcome<00:06:50.330> as<00:06:50.449> always<00:06:50.539> on<00:06:50.960> YouTube

