WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.510 

hi<00:00:00.390> this<00:00:00.450> is<00:00:00.630> Alex<00:00:01.020> from<00:00:01.140> PHP<00:00:01.800> academy'<00:00:02.250> de<00:00:02.340> org

00:00:02.510 --> 00:00:02.520 
hi this is Alex from PHP academy' de org

00:00:02.520 --> 00:00:04.550 
hi this is Alex from PHP academy' de org
and<00:00:02.760> this<00:00:03.060> is<00:00:03.179> a<00:00:03.210> short<00:00:03.540> video<00:00:03.689> created<00:00:04.350> for

00:00:04.550 --> 00:00:04.560 
and this is a short video created for

00:00:04.560 --> 00:00:07.760 
and this is a short video created for
the<00:00:04.680> new<00:00:04.830> Boston<00:00:05.370> now<00:00:06.359> in<00:00:06.690> this<00:00:06.930> part<00:00:07.200> of<00:00:07.440> our

00:00:07.760 --> 00:00:07.770 
the new Boston now in this part of our

00:00:07.770 --> 00:00:09.500 
the new Boston now in this part of our
operators<00:00:08.760> when<00:00:09.000> we're<00:00:09.150> looking<00:00:09.420> at

00:00:09.500 --> 00:00:09.510 
operators when we're looking at

00:00:09.510 --> 00:00:11.180 
operators when we're looking at
operators<00:00:10.050> we<00:00:10.230> need<00:00:10.380> to<00:00:10.500> think<00:00:10.679> about<00:00:10.860> an

00:00:11.180 --> 00:00:11.190 
operators we need to think about an

00:00:11.190 --> 00:00:13.280 
operators we need to think about an
operator<00:00:11.610> that<00:00:11.969> doesn't<00:00:12.840> just<00:00:13.049> deal<00:00:13.259> with

00:00:13.280 --> 00:00:13.290 
operator that doesn't just deal with

00:00:13.290 --> 00:00:18.680 
operator that doesn't just deal with
equating<00:00:14.280> the<00:00:14.639> value<00:00:15.289> but<00:00:17.240> we<00:00:18.240> have<00:00:18.420> to<00:00:18.570> look

00:00:18.680 --> 00:00:18.690 
equating the value but we have to look

00:00:18.690 --> 00:00:20.300 
equating the value but we have to look
at<00:00:18.810> the<00:00:18.869> data<00:00:19.050> type<00:00:19.350> as<00:00:19.500> well<00:00:19.619> so<00:00:19.859> let's<00:00:20.039> just

00:00:20.300 --> 00:00:20.310 
at the data type as well so let's just

00:00:20.310 --> 00:00:24.679 
at the data type as well so let's just
give<00:00:20.490> an<00:00:20.580> example<00:00:21.090> of<00:00:21.330> num1<00:00:23.359> and<00:00:24.359> I'm<00:00:24.480> going<00:00:24.630> to

00:00:24.679 --> 00:00:24.689 
give an example of num1 and I'm going to

00:00:24.689 --> 00:00:27.259 
give an example of num1 and I'm going to
equal<00:00:24.900> this<00:00:25.019> to<00:00:25.199> one<00:00:25.490> and<00:00:26.490> that's<00:00:26.670> in<00:00:26.820> a<00:00:26.880> string

00:00:27.259 --> 00:00:27.269 
equal this to one and that's in a string

00:00:27.269 --> 00:00:29.620 
equal this to one and that's in a string
so<00:00:27.510> we've<00:00:27.660> got<00:00:27.900> a<00:00:28.019> string<00:00:28.500> with<00:00:28.769> the<00:00:28.890> value<00:00:28.920> 1

00:00:29.620 --> 00:00:29.630 
so we've got a string with the value 1

00:00:29.630 --> 00:00:33.709 
so we've got a string with the value 1
now<00:00:30.630> num2<00:00:31.080> and<00:00:31.679> that's<00:00:32.040> going<00:00:32.189> to<00:00:32.279> equal<00:00:32.369> 1<00:00:32.880> but

00:00:33.709 --> 00:00:33.719 
now num2 and that's going to equal 1 but

00:00:33.719 --> 00:00:35.590 
now num2 and that's going to equal 1 but
as<00:00:33.930> an<00:00:34.469> integer<00:00:34.770> datatype

00:00:35.590 --> 00:00:35.600 
as an integer datatype

00:00:35.600 --> 00:00:38.030 
as an integer datatype
so<00:00:36.600> now<00:00:36.750> what<00:00:36.899> happens<00:00:37.260> if<00:00:37.410> we<00:00:37.530> create<00:00:37.770> an<00:00:37.860> if

00:00:38.030 --> 00:00:38.040 
so now what happens if we create an if

00:00:38.040 --> 00:00:41.299 
so now what happens if we create an if
statement<00:00:39.350> and<00:00:40.350> we<00:00:40.440> actually<00:00:40.710> compare<00:00:41.070> these

00:00:41.299 --> 00:00:41.309 
statement and we actually compare these

00:00:41.309 --> 00:00:45.580 
statement and we actually compare these
two<00:00:41.489> values<00:00:41.910> so<00:00:42.120> let's<00:00:42.270> compare<00:00:42.629> num1<00:00:42.930> -<00:00:44.120> num2

00:00:45.580 --> 00:00:45.590 
two values so let's compare num1 - num2

00:00:45.590 --> 00:00:48.049 
two values so let's compare num1 - num2
so<00:00:46.590> we're<00:00:46.739> using<00:00:46.890> the<00:00:47.100> double<00:00:47.489> equals

00:00:48.049 --> 00:00:48.059 
so we're using the double equals

00:00:48.059 --> 00:00:50.209 
so we're using the double equals
operator<00:00:48.239> which<00:00:48.870> is<00:00:49.050> a<00:00:49.079> is<00:00:49.500> equal<00:00:50.039> to

00:00:50.209 --> 00:00:50.219 
operator which is a is equal to

00:00:50.219 --> 00:01:00.020 
operator which is a is equal to
essentially<00:00:50.789> as<00:00:51.510> echo<00:00:52.730> equal<00:00:55.160> else<00:00:57.469> echo<00:00:59.030> not

00:01:00.020 --> 00:01:00.030 
essentially as echo equal else echo not

00:01:00.030 --> 00:01:02.869 
essentially as echo equal else echo not
equal<00:01:00.829> okay<00:01:01.829> so<00:01:02.039> this<00:01:02.250> is<00:01:02.370> a<00:01:02.430> basic<00:01:02.609> if

00:01:02.869 --> 00:01:02.879 
equal okay so this is a basic if

00:01:02.879 --> 00:01:05.420 
equal okay so this is a basic if
statement<00:01:03.300> we're<00:01:03.420> saying<00:01:03.629> num<00:01:04.290> what<00:01:04.500> if<00:01:04.680> num<00:01:05.220> 1

00:01:05.420 --> 00:01:05.430 
statement we're saying num what if num 1

00:01:05.430 --> 00:01:08.420 
statement we're saying num what if num 1
is<00:01:05.640> equal<00:01:06.030> to<00:01:06.060> num2<00:01:06.390> a<00:01:06.869> co-equal<00:01:07.500> otherwise

00:01:08.420 --> 00:01:08.430 
is equal to num2 a co-equal otherwise

00:01:08.430 --> 00:01:10.940 
is equal to num2 a co-equal otherwise
echo<00:01:08.909> not<00:01:09.119> equal<00:01:09.540> so<00:01:10.200> let's<00:01:10.380> just<00:01:10.530> open<00:01:10.590> up<00:01:10.799> our

00:01:10.940 --> 00:01:10.950 
echo not equal so let's just open up our

00:01:10.950 --> 00:01:12.830 
echo not equal so let's just open up our
browser<00:01:11.159> and<00:01:11.610> refresh<00:01:11.790> and<00:01:12.240> preview<00:01:12.570> what<00:01:12.720> we

00:01:12.830 --> 00:01:12.840 
browser and refresh and preview what we

00:01:12.840 --> 00:01:17.210 
browser and refresh and preview what we
get<00:01:13.549> so<00:01:14.549> we've<00:01:14.670> got<00:01:14.820> equal<00:01:15.420> here<00:01:15.750> so<00:01:16.220> we're

00:01:17.210 --> 00:01:17.220 
get so we've got equal here so we're

00:01:17.220 --> 00:01:20.320 
get so we've got equal here so we're
essentially<00:01:17.850> saying<00:01:18.210> that<00:01:18.600> 1<00:01:19.229> does<00:01:19.710> equal<00:01:19.740> 1

00:01:20.320 --> 00:01:20.330 
essentially saying that 1 does equal 1

00:01:20.330 --> 00:01:22.399 
essentially saying that 1 does equal 1
however<00:01:21.330> if<00:01:21.659> you<00:01:21.780> look<00:01:21.900> at<00:01:22.049> this<00:01:22.140> from<00:01:22.259> a

00:01:22.399 --> 00:01:22.409 
however if you look at this from a

00:01:22.409 --> 00:01:25.810 
however if you look at this from a
logical<00:01:22.590> point<00:01:22.979> of<00:01:23.159> view<00:01:23.220> we've<00:01:23.549> got<00:01:23.729> 1<00:01:24.150> as<00:01:24.450> a

00:01:25.810 --> 00:01:25.820 
logical point of view we've got 1 as a

00:01:25.820 --> 00:01:29.210 
logical point of view we've got 1 as a
string<00:01:26.820> so<00:01:27.119> we've<00:01:27.270> got<00:01:27.479> our<00:01:27.750> single<00:01:28.500> quotation

00:01:29.210 --> 00:01:29.220 
string so we've got our single quotation

00:01:29.220 --> 00:01:31.700 
string so we've got our single quotation
marks<00:01:29.460> rounder<00:01:29.850> and<00:01:29.970> one<00:01:30.869> here<00:01:31.110> is<00:01:31.229> an<00:01:31.350> integer

00:01:31.700 --> 00:01:31.710 
marks rounder and one here is an integer

00:01:31.710 --> 00:01:33.980 
marks rounder and one here is an integer
so<00:01:32.040> this<00:01:32.579> is<00:01:32.759> in<00:01:32.880> fact<00:01:32.909> a<00:01:33.240> number<00:01:33.600> this<00:01:33.689> is<00:01:33.750> in

00:01:33.980 --> 00:01:33.990 
so this is in fact a number this is in

00:01:33.990 --> 00:01:36.740 
so this is in fact a number this is in
fact<00:01:34.320> a<00:01:34.439> string<00:01:34.770> now<00:01:35.579> what<00:01:35.820> PHP<00:01:36.090> has<00:01:36.329> done<00:01:36.600> is

00:01:36.740 --> 00:01:36.750 
fact a string now what PHP has done is

00:01:36.750 --> 00:01:39.740 
fact a string now what PHP has done is
it's<00:01:36.930> dealt<00:01:37.290> with<00:01:37.470> this<00:01:37.740> as<00:01:38.040> a<00:01:38.100> 1<00:01:38.610> in<00:01:39.360> itself

00:01:39.740 --> 00:01:39.750 
it's dealt with this as a 1 in itself

00:01:39.750 --> 00:01:41.030 
it's dealt with this as a 1 in itself
and<00:01:40.079> it's<00:01:40.200> dealt<00:01:40.380> with<00:01:40.470> this<00:01:40.530> is<00:01:40.710> a<00:01:40.740> 1<00:01:40.920> in

00:01:41.030 --> 00:01:41.040 
and it's dealt with this is a 1 in

00:01:41.040 --> 00:01:42.679 
and it's dealt with this is a 1 in
itself<00:01:41.310> so<00:01:41.490> they're<00:01:41.909> essentially<00:01:42.240> the<00:01:42.360> same

00:01:42.679 --> 00:01:42.689 
itself so they're essentially the same

00:01:42.689 --> 00:01:45.830 
itself so they're essentially the same
character<00:01:43.880> even<00:01:44.880> though<00:01:45.149> this<00:01:45.270> is<00:01:45.450> an<00:01:45.570> integer

00:01:45.830 --> 00:01:45.840 
character even though this is an integer

00:01:45.840 --> 00:01:48.020 
character even though this is an integer
and<00:01:45.960> this<00:01:46.140> is<00:01:46.290> a<00:01:46.409> string<00:01:46.770> so<00:01:47.340> therefore<00:01:47.820> it's

00:01:48.020 --> 00:01:48.030 
and this is a string so therefore it's

00:01:48.030 --> 00:01:50.630 
and this is a string so therefore it's
saying<00:01:48.299> that<00:01:48.450> they<00:01:48.689> are<00:01:48.840> equal<00:01:49.320> then<00:01:49.640> what

00:01:50.630 --> 00:01:50.640 
saying that they are equal then what

00:01:50.640 --> 00:01:52.520 
saying that they are equal then what
happens<00:01:51.000> if<00:01:51.119> we<00:01:51.270> want<00:01:51.450> to<00:01:51.600> say<00:01:51.840> is<00:01:52.110> num1

00:01:52.520 --> 00:01:52.530 
happens if we want to say is num1

00:01:52.530 --> 00:01:55.310 
happens if we want to say is num1
actually<00:01:53.490> equal<00:01:53.939> to<00:01:54.119> num<00:01:54.299> -<00:01:54.570> you<00:01:54.899> know<00:01:55.049> in

00:01:55.310 --> 00:01:55.320 
actually equal to num - you know in

00:01:55.320 --> 00:01:57.679 
actually equal to num - you know in
reality<00:01:55.920> if<00:01:56.130> I<00:01:56.280> was<00:01:56.399> to<00:01:56.520> say<00:01:56.729> the<00:01:56.880> number<00:01:57.240> 1<00:01:57.450> or

00:01:57.679 --> 00:01:57.689 
reality if I was to say the number 1 or

00:01:57.689 --> 00:02:00.440 
reality if I was to say the number 1 or
a<00:01:57.750> picture<00:01:58.619> of<00:01:58.890> the<00:01:59.009> number<00:01:59.280> 1<00:01:59.490> they<00:02:00.119> are<00:02:00.299> the

00:02:00.440 --> 00:02:00.450 
a picture of the number 1 they are the

00:02:00.450 --> 00:02:02.510 
a picture of the number 1 they are the
same<00:02:00.689> thing<00:02:01.020> but<00:02:01.560> we<00:02:01.979> need<00:02:02.130> to<00:02:02.219> think<00:02:02.399> about

00:02:02.510 --> 00:02:02.520 
same thing but we need to think about

00:02:02.520 --> 00:02:05.300 
same thing but we need to think about
the<00:02:03.240> difference<00:02:03.630> between<00:02:03.719> numbers<00:02:04.469> and<00:02:04.770> a

00:02:05.300 --> 00:02:05.310 
the difference between numbers and a

00:02:05.310 --> 00:02:07.969 
the difference between numbers and a
graphical<00:02:06.240> representation<00:02:06.659> so<00:02:07.259> a<00:02:07.290> string<00:02:07.710> of

00:02:07.969 --> 00:02:07.979 
graphical representation so a string of

00:02:07.979 --> 00:02:10.880 
graphical representation so a string of
something<00:02:08.599> so<00:02:09.599> for<00:02:09.810> this<00:02:09.959> we<00:02:10.140> use<00:02:10.349> the<00:02:10.379> triple

00:02:10.880 --> 00:02:10.890 
something so for this we use the triple

00:02:10.890 --> 00:02:12.870 
something so for this we use the triple
equals<00:02:11.550> comparison

00:02:12.870 --> 00:02:12.880 
equals comparison

00:02:12.880 --> 00:02:15.270 
equals comparison
operator<00:02:13.500> so<00:02:14.500> instead<00:02:14.710> of<00:02:14.770> putting<00:02:14.980> two

00:02:15.270 --> 00:02:15.280 
operator so instead of putting two

00:02:15.280 --> 00:02:17.490 
operator so instead of putting two
equals<00:02:15.670> remember<00:02:15.880> equal<00:02:16.480> is<00:02:16.690> an<00:02:16.900> assignment

00:02:17.490 --> 00:02:17.500 
equals remember equal is an assignment

00:02:17.500 --> 00:02:19.890 
equals remember equal is an assignment
operator<00:02:17.830> this<00:02:18.640> is<00:02:18.700> a<00:02:18.850> comparison<00:02:19.330> operator

00:02:19.890 --> 00:02:19.900 
operator this is a comparison operator

00:02:19.900 --> 00:02:22.290 
operator this is a comparison operator
triple<00:02:20.800> equals<00:02:21.130> is<00:02:21.220> also<00:02:21.670> a<00:02:21.700> comparison

00:02:22.290 --> 00:02:22.300 
triple equals is also a comparison

00:02:22.300 --> 00:02:22.920 
triple equals is also a comparison
operator

00:02:22.920 --> 00:02:22.930 
operator

00:02:22.930 --> 00:02:25.320 
operator
but<00:02:23.440> what<00:02:23.590> triple<00:02:23.950> equals<00:02:24.310> does<00:02:24.520> is<00:02:25.000> it<00:02:25.240> will

00:02:25.320 --> 00:02:25.330 
but what triple equals does is it will

00:02:25.330 --> 00:02:28.200 
but what triple equals does is it will
compare<00:02:25.840> not<00:02:26.380> just<00:02:26.710> the<00:02:26.860> value<00:02:27.250> but<00:02:27.940> it<00:02:28.090> will

00:02:28.200 --> 00:02:28.210 
compare not just the value but it will

00:02:28.210 --> 00:02:30.600 
compare not just the value but it will
also<00:02:28.660> compare<00:02:29.170> the<00:02:29.200> data<00:02:29.500> type<00:02:29.830> so<00:02:30.400> if<00:02:30.490> the

00:02:30.600 --> 00:02:30.610 
also compare the data type so if the

00:02:30.610 --> 00:02:32.430 
also compare the data type so if the
data<00:02:30.790> type<00:02:31.180> does<00:02:31.420> not<00:02:31.570> match<00:02:31.780> in<00:02:32.020> this<00:02:32.140> case

00:02:32.430 --> 00:02:32.440 
data type does not match in this case

00:02:32.440 --> 00:02:34.680 
data type does not match in this case
using<00:02:32.800> the<00:02:32.950> triple<00:02:33.190> equals<00:02:33.610> then<00:02:34.180> we'll<00:02:34.360> eat

00:02:34.680 --> 00:02:34.690 
using the triple equals then we'll eat

00:02:34.690 --> 00:02:36.240 
using the triple equals then we'll eat
with<00:02:34.960> it<00:02:35.080> we're<00:02:35.560> going<00:02:35.650> to<00:02:35.710> be<00:02:35.830> air<00:02:35.920> coming<00:02:36.130> out

00:02:36.240 --> 00:02:36.250 
with it we're going to be air coming out

00:02:36.250 --> 00:02:37.920 
with it we're going to be air coming out
not<00:02:36.400> equal<00:02:36.760> because<00:02:37.030> this<00:02:37.210> statement<00:02:37.510> here

00:02:37.920 --> 00:02:37.930 
not equal because this statement here

00:02:37.930 --> 00:02:41.010 
not equal because this statement here
will<00:02:38.470> be<00:02:38.590> validated<00:02:38.980> false<00:02:39.700> so<00:02:40.690> let's<00:02:40.870> give

00:02:41.010 --> 00:02:41.020 
will be validated false so let's give

00:02:41.020 --> 00:02:45.360 
will be validated false so let's give
that<00:02:41.050> a<00:02:41.170> go<00:02:41.550> let's<00:02:42.550> come<00:02:42.760> and<00:02:42.790> refresh<00:02:44.310> okay<00:02:45.310> so

00:02:45.360 --> 00:02:45.370 
that a go let's come and refresh okay so

00:02:45.370 --> 00:02:47.910 
that a go let's come and refresh okay so
you<00:02:45.550> can<00:02:45.670> see<00:02:45.820> that<00:02:45.970> now<00:02:46.350> just<00:02:47.350> by<00:02:47.470> adding<00:02:47.680> in

00:02:47.910 --> 00:02:47.920 
you can see that now just by adding in

00:02:47.920 --> 00:02:50.160 
you can see that now just by adding in
that<00:02:48.040> extra<00:02:48.520> equal<00:02:48.910> symbol<00:02:49.180> we're<00:02:49.690> now<00:02:49.870> saying

00:02:50.160 --> 00:02:50.170 
that extra equal symbol we're now saying

00:02:50.170 --> 00:02:55.140 
that extra equal symbol we're now saying
not<00:02:50.530> equal<00:02:51.570> so<00:02:52.570> we<00:02:53.200> now<00:02:53.380> know<00:02:53.650> that<00:02:54.130> one<00:02:54.790> as<00:02:55.090> a

00:02:55.140 --> 00:02:55.150 
not equal so we now know that one as a

00:02:55.150 --> 00:02:57.360 
not equal so we now know that one as a
string<00:02:55.600> data<00:02:55.840> type<00:02:56.140> is<00:02:56.380> not<00:02:56.530> equal<00:02:56.980> to<00:02:57.010> the

00:02:57.360 --> 00:02:57.370 
string data type is not equal to the

00:02:57.370 --> 00:03:03.210 
string data type is not equal to the
number<00:02:57.730> one<00:02:58.230> so<00:03:01.140> why<00:03:02.140> is<00:03:02.200> this<00:03:02.650> useful<00:03:02.950> and

00:03:03.210 --> 00:03:03.220 
number one so why is this useful and

00:03:03.220 --> 00:03:05.640 
number one so why is this useful and
when<00:03:03.640> might<00:03:03.970> you<00:03:04.000> use<00:03:04.450> it<00:03:04.660> that<00:03:05.350> was<00:03:05.440> useful

00:03:05.640 --> 00:03:05.650 
when might you use it that was useful

00:03:05.650 --> 00:03:09.270 
when might you use it that was useful
for<00:03:06.130> the<00:03:06.850> obvious<00:03:07.180> reason<00:03:07.600> that<00:03:07.630> we<00:03:08.080> may<00:03:08.770> want

00:03:09.270 --> 00:03:09.280 
for the obvious reason that we may want

00:03:09.280 --> 00:03:13.940 
for the obvious reason that we may want
to<00:03:09.550> convert<00:03:10.380> we<00:03:11.380> may<00:03:11.590> want<00:03:12.340> to<00:03:12.460> keep<00:03:13.090> our

00:03:13.940 --> 00:03:13.950 
to convert we may want to keep our

00:03:13.950 --> 00:03:16.140 
to convert we may want to keep our
comparisons<00:03:14.950> as<00:03:15.100> literal<00:03:15.490> as<00:03:15.520> possible<00:03:16.030> we

00:03:16.140 --> 00:03:16.150 
comparisons as literal as possible we

00:03:16.150 --> 00:03:18.180 
comparisons as literal as possible we
won't<00:03:16.210> say<00:03:16.480> it<00:03:16.780> must<00:03:17.170> equal<00:03:17.290> the<00:03:17.620> number<00:03:18.040> 1

00:03:18.180 --> 00:03:18.190 
won't say it must equal the number 1

00:03:18.190 --> 00:03:21.390 
won't say it must equal the number 1
must<00:03:18.460> equal<00:03:18.580> number<00:03:18.970> 1<00:03:19.150> now<00:03:20.140> for<00:03:20.380> example<00:03:20.890> if<00:03:21.130> I

00:03:21.390 --> 00:03:21.400 
must equal number 1 now for example if I

00:03:21.400 --> 00:03:24.720 
must equal number 1 now for example if I
was<00:03:22.530> submitting<00:03:23.530> form<00:03:23.860> data<00:03:24.160> and<00:03:24.430> I<00:03:24.460> was<00:03:24.610> to

00:03:24.720 --> 00:03:24.730 
was submitting form data and I was to

00:03:24.730 --> 00:03:27.450 
was submitting form data and I was to
type<00:03:25.030> in<00:03:25.210> a<00:03:25.300> number<00:03:25.450> 1<00:03:25.840> and<00:03:26.230> we<00:03:26.260> were<00:03:27.070> comparing

00:03:27.450 --> 00:03:27.460 
type in a number 1 and we were comparing

00:03:27.460 --> 00:03:30.660 
type in a number 1 and we were comparing
it<00:03:27.730> to<00:03:27.880> number<00:03:28.060> 1<00:03:28.450> as<00:03:28.660> in<00:03:28.870> a<00:03:28.990> 1<00:03:29.260> we<00:03:29.890> wouldn't<00:03:30.250> use

00:03:30.660 --> 00:03:30.670 
it to number 1 as in a 1 we wouldn't use

00:03:30.670 --> 00:03:33.960 
it to number 1 as in a 1 we wouldn't use
the<00:03:31.200> triple<00:03:32.200> equals<00:03:32.590> operator<00:03:32.890> we<00:03:33.820> would

00:03:33.960 --> 00:03:33.970 
the triple equals operator we would

00:03:33.970 --> 00:03:36.030 
the triple equals operator we would
compare<00:03:34.390> it<00:03:34.420> like<00:03:35.260> this<00:03:35.470> because<00:03:35.890> this<00:03:35.980> is

00:03:36.030 --> 00:03:36.040 
compare it like this because this is

00:03:36.040 --> 00:03:38.970 
compare it like this because this is
still<00:03:36.370> the<00:03:36.460> number<00:03:36.580> 1<00:03:36.910> so<00:03:37.900> there's<00:03:38.140> places<00:03:38.770> you

00:03:38.970 --> 00:03:38.980 
still the number 1 so there's places you

00:03:38.980 --> 00:03:41.040 
still the number 1 so there's places you
can<00:03:39.310> use<00:03:39.550> it<00:03:39.700> in<00:03:39.790> places<00:03:39.970> you<00:03:40.210> can't<00:03:40.450> use<00:03:40.690> it<00:03:40.720> I

00:03:41.040 --> 00:03:41.050 
can use it in places you can't use it I

00:03:41.050 --> 00:03:44.070 
can use it in places you can't use it I
mean<00:03:41.830> a<00:03:41.980> lot<00:03:42.250> of<00:03:42.280> people<00:03:42.400> tend<00:03:43.120> to<00:03:43.209> use<00:03:43.300> it<00:03:43.780> even

00:03:44.070 --> 00:03:44.080 
mean a lot of people tend to use it even

00:03:44.080 --> 00:03:46.680 
mean a lot of people tend to use it even
when<00:03:44.560> they<00:03:44.650> don't<00:03:44.800> actually<00:03:45.040> need<00:03:45.459> to<00:03:45.690> but

00:03:46.680 --> 00:03:46.690 
when they don't actually need to but

00:03:46.690 --> 00:03:49.320 
when they don't actually need to but
it's<00:03:46.840> just<00:03:47.050> for<00:03:47.500> added<00:03:47.920> sort<00:03:48.250> of<00:03:48.400> comparison

00:03:49.320 --> 00:03:49.330 
it's just for added sort of comparison

00:03:49.330 --> 00:03:52.140 
it's just for added sort of comparison
integrity<00:03:50.320> if<00:03:50.440> you<00:03:50.560> like<00:03:50.770> so<00:03:51.760> you'll<00:03:51.910> find

00:03:52.140 --> 00:03:52.150 
integrity if you like so you'll find

00:03:52.150 --> 00:03:54.660 
integrity if you like so you'll find
that<00:03:52.330> perhaps<00:03:52.660> in<00:03:53.020> in<00:03:53.680> other<00:03:53.920> instances<00:03:54.520> you

00:03:54.660 --> 00:03:54.670 
that perhaps in in other instances you

00:03:54.670 --> 00:03:57.449 
that perhaps in in other instances you
find<00:03:54.970> this<00:03:55.380> other<00:03:56.380> times<00:03:56.860> you<00:03:57.010> may<00:03:57.160> need<00:03:57.310> to

00:03:57.449 --> 00:03:57.459 
find this other times you may need to

00:03:57.459 --> 00:04:00.630 
find this other times you may need to
use<00:03:57.880> the<00:03:58.000> triple<00:03:58.209> equals<00:03:59.340> especially<00:04:00.340> in<00:04:00.459> some

00:04:00.630 --> 00:04:00.640 
use the triple equals especially in some

00:04:00.640 --> 00:04:02.970 
use the triple equals especially in some
of<00:04:00.730> my<00:04:00.850> tutorials<00:04:01.510> as<00:04:01.690> well<00:04:01.870> I<00:04:02.110> tend<00:04:02.770> not<00:04:02.830> to

00:04:02.970 --> 00:04:02.980 
of my tutorials as well I tend not to

00:04:02.980 --> 00:04:06.270 
of my tutorials as well I tend not to
use<00:04:03.310> it<00:04:03.490> a<00:04:03.550> lot<00:04:03.760> but<00:04:04.510> in<00:04:05.350> things<00:04:05.709> like<00:04:05.830> dealing

00:04:06.270 --> 00:04:06.280 
use it a lot but in things like dealing

00:04:06.280 --> 00:04:09.449 
use it a lot but in things like dealing
with<00:04:06.310> files<00:04:06.990> as<00:04:07.990> well<00:04:08.200> we<00:04:08.410> might<00:04:08.620> need<00:04:08.800> to<00:04:08.860> use

00:04:09.449 --> 00:04:09.459 
with files as well we might need to use

00:04:09.459 --> 00:04:12.330 
with files as well we might need to use
it<00:04:09.640> as<00:04:09.880> a<00:04:09.910> literal<00:04:10.410> so<00:04:11.410> this<00:04:11.680> is<00:04:11.860> the<00:04:11.980> triple

00:04:12.330 --> 00:04:12.340 
it as a literal so this is the triple

00:04:12.340 --> 00:04:14.810 
it as a literal so this is the triple
equals<00:04:12.910> a<00:04:13.180> comparison<00:04:13.840> operator<00:04:14.200> and

00:04:14.810 --> 00:04:14.820 
equals a comparison operator and

00:04:14.820 --> 00:04:17.160 
equals a comparison operator and
hopefully<00:04:15.820> you<00:04:15.970> will<00:04:16.120> find<00:04:16.180> some<00:04:16.660> use<00:04:16.870> for<00:04:16.900> it

00:04:17.160 --> 00:04:17.170 
hopefully you will find some use for it

00:04:17.170 --> 00:04:20.130 
hopefully you will find some use for it
when<00:04:17.530> you<00:04:17.709> are<00:04:17.950> comparing<00:04:18.400> exact<00:04:19.390> values<00:04:19.900> and

00:04:20.130 --> 00:04:20.140 
when you are comparing exact values and

00:04:20.140 --> 00:04:24.210 
when you are comparing exact values and
you<00:04:20.350> want<00:04:20.500> to<00:04:20.650> check<00:04:21.040> data<00:04:21.370> types<00:04:21.729> as<00:04:21.970> well

