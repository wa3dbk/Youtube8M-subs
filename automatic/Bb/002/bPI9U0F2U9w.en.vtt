WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.080 

hey<00:00:00.659> guys<00:00:00.870> great<00:00:01.170> gamer<00:00:01.410> 34<00:00:01.770> here<00:00:02.010> today<00:00:02.790> is

00:00:03.080 --> 00:00:03.090 
hey guys great gamer 34 here today is

00:00:03.090 --> 00:00:06.710 
hey guys great gamer 34 here today is
the<00:00:04.080> CPU<00:00:04.560> that<00:00:04.589> I<00:00:04.770> made<00:00:04.980> is<00:00:05.299> finished<00:00:06.299> and<00:00:06.509> it's

00:00:06.710 --> 00:00:06.720 
the CPU that I made is finished and it's

00:00:06.720 --> 00:00:09.350 
the CPU that I made is finished and it's
programmed<00:00:07.140> to<00:00:07.259> run<00:00:07.379> Fibonacci<00:00:07.830> it<00:00:08.160> is<00:00:08.940> just

00:00:09.350 --> 00:00:09.360 
programmed to run Fibonacci it is just

00:00:09.360 --> 00:00:12.799 
programmed to run Fibonacci it is just
as<00:00:09.510> fast<00:00:09.690> as<00:00:09.870> my<00:00:09.990> previous<00:00:10.320> CPU<00:00:11.030> but<00:00:12.030> it<00:00:12.269> has

00:00:12.799 --> 00:00:12.809 
as fast as my previous CPU but it has

00:00:12.809 --> 00:00:16.129 
as fast as my previous CPU but it has
extra<00:00:13.410> functions<00:00:13.920> and<00:00:14.190> this<00:00:15.030> is<00:00:15.179> six<00:00:15.509> this<00:00:15.900> add

00:00:16.129 --> 00:00:16.139 
extra functions and this is six this add

00:00:16.139 --> 00:00:19.099 
extra functions and this is six this add
six<00:00:16.529> tix<00:00:16.800> to<00:00:17.039> the<00:00:17.070> throughput<00:00:17.580> of<00:00:17.789> it<00:00:18.240> but

00:00:19.099 --> 00:00:19.109 
six tix to the throughput of it but

00:00:19.109 --> 00:00:20.540 
six tix to the throughput of it but
because<00:00:19.260> everything<00:00:19.770> synced<00:00:20.130> I<00:00:20.189> could<00:00:20.369> still

00:00:20.540 --> 00:00:20.550 
because everything synced I could still

00:00:20.550 --> 00:00:23.179 
because everything synced I could still
run<00:00:20.670> it<00:00:20.820> at<00:00:20.939> the<00:00:21.119> same<00:00:21.270> speed<00:00:21.710> which<00:00:22.710> is<00:00:22.740> 30

00:00:23.179 --> 00:00:23.189 
run it at the same speed which is 30

00:00:23.189 --> 00:00:25.640 
run it at the same speed which is 30
ticks<00:00:23.460> so<00:00:24.359> this<00:00:24.689> is<00:00:24.720> as<00:00:24.960> fast<00:00:25.109> a<00:00:25.350> queue<00:00:25.500> get<00:00:25.619> a

00:00:25.640 --> 00:00:25.650 
ticks so this is as fast a queue get a

00:00:25.650 --> 00:00:29.089 
ticks so this is as fast a queue get a
29<00:00:26.099> tix<00:00:26.340> starts<00:00:26.699> to<00:00:26.849> derp<00:00:27.590> this<00:00:28.590> down<00:00:28.859> here

00:00:29.089 --> 00:00:29.099 
29 tix starts to derp this down here

00:00:29.099 --> 00:00:32.680 
29 tix starts to derp this down here
shows<00:00:29.340> what<00:00:29.550> line<00:00:29.730> of<00:00:29.760> code<00:00:30.029> it's<00:00:30.179> on<00:00:30.359> goes<00:00:30.929> 123

00:00:32.680 --> 00:00:32.690 
shows what line of code it's on goes 123

00:00:32.690 --> 00:00:36.380 
shows what line of code it's on goes 123
over<00:00:33.690> here<00:00:33.870> is<00:00:33.930> 4<00:00:34.579> 4<00:00:35.579> and<00:00:35.700> 1<00:00:35.790> is<00:00:35.940> 5<00:00:36.090> you<00:00:36.300> know

00:00:36.380 --> 00:00:36.390 
over here is 4 4 and 1 is 5 you know

00:00:36.390 --> 00:00:40.400 
over here is 4 4 and 1 is 5 you know
binary<00:00:36.600> works<00:00:37.079> like<00:00:37.260> binary<00:00:37.500> um<00:00:39.320> the<00:00:40.320> reason

00:00:40.400 --> 00:00:40.410 
binary works like binary um the reason

00:00:40.410 --> 00:00:42.160 
binary works like binary um the reason
this<00:00:40.800> is<00:00:40.980> a<00:00:41.010> little<00:00:41.250> bit<00:00:41.340> more<00:00:41.489> hectic<00:00:41.910> than

00:00:42.160 --> 00:00:42.170 
this is a little bit more hectic than

00:00:42.170 --> 00:00:45.049 
this is a little bit more hectic than
before<00:00:43.170> was<00:00:43.620> because<00:00:43.670> we're<00:00:44.670> getting<00:00:44.879> ready

00:00:45.049 --> 00:00:45.059 
before was because we're getting ready

00:00:45.059 --> 00:00:48.560 
before was because we're getting ready
for<00:00:45.329> a<00:00:46.190> multiplication<00:00:47.190> program<00:00:47.640> which<00:00:48.450> is

00:00:48.560 --> 00:00:48.570 
for a multiplication program which is

00:00:48.570 --> 00:00:50.000 
for a multiplication program which is
what<00:00:48.719> this<00:00:48.809> rom<00:00:49.020> is<00:00:49.200> down<00:00:49.350> here<00:00:49.500> for<00:00:49.710> which<00:00:49.890> we

00:00:50.000 --> 00:00:50.010 
what this rom is down here for which we

00:00:50.010 --> 00:00:51.830 
what this rom is down here for which we
haven't<00:00:50.160> started<00:00:50.309> programming<00:00:50.579> yet<00:00:50.940> but

00:00:51.830 --> 00:00:51.840 
haven't started programming yet but

00:00:51.840 --> 00:00:55.700 
haven't started programming yet but
here's<00:00:52.020> the<00:00:52.110> codes<00:00:52.410> for<00:00:52.770> um<00:00:53.870> so<00:00:54.870> what<00:00:55.379> we'll<00:00:55.530> do

00:00:55.700 --> 00:00:55.710 
here's the codes for um so what we'll do

00:00:55.710 --> 00:00:57.260 
here's the codes for um so what we'll do
is<00:00:55.739> we'll<00:00:55.949> just<00:00:56.160> program<00:00:56.579> multiplication<00:00:57.180> on

00:00:57.260 --> 00:00:57.270 
is we'll just program multiplication on

00:00:57.270 --> 00:01:00.740 
is we'll just program multiplication on
here<00:00:57.449> copy<00:00:58.079> and<00:00:58.260> paste<00:00:58.320> it<00:00:58.649> into<00:00:59.270> here<00:01:00.270> after

00:01:00.740 --> 00:01:00.750 
here copy and paste it into here after

00:01:00.750 --> 00:01:02.810 
here copy and paste it into here after
removing<00:01:00.960> that<00:01:01.260> so<00:01:01.680> we<00:01:01.800> can<00:01:01.949> have<00:01:02.129> keep<00:01:02.730> a

00:01:02.810 --> 00:01:02.820 
removing that so we can have keep a

00:01:02.820 --> 00:01:03.889 
removing that so we can have keep a
record<00:01:02.969> of<00:01:03.180> all<00:01:03.270> the<00:01:03.420> programs<00:01:03.750> without

00:01:03.889 --> 00:01:03.899 
record of all the programs without

00:01:03.899 --> 00:01:06.980 
record of all the programs without
having<00:01:04.229> to<00:01:04.290> reprogram<00:01:04.769> them<00:01:05.150> um<00:01:06.150> so<00:01:06.510> I'll<00:01:06.780> stop

00:01:06.980 --> 00:01:06.990 
having to reprogram them um so I'll stop

00:01:06.990 --> 00:01:11.359 
having to reprogram them um so I'll stop
talking<00:01:07.020> and<00:01:07.530> I'll<00:01:07.770> get<00:01:07.950> to<00:01:08.130> it<00:01:08.840> so<00:01:09.840> I'll<00:01:10.470> start

00:01:11.359 --> 00:01:11.369 
talking and I'll get to it so I'll start

00:01:11.369 --> 00:01:17.690 
talking and I'll get to it so I'll start
the<00:01:11.490> clock<00:01:14.119> clock<00:01:15.119> starts<00:01:15.770> 30<00:01:16.770> tix<00:01:17.070> is<00:01:17.280> three

00:01:17.690 --> 00:01:17.700 
the clock clock starts 30 tix is three

00:01:17.700 --> 00:01:21.080 
the clock clock starts 30 tix is three
seconds<00:01:18.330> so<00:01:19.170> it's<00:01:19.710> a<00:01:20.100> it's<00:01:20.610> a<00:01:20.670> pretty<00:01:20.850> fast

00:01:21.080 --> 00:01:21.090 
seconds so it's a it's a pretty fast

00:01:21.090 --> 00:01:23.539 
seconds so it's a it's a pretty fast
it's<00:01:22.049> not<00:01:22.320> the<00:01:22.500> fastest<00:01:22.920> not<00:01:23.159> a<00:01:23.189> one<00:01:23.340> hurts

00:01:23.539 --> 00:01:23.549 
it's not the fastest not a one hurts

00:01:23.549 --> 00:01:28.370 
it's not the fastest not a one hurts
computer<00:01:24.360> and<00:01:24.540> I'll<00:01:25.350> enable<00:01:25.710> it<00:01:25.830> and<00:01:27.380> you're

00:01:28.370 --> 00:01:28.380 
computer and I'll enable it and you're

00:01:28.380 --> 00:01:29.660 
computer and I'll enable it and you're
going<00:01:28.500> to<00:01:28.560> notice<00:01:28.710> that<00:01:28.979> the<00:01:29.100> program<00:01:29.490> counter

00:01:29.660 --> 00:01:29.670 
going to notice that the program counter

00:01:29.670 --> 00:01:31.760 
going to notice that the program counter
is<00:01:29.850> going<00:01:29.880> to<00:01:30.060> start<00:01:30.210> going<00:01:30.390> up<00:01:30.540> or<00:01:31.530> the<00:01:31.740> uh

00:01:31.760 --> 00:01:31.770 
is going to start going up or the uh

00:01:31.770 --> 00:01:34.969 
is going to start going up or the uh
yeah<00:01:32.670> what<00:01:33.600> line<00:01:33.750> of<00:01:33.780> code<00:01:34.049> run<00:01:34.320> is<00:01:34.530> going<00:01:34.860> to

00:01:34.969 --> 00:01:34.979 
yeah what line of code run is going to

00:01:34.979 --> 00:01:40.370 
yeah what line of code run is going to
go<00:01:35.070> up<00:01:38.270> this<00:01:39.270> is<00:01:39.360> our<00:01:39.509> output<00:01:39.930> panel<00:01:40.110> right

00:01:40.370 --> 00:01:40.380 
go up this is our output panel right

00:01:40.380 --> 00:01:47.990 
go up this is our output panel right
here

00:01:47.990 --> 00:01:48.000 

00:01:48.000 --> 00:01:51.270 

and<00:01:49.000> you'll<00:01:49.990> notice<00:01:50.350> that<00:01:50.380> it's<00:01:50.710> adding<00:01:51.159> these

00:01:51.270 --> 00:01:51.280 
and you'll notice that it's adding these

00:01:51.280 --> 00:01:53.700 
and you'll notice that it's adding these
two<00:01:51.520> numbers<00:01:51.700> here<00:01:52.210> busing<00:01:53.170> the<00:01:53.259> output<00:01:53.560> back

00:01:53.700 --> 00:01:53.710 
two numbers here busing the output back

00:01:53.710 --> 00:01:56.330 
two numbers here busing the output back
to<00:01:53.829> here<00:01:54.070> but<00:01:54.189> since<00:01:54.369> this<00:01:54.549> bus<00:01:54.759> is<00:01:54.789> so<00:01:55.090> long

00:01:56.330 --> 00:01:56.340 
to here but since this bus is so long

00:01:56.340 --> 00:01:58.529 
to here but since this bus is so long
that's<00:01:57.340> why<00:01:57.490> there's<00:01:57.759> delay<00:01:58.060> but<00:01:58.360> it<00:01:58.450> could

00:01:58.529 --> 00:01:58.539 
that's why there's delay but it could

00:01:58.539 --> 00:02:01.620 
that's why there's delay but it could
still<00:01:58.570> run<00:01:58.960> it<00:01:59.110> fat<00:01:59.590> fast<00:02:00.009> speed<00:02:00.420> so<00:02:01.420> here's

00:02:01.620 --> 00:02:01.630 
still run it fat fast speed so here's

00:02:01.630 --> 00:02:03.569 
still run it fat fast speed so here's
the<00:02:01.780> number<00:02:01.990> 8<00:02:02.170> if<00:02:02.649> you<00:02:02.979> guys<00:02:03.130> aren't<00:02:03.399> familiar

00:02:03.569 --> 00:02:03.579 
the number 8 if you guys aren't familiar

00:02:03.579 --> 00:02:09.169 
the number 8 if you guys aren't familiar
with<00:02:03.819> binary<00:02:04.119> or<00:02:05.009> Fibonacci<00:02:06.009> here's<00:02:07.140> 1321

00:02:09.169 --> 00:02:09.179 
with binary or Fibonacci here's 1321

00:02:09.179 --> 00:02:13.050 
with binary or Fibonacci here's 1321
it's<00:02:10.179> all<00:02:10.300> nice<00:02:10.539> and<00:02:10.720> synced<00:02:11.080> um<00:02:11.849> took<00:02:12.849> that

00:02:13.050 --> 00:02:13.060 
it's all nice and synced um took that

00:02:13.060 --> 00:02:15.539 
it's all nice and synced um took that
output<00:02:13.450> busted<00:02:13.959> for<00:02:14.110> that<00:02:14.230> input<00:02:14.410> and<00:02:15.190> bust<00:02:15.430> it

00:02:15.539 --> 00:02:15.549 
output busted for that input and bust it

00:02:15.549 --> 00:02:25.970 
output busted for that input and bust it
there<00:02:19.830> now<00:02:20.830> what's<00:02:21.040> cool<00:02:21.220> about<00:02:21.280> this<00:02:21.670> is<00:02:22.920> that

00:02:25.970 --> 00:02:25.980 

00:02:25.980 --> 00:02:29.220 

when<00:02:26.980> it<00:02:27.099> reaches<00:02:27.400> a<00:02:27.430> carryout<00:02:28.019> you'll<00:02:29.019> see

00:02:29.220 --> 00:02:29.230 
when it reaches a carryout you'll see

00:02:29.230 --> 00:02:31.670 
when it reaches a carryout you'll see
over<00:02:29.560> here<00:02:29.769> right<00:02:30.760> there<00:02:30.819> what<00:02:31.150> happened<00:02:31.480> is

00:02:31.670 --> 00:02:31.680 
over here right there what happened is

00:02:31.680 --> 00:02:37.830 
over here right there what happened is
it<00:02:32.680> actually<00:02:32.829> reset<00:02:33.310> everything<00:02:35.310> and<00:02:36.840> now

00:02:37.830 --> 00:02:37.840 
it actually reset everything and now

00:02:37.840 --> 00:02:43.140 
it actually reset everything and now
it's<00:02:37.989> starting<00:02:38.349> over<00:02:41.489> so<00:02:42.489> now<00:02:42.700> it's<00:02:42.849> back<00:02:43.000> at

00:02:43.140 --> 00:02:43.150 
it's starting over so now it's back at

00:02:43.150 --> 00:02:45.059 
it's starting over so now it's back at
line<00:02:43.269> one<00:02:43.510> and<00:02:43.690> it's<00:02:44.590> going<00:02:44.709> to<00:02:44.769> start<00:02:44.920> the

00:02:45.059 --> 00:02:45.069 
line one and it's going to start the

00:02:45.069 --> 00:02:47.850 
line one and it's going to start the
Fibonacci<00:02:45.430> all<00:02:45.790> over<00:02:46.480> again<00:02:46.660> so<00:02:47.440> I'll<00:02:47.739> go

00:02:47.850 --> 00:02:47.860 
Fibonacci all over again so I'll go

00:02:47.860 --> 00:02:49.199 
Fibonacci all over again so I'll go
inside<00:02:48.130> the<00:02:48.250> CPU<00:02:48.400> and<00:02:48.670> show<00:02:48.790> you<00:02:48.880> what's<00:02:49.030> going

00:02:49.199 --> 00:02:49.209 
inside the CPU and show you what's going

00:02:49.209 --> 00:02:52.830 
inside the CPU and show you what's going
on<00:02:50.400> it's<00:02:51.400> addressing<00:02:51.790> different<00:02:52.420> registers

00:02:52.830 --> 00:02:52.840 
on it's addressing different registers

00:02:52.840 --> 00:02:54.870 
on it's addressing different registers
and<00:02:53.230> reading<00:02:53.620> and<00:02:53.859> writing<00:02:54.100> from<00:02:54.579> different

00:02:54.870 --> 00:02:54.880 
and reading and writing from different

00:02:54.880 --> 00:03:01.379 
and reading and writing from different
registers<00:02:58.260> excuse<00:02:59.260> me<00:03:00.090> having<00:03:01.090> these<00:03:01.180> two

00:03:01.379 --> 00:03:01.389 
registers excuse me having these two

00:03:01.389 --> 00:03:02.460 
registers excuse me having these two
registers<00:03:01.810> hooked<00:03:02.019> up<00:03:02.139> the<00:03:02.230> way<00:03:02.319> they<00:03:02.440> are

00:03:02.460 --> 00:03:02.470 
registers hooked up the way they are

00:03:02.470 --> 00:03:05.729 
registers hooked up the way they are
acts<00:03:03.220> as<00:03:03.639> dual<00:03:03.970> read<00:03:04.209> Ram<00:03:04.510> to<00:03:05.109> cut<00:03:05.290> the<00:03:05.410> program

00:03:05.729 --> 00:03:05.739 
acts as dual read Ram to cut the program

00:03:05.739 --> 00:03:11.970 
acts as dual read Ram to cut the program
size<00:03:05.980> in<00:03:06.280> half<00:03:07.350> I'm<00:03:08.350> losing<00:03:08.680> my<00:03:08.799> voice<00:03:08.950> um<00:03:10.980> all

00:03:11.970 --> 00:03:11.980 
size in half I'm losing my voice um all

00:03:11.980 --> 00:03:14.039 
size in half I'm losing my voice um all
it's<00:03:12.280> doing<00:03:12.459> is<00:03:12.730> it's<00:03:13.000> these<00:03:13.420> are<00:03:13.600> the<00:03:13.720> jumping

00:03:14.039 --> 00:03:14.049 
it's doing is it's these are the jumping

00:03:14.049 --> 00:03:16.199 
it's doing is it's these are the jumping
lines<00:03:14.260> tells<00:03:15.130> it<00:03:15.280> where<00:03:15.400> to<00:03:15.549> jump<00:03:15.730> to<00:03:15.940> this<00:03:16.090> is

00:03:16.199 --> 00:03:16.209 
lines tells it where to jump to this is

00:03:16.209 --> 00:03:19.319 
lines tells it where to jump to this is
telling<00:03:16.420> it<00:03:16.510> to<00:03:16.540> jump<00:03:16.810> to<00:03:16.989> line<00:03:17.230> two<00:03:17.639> and<00:03:18.639> this

00:03:19.319 --> 00:03:19.329 
telling it to jump to line two and this

00:03:19.329 --> 00:03:25.860 
telling it to jump to line two and this
is<00:03:19.420> enabling<00:03:19.870> the<00:03:19.989> jump<00:03:20.230> and<00:03:24.810> somewhere<00:03:25.810> along

00:03:25.860 --> 00:03:25.870 
is enabling the jump and somewhere along

00:03:25.870 --> 00:03:31.050 
is enabling the jump and somewhere along
here<00:03:26.049> at<00:03:26.380> 0<00:03:27.510> when<00:03:28.510> this<00:03:28.810> is<00:03:28.959> a<00:03:30.060> conditional

00:03:31.050 --> 00:03:31.060 
here at 0 when this is a conditional

00:03:31.060 --> 00:03:34.080 
here at 0 when this is a conditional
branch<00:03:31.359> yes<00:03:31.930> when<00:03:32.530> a<00:03:32.560> condition<00:03:32.980> is<00:03:33.099> met<00:03:33.310> it

00:03:34.080 --> 00:03:34.090 
branch yes when a condition is met it

00:03:34.090 --> 00:03:36.809 
branch yes when a condition is met it
will<00:03:34.299> branch<00:03:34.569> to<00:03:34.870> line<00:03:35.139> 6<00:03:35.590> and<00:03:35.889> it<00:03:36.459> will<00:03:36.579> enable

00:03:36.809 --> 00:03:36.819 
will branch to line 6 and it will enable

00:03:36.819 --> 00:03:44.690 
will branch to line 6 and it will enable
the<00:03:37.030> branch<00:03:39.630> so<00:03:40.630> it's<00:03:40.810> going<00:03:41.380> at<00:03:41.590> it<00:03:41.620> again

00:03:44.690 --> 00:03:44.700 

00:03:44.700 --> 00:03:49.379 

next<00:03:45.700> clock<00:03:46.000> cycle<00:03:46.620> right<00:03:47.620> there<00:03:47.889> and<00:03:48.389> it's

00:03:49.379 --> 00:03:49.389 
next clock cycle right there and it's

00:03:49.389 --> 00:03:52.860 
next clock cycle right there and it's
back<00:03:49.599> to<00:03:49.870> 0

00:03:52.860 --> 00:03:52.870 

00:03:52.870 --> 00:03:57.119 

and<00:03:54.150> there's<00:03:55.150> a<00:03:55.269> branded<00:03:55.810> twice<00:03:56.049> it's<00:03:56.890> pretty

00:03:57.119 --> 00:03:57.129 
and there's a branded twice it's pretty

00:03:57.129 --> 00:04:00.420 
and there's a branded twice it's pretty
fast<00:03:57.370> clock<00:03:57.610> speed<00:03:57.879> and<00:03:58.799> I<00:03:59.799> know<00:04:00.099> I've<00:04:00.310> been

00:04:00.420 --> 00:04:00.430 
fast clock speed and I know I've been

00:04:00.430 --> 00:04:02.970 
fast clock speed and I know I've been
obsessed<00:04:00.580> with<00:04:00.819> Fibonacci<00:04:01.030> recently<00:04:01.980> but

00:04:02.970 --> 00:04:02.980 
obsessed with Fibonacci recently but

00:04:02.980 --> 00:04:04.289 
obsessed with Fibonacci recently but
that's<00:04:03.159> just<00:04:03.310> because<00:04:03.459> it's<00:04:03.940> great<00:04:04.239> for

00:04:04.289 --> 00:04:04.299 
that's just because it's great for

00:04:04.299 --> 00:04:08.789 
that's just because it's great for
testing<00:04:05.970> different<00:04:06.970> like<00:04:07.900> it's<00:04:07.930> testing<00:04:08.560> the

00:04:08.789 --> 00:04:08.799 
testing different like it's testing the

00:04:08.799 --> 00:04:11.580 
testing different like it's testing the
busing<00:04:09.190> speeds<00:04:09.840> not<00:04:10.840> busting<00:04:11.170> speeds<00:04:11.379> but<00:04:11.530> a

00:04:11.580 --> 00:04:11.590 
busing speeds not busting speeds but a

00:04:11.590 --> 00:04:13.440 
busing speeds not busting speeds but a
register<00:04:12.310> reading<00:04:12.640> and<00:04:12.790> writing<00:04:12.879> two<00:04:13.180> speeds

00:04:13.440 --> 00:04:13.450 
register reading and writing two speeds

00:04:13.450 --> 00:04:15.030 
register reading and writing two speeds
and<00:04:13.780> seeing<00:04:14.319> how<00:04:14.440> fast<00:04:14.650> you<00:04:14.799> can<00:04:14.860> get

00:04:15.030 --> 00:04:15.040 
and seeing how fast you can get

00:04:15.040 --> 00:04:17.310 
and seeing how fast you can get
everything<00:04:15.340> to<00:04:15.519> run<00:04:15.730> so<00:04:16.329> it's<00:04:16.419> a<00:04:16.479> base<00:04:16.660> it's<00:04:17.019> a

00:04:17.310 --> 00:04:17.320 
everything to run so it's a base it's a

00:04:17.320 --> 00:04:20.129 
everything to run so it's a base it's a
benchmark<00:04:17.949> for<00:04:18.010> cpu<00:04:18.639> and<00:04:18.900> that's<00:04:19.900> why<00:04:20.049> I'm

00:04:20.129 --> 00:04:20.139 
benchmark for cpu and that's why I'm

00:04:20.139 --> 00:04:22.530 
benchmark for cpu and that's why I'm
doing<00:04:20.199> it<00:04:20.470> and<00:04:20.680> like<00:04:21.639> I<00:04:21.760> said<00:04:21.820> next<00:04:22.240> up<00:04:22.360> is

00:04:22.530 --> 00:04:22.540 
doing it and like I said next up is

00:04:22.540 --> 00:04:24.450 
doing it and like I said next up is
multiplication<00:04:23.260> and<00:04:23.530> it's<00:04:24.220> going<00:04:24.310> to<00:04:24.370> be

00:04:24.450 --> 00:04:24.460 
multiplication and it's going to be

00:04:24.460 --> 00:04:26.370 
multiplication and it's going to be
using<00:04:24.610> a<00:04:24.850> 4-bit<00:04:25.300> input<00:04:25.720> and<00:04:25.900> you're<00:04:26.229> only

00:04:26.370 --> 00:04:26.380 
using a 4-bit input and you're only

00:04:26.380 --> 00:04:29.790 
using a 4-bit input and you're only
gonna<00:04:26.560> have<00:04:26.680> to<00:04:26.800> use<00:04:27.060> one<00:04:28.060> for<00:04:28.330> bit<00:04:28.510> input<00:04:28.800> to

00:04:29.790 --> 00:04:29.800 
gonna have to use one for bit input to

00:04:29.800 --> 00:04:33.360 
gonna have to use one for bit input to
do<00:04:30.060> 24<00:04:31.060> bit<00:04:31.539> number<00:04:31.780> multiplication<00:04:32.370> so

00:04:33.360 --> 00:04:33.370 
do 24 bit number multiplication so

00:04:33.370 --> 00:04:35.490 
do 24 bit number multiplication so
thanks<00:04:34.120> for<00:04:34.180> watching<00:04:34.510> if<00:04:35.020> you<00:04:35.139> guys<00:04:35.289> like

00:04:35.490 --> 00:04:35.500 
thanks for watching if you guys like

00:04:35.500 --> 00:04:36.300 
thanks for watching if you guys like
this<00:04:35.530> video<00:04:35.740> and<00:04:35.919> want<00:04:36.070> to<00:04:36.160> see<00:04:36.220> more

00:04:36.300 --> 00:04:36.310 
this video and want to see more

00:04:36.310 --> 00:04:38.610 
this video and want to see more
subscribe<00:04:36.729> and<00:04:37.330> I'll<00:04:38.229> see<00:04:38.260> you<00:04:38.410> guys<00:04:38.440> next

00:04:38.610 --> 00:04:38.620 
subscribe and I'll see you guys next

00:04:38.620 --> 00:04:41.010 
subscribe and I'll see you guys next
time<00:04:38.800> bye

