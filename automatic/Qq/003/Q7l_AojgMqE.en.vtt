WEBVTT
Kind: captions
Language: en

00:00:01.550 --> 00:00:04.880 

memory<00:00:02.550> interfacing<00:00:03.389> memory<00:00:04.140> is<00:00:04.230> an<00:00:04.380> integral

00:00:04.880 --> 00:00:04.890 
memory interfacing memory is an integral

00:00:04.890 --> 00:00:07.670 
memory interfacing memory is an integral
part<00:00:05.160> of<00:00:05.339> micro<00:00:05.819> computer<00:00:06.060> system<00:00:06.629> our<00:00:06.810> focus

00:00:07.670 --> 00:00:07.680 
part of micro computer system our focus

00:00:07.680 --> 00:00:09.560 
part of micro computer system our focus
will<00:00:07.890> be<00:00:07.919> on<00:00:08.069> how<00:00:08.340> to<00:00:08.400> interface<00:00:08.790> a<00:00:09.210> memory

00:00:09.560 --> 00:00:09.570 
will be on how to interface a memory

00:00:09.570 --> 00:00:11.720 
will be on how to interface a memory
chip<00:00:09.660> with<00:00:10.019> the<00:00:10.050> microprocessor<00:00:10.740> while

00:00:11.720 --> 00:00:11.730 
chip with the microprocessor while

00:00:11.730 --> 00:00:14.030 
chip with the microprocessor while
executing<00:00:12.330> a<00:00:12.450> program<00:00:12.769> microprocessor<00:00:13.769> need

00:00:14.030 --> 00:00:14.040 
executing a program microprocessor need

00:00:14.040 --> 00:00:16.340 
executing a program microprocessor need
to<00:00:14.490> access<00:00:14.880> memory<00:00:15.089> quite<00:00:15.509> frequently<00:00:16.020> to

00:00:16.340 --> 00:00:16.350 
to access memory quite frequently to

00:00:16.350 --> 00:00:19.189 
to access memory quite frequently to
read<00:00:16.859> instructions<00:00:17.670> and<00:00:17.880> data<00:00:18.510> stored<00:00:19.080> in

00:00:19.189 --> 00:00:19.199 
read instructions and data stored in

00:00:19.199 --> 00:00:21.769 
read instructions and data stored in
memory<00:00:19.470> the<00:00:20.279> interface<00:00:20.760> circuit<00:00:21.210> enables

00:00:21.769 --> 00:00:21.779 
memory the interface circuit enables

00:00:21.779 --> 00:00:24.410 
memory the interface circuit enables
that<00:00:21.930> access<00:00:22.470> the<00:00:23.189> interface<00:00:23.670> process<00:00:24.119> that

00:00:24.410 --> 00:00:24.420 
that access the interface process that

00:00:24.420 --> 00:00:26.330 
that access the interface process that
involves<00:00:24.900> designing<00:00:25.230> a<00:00:25.439> circuit<00:00:25.680> that<00:00:26.130> will

00:00:26.330 --> 00:00:26.340 
involves designing a circuit that will

00:00:26.340 --> 00:00:27.800 
involves designing a circuit that will
match<00:00:26.519> the<00:00:26.550> memory<00:00:27.029> requirements<00:00:27.660> with

00:00:27.800 --> 00:00:27.810 
match the memory requirements with

00:00:27.810 --> 00:00:33.229 
match the memory requirements with
microprocessor<00:00:28.619> signal<00:00:31.669> memory<00:00:32.669> structure

00:00:33.229 --> 00:00:33.239 
microprocessor signal memory structure

00:00:33.239 --> 00:00:35.299 
microprocessor signal memory structure
and<00:00:33.450> its<00:00:33.690> requirements<00:00:34.469> read<00:00:34.920> or<00:00:35.070> write

00:00:35.299 --> 00:00:35.309 
and its requirements read or write

00:00:35.309 --> 00:00:37.790 
and its requirements read or write
memory<00:00:35.760> is<00:00:36.030> a<00:00:36.090> group<00:00:36.450> of<00:00:36.600> registers<00:00:37.260> this

00:00:37.790 --> 00:00:37.800 
memory is a group of registers this

00:00:37.800 --> 00:00:39.799 
memory is a group of registers this
figure<00:00:38.129> shows<00:00:38.309> it<00:00:38.640> has<00:00:38.790> two<00:00:39.090> key<00:00:39.239> resistors

00:00:39.799 --> 00:00:39.809 
figure shows it has two key resistors

00:00:39.809 --> 00:00:42.650 
figure shows it has two key resistors
each<00:00:40.559> I<00:00:40.829> just<00:00:41.040> restore<00:00:41.520> eight<00:00:41.760> bits<00:00:42.090> it<00:00:42.390> has

00:00:42.650 --> 00:00:42.660 
each I just restore eight bits it has

00:00:42.660 --> 00:00:45.860 
each I just restore eight bits it has
eight<00:00:42.930> input<00:00:43.469> eight<00:00:43.710> output<00:00:44.129> lines<00:00:44.340> and<00:00:44.870> 11

00:00:45.860 --> 00:00:45.870 
eight input eight output lines and 11

00:00:45.870 --> 00:00:48.430 
eight input eight output lines and 11
address<00:00:46.200> lines<00:00:46.500> that<00:00:46.829> is<00:00:46.980> from<00:00:47.280> a<00:00:47.489> do<00:00:47.610> 10<00:00:48.059> to

00:00:48.430 --> 00:00:48.440 
address lines that is from a do 10 to

00:00:48.440 --> 00:00:51.290 
address lines that is from a do 10 to
8001<00:00:49.440> chip<00:00:49.739> select<00:00:50.100> two<00:00:50.370> control<00:00:50.789> lines<00:00:51.059> to

00:00:51.290 --> 00:00:51.300 
8001 chip select two control lines to

00:00:51.300 --> 00:00:54.229 
8001 chip select two control lines to
enable<00:00:51.719> input<00:00:51.960> and<00:00:52.260> output<00:00:52.680> buffer<00:00:53.010> it<00:00:53.850> has

00:00:54.229 --> 00:00:54.239 
enable input and output buffer it has

00:00:54.239 --> 00:00:56.810 
enable input and output buffer it has
also<00:00:54.480> an<00:00:54.930> internal<00:00:55.559> decoder<00:00:56.100> to<00:00:56.430> decode

00:00:56.810 --> 00:00:56.820 
also an internal decoder to decode

00:00:56.820 --> 00:01:01.220 
also an internal decoder to decode
address<00:00:57.480> lines<00:00:59.180> generally<00:01:00.180> eeproms

00:01:01.220 --> 00:01:01.230 
address lines generally eeproms

00:01:01.230 --> 00:01:03.529 
address lines generally eeproms
are<00:01:01.320> used<00:01:01.710> as<00:01:01.920> program<00:01:02.340> memory<00:01:02.609> and<00:01:02.940> DRAM<00:01:03.329> as

00:01:03.529 --> 00:01:03.539 
are used as program memory and DRAM as

00:01:03.539 --> 00:01:06.350 
are used as program memory and DRAM as
data<00:01:03.809> memory<00:01:04.339> EPROM<00:01:05.339> chip<00:01:05.369> must<00:01:06.150> be

00:01:06.350 --> 00:01:06.360 
data memory EPROM chip must be

00:01:06.360 --> 00:01:08.660 
data memory EPROM chip must be
programmed<00:01:06.570> before<00:01:07.170> it<00:01:07.290> can<00:01:07.530> be<00:01:07.680> used<00:01:07.890> as<00:01:08.130> dome

00:01:08.660 --> 00:01:08.670 
programmed before it can be used as dome

00:01:08.670 --> 00:01:10.880 
programmed before it can be used as dome
this<00:01:09.240> figure<00:01:09.479> shows<00:01:09.630> it<00:01:10.110> has<00:01:10.320> four<00:01:10.710> key

00:01:10.880 --> 00:01:10.890 
this figure shows it has four key

00:01:10.890 --> 00:01:13.340 
this figure shows it has four key
registers<00:01:11.490> each<00:01:11.700> a<00:01:12.420> gesture<00:01:12.840> store<00:01:13.110> eight

00:01:13.340 --> 00:01:13.350 
registers each a gesture store eight

00:01:13.350 --> 00:01:15.950 
registers each a gesture store eight
bits<00:01:13.619> it<00:01:14.070> has<00:01:14.310> eight<00:01:14.610> input<00:01:15.030> lines<00:01:15.240> and<00:01:15.540> an

00:01:15.950 --> 00:01:15.960 
bits it has eight input lines and an

00:01:15.960 --> 00:01:18.160 
bits it has eight input lines and an
internal<00:01:16.439> decoder<00:01:16.860> to<00:01:17.130> decode<00:01:17.430> address<00:01:17.880> lines

00:01:18.160 --> 00:01:18.170 
internal decoder to decode address lines

00:01:18.170 --> 00:01:21.289 
internal decoder to decode address lines
it<00:01:19.170> has<00:01:19.380> twelve<00:01:19.770> at<00:01:19.920> this<00:01:20.220> lines<00:01:20.490> that<00:01:20.850> is<00:01:21.000> from

00:01:21.289 --> 00:01:21.299 
it has twelve at this lines that is from

00:01:21.299 --> 00:01:24.560 
it has twelve at this lines that is from
eleven<00:01:22.229> to<00:01:22.350> a<00:01:22.439> zero<00:01:22.920> one<00:01:23.520> chip<00:01:23.790> select<00:01:24.150> one

00:01:24.560 --> 00:01:24.570 
eleven to a zero one chip select one

00:01:24.570 --> 00:01:26.330 
eleven to a zero one chip select one
read<00:01:24.780> control<00:01:25.110> signal<00:01:25.200> lines<00:01:25.710> to<00:01:25.950> enable

00:01:26.330 --> 00:01:26.340 
read control signal lines to enable

00:01:26.340 --> 00:01:30.890 
read control signal lines to enable
output<00:01:26.729> buffer<00:01:28.340> basic<00:01:29.340> concepts<00:01:29.970> of<00:01:30.030> memory

00:01:30.890 --> 00:01:30.900 
output buffer basic concepts of memory

00:01:30.900 --> 00:01:33.140 
output buffer basic concepts of memory
interfacing<00:01:31.680> the<00:01:32.280> primary<00:01:32.640> function<00:01:33.060> of

00:01:33.140 --> 00:01:33.150 
interfacing the primary function of

00:01:33.150 --> 00:01:34.490 
interfacing the primary function of
memory<00:01:33.540> interfacing<00:01:34.170> is<00:01:34.290> that<00:01:34.470> a

00:01:34.490 --> 00:01:34.500 
memory interfacing is that a

00:01:34.500 --> 00:01:36.770 
memory interfacing is that a
microprocessor<00:01:35.040> should<00:01:35.549> be<00:01:35.670> able<00:01:35.820> to<00:01:36.210> read

00:01:36.770 --> 00:01:36.780 
microprocessor should be able to read

00:01:36.780 --> 00:01:39.319 
microprocessor should be able to read
from<00:01:36.810> and<00:01:37.380> write<00:01:37.680> into<00:01:38.280> a<00:01:38.310> given<00:01:38.670> register<00:01:39.180> of

00:01:39.319 --> 00:01:39.329 
from and write into a given register of

00:01:39.329 --> 00:01:42.050 
from and write into a given register of
a<00:01:39.570> memory<00:01:39.900> chip<00:01:40.020> to<00:01:40.979> perform<00:01:41.460> these

00:01:42.050 --> 00:01:42.060 
a memory chip to perform these

00:01:42.060 --> 00:01:44.179 
a memory chip to perform these
operations<00:01:42.649> microprocessor<00:01:43.649> should<00:01:43.890> be<00:01:44.009> able

00:01:44.179 --> 00:01:44.189 
operations microprocessor should be able

00:01:44.189 --> 00:01:46.940 
operations microprocessor should be able
to<00:01:44.610> select<00:01:45.600> the<00:01:45.780> chip<00:01:46.020> to<00:01:46.320> identify<00:01:46.890> the

00:01:46.940 --> 00:01:46.950 
to select the chip to identify the

00:01:46.950 --> 00:01:49.069 
to select the chip to identify the
register<00:01:47.610> and<00:01:47.880> to<00:01:48.090> enable<00:01:48.299> the<00:01:48.600> appropriate

00:01:49.069 --> 00:01:49.079 
register and to enable the appropriate

00:01:49.079 --> 00:01:52.460 
register and to enable the appropriate
buffer<00:01:49.490> here<00:01:50.490> we<00:01:51.210> have<00:01:51.450> shown<00:01:51.780> the<00:01:52.079> timing

00:01:52.460 --> 00:01:52.470 
buffer here we have shown the timing

00:01:52.470 --> 00:01:58.249 
buffer here we have shown the timing
diagram<00:01:52.619> of<00:01:53.100> memory<00:01:53.610> read<00:01:53.939> cycle<00:01:56.509> 885<00:01:57.509> places

00:01:58.249 --> 00:01:58.259 
diagram of memory read cycle 885 places

00:01:58.259 --> 00:02:01.039 
diagram of memory read cycle 885 places
16-bit<00:01:59.040> address<00:01:59.490> on<00:01:59.700> address<00:02:00.240> purse<00:02:00.509> and<00:02:00.719> with

00:02:01.039 --> 00:02:01.049 
16-bit address on address purse and with

00:02:01.049 --> 00:02:02.899 
16-bit address on address purse and with
this<00:02:01.229> address<00:02:01.439> only<00:02:01.979> one<00:02:02.159> register<00:02:02.579> should<00:02:02.759> be

00:02:02.899 --> 00:02:02.909 
this address only one register should be

00:02:02.909 --> 00:02:05.660 
this address only one register should be
selected<00:02:03.450> internal<00:02:04.409> decoder<00:02:04.860> of<00:02:05.159> chip<00:02:05.460> will

00:02:05.660 --> 00:02:05.670 
selected internal decoder of chip will

00:02:05.670 --> 00:02:07.730 
selected internal decoder of chip will
identify<00:02:05.850> and<00:02:06.540> select<00:02:06.780> the<00:02:07.079> register<00:02:07.590> for

00:02:07.730 --> 00:02:07.740 
identify and select the register for

00:02:07.740 --> 00:02:10.609 
identify and select the register for
EEPROM<00:02:08.239> remaining<00:02:09.239> 80-85<00:02:09.899> address<00:02:10.379> lines

00:02:10.609 --> 00:02:10.619 
EEPROM remaining 80-85 address lines

00:02:10.619 --> 00:02:13.670 
EEPROM remaining 80-85 address lines
that<00:02:10.979> is<00:02:11.129> from<00:02:11.430> a<00:02:11.730> 15<00:02:12.510> to<00:02:12.780> a<00:02:12.810> lay

00:02:13.670 --> 00:02:13.680 
that is from a 15 to a lay

00:02:13.680 --> 00:02:15.500 
that is from a 15 to a lay
should<00:02:14.100> be<00:02:14.280> decoded<00:02:14.580> to<00:02:14.940> generate<00:02:15.300> chip

00:02:15.500 --> 00:02:15.510 
should be decoded to generate chip

00:02:15.510 --> 00:02:19.520 
should be decoded to generate chip
select<00:02:16.490> 885<00:02:17.490> provides<00:02:18.120> to<00:02:18.450> signal<00:02:18.870> I<00:02:19.050> will

00:02:19.520 --> 00:02:19.530 
select 885 provides to signal I will

00:02:19.530 --> 00:02:24.230 
select 885 provides to signal I will
slash<00:02:19.950> em<00:02:20.280> -<00:02:20.640> and<00:02:20.910> I<00:02:21.540> -<00:02:21.680> to<00:02:22.680> indicate<00:02:23.130> that<00:02:23.430> this

00:02:24.230 --> 00:02:24.240 
slash em - and I - to indicate that this

00:02:24.240 --> 00:02:27.470 
slash em - and I - to indicate that this
is<00:02:24.300> memory<00:02:24.900> read<00:02:25.140> operation<00:02:25.790> it<00:02:26.790> is<00:02:26.850> a<00:02:27.000> control

00:02:27.470 --> 00:02:27.480 
is memory read operation it is a control

00:02:27.480 --> 00:02:29.750 
is memory read operation it is a control
signal<00:02:27.720> that<00:02:28.140> can<00:02:28.320> be<00:02:28.470> used<00:02:28.710> to<00:02:28.950> enable<00:02:29.190> output

00:02:29.750 --> 00:02:29.760 
signal that can be used to enable output

00:02:29.760 --> 00:02:32.030 
signal that can be used to enable output
buffer<00:02:30.090> by<00:02:30.270> connecting<00:02:30.750> to<00:02:30.870> memory<00:02:31.230> signal<00:02:31.620> Rd

00:02:32.030 --> 00:02:32.040 
buffer by connecting to memory signal Rd

00:02:32.040 --> 00:02:35.630 
buffer by connecting to memory signal Rd
-<00:02:32.690> memory<00:02:33.690> places<00:02:34.230> data<00:02:34.470> by<00:02:34.740> it<00:02:34.800> from<00:02:35.220> address

00:02:35.630 --> 00:02:35.640 
- memory places data by it from address

00:02:35.640 --> 00:02:38.600 
- memory places data by it from address
register<00:02:36.180> during<00:02:36.480> t2<00:02:36.840> and<00:02:37.260> that<00:02:37.920> is<00:02:38.100> read<00:02:38.430> by

00:02:38.600 --> 00:02:38.610 
register during t2 and that is read by

00:02:38.610 --> 00:02:42.610 
register during t2 and that is read by
the<00:02:38.640> microprocessor<00:02:39.450> before<00:02:39.990> the<00:02:40.110> end<00:02:40.290> of<00:02:40.440> t3

00:02:42.610 --> 00:02:42.620 
the microprocessor before the end of t3

00:02:42.620 --> 00:02:45.760 
the microprocessor before the end of t3
address<00:02:43.620> decoding<00:02:44.190> and<00:02:44.400> memory<00:02:44.790> addresses

00:02:45.760 --> 00:02:45.770 
address decoding and memory addresses

00:02:45.770 --> 00:02:48.350 
address decoding and memory addresses
the<00:02:46.770> process<00:02:47.220> of<00:02:47.370> edges<00:02:47.670> decoding<00:02:48.180> should

00:02:48.350 --> 00:02:48.360 
the process of edges decoding should

00:02:48.360 --> 00:02:50.120 
the process of edges decoding should
result<00:02:48.690> in<00:02:48.870> identifying<00:02:49.470> origin<00:02:49.920> so

00:02:50.120 --> 00:02:50.130 
result in identifying origin so

00:02:50.130 --> 00:02:51.620 
result in identifying origin so
forgiving<00:02:50.640> it<00:02:50.730> is<00:02:50.910> we<00:02:51.060> should<00:02:51.240> be<00:02:51.270> able<00:02:51.450> to

00:02:51.620 --> 00:02:51.630 
forgiving it is we should be able to

00:02:51.630 --> 00:02:53.660 
forgiving it is we should be able to
generate<00:02:52.020> a<00:02:52.080> unique<00:02:52.350> pulse<00:02:52.800> forgiven<00:02:53.370> address

00:02:53.660 --> 00:02:53.670 
generate a unique pulse forgiven address

00:02:53.670 --> 00:02:56.810 
generate a unique pulse forgiven address
for<00:02:53.850> example<00:02:54.380> that<00:02:55.380> will<00:02:55.710> witness<00:02:56.130> lines<00:02:56.460> that

00:02:56.810 --> 00:02:56.820 
for example that will witness lines that

00:02:56.820 --> 00:02:59.570 
for example that will witness lines that
is<00:02:56.970> from<00:02:57.240> a<00:02:57.420> 11<00:02:57.960> to<00:02:58.140> 8<00:02:58.320> 0<00:02:58.680> and<00:02:58.890> I<00:02:59.010> connected<00:02:59.460> to

00:02:59.570 --> 00:02:59.580 
is from a 11 to 8 0 and I connected to

00:02:59.580 --> 00:03:02.240 
is from a 11 to 8 0 and I connected to
memory<00:02:59.910> chip<00:03:00.210> the<00:03:00.990> meaning<00:03:01.320> it<00:03:01.440> is<00:03:01.620> lines<00:03:01.920> that

00:03:02.240 --> 00:03:02.250 
memory chip the meaning it is lines that

00:03:02.250 --> 00:03:05.390 
memory chip the meaning it is lines that
is<00:03:02.400> from<00:03:02.730> a<00:03:03.060> 15<00:03:03.660> to<00:03:03.840> a<00:03:03.870> 12<00:03:04.290> of<00:03:04.470> 80-85

00:03:05.390 --> 00:03:05.400 
is from a 15 to a 12 of 80-85

00:03:05.400 --> 00:03:08.360 
is from a 15 to a 12 of 80-85
microprocessor<00:03:06.330> must<00:03:06.630> be<00:03:06.810> decoded<00:03:07.110> the<00:03:08.100> two

00:03:08.360 --> 00:03:08.370 
microprocessor must be decoded the two

00:03:08.370 --> 00:03:11.090 
microprocessor must be decoded the two
methods<00:03:08.880> to<00:03:08.970> decode<00:03:09.390> these<00:03:09.660> lines<00:03:09.960> first<00:03:10.830> by

00:03:11.090 --> 00:03:11.100 
methods to decode these lines first by

00:03:11.100 --> 00:03:13.580 
methods to decode these lines first by
an<00:03:11.160> and<00:03:11.400> gate<00:03:11.670> and<00:03:11.880> another<00:03:12.330> by<00:03:12.570> using<00:03:12.600> 3<00:03:13.290> cross

00:03:13.580 --> 00:03:13.590 
an and gate and another by using 3 cross

00:03:13.590 --> 00:03:17.750 
an and gate and another by using 3 cross
8<00:03:13.890> decoder<00:03:15.530> by<00:03:16.530> NAND<00:03:16.830> gate<00:03:17.130> the<00:03:17.340> output<00:03:17.370> of

00:03:17.750 --> 00:03:17.760 
8 decoder by NAND gate the output of

00:03:17.760 --> 00:03:20.270 
8 decoder by NAND gate the output of
NAND<00:03:18.120> gate<00:03:18.390> is<00:03:18.540> active<00:03:18.960> and<00:03:19.170> select<00:03:19.980> the<00:03:20.100> chip

00:03:20.270 --> 00:03:20.280 
NAND gate is active and select the chip

00:03:20.280 --> 00:03:23.000 
NAND gate is active and select the chip
only<00:03:20.640> when<00:03:20.820> all<00:03:21.030> the<00:03:21.300> edges<00:03:21.660> lines<00:03:21.960> a<00:03:22.230> 15<00:03:22.740> to<00:03:22.890> a

00:03:23.000 --> 00:03:23.010 
only when all the edges lines a 15 to a

00:03:23.010 --> 00:03:26.540 
only when all the edges lines a 15 to a
12<00:03:23.310> are<00:03:23.550> at<00:03:23.670> logic<00:03:23.940> 1<00:03:24.470> by<00:03:25.470> using<00:03:25.710> 3<00:03:26.130> class<00:03:26.370> a

00:03:26.540 --> 00:03:26.550 
12 are at logic 1 by using 3 class a

00:03:26.550 --> 00:03:29.390 
12 are at logic 1 by using 3 class a
decoder<00:03:27.060> if<00:03:27.750> enable<00:03:28.350> line<00:03:28.530> is<00:03:28.710> active<00:03:28.980> a

00:03:29.390 --> 00:03:29.400 
decoder if enable line is active a

00:03:29.400 --> 00:03:31.250 
decoder if enable line is active a
different<00:03:29.970> logic<00:03:30.150> combination<00:03:30.900> can<00:03:31.080> be

00:03:31.250 --> 00:03:31.260 
different logic combination can be

00:03:31.260 --> 00:03:35.720 
different logic combination can be
identified<00:03:31.410> by<00:03:31.980> the<00:03:32.310> output<00:03:32.820> line<00:03:33.030> and<00:03:33.620> a<00:03:34.730> 1

00:03:35.720 --> 00:03:35.730 
identified by the output line and a 1

00:03:35.730 --> 00:03:38.600 
identified by the output line and a 1
and<00:03:36.000> a<00:03:36.300> 2<00:03:36.330> are<00:03:36.540> enabled<00:03:37.290> by<00:03:37.380> grounding<00:03:38.010> and<00:03:38.220> a

00:03:38.600 --> 00:03:38.610 
and a 2 are enabled by grounding and a

00:03:38.610 --> 00:03:42.680 
and a 2 are enabled by grounding and a
15<00:03:39.210> must<00:03:39.510> be<00:03:39.690> at<00:03:39.810> logic<00:03:40.050> koala<00:03:41.330> here<00:03:42.330> we<00:03:42.540> have

00:03:42.680 --> 00:03:42.690 
15 must be at logic koala here we have

00:03:42.690 --> 00:03:45.740 
15 must be at logic koala here we have
shown<00:03:43.170> it<00:03:43.470> 85<00:03:44.220> interfacing<00:03:45.150> with<00:03:45.180> memory

00:03:45.740 --> 00:03:45.750 
shown it 85 interfacing with memory

00:03:45.750 --> 00:03:51.830 
shown it 85 interfacing with memory
chips<00:03:49.310> here<00:03:50.310> they<00:03:50.490> have<00:03:50.670> shown<00:03:50.970> interfacing

00:03:51.830 --> 00:03:51.840 
chips here they have shown interfacing

00:03:51.840 --> 00:03:54.590 
chips here they have shown interfacing
circuit<00:03:52.380> using<00:03:52.860> 3<00:03:53.160> cross<00:03:53.430> a<00:03:53.670> decoder<00:03:54.270> to

00:03:54.590 --> 00:03:54.600 
circuit using 3 cross a decoder to

00:03:54.600 --> 00:03:59.000 
circuit using 3 cross a decoder to
interface<00:03:55.170> 2<00:03:55.590> 7<00:03:55.950> 3<00:03:55.980> 2<00:03:56.250> a<00:03:56.610> prom<00:03:56.880> the<00:03:57.870> 80-85<00:03:58.530> at

00:03:59.000 --> 00:03:59.010 
interface 2 7 3 2 a prom the 80-85 at

00:03:59.010 --> 00:04:02.420 
interface 2 7 3 2 a prom the 80-85 at
this<00:03:59.250> lines<00:03:59.550> that<00:03:59.940> is<00:04:00.090> from<00:04:00.420> a<00:04:00.750> 11<00:04:01.680> to<00:04:01.830> a<00:04:02.040> zero

00:04:02.420 --> 00:04:02.430 
this lines that is from a 11 to a zero

00:04:02.430 --> 00:04:05.810 
this lines that is from a 11 to a zero
are<00:04:02.640> connected<00:04:03.240> to<00:04:03.390> the<00:04:03.510> pins<00:04:03.780> a<00:04:04.080> 11<00:04:04.980> 2<00:04:05.130> is<00:04:05.310> 0<00:04:05.610> of

00:04:05.810 --> 00:04:05.820 
are connected to the pins a 11 2 is 0 of

00:04:05.820 --> 00:04:09.320 
are connected to the pins a 11 2 is 0 of
the<00:04:05.970> memory<00:04:06.300> chip<00:04:06.600> decoder<00:04:07.590> decode<00:04:08.100> a<00:04:08.340> 15<00:04:09.030> to<00:04:09.180> a

00:04:09.320 --> 00:04:09.330 
the memory chip decoder decode a 15 to a

00:04:09.330 --> 00:04:11.810 
the memory chip decoder decode a 15 to a
12<00:04:09.690> and<00:04:09.900> output<00:04:10.890> is<00:04:11.040> connected<00:04:11.280> to<00:04:11.520> chip

00:04:11.810 --> 00:04:11.820 
12 and output is connected to chip

00:04:11.820 --> 00:04:14.810 
12 and output is connected to chip
enable<00:04:12.300> which<00:04:12.840> is<00:04:12.960> asserted<00:04:13.500> only<00:04:13.860> when<00:04:14.040> a<00:04:14.220> 15

00:04:14.810 --> 00:04:14.820 
enable which is asserted only when a 15

00:04:14.820 --> 00:04:18.500 
enable which is asserted only when a 15
to<00:04:14.970> a<00:04:15.000> 12<00:04:15.450> is<00:04:15.660> 0<00:04:16.310> one<00:04:17.310> control<00:04:17.820> signal<00:04:18.330> is

00:04:18.500 --> 00:04:18.510 
to a 12 is 0 one control signal is

00:04:18.510 --> 00:04:21.740 
to a 12 is 0 one control signal is
connected<00:04:19.410> to<00:04:19.440> output<00:04:19.790> enable<00:04:20.790> to<00:04:21.330> enable

00:04:21.740 --> 00:04:21.750 
connected to output enable to enable

00:04:21.750 --> 00:04:24.960 
connected to output enable to enable
output<00:04:22.169> buffer

00:04:24.960 --> 00:04:24.970 

00:04:24.970 --> 00:04:27.870 

now<00:04:25.390> to<00:04:26.080> examine<00:04:26.590> how<00:04:26.770> it<00:04:26.950> did<00:04:27.130> to<00:04:27.250> five<00:04:27.490> places

00:04:27.870 --> 00:04:27.880 
now to examine how it did to five places

00:04:27.880 --> 00:04:30.960 
now to examine how it did to five places
the<00:04:28.180> address<00:04:28.300> 0<00:04:28.870> F<00:04:29.050> F<00:04:29.290> F<00:04:29.530> H<00:04:29.890> on<00:04:30.160> at<00:04:30.460> dispersed

00:04:30.960 --> 00:04:30.970 
the address 0 F F F H on at dispersed

00:04:30.970 --> 00:04:34.680 
the address 0 F F F H on at dispersed
the<00:04:31.630> edges<00:04:32.020> 0<00:04:32.290> H<00:04:32.560> goes<00:04:32.950> to<00:04:33.130> the<00:04:33.280> decoder<00:04:33.690> output

00:04:34.680 --> 00:04:34.690 
the edges 0 H goes to the decoder output

00:04:34.690 --> 00:04:36.900 
the edges 0 H goes to the decoder output
line<00:04:34.930> or<00:04:35.200> zero<00:04:35.590> of<00:04:35.710> the<00:04:35.860> decoder<00:04:36.220> selects<00:04:36.670> the

00:04:36.900 --> 00:04:36.910 
line or zero of the decoder selects the

00:04:36.910 --> 00:04:40.260 
line or zero of the decoder selects the
chip<00:04:37.170> remaining<00:04:38.170> a<00:04:38.260> dis<00:04:38.470> lines<00:04:38.740> f<00:04:39.070> F<00:04:39.280> F<00:04:39.310> H<00:04:39.850> goes

00:04:40.260 --> 00:04:40.270 
chip remaining a dis lines f F F H goes

00:04:40.270 --> 00:04:41.970 
chip remaining a dis lines f F F H goes
on<00:04:40.450> at<00:04:40.630> rest<00:04:40.900> lines<00:04:41.140> of<00:04:41.380> the<00:04:41.530> chip<00:04:41.770> and<00:04:41.920> the

00:04:41.970 --> 00:04:41.980 
on at rest lines of the chip and the

00:04:41.980 --> 00:04:44.460 
on at rest lines of the chip and the
internal<00:04:42.850> decoder<00:04:43.210> decodes<00:04:43.450> the<00:04:43.870> address<00:04:44.260> and

00:04:44.460 --> 00:04:44.470 
internal decoder decodes the address and

00:04:44.470 --> 00:04:48.060 
internal decoder decodes the address and
select<00:04:44.590> the<00:04:44.950> register<00:04:45.070> F<00:04:45.670> F<00:04:46.210> F<00:04:46.420> H<00:04:46.690> when<00:04:47.500> our<00:04:47.740> -

00:04:48.060 --> 00:04:48.070 
select the register F F F H when our -

00:04:48.070 --> 00:04:50.670 
select the register F F F H when our -
is<00:04:48.220> asserted<00:04:48.820> the<00:04:49.300> output<00:04:49.660> buffer<00:04:49.960> is<00:04:50.110> enabled

00:04:50.670 --> 00:04:50.680 
is asserted the output buffer is enabled

00:04:50.680 --> 00:04:52.590 
is asserted the output buffer is enabled
and<00:04:50.860> the<00:04:51.100> contents<00:04:51.550> of<00:04:51.640> register<00:04:52.150> uh<00:04:52.300> places

00:04:52.590 --> 00:04:52.600 
and the contents of register uh places

00:04:52.600 --> 00:04:56.240 
and the contents of register uh places
on<00:04:52.990> the<00:04:53.410> data<00:04:53.620> bus<00:04:53.920> for<00:04:54.190> the<00:04:54.280> processor<00:04:54.790> turret

00:04:56.240 --> 00:04:56.250 
on the data bus for the processor turret

00:04:56.250 --> 00:05:00.030 
on the data bus for the processor turret
here<00:04:57.250> we<00:04:57.460> have<00:04:57.610> shown<00:04:57.970> it<00:04:58.240> T<00:04:58.570> 155<00:04:59.500> memory

00:05:00.030 --> 00:05:00.040 
here we have shown it T 155 memory

00:05:00.040 --> 00:05:03.570 
here we have shown it T 155 memory
section<00:05:00.310> block<00:05:00.790> diagram<00:05:01.360> it<00:05:02.050> has<00:05:02.350> 8<00:05:02.890> address

00:05:03.570 --> 00:05:03.580 
section block diagram it has 8 address

00:05:03.580 --> 00:05:07.050 
section block diagram it has 8 address
lines<00:05:03.850> 1<00:05:04.300> chip<00:05:04.540> enable<00:05:05.020> 5<00:05:05.710> control<00:05:06.280> and<00:05:06.550> status

00:05:07.050 --> 00:05:07.060 
lines 1 chip enable 5 control and status

00:05:07.060 --> 00:05:10.800 
lines 1 chip enable 5 control and status
signals<00:05:07.480> it<00:05:08.230> includes<00:05:08.740> 256<00:05:09.670> cross<00:05:09.970> 8<00:05:10.300> memory

00:05:10.800 --> 00:05:10.810 
signals it includes 256 cross 8 memory

00:05:10.810 --> 00:05:13.050 
signals it includes 256 cross 8 memory
locations<00:05:11.500> into<00:05:12.220> the<00:05:12.520> latch<00:05:12.760> for

00:05:13.050 --> 00:05:13.060 
locations into the latch for

00:05:13.060 --> 00:05:15.960 
locations into the latch for
demultiplexing<00:05:14.050> chip<00:05:14.740> enable<00:05:15.280> and<00:05:15.430> control

00:05:15.960 --> 00:05:15.970 
demultiplexing chip enable and control

00:05:15.970 --> 00:05:20.730 
demultiplexing chip enable and control
signals<00:05:17.970> interfacing<00:05:18.970> the<00:05:19.120> 8155<00:05:20.110> memory

00:05:20.730 --> 00:05:20.740 
signals interfacing the 8155 memory

00:05:20.740 --> 00:05:24.720 
signals interfacing the 8155 memory
segment<00:05:21.280> 8<00:05:21.940> to<00:05:22.360> 0-5<00:05:23.110> a<00:05:23.410> 3<00:05:23.770> cross<00:05:24.010> 8<00:05:24.310> decoder

00:05:24.720 --> 00:05:24.730 
segment 8 to 0-5 a 3 cross 8 decoder

00:05:24.730 --> 00:05:27.360 
segment 8 to 0-5 a 3 cross 8 decoder
decodes<00:05:25.090> the<00:05:25.540> address<00:05:25.960> lines<00:05:26.260> that<00:05:26.620> is<00:05:26.800> from<00:05:27.100> a

00:05:27.360 --> 00:05:27.370 
decodes the address lines that is from a

00:05:27.370 --> 00:05:31.350 
decodes the address lines that is from a
15<00:05:28.240> to<00:05:28.390> a<00:05:29.070> 1104<00:05:30.070> enables<00:05:30.640> the<00:05:30.760> memory<00:05:31.090> chip

00:05:31.350 --> 00:05:31.360 
15 to a 1104 enables the memory chip

00:05:31.360 --> 00:05:33.870 
15 to a 1104 enables the memory chip
control<00:05:32.050> and<00:05:32.320> status<00:05:32.680> signals<00:05:33.100> from<00:05:33.250> 80-85

00:05:33.870 --> 00:05:33.880 
control and status signals from 80-85

00:05:33.880 --> 00:05:36.240 
control and status signals from 80-85
are<00:05:34.510> connected<00:05:34.990> to<00:05:35.110> respective<00:05:35.620> signals<00:05:36.070> of

00:05:36.240 --> 00:05:36.250 
are connected to respective signals of

00:05:36.250 --> 00:05:40.590 
are connected to respective signals of
memory<00:05:36.640> chip<00:05:37.080> here<00:05:38.080> 7<00:05:38.470> -<00:05:38.620> 8<00:05:38.830> 0<00:05:38.860> address<00:05:39.430> any<00:05:39.940> one

00:05:40.590 --> 00:05:40.600 
memory chip here 7 - 8 0 address any one

00:05:40.600 --> 00:05:45.420 
memory chip here 7 - 8 0 address any one
of<00:05:40.780> the<00:05:40.930> 256<00:05:41.440> registers<00:05:42.220> a<00:05:42.460> 14<00:05:43.419> -<00:05:43.570> a<00:05:43.600> 50<00:05:44.169> a<00:05:44.650> 15<00:05:45.190> a

00:05:45.420 --> 00:05:45.430 
of the 256 registers a 14 - a 50 a 15 a

00:05:45.430 --> 00:05:48.090 
of the 256 registers a 14 - a 50 a 15 a
active<00:05:46.180> low<00:05:46.390> and<00:05:46.660> third<00:05:47.080> line<00:05:47.290> is<00:05:47.500> permanently

00:05:48.090 --> 00:05:48.100 
active low and third line is permanently

00:05:48.100 --> 00:05:52.200 
active low and third line is permanently
enabled<00:05:48.640> by<00:05:48.820> tying<00:05:49.120> it<00:05:49.270> with<00:05:49.330> +5<00:05:50.320> volts<00:05:50.800> a<00:05:51.210> tend

00:05:52.200 --> 00:05:52.210 
enabled by tying it with +5 volts a tend

00:05:52.210 --> 00:05:54.540 
enabled by tying it with +5 volts a tend
to<00:05:52.390> a<00:05:52.419> 8<00:05:52.870> are<00:05:53.080> not<00:05:53.350> connected<00:05:53.919> they<00:05:54.130> are<00:05:54.160> don't

00:05:54.540 --> 00:05:54.550 
to a 8 are not connected they are don't

00:05:54.550 --> 00:05:55.650 
to a 8 are not connected they are don't
care<00:05:54.880> lines

00:05:55.650 --> 00:05:55.660 
care lines

00:05:55.660 --> 00:05:59.220 
care lines
Oh<00:05:55.810> 4<00:05:56.620> is<00:05:56.800> low<00:05:57.130> for<00:05:57.580> a<00:05:57.820> low<00:05:58.390> for<00:05:58.720> following

00:05:59.220 --> 00:05:59.230 
Oh 4 is low for a low for following

00:05:59.230 --> 00:06:03.420 
Oh 4 is low for a low for following
address<00:06:00.480> memory<00:06:01.480> address<00:06:01.960> range<00:06:02.260> is<00:06:02.530> from<00:06:02.800> 2<00:06:03.100> 0

00:06:03.420 --> 00:06:03.430 
address memory address range is from 2 0

00:06:03.430 --> 00:06:06.840 
address memory address range is from 2 0
0<00:06:03.700> H<00:06:03.940> -<00:06:04.330> 2<00:06:04.360> 0<00:06:04.720> FF<00:06:05.169> H<00:06:05.410> when<00:06:05.800> don't<00:06:06.070> care<00:06:06.280> lines<00:06:06.550> and

00:06:06.840 --> 00:06:06.850 
0 H - 2 0 FF H when don't care lines and

00:06:06.850 --> 00:06:09.780 
0 H - 2 0 FF H when don't care lines and
at<00:06:06.970> logic<00:06:07.180> 0<00:06:07.630> by<00:06:08.590> convention<00:06:09.190> it<00:06:09.370> is<00:06:09.400> called

00:06:09.780 --> 00:06:09.790 
at logic 0 by convention it is called

00:06:09.790 --> 00:06:12.570 
at logic 0 by convention it is called
primary<00:06:10.090> address<00:06:10.780> it's<00:06:11.680> all<00:06:11.950> about<00:06:12.340> the

00:06:12.570 --> 00:06:12.580 
primary address it's all about the

00:06:12.580 --> 00:06:16.500 
primary address it's all about the
memory<00:06:12.910> interfacing<00:06:13.750> thank<00:06:14.230> you

