WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.700
Since there are not many videos in which

00:00:03.040 --> 00:00:06.180
you can actually see how
the Program 101 works

00:00:06.640 --> 00:00:08.700
I decided to realize one

00:00:08.960 --> 00:00:15.289
where two simple programs that I have personally created, will be executed 

00:00:15.469 --> 00:00:18.830
The program 101 is a very simple,

00:00:19.120 --> 00:00:22.620
it performs mathematical and logical operations

00:00:22.960 --> 00:00:25.680
and it prints numerical results.

00:00:26.310 --> 00:00:30.250
In this case then, I realized a program that calculates the Fibonacci Sequence

00:00:30.420 --> 00:00:32.180
within two limits.

00:00:32.520 --> 00:00:34.480
When I will start the program

00:00:36.020 --> 00:00:39.600
the computer will stop and allow me to enter the two limits,

00:00:40.380 --> 00:00:43.940
within which I want to print the Fibonacci Sequence.

00:00:44.600 --> 00:00:46.020
Let's try it right away,

00:00:46.260 --> 00:00:47.780
I turn on the computer

00:00:50.240 --> 00:00:51.340
I reset the memory,

00:00:51.960 --> 00:00:54.580
All the programs are in this memory card

00:00:54.860 --> 00:00:58.020
and on each side there is a program.

00:00:58.500 --> 00:01:00.600
The card can be inserted in two ways.

00:01:00.840 --> 00:01:02.400
I insert the card

00:01:02.540 --> 00:01:03.920
Now the program is loaded

00:01:04.240 --> 00:01:05.860
and I can start it, again.

00:01:06.120 --> 00:01:07.220
I start it,

00:01:08.580 --> 00:01:10.180
the program starts,

00:01:10.520 --> 00:01:14.120
now I can enter my first number

00:01:14.340 --> 00:01:15.920
This is Fibonacci Sequence program

00:01:16.100 --> 00:01:19.180
so in this case we can start from figure 1

00:01:20.020 --> 00:01:21.560
I insert 1, enter

00:01:21.760 --> 00:01:23.840
the machine calculates, then it stops again

00:01:24.020 --> 00:01:25.700
so I insert another figure

00:01:26.500 --> 00:01:27.980
for example 13

00:01:28.280 --> 00:01:33.220
and then the machine, in this case, executes the printing of all the figures from 1 to 13

00:01:33.420 --> 00:01:39.060
in a cycle, where there will be a check and at the end of this cycle

00:01:40.880 --> 00:01:43.900
It will do this check, then a logical operation, and it will stop.

00:01:45.620 --> 00:01:49.240
Of course the machine is quite slow.

00:01:49.960 --> 00:01:53.300
Next program that calculates prime numbers is a bit more complex

00:01:54.300 --> 00:02:02.980
and considering that to calculate a prime number requires to perform an enormous amount of operations,

00:02:03.240 --> 00:02:05.600
The code has been optimized as much as possible.

00:02:06.120 --> 00:02:08.740
Also in this case, the machine, being a computer,

00:02:09.240 --> 00:02:15.000
can execute logical operations, saving  the results of our operations into the memory an in the registers

00:02:19.220 --> 00:02:26.600
And the it allows me to create a logical structure so to optimize the calculation.

00:02:27.200 --> 00:02:32.640
In  this program there are many jumps, conditioned, unconditioned, and then checks

00:02:33.440 --> 00:02:40.640
That will go to use almost all the memory and almost all the registers of the machine.

00:02:41.520 --> 00:02:43.640
Now I start again,

00:02:44.180 --> 00:02:45.680
I reset the memory,

00:02:45.920 --> 00:02:52.220
I put the card in the side where I stored the program to calculate prime numbers,

00:02:52.900 --> 00:02:56.240
Now the program is loaded into the memory and I start it

00:02:57.080 --> 00:02:58.160
at this point

00:02:58.500 --> 00:03:00.860
I can insert my first figure

00:03:01.300 --> 00:03:02.500
For example I insert

00:03:03.540 --> 00:03:04.700
figure 2

00:03:05.040 --> 00:03:07.260
2 is a prime number even if even 

00:03:08.100 --> 00:03:09.780
and then the machine will print 1

00:03:10.120 --> 00:03:11.180
I insert 5

00:03:12.600 --> 00:03:14.180
even 5 is a prime number

00:03:14.760 --> 00:03:16.200
and then the machine will print 1 once again

00:03:16.440 --> 00:03:18.760
For example I insert 31

00:03:21.300 --> 00:03:24.340
also in this case the machine executes its operations

00:03:24.560 --> 00:03:27.840
and it still prints figure 1 because it is a prime number

00:03:28.460 --> 00:03:31.320
If it was for example figure 27 that is not a prime number,

00:03:31.560 --> 00:03:33.920
in this case the machine executes the operations

00:03:34.120 --> 00:03:37.900
and it goes to find which is the smallest divisor

00:03:38.180 --> 00:03:39.380
In this specific case itâ€™s 3

00:03:39.520 --> 00:03:44.200
So when it is not a prime number, it prints the smallest divisor of the figure that I have inserted

00:03:46.860 --> 00:03:51.740
The machine is obviously very slow so if I want to calculate prime numbers

00:03:51.940 --> 00:03:55.960
with 4 to 5 figures, it will take more time

00:03:58.280 --> 00:04:04.600
in this case I realized a program that tries to optimize the calculations as much as possible

00:04:05.280 --> 00:04:11.760
So that on a number composed by 4 or 5 figures the machine takes 30 or even 60 seconds to calculate a number.

00:04:12.320 --> 00:04:15.780
Well, the example test is over,

00:04:16.320 --> 00:04:17.380
Thank you

