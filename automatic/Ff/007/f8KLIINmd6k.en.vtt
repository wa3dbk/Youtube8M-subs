WEBVTT
Kind: captions
Language: en

00:00:01.290 --> 00:00:03.800 

all<00:00:01.949> this<00:00:02.370> talk<00:00:02.610> of<00:00:02.639> concurrency<00:00:03.300> and<00:00:03.480> you're

00:00:03.800 --> 00:00:03.810 
all this talk of concurrency and you're

00:00:03.810 --> 00:00:05.360 
all this talk of concurrency and you're
probably<00:00:04.020> wondering<00:00:04.500> well<00:00:04.680> how<00:00:04.920> do<00:00:04.979> I<00:00:05.069> start

00:00:05.360 --> 00:00:05.370 
probably wondering well how do I start

00:00:05.370 --> 00:00:07.190 
probably wondering well how do I start
threads<00:00:05.700> enclosure<00:00:06.210> and<00:00:06.509> the<00:00:06.690> answer<00:00:06.960> is<00:00:06.990> that

00:00:07.190 --> 00:00:07.200 
threads enclosure and the answer is that

00:00:07.200 --> 00:00:09.770 
threads enclosure and the answer is that
you<00:00:07.290> simply<00:00:07.500> use<00:00:07.649> the<00:00:08.270> classes<00:00:09.270> that<00:00:09.300> already

00:00:09.770 --> 00:00:09.780 
you simply use the classes that already

00:00:09.780 --> 00:00:12.110 
you simply use the classes that already
exist<00:00:10.110> in<00:00:10.260> Java<00:00:10.500> for<00:00:11.309> convenience<00:00:11.880> though

00:00:12.110 --> 00:00:12.120 
exist in Java for convenience though

00:00:12.120 --> 00:00:14.320 
exist in Java for convenience though
closure<00:00:12.509> makes<00:00:12.840> its<00:00:13.110> function<00:00:13.710> objects

00:00:14.320 --> 00:00:14.330 
closure makes its function objects

00:00:14.330 --> 00:00:17.060 
closure makes its function objects
implement<00:00:15.330> the<00:00:15.870> runnable<00:00:16.290> interface<00:00:16.830> which

00:00:17.060 --> 00:00:17.070 
implement the runnable interface which

00:00:17.070 --> 00:00:18.229 
implement the runnable interface which
means<00:00:17.310> that<00:00:17.460> when<00:00:17.579> you<00:00:17.669> start<00:00:17.910> a<00:00:18.000> threat<00:00:18.210> you

00:00:18.229 --> 00:00:18.239 
means that when you start a threat you

00:00:18.239 --> 00:00:19.999 
means that when you start a threat you
can<00:00:18.480> simply<00:00:18.660> pass<00:00:19.020> in<00:00:19.290> a<00:00:19.349> regular<00:00:19.710> closure

00:00:19.999 --> 00:00:20.009 
can simply pass in a regular closure

00:00:20.009 --> 00:00:22.040 
can simply pass in a regular closure
function<00:00:20.579> and<00:00:20.730> that's<00:00:21.329> what<00:00:21.540> the<00:00:21.689> thread<00:00:21.930> will

00:00:22.040 --> 00:00:22.050 
function and that's what the thread will

00:00:22.050 --> 00:00:23.980 
function and that's what the thread will
execute

00:00:23.980 --> 00:00:23.990 
execute

00:00:23.990 --> 00:00:26.109 
execute
so<00:00:24.710> that's<00:00:24.920> everything<00:00:25.279> about<00:00:25.580> closure<00:00:25.880> that

00:00:26.109 --> 00:00:26.119 
so that's everything about closure that

00:00:26.119 --> 00:00:28.420 
so that's everything about closure that
I'm<00:00:26.270> going<00:00:26.450> to<00:00:26.570> cover<00:00:26.779> in<00:00:27.140> any<00:00:27.500> detail<00:00:27.770> but

00:00:28.420 --> 00:00:28.430 
I'm going to cover in any detail but

00:00:28.430 --> 00:00:31.029 
I'm going to cover in any detail but
what<00:00:28.730> did<00:00:28.910> I<00:00:29.000> leave<00:00:29.150> out<00:00:29.390> well<00:00:30.200> first<00:00:30.500> of<00:00:30.680> all<00:00:30.800> a

00:00:31.029 --> 00:00:31.039 
what did I leave out well first of all a

00:00:31.039 --> 00:00:33.400 
what did I leave out well first of all a
lot<00:00:31.430> of<00:00:31.580> times<00:00:31.789> in<00:00:32.000> Java<00:00:32.270> the<00:00:32.840> way<00:00:32.989> you<00:00:33.050> use

00:00:33.400 --> 00:00:33.410 
lot of times in Java the way you use

00:00:33.410 --> 00:00:35.200 
lot of times in Java the way you use
some<00:00:33.620> existing<00:00:33.920> library<00:00:34.520> is<00:00:34.700> that<00:00:34.910> you<00:00:35.000> have

00:00:35.200 --> 00:00:35.210 
some existing library is that you have

00:00:35.210 --> 00:00:37.420 
some existing library is that you have
to<00:00:35.420> either<00:00:35.600> inherit<00:00:36.559> from<00:00:36.739> some<00:00:37.100> existing

00:00:37.420 --> 00:00:37.430 
to either inherit from some existing

00:00:37.430 --> 00:00:40.479 
to either inherit from some existing
class<00:00:37.910> or<00:00:38.210> you<00:00:38.809> are<00:00:38.900> meant<00:00:39.140> to<00:00:39.230> implement<00:00:39.890> some

00:00:40.479 --> 00:00:40.489 
class or you are meant to implement some

00:00:40.489 --> 00:00:43.000 
class or you are meant to implement some
interface<00:00:40.970> the<00:00:41.690> problem<00:00:42.170> then<00:00:42.350> is<00:00:42.530> how<00:00:42.860> do<00:00:42.920> we

00:00:43.000 --> 00:00:43.010 
interface the problem then is how do we

00:00:43.010 --> 00:00:45.009 
interface the problem then is how do we
use<00:00:43.100> such<00:00:43.460> libraries<00:00:43.940> enclosure<00:00:44.330> without

00:00:45.009 --> 00:00:45.019 
use such libraries enclosure without

00:00:45.019 --> 00:00:46.930 
use such libraries enclosure without
having<00:00:45.170> to<00:00:45.440> write<00:00:45.620> some<00:00:45.860> Java<00:00:46.250> classes<00:00:46.580> that

00:00:46.930 --> 00:00:46.940 
having to write some Java classes that

00:00:46.940 --> 00:00:49.509 
having to write some Java classes that
act<00:00:47.120> as<00:00:47.330> a<00:00:47.360> rapper<00:00:47.629> well<00:00:48.620> in<00:00:48.949> the<00:00:49.190> standard

00:00:49.509 --> 00:00:49.519 
act as a rapper well in the standard

00:00:49.519 --> 00:00:51.579 
act as a rapper well in the standard
library<00:00:49.580> there<00:00:50.210> is<00:00:50.330> this<00:00:50.449> macro<00:00:50.720> called<00:00:51.080> proxy

00:00:51.579 --> 00:00:51.589 
library there is this macro called proxy

00:00:51.589 --> 00:00:54.700 
library there is this macro called proxy
which<00:00:52.040> allows<00:00:52.370> us<00:00:52.610> basically<00:00:53.059> to<00:00:53.510> derive<00:00:54.110> from

00:00:54.700 --> 00:00:54.710 
which allows us basically to derive from

00:00:54.710 --> 00:00:57.490 
which allows us basically to derive from
Java<00:00:55.220> classes<00:00:55.580> and<00:00:55.970> interfaces<00:00:56.089> in<00:00:56.780> closure

00:00:57.490 --> 00:00:57.500 
Java classes and interfaces in closure

00:00:57.500 --> 00:01:00.250 
Java classes and interfaces in closure
code<00:00:57.860> when<00:00:58.729> you<00:00:58.760> use<00:00:58.970> proxy<00:00:59.510> it's<00:00:59.780> simply<00:01:00.080> up

00:01:00.250 --> 00:01:00.260 
code when you use proxy it's simply up

00:01:00.260 --> 00:01:02.350 
code when you use proxy it's simply up
to<00:01:00.440> you<00:01:00.589> to<00:01:00.860> provide<00:01:00.979> the<00:01:01.670> functions<00:01:02.119> which

00:01:02.350 --> 00:01:02.360 
to you to provide the functions which

00:01:02.360 --> 00:01:04.740 
to you to provide the functions which
implement<00:01:03.080> the<00:01:03.260> interface<00:01:03.290> methods<00:01:04.280> or

00:01:04.740 --> 00:01:04.750 
implement the interface methods or

00:01:04.750 --> 00:01:08.260 
implement the interface methods or
override<00:01:05.750> the<00:01:05.960> class<00:01:06.229> methods<00:01:07.090> proxy<00:01:08.090> is

00:01:08.260 --> 00:01:08.270 
override the class methods proxy is

00:01:08.270 --> 00:01:09.820 
override the class methods proxy is
actually<00:01:08.659> relatively<00:01:08.990> limited<00:01:09.290> there's<00:01:09.680> some

00:01:09.820 --> 00:01:09.830 
actually relatively limited there's some

00:01:09.830 --> 00:01:11.260 
actually relatively limited there's some
things<00:01:10.010> you<00:01:10.100> can<00:01:10.310> do<00:01:10.430> when<00:01:10.729> you<00:01:10.880> create<00:01:11.150> your

00:01:11.260 --> 00:01:11.270 
things you can do when you create your

00:01:11.270 --> 00:01:13.270 
things you can do when you create your
own<00:01:11.330> Java<00:01:11.780> wrapper<00:01:12.200> classes<00:01:12.590> that<00:01:12.950> you<00:01:13.040> can't

00:01:13.270 --> 00:01:13.280 
own Java wrapper classes that you can't

00:01:13.280 --> 00:01:15.640 
own Java wrapper classes that you can't
do<00:01:13.490> with<00:01:13.520> proxy<00:01:14.150> on<00:01:14.600> the<00:01:14.810> other<00:01:14.900> hand<00:01:15.020> it's

00:01:15.640 --> 00:01:15.650 
do with proxy on the other hand it's

00:01:15.650 --> 00:01:17.530 
do with proxy on the other hand it's
suitable<00:01:16.220> for<00:01:16.340> your<00:01:16.610> purposes<00:01:16.790> most<00:01:17.299> of<00:01:17.450> the

00:01:17.530 --> 00:01:17.540 
suitable for your purposes most of the

00:01:17.540 --> 00:01:18.990 
suitable for your purposes most of the
time

00:01:18.990 --> 00:01:19.000 
time

00:01:19.000 --> 00:01:21.390 
time
we<00:01:19.690> also<00:01:19.840> sometimes<00:01:20.230> have<00:01:20.650> the<00:01:20.800> problem<00:01:21.130> when

00:01:21.390 --> 00:01:21.400 
we also sometimes have the problem when

00:01:21.400 --> 00:01:23.970 
we also sometimes have the problem when
interoperating<00:01:22.030> with<00:01:22.270> Java<00:01:22.480> classes<00:01:22.810> that<00:01:23.740> we

00:01:23.970 --> 00:01:23.980 
interoperating with Java classes that we

00:01:23.980 --> 00:01:26.310 
interoperating with Java classes that we
need<00:01:24.220> Java<00:01:24.850> arrays<00:01:25.270> we<00:01:25.570> need<00:01:25.720> the<00:01:25.810> ability<00:01:25.900> to

00:01:26.310 --> 00:01:26.320 
need Java arrays we need the ability to

00:01:26.320 --> 00:01:28.020 
need Java arrays we need the ability to
create<00:01:26.620> them<00:01:26.830> enclosure<00:01:27.160> code<00:01:27.520> and<00:01:27.790> to

00:01:28.020 --> 00:01:28.030 
create them enclosure code and to

00:01:28.030 --> 00:01:30.120 
create them enclosure code and to
manipulate<00:01:28.510> them<00:01:28.690> again<00:01:29.500> the<00:01:29.710> standard

00:01:30.120 --> 00:01:30.130 
manipulate them again the standard

00:01:30.130 --> 00:01:31.710 
manipulate them again the standard
library<00:01:30.160> has<00:01:30.640> functions<00:01:31.240> and<00:01:31.390> macros<00:01:31.690> for

00:01:31.710 --> 00:01:31.720 
library has functions and macros for

00:01:31.720 --> 00:01:35.700 
library has functions and macros for
doing<00:01:32.290> just<00:01:32.320> that<00:01:34.050> type<00:01:35.050> hinting<00:01:35.500> is<00:01:35.680> a

00:01:35.700 --> 00:01:35.710 
doing just that type hinting is a

00:01:35.710 --> 00:01:37.200 
doing just that type hinting is a
feature<00:01:35.979> in<00:01:36.100> some<00:01:36.369> dynamic<00:01:36.760> languages

00:01:37.200 --> 00:01:37.210 
feature in some dynamic languages

00:01:37.210 --> 00:01:40.530 
feature in some dynamic languages
whereby<00:01:37.930> you<00:01:37.990> actually<00:01:38.680> mark<00:01:39.310> in<00:01:39.550> code<00:01:39.880> what

00:01:40.530 --> 00:01:40.540 
whereby you actually mark in code what

00:01:40.540 --> 00:01:42.780 
whereby you actually mark in code what
the<00:01:40.720> types<00:01:40.990> of<00:01:41.290> say<00:01:41.530> parameters<00:01:42.130> are<00:01:42.400> supposed

00:01:42.780 --> 00:01:42.790 
the types of say parameters are supposed

00:01:42.790 --> 00:01:45.060 
the types of say parameters are supposed
to<00:01:42.910> be<00:01:43.150> the<00:01:43.810> idea<00:01:44.140> is<00:01:44.200> that<00:01:44.350> these<00:01:44.560> type<00:01:44.830> pins

00:01:45.060 --> 00:01:45.070 
to be the idea is that these type pins

00:01:45.070 --> 00:01:46.830 
to be the idea is that these type pins
can<00:01:45.280> be<00:01:45.340> used<00:01:45.640> by<00:01:45.820> the<00:01:45.880> compiler<00:01:46.180> to<00:01:46.690> make

00:01:46.830 --> 00:01:46.840 
can be used by the compiler to make

00:01:46.840 --> 00:01:49.500 
can be used by the compiler to make
optimizations<00:01:47.680> so<00:01:48.520> say<00:01:48.729> if<00:01:48.940> you<00:01:49.060> have<00:01:49.240> some

00:01:49.500 --> 00:01:49.510 
optimizations so say if you have some

00:01:49.510 --> 00:01:51.420 
optimizations so say if you have some
loop<00:01:49.750> and<00:01:50.020> a<00:01:50.200> performance<00:01:50.650> critical<00:01:50.830> section

00:01:51.420 --> 00:01:51.430 
loop and a performance critical section

00:01:51.430 --> 00:01:52.950 
loop and a performance critical section
of<00:01:51.520> code<00:01:51.759> then<00:01:52.330> you<00:01:52.660> might<00:01:52.810> consider

00:01:52.950 --> 00:01:52.960 
of code then you might consider

00:01:52.960 --> 00:01:55.980 
of code then you might consider
optimizing<00:01:53.830> it<00:01:53.950> by<00:01:54.070> using<00:01:54.220> type<00:01:54.550> it's<00:01:54.759> a<00:01:55.000> very

00:01:55.980 --> 00:01:55.990 
optimizing it by using type it's a very

00:01:55.990 --> 00:01:58.200 
optimizing it by using type it's a very
similar<00:01:56.259> related<00:01:56.800> idea<00:01:57.130> is<00:01:57.550> that<00:01:57.610> you<00:01:57.790> can<00:01:58.030> put

00:01:58.200 --> 00:01:58.210 
similar related idea is that you can put

00:01:58.210 --> 00:01:59.520 
similar related idea is that you can put
hints<00:01:58.450> in<00:01:58.570> your<00:01:58.690> code<00:01:58.899> such<00:01:59.500> that

00:01:59.520 --> 00:01:59.530 
hints in your code such that

00:01:59.530 --> 00:02:02.460 
hints in your code such that
computations<00:02:00.520> deal<00:02:01.030> with<00:02:01.300> primitives<00:02:01.840> rather

00:02:02.460 --> 00:02:02.470 
computations deal with primitives rather

00:02:02.470 --> 00:02:06.510 
computations deal with primitives rather
than<00:02:02.740> the<00:02:02.979> normal<00:02:03.430> boxed<00:02:03.970> number<00:02:04.330> types<00:02:05.520> the

00:02:06.510 --> 00:02:06.520 
than the normal boxed number types the

00:02:06.520 --> 00:02:08.279 
than the normal boxed number types the
structuring<00:02:07.090> is<00:02:07.360> a<00:02:07.420> convenience<00:02:08.110> feature

00:02:08.279 --> 00:02:08.289 
structuring is a convenience feature

00:02:08.289 --> 00:02:10.499 
structuring is a convenience feature
that's<00:02:08.619> used<00:02:08.950> in<00:02:09.250> the<00:02:09.489> parameter<00:02:09.970> lists<00:02:10.360> of

00:02:10.499 --> 00:02:10.509 
that's used in the parameter lists of

00:02:10.509 --> 00:02:14.190 
that's used in the parameter lists of
functions<00:02:11.140> and<00:02:11.350> in<00:02:12.160> the<00:02:12.580> name<00:02:13.120> value<00:02:13.630> lists<00:02:14.080> of

00:02:14.190 --> 00:02:14.200 
functions and in the name value lists of

00:02:14.200 --> 00:02:16.920 
functions and in the name value lists of
let<00:02:14.770> forms<00:02:15.160> the<00:02:16.030> inconvenience<00:02:16.750> which

00:02:16.920 --> 00:02:16.930 
let forms the inconvenience which

00:02:16.930 --> 00:02:19.740 
let forms the inconvenience which
destructuring<00:02:17.680> addresses<00:02:18.430> is<00:02:18.610> that<00:02:19.150> when<00:02:19.600> we

00:02:19.740 --> 00:02:19.750 
destructuring addresses is that when we

00:02:19.750 --> 00:02:22.110 
destructuring addresses is that when we
have<00:02:19.930> some<00:02:20.230> collection<00:02:20.770> we<00:02:21.250> typically<00:02:21.730> very

00:02:22.110 --> 00:02:22.120 
have some collection we typically very

00:02:22.120 --> 00:02:24.479 
have some collection we typically very
often<00:02:22.480> want<00:02:22.690> to<00:02:22.900> pull<00:02:23.260> out<00:02:23.590> individual

00:02:24.479 --> 00:02:24.489 
often want to pull out individual

00:02:24.489 --> 00:02:26.900 
often want to pull out individual
members<00:02:24.880> and<00:02:25.120> deal<00:02:25.600> with<00:02:25.810> just<00:02:26.080> those<00:02:26.350> members

00:02:26.900 --> 00:02:26.910 
members and deal with just those members

00:02:26.910 --> 00:02:29.640 
members and deal with just those members
so<00:02:27.910> say<00:02:28.180> I<00:02:28.209> have<00:02:28.450> some<00:02:28.690> function<00:02:29.019> parameter

00:02:29.640 --> 00:02:29.650 
so say I have some function parameter

00:02:29.650 --> 00:02:31.710 
so say I have some function parameter
where<00:02:30.070> it's<00:02:30.220> expected<00:02:30.459> to<00:02:30.850> receive<00:02:31.330> some

00:02:31.710 --> 00:02:31.720 
where it's expected to receive some

00:02:31.720 --> 00:02:33.930 
where it's expected to receive some
vector<00:02:32.230> and<00:02:32.470> what<00:02:33.310> I<00:02:33.340> want<00:02:33.519> to<00:02:33.640> do<00:02:33.790> with<00:02:33.910> that

00:02:33.930 --> 00:02:33.940 
vector and what I want to do with that

00:02:33.940 --> 00:02:35.520 
vector and what I want to do with that
vector<00:02:34.239> at<00:02:34.450> the<00:02:34.570> start<00:02:34.810> of<00:02:34.900> the<00:02:34.930> function<00:02:35.380> is

00:02:35.520 --> 00:02:35.530 
vector at the start of the function is

00:02:35.530 --> 00:02:38.580 
vector at the start of the function is
first<00:02:36.400> extract<00:02:37.090> the<00:02:37.299> third<00:02:37.510> item<00:02:37.750> and<00:02:38.140> assign

00:02:38.580 --> 00:02:38.590 
first extract the third item and assign

00:02:38.590 --> 00:02:41.130 
first extract the third item and assign
it<00:02:38.739> to<00:02:38.769> some<00:02:39.040> name<00:02:39.310> let's<00:02:39.610> say<00:02:39.760> X<00:02:39.970> and<00:02:40.299> extract

00:02:41.130 --> 00:02:41.140 
it to some name let's say X and extract

00:02:41.140 --> 00:02:43.920 
it to some name let's say X and extract
say<00:02:41.350> oh<00:02:41.380> the<00:02:42.100> seventh<00:02:42.459> item<00:02:42.730> and<00:02:42.940> assign<00:02:43.780> it<00:02:43.900> to

00:02:43.920 --> 00:02:43.930 
say oh the seventh item and assign it to

00:02:43.930 --> 00:02:46.860 
say oh the seventh item and assign it to
some<00:02:44.200> name<00:02:44.410> why<00:02:44.880> without<00:02:45.880> destructuring<00:02:46.540> the

00:02:46.860 --> 00:02:46.870 
some name why without destructuring the

00:02:46.870 --> 00:02:48.180 
some name why without destructuring the
way<00:02:46.989> I<00:02:47.019> would<00:02:47.230> do<00:02:47.350> this<00:02:47.500> is<00:02:47.739> that<00:02:47.980> I<00:02:48.010> would

00:02:48.180 --> 00:02:48.190 
way I would do this is that I would

00:02:48.190 --> 00:02:49.979 
way I would do this is that I would
start<00:02:48.459> my<00:02:48.579> function<00:02:49.000> with<00:02:49.180> a<00:02:49.420> let<00:02:49.720> and

00:02:49.979 --> 00:02:49.989 
start my function with a let and

00:02:49.989 --> 00:02:52.710 
start my function with a let and
introduce<00:02:50.739> the<00:02:50.860> names<00:02:51.040> x<00:02:51.310> and<00:02:51.519> y<00:02:51.670> and<00:02:51.970> each<00:02:52.480> one

00:02:52.710 --> 00:02:52.720 
introduce the names x and y and each one

00:02:52.720 --> 00:02:54.449 
introduce the names x and y and each one
would<00:02:52.900> be<00:02:53.079> assigned<00:02:53.530> the<00:02:53.739> value<00:02:53.890> returned<00:02:54.340> by

00:02:54.449 --> 00:02:54.459 
would be assigned the value returned by

00:02:54.459 --> 00:02:56.130 
would be assigned the value returned by
the<00:02:54.579> operation<00:02:55.180> which<00:02:55.329> takes<00:02:55.600> from<00:02:55.780> a<00:02:55.840> vector

00:02:56.130 --> 00:02:56.140 
the operation which takes from a vector

00:02:56.140 --> 00:02:58.770 
the operation which takes from a vector
some<00:02:56.530> particular<00:02:56.950> item<00:02:57.280> with<00:02:58.269> the<00:02:58.480> structure

00:02:58.770 --> 00:02:58.780 
some particular item with the structure

00:02:58.780 --> 00:03:00.330 
some particular item with the structure
in<00:02:59.019> your<00:02:59.049> however<00:02:59.410> we<00:02:59.560> can<00:02:59.709> put<00:02:59.860> the<00:02:59.950> business

00:03:00.330 --> 00:03:00.340 
in your however we can put the business

00:03:00.340 --> 00:03:02.400 
in your however we can put the business
of<00:03:00.549> that<00:03:00.700> let<00:03:00.970> simply<00:03:01.630> into<00:03:01.900> the<00:03:02.019> parameter

00:03:02.400 --> 00:03:02.410 
of that let simply into the parameter

00:03:02.410 --> 00:03:04.050 
of that let simply into the parameter
list<00:03:02.620> itself<00:03:02.950> in<00:03:03.250> a<00:03:03.310> more<00:03:03.459> syntactically

00:03:04.050 --> 00:03:04.060 
list itself in a more syntactically

00:03:04.060 --> 00:03:07.050 
list itself in a more syntactically
compact<00:03:04.510> way<00:03:05.400> similarly<00:03:06.400> it's<00:03:06.610> common<00:03:06.940> to

00:03:07.050 --> 00:03:07.060 
compact way similarly it's common to

00:03:07.060 --> 00:03:08.280 
compact way similarly it's common to
have<00:03:07.150> a<00:03:07.209> let<00:03:07.510> where<00:03:07.750> you<00:03:07.870> have<00:03:08.019> some

00:03:08.280 --> 00:03:08.290 
have a let where you have some

00:03:08.290 --> 00:03:09.600 
have a let where you have some
collection<00:03:08.799> and<00:03:08.950> you<00:03:09.010> want<00:03:09.160> to<00:03:09.220> take<00:03:09.400> out

00:03:09.600 --> 00:03:09.610 
collection and you want to take out

00:03:09.610 --> 00:03:11.069 
collection and you want to take out
individual<00:03:10.329> items<00:03:10.630> from<00:03:10.720> that<00:03:10.930> collection

00:03:11.069 --> 00:03:11.079 
individual items from that collection

00:03:11.079 --> 00:03:13.890 
individual items from that collection
and<00:03:11.560> bind<00:03:12.160> them<00:03:12.250> to<00:03:12.430> names<00:03:12.640> in<00:03:12.940> the<00:03:13.060> let<00:03:13.239> well

00:03:13.890 --> 00:03:13.900 
and bind them to names in the let well

00:03:13.900 --> 00:03:15.210 
and bind them to names in the let well
the<00:03:14.140> let<00:03:14.290> forum<00:03:14.590> supports<00:03:15.070> this

00:03:15.210 --> 00:03:15.220 
the let forum supports this

00:03:15.220 --> 00:03:17.130 
the let forum supports this
destructuring<00:03:15.790> convenience<00:03:16.390> so<00:03:16.780> you<00:03:16.840> can<00:03:17.019> do

00:03:17.130 --> 00:03:17.140 
destructuring convenience so you can do

00:03:17.140 --> 00:03:20.420 
destructuring convenience so you can do
that<00:03:17.350> in<00:03:17.500> a<00:03:17.530> syntactically<00:03:18.190> compact<00:03:18.730> way

00:03:20.420 --> 00:03:20.430 
that in a syntactically compact way

00:03:20.430 --> 00:03:23.360 
that in a syntactically compact way
bars<00:03:21.180> have<00:03:21.480> a<00:03:21.510> feature<00:03:21.780> whereby<00:03:22.319> for<00:03:23.010> the

00:03:23.360 --> 00:03:23.370 
bars have a feature whereby for the

00:03:23.370 --> 00:03:25.429 
bars have a feature whereby for the
temporary<00:03:23.670> duration<00:03:24.180> of<00:03:24.269> a<00:03:24.359> scope<00:03:24.659> they<00:03:25.230> can

00:03:25.429 --> 00:03:25.439 
temporary duration of a scope they can

00:03:25.439 --> 00:03:27.949 
temporary duration of a scope they can
be<00:03:25.530> given<00:03:25.890> a<00:03:26.040> new<00:03:26.280> value<00:03:26.790> so<00:03:27.390> for<00:03:27.689> the<00:03:27.780> duration

00:03:27.949 --> 00:03:27.959 
be given a new value so for the duration

00:03:27.959 --> 00:03:30.679 
be given a new value so for the duration
of<00:03:28.200> such<00:03:28.379> a<00:03:28.409> scope<00:03:28.769> the<00:03:29.219> VAR<00:03:29.459> has<00:03:29.730> a<00:03:29.969> temporary

00:03:30.679 --> 00:03:30.689 
of such a scope the VAR has a temporary

00:03:30.689 --> 00:03:32.990 
of such a scope the VAR has a temporary
value<00:03:31.140> but<00:03:31.620> then<00:03:31.769> when<00:03:31.920> execution<00:03:32.489> leaves<00:03:32.760> the

00:03:32.990 --> 00:03:33.000 
value but then when execution leaves the

00:03:33.000 --> 00:03:34.970 
value but then when execution leaves the
scope<00:03:33.299> the<00:03:33.780> VAR<00:03:33.959> has<00:03:34.170> the<00:03:34.379> value<00:03:34.530> it<00:03:34.769> had

00:03:34.970 --> 00:03:34.980 
scope the VAR has the value it had

00:03:34.980 --> 00:03:37.640 
scope the VAR has the value it had
before<00:03:35.250> the<00:03:35.700> scope<00:03:35.939> was<00:03:36.150> entered<00:03:36.450> the<00:03:37.409> really

00:03:37.640 --> 00:03:37.650 
before the scope was entered the really

00:03:37.650 --> 00:03:39.440 
before the scope was entered the really
special<00:03:37.859> part<00:03:38.280> about<00:03:38.519> this<00:03:38.700> binding<00:03:39.209> though

00:03:39.440 --> 00:03:39.450 
special part about this binding though

00:03:39.450 --> 00:03:42.229 
special part about this binding though
is<00:03:39.659> that<00:03:39.930> it<00:03:40.230> is<00:03:40.349> only<00:03:40.560> seen<00:03:41.010> in<00:03:41.250> that<00:03:41.879> thread

00:03:42.229 --> 00:03:42.239 
is that it is only seen in that thread

00:03:42.239 --> 00:03:44.599 
is that it is only seen in that thread
these<00:03:42.930> temporary<00:03:43.379> bindings<00:03:43.980> are<00:03:44.159> said<00:03:44.430> to<00:03:44.579> be

00:03:44.599 --> 00:03:44.609 
these temporary bindings are said to be

00:03:44.609 --> 00:03:47.780 
these temporary bindings are said to be
threadlocal<00:03:45.500> whereas<00:03:46.500> the<00:03:46.920> real<00:03:47.159> value<00:03:47.489> of

00:03:47.780 --> 00:03:47.790 
threadlocal whereas the real value of

00:03:47.790 --> 00:03:50.929 
threadlocal whereas the real value of
the<00:03:47.939> VAR<00:03:48.150> is<00:03:48.450> called<00:03:48.870> its<00:03:49.170> root<00:03:49.650> binding<00:03:50.310> it's

00:03:50.929 --> 00:03:50.939 
the VAR is called its root binding it's

00:03:50.939 --> 00:03:53.089 
the VAR is called its root binding it's
the<00:03:51.209> root<00:03:51.420> binding<00:03:51.989> of<00:03:52.170> a<00:03:52.260> VAR<00:03:52.470> that<00:03:52.739> we<00:03:52.859> set

00:03:53.089 --> 00:03:53.099 
the root binding of a VAR that we set

00:03:53.099 --> 00:03:56.149 
the root binding of a VAR that we set
when<00:03:53.459> we<00:03:53.579> used<00:03:53.790> F<00:03:54.120> so<00:03:55.019> every<00:03:55.349> thread<00:03:55.620> normally

00:03:56.149 --> 00:03:56.159 
when we used F so every thread normally

00:03:56.159 --> 00:03:58.970 
when we used F so every thread normally
sees<00:03:56.430> the<00:03:56.849> root<00:03:57.090> binding<00:03:57.599> of<00:03:57.780> hvar<00:03:58.169> but<00:03:58.769> when<00:03:58.950> a

00:03:58.970 --> 00:03:58.980 
sees the root binding of hvar but when a

00:03:58.980 --> 00:04:00.199 
sees the root binding of hvar but when a
thread<00:03:59.310> enters<00:03:59.669> one<00:03:59.790> of<00:03:59.909> these<00:04:00.030> special

00:04:00.199 --> 00:04:00.209 
thread enters one of these special

00:04:00.209 --> 00:04:02.750 
thread enters one of these special
scopes<00:04:00.720> the<00:04:01.319> thread<00:04:01.620> then<00:04:01.799> sees<00:04:02.129> its<00:04:02.519> own

00:04:02.750 --> 00:04:02.760 
scopes the thread then sees its own

00:04:02.760 --> 00:04:05.479 
scopes the thread then sees its own
particular<00:04:03.269> binding<00:04:04.109> for<00:04:04.590> that<00:04:04.769> VAR<00:04:05.040> for<00:04:05.400> the

00:04:05.479 --> 00:04:05.489 
particular binding for that VAR for the

00:04:05.489 --> 00:04:08.599 
particular binding for that VAR for the
duration<00:04:05.700> of<00:04:06.030> that<00:04:06.239> scope<00:04:06.859> so<00:04:07.859> what<00:04:08.280> can<00:04:08.310> you

00:04:08.599 --> 00:04:08.609 
duration of that scope so what can you

00:04:08.609 --> 00:04:10.459 
duration of that scope so what can you
do<00:04:08.849> with<00:04:09.000> these<00:04:09.120> threadlocal<00:04:09.510> bindings<00:04:10.079> well

00:04:10.459 --> 00:04:10.469 
do with these threadlocal bindings well

00:04:10.469 --> 00:04:12.619 
do with these threadlocal bindings well
one<00:04:10.739> thing<00:04:10.919> you<00:04:11.010> could<00:04:11.159> do<00:04:11.310> is<00:04:11.489> use<00:04:11.969> a<00:04:12.000> VAR<00:04:12.329> as

00:04:12.619 --> 00:04:12.629 
one thing you could do is use a VAR as

00:04:12.629 --> 00:04:16.009 
one thing you could do is use a VAR as
basically<00:04:13.230> a<00:04:13.379> mutable<00:04:14.310> local<00:04:14.819> variable<00:04:15.329> now

00:04:16.009 --> 00:04:16.019 
basically a mutable local variable now

00:04:16.019 --> 00:04:17.420 
basically a mutable local variable now
of<00:04:16.139> course<00:04:16.289> doing<00:04:16.680> this<00:04:16.829> wouldn't<00:04:17.280> be

00:04:17.420 --> 00:04:17.430 
of course doing this wouldn't be

00:04:17.430 --> 00:04:19.759 
of course doing this wouldn't be
properly<00:04:17.849> functional<00:04:18.570> but<00:04:19.259> on<00:04:19.500> the<00:04:19.680> other

00:04:19.759 --> 00:04:19.769 
properly functional but on the other

00:04:19.769 --> 00:04:21.949 
properly functional but on the other
hand<00:04:19.889> there<00:04:20.609> just<00:04:20.910> are<00:04:21.090> some<00:04:21.299> algorithms<00:04:21.840> that

00:04:21.949 --> 00:04:21.959 
hand there just are some algorithms that

00:04:21.959 --> 00:04:24.080 
hand there just are some algorithms that
for<00:04:22.560> the<00:04:22.650> sake<00:04:22.800> of<00:04:22.830> efficiency<00:04:23.099> do<00:04:23.820> really

00:04:24.080 --> 00:04:24.090 
for the sake of efficiency do really

00:04:24.090 --> 00:04:27.159 
for the sake of efficiency do really
rely<00:04:24.360> on<00:04:24.510> having<00:04:24.720> some<00:04:25.199> mutating<00:04:26.010> local<00:04:26.370> data

00:04:27.159 --> 00:04:27.169 
rely on having some mutating local data

00:04:27.169 --> 00:04:29.300 
rely on having some mutating local data
another<00:04:28.169> thing<00:04:28.470> that<00:04:28.500> these<00:04:28.830> threadlocal

00:04:29.300 --> 00:04:29.310 
another thing that these threadlocal

00:04:29.310 --> 00:04:31.520 
another thing that these threadlocal
bindings<00:04:29.849> allow<00:04:30.090> is<00:04:30.360> let's<00:04:30.990> say<00:04:31.110> we<00:04:31.289> have<00:04:31.500> some

00:04:31.520 --> 00:04:31.530 
bindings allow is let's say we have some

00:04:31.530 --> 00:04:34.010 
bindings allow is let's say we have some
existing<00:04:32.010> piece<00:04:32.340> of<00:04:32.490> code<00:04:32.729> that<00:04:32.970> calls<00:04:33.840> this

00:04:34.010 --> 00:04:34.020 
existing piece of code that calls this

00:04:34.020 --> 00:04:35.810 
existing piece of code that calls this
function<00:04:34.080> that<00:04:34.650> does<00:04:34.830> log<00:04:35.130> in<00:04:35.370> and<00:04:35.490> this

00:04:35.810 --> 00:04:35.820 
function that does log in and this

00:04:35.820 --> 00:04:37.250 
function that does log in and this
logging<00:04:36.240> is<00:04:36.360> done<00:04:36.570> at<00:04:36.720> multiple<00:04:37.080> points

00:04:37.250 --> 00:04:37.260 
logging is done at multiple points

00:04:37.260 --> 00:04:39.469 
logging is done at multiple points
throughout<00:04:37.650> the<00:04:37.860> code<00:04:38.070> well<00:04:38.880> if<00:04:39.090> you<00:04:39.180> wanted

00:04:39.469 --> 00:04:39.479 
throughout the code well if you wanted

00:04:39.479 --> 00:04:41.270 
throughout the code well if you wanted
to<00:04:39.599> change<00:04:39.810> this<00:04:40.080> log<00:04:40.349> in<00:04:40.530> behavior<00:04:40.979> what<00:04:41.190> you

00:04:41.270 --> 00:04:41.280 
to change this log in behavior what you

00:04:41.280 --> 00:04:43.670 
to change this log in behavior what you
can<00:04:41.430> always<00:04:41.669> do<00:04:41.880> enclosure<00:04:42.360> is<00:04:42.659> to<00:04:43.349> replace

00:04:43.670 --> 00:04:43.680 
can always do enclosure is to replace

00:04:43.680 --> 00:04:46.250 
can always do enclosure is to replace
the<00:04:44.039> existing<00:04:44.190> logging<00:04:45.000> function<00:04:45.449> with<00:04:45.990> a<00:04:46.020> new

00:04:46.250 --> 00:04:46.260 
the existing logging function with a new

00:04:46.260 --> 00:04:48.110 
the existing logging function with a new
one<00:04:46.470> by<00:04:46.710> simply<00:04:47.070> assigning<00:04:47.370> a<00:04:47.550> replacement

00:04:48.110 --> 00:04:48.120 
one by simply assigning a replacement

00:04:48.120 --> 00:04:50.300 
one by simply assigning a replacement
into<00:04:48.389> the<00:04:48.599> VAR<00:04:48.840> but<00:04:49.470> what<00:04:49.650> if<00:04:49.770> you<00:04:49.860> want<00:04:50.099> the

00:04:50.300 --> 00:04:50.310 
into the VAR but what if you want the

00:04:50.310 --> 00:04:52.070 
into the VAR but what if you want the
effect<00:04:50.610> of<00:04:50.699> this<00:04:50.880> change<00:04:51.180> to<00:04:51.300> be<00:04:51.509> limited<00:04:52.050> to

00:04:52.070 --> 00:04:52.080 
effect of this change to be limited to

00:04:52.080 --> 00:04:54.710 
effect of this change to be limited to
just<00:04:52.380> one<00:04:52.590> isolated<00:04:53.340> place<00:04:53.699> you<00:04:54.330> don't<00:04:54.539> want

00:04:54.710 --> 00:04:54.720 
just one isolated place you don't want

00:04:54.720 --> 00:04:56.149 
just one isolated place you don't want
to<00:04:54.810> affect<00:04:55.110> all<00:04:55.320> logging<00:04:55.740> throughout<00:04:56.009> the

00:04:56.149 --> 00:04:56.159 
to affect all logging throughout the

00:04:56.159 --> 00:04:57.529 
to affect all logging throughout the
program<00:04:56.310> you<00:04:56.639> just<00:04:56.820> want<00:04:56.970> to<00:04:57.000> affect<00:04:57.300> it<00:04:57.419> to

00:04:57.529 --> 00:04:57.539 
program you just want to affect it to

00:04:57.539 --> 00:04:58.909 
program you just want to affect it to
say<00:04:57.690> for<00:04:57.990> the<00:04:58.050> duration<00:04:58.229> of<00:04:58.500> when<00:04:58.650> you<00:04:58.740> call

00:04:58.909 --> 00:04:58.919 
say for the duration of when you call

00:04:58.919 --> 00:05:00.980 
say for the duration of when you call
such<00:04:59.159> and<00:04:59.310> such<00:04:59.430> function<00:04:59.849> so<00:05:00.419> what<00:05:00.750> you<00:05:00.840> can

00:05:00.980 --> 00:05:00.990 
such and such function so what you can

00:05:00.990 --> 00:05:02.390 
such and such function so what you can
do<00:05:01.139> then<00:05:01.289> is<00:05:01.500> you<00:05:01.530> can<00:05:01.800> wrap<00:05:02.039> such-and-such

00:05:02.390 --> 00:05:02.400 
do then is you can wrap such-and-such

00:05:02.400 --> 00:05:04.700 
do then is you can wrap such-and-such
call<00:05:03.030> in<00:05:03.270> one<00:05:03.810> of<00:05:03.900> these<00:05:04.020> special<00:05:04.229> scopes

00:05:04.700 --> 00:05:04.710 
call in one of these special scopes

00:05:04.710 --> 00:05:06.439 
call in one of these special scopes
where<00:05:04.979> we<00:05:05.099> create<00:05:05.310> a<00:05:05.400> threadlocal<00:05:05.880> binding

00:05:06.439 --> 00:05:06.449 
where we create a threadlocal binding

00:05:06.449 --> 00:05:08.600 
where we create a threadlocal binding
for<00:05:07.080> the<00:05:07.259> login<00:05:07.620> function<00:05:08.070> that's<00:05:08.340> so<00:05:08.520> the

00:05:08.600 --> 00:05:08.610 
for the login function that's so the

00:05:08.610 --> 00:05:10.490 
for the login function that's so the
change<00:05:08.820> is<00:05:09.030> temporary<00:05:09.570> and<00:05:09.720> restrict<00:05:10.380> it<00:05:10.470> to

00:05:10.490 --> 00:05:10.500 
change is temporary and restrict it to

00:05:10.500 --> 00:05:12.830 
change is temporary and restrict it to
just<00:05:10.770> one<00:05:10.830> part<00:05:11.159> of<00:05:11.280> the<00:05:11.340> program

00:05:12.830 --> 00:05:12.840 
just one part of the program

00:05:12.840 --> 00:05:15.270 
just one part of the program
so<00:05:13.840> that's<00:05:14.199> everything<00:05:14.439> that<00:05:14.830> I'm<00:05:14.979> going<00:05:15.219> to

00:05:15.270 --> 00:05:15.280 
so that's everything that I'm going to

00:05:15.280 --> 00:05:17.339 
so that's everything that I'm going to
say<00:05:15.460> about<00:05:15.580> closure<00:05:16.030> what<00:05:16.659> I<00:05:16.689> suggest<00:05:16.870> you<00:05:17.169> do

00:05:17.339 --> 00:05:17.349 
say about closure what I suggest you do

00:05:17.349 --> 00:05:19.529 
say about closure what I suggest you do
next<00:05:17.710> is<00:05:17.949> you<00:05:18.129> first<00:05:18.370> watch<00:05:18.729> the<00:05:18.969> screen<00:05:19.240> cast

00:05:19.529 --> 00:05:19.539 
next is you first watch the screen cast

00:05:19.539 --> 00:05:22.439 
next is you first watch the screen cast
that<00:05:19.900> rich<00:05:20.199> he<00:05:20.499> gives<00:05:20.740> cold<00:05:21.310> closure<00:05:21.789> for<00:05:22.150> java

00:05:22.439 --> 00:05:22.449 
that rich he gives cold closure for java

00:05:22.449 --> 00:05:24.330 
that rich he gives cold closure for java
programmers<00:05:23.050> then<00:05:23.680> if<00:05:23.919> you<00:05:24.009> go<00:05:24.159> to<00:05:24.219> the

00:05:24.330 --> 00:05:24.340 
programmers then if you go to the

00:05:24.340 --> 00:05:26.249 
programmers then if you go to the
closure<00:05:24.520> org<00:05:24.999> website<00:05:25.539> and<00:05:25.810> you<00:05:25.870> look<00:05:26.020> on<00:05:26.139> the

00:05:26.249 --> 00:05:26.259 
closure org website and you look on the

00:05:26.259 --> 00:05:28.529 
closure org website and you look on the
left<00:05:26.289> you'll<00:05:27.099> see<00:05:27.159> a<00:05:27.310> sidebar<00:05:27.819> and<00:05:28.090> that's<00:05:28.300> all

00:05:28.529 --> 00:05:28.539 
left you'll see a sidebar and that's all

00:05:28.539 --> 00:05:30.360 
left you'll see a sidebar and that's all
of<00:05:28.719> the<00:05:28.840> documentation<00:05:29.409> that<00:05:29.650> rich<00:05:30.009> ikea<00:05:30.310> is

00:05:30.360 --> 00:05:30.370 
of the documentation that rich ikea is

00:05:30.370 --> 00:05:32.429 
of the documentation that rich ikea is
written<00:05:30.669> and<00:05:30.849> i<00:05:31.419> strongly<00:05:31.689> suggest<00:05:31.930> to<00:05:32.259> read

00:05:32.429 --> 00:05:32.439 
written and i strongly suggest to read

00:05:32.439 --> 00:05:34.350 
written and i strongly suggest to read
that<00:05:32.650> and<00:05:33.490> then<00:05:33.759> if<00:05:33.909> you<00:05:33.999> have<00:05:34.120> further

00:05:34.350 --> 00:05:34.360 
that and then if you have further

00:05:34.360 --> 00:05:36.779 
that and then if you have further
questions<00:05:34.560> you<00:05:35.560> should<00:05:35.590> go<00:05:35.889> to<00:05:35.949> the<00:05:36.249> google

00:05:36.779 --> 00:05:36.789 
questions you should go to the google

00:05:36.789 --> 00:05:38.730 
questions you should go to the google
groups<00:05:36.819> for<00:05:37.449> closure<00:05:37.779> which<00:05:38.319> is<00:05:38.469> the<00:05:38.560> main

00:05:38.730 --> 00:05:38.740 
groups for closure which is the main

00:05:38.740 --> 00:05:39.959 
groups for closure which is the main
place<00:05:38.979> where<00:05:39.009> you're<00:05:39.279> going<00:05:39.400> to<00:05:39.460> find<00:05:39.729> the

00:05:39.959 --> 00:05:39.969 
place where you're going to find the

00:05:39.969 --> 00:05:43.169 
place where you're going to find the
discussion<00:05:40.509> about<00:05:40.599> the<00:05:40.840> language

