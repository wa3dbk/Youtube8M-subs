WEBVTT
Kind: captions
Language: en

00:00:00.660 --> 00:00:05.879
 let's study the exceptions with the 

00:00:03.000 --> 00:00:08.130
 exercise that had been done sum 

00:00:05.879 --> 00:00:12.139
 remember that this exercise does 

00:00:08.130 --> 00:00:15.820
 is to add numbers on a numerical basis 

00:00:12.139 --> 00:00:19.510
 binary opt and is decimal 

00:00:15.820 --> 00:00:22.449
 we open the project true if you 

00:00:19.510 --> 00:00:25.300
 appreciate here in this window is going to 

00:00:22.449 --> 00:00:28.990
 get that is in the class of 

00:00:25.300 --> 00:00:30.970
 main the class sum that was the one 

00:00:28.990 --> 00:00:32.650
 we had in that original project this 

00:00:30.970 --> 00:00:36.940
 incorporates a new class called 

00:00:32.650 --> 00:00:39.550
 except that my class is used as 

00:00:36.940 --> 00:00:41.860
 exceptions in java are created as 

00:00:39.550 --> 00:00:44.800
 objects therefore must be done 

00:00:41.860 --> 00:00:46.839
 reference to a class in this class 

00:00:44.800 --> 00:00:50.020
 because what is going to be placed is not more 

00:00:46.839 --> 00:00:51.730
 that the default constructor and what 

00:00:50.020 --> 00:00:54.040
 it would be the information that will come out that 

00:00:51.730 --> 00:00:57.880
 it is a string of script type 

00:00:54.040 --> 00:01:01.330
 in the in regards to sum like 

00:00:57.880 --> 00:01:05.280
 at its base class was as the 

00:01:01.330 --> 00:01:08.680
 how I program what was the 

00:01:05.280 --> 00:01:11.560
 sum can lead to redundancy of 

00:01:08.680 --> 00:01:15.100
 numbers of different bases where the 

00:01:11.560 --> 00:01:17.680
 the builders were base the number 

00:01:15.100 --> 00:01:19.690
 one and number two 

00:01:17.680 --> 00:01:23.040
 those three data then they came then 

00:01:19.690 --> 00:01:26.880
 as an argument of the main class and 

00:01:23.040 --> 00:01:29.710
 this one particularly as I work it 

00:01:26.880 --> 00:01:32.800
 doing functions that I converted into 

00:01:29.710 --> 00:01:34.479
 the digits chart to numeric digits 

00:01:32.800 --> 00:01:38.530
 to be able to carry out operations 

00:01:34.479 --> 00:01:41.830
 corresponding arithmetics and a class 

00:01:38.530 --> 00:01:43.869
 that took a method that will generate me 

00:01:41.830 --> 00:01:46.350
 the sum of the numbers that entered 

00:01:43.869 --> 00:01:48.850
 precisely to the class 

00:01:46.350 --> 00:01:52.060
 taking into account what is the beginning 

00:01:48.850 --> 00:01:54.070
 of sum for different numerical bases 

00:01:52.060 --> 00:01:56.890
 really the principle does not vary much and 

00:01:54.070 --> 00:01:58.600
 that's why this is handled by the 

00:01:56.890 --> 00:02:02.770
 same way is to say what we do is 

00:01:58.600 --> 00:02:04.090
 add this from the minus digits 

00:02:02.770 --> 00:02:06.640
 significant towards the most 

00:02:04.090 --> 00:02:08.349
 significant and if we see that it equals or 

00:02:06.640 --> 00:02:11.260
 exceeds the base what we do is 

00:02:08.349 --> 00:02:13.390
 subtract him from subtracting the base to see what 

00:02:11.260 --> 00:02:15.910
 amount is the value that is already placed 

00:02:13.390 --> 00:02:17.950
 that must give a number that is within 

00:02:15.910 --> 00:02:20.280
 of the range of values ​​accepted by the 

00:02:17.950 --> 00:02:24.090
 base and a race is generated 

00:02:20.280 --> 00:02:25.709
 in what is the main class is where 

00:02:24.090 --> 00:02:27.900
 is going to work what is the 

00:02:25.709 --> 00:02:30.120
 exceptions let's do two 

00:02:27.900 --> 00:02:32.700
 procedures that are going to be the 

00:02:30.120 --> 00:02:35.940
 pitching procedures pitchers 

00:02:32.700 --> 00:02:38.040
 the word refers to stars and 

00:02:35.940 --> 00:02:42.870
 are what throw the exceptions like 

00:02:38.040 --> 00:02:44.489
 such one is called reading data and launching 

00:02:42.870 --> 00:02:47.550
 the exception for what is the 

00:02:44.489 --> 00:02:51.120
 Validation of the bases will be 2 816 

00:02:47.550 --> 00:02:55.380
 for binary opt and that decimal and the 

00:02:51.120 --> 00:02:58.050
 gold is the numeric value launcher where 

00:02:55.380 --> 00:03:01.590
 reference is made to the digits that 

00:02:58.050 --> 00:03:05.310
 correspond to a specific basis for 

00:03:01.590 --> 00:03:08.130
 example in the case of 2 or the binary no 

00:03:05.310 --> 00:03:10.739
 you can enter digits that are not 

00:03:08.130 --> 00:03:12.750
 0 and 1 are going to do with it or create 

00:03:10.739 --> 00:03:15.390
 the digits from 0 to 7 in the case of 

00:03:12.750 --> 00:03:17.400
 extra decimal the data that goes are taken 

00:03:15.390 --> 00:03:19.800
 from 0 to 9 and the letters that go from the 

00:03:17.400 --> 00:03:22.640
 up to f both in capital letter and in 

00:03:19.800 --> 00:03:26.300
 lowercase to do this 

00:03:22.640 --> 00:03:28.490
 the throwing method for what is 

00:03:26.300 --> 00:03:29.940
 refers to the numbers that correspond to 

00:03:28.490 --> 00:03:33.810
 one base 

00:03:29.940 --> 00:03:35.640
 in the case of 16 I incorporate the 

00:03:33.810 --> 00:03:37.170
 uppercase and lowercase for 

00:03:35.640 --> 00:03:39.360
 letters of the alphabet to not have 

00:03:37.170 --> 00:03:41.310
 problems regarding the user that 

00:03:39.360 --> 00:03:43.170
 decide to work with in a problem I 

00:03:41.310 --> 00:03:44.950
 I think that he is not forced to work 

00:03:43.170 --> 00:03:46.930
 with 

00:03:44.950 --> 00:03:48.879
 a specific value of greater proof and 

00:03:46.930 --> 00:03:51.550
 lowercase you have to remember that that's going to 

00:03:48.879 --> 00:03:56.470
 make the distinctions between these 

00:03:51.550 --> 00:03:58.060
 good values and then the exceptions are 

00:03:56.470 --> 00:04:01.390
 the exception messages would be in the 

00:03:58.060 --> 00:04:03.530
 case that is not binary scenario not 

00:04:01.390 --> 00:04:06.460
 is to opt 

00:04:03.530 --> 00:04:08.530
 It is not excessive 

00:04:06.460 --> 00:04:12.000
 we go then for what is the 

00:04:08.530 --> 00:04:15.010
 this type of email and what we do is 

00:04:12.000 --> 00:04:16.540
 start asking for the data here I 

00:04:15.010 --> 00:04:18.880
 it changes the order of request of 

00:04:16.540 --> 00:04:20.440
 information to validate first that the 

00:04:18.880 --> 00:04:21.490
 base will correspond in the numbers that 

00:04:20.440 --> 00:04:23.490
 they will be incorporating 

00:04:21.490 --> 00:04:27.240
 later 

00:04:23.490 --> 00:04:29.849
 is placed is made the try and the 

00:04:27.240 --> 00:04:32.430
 catch and in bringing what is done is 

00:04:29.849 --> 00:04:34.830
 use the thrower method for the 

00:04:32.430 --> 00:04:38.009
 reading data that you reference 

00:04:34.830 --> 00:04:40.319
 that base if the base does not correspond anymore 

00:04:38.009 --> 00:04:44.480
 send the message that is not found 

00:04:40.319 --> 00:04:47.150
 the base of this box 8 or 16 

00:04:44.480 --> 00:04:49.910
 and this otherwise say that if 

00:04:47.150 --> 00:04:52.460
 the bases are within the ranges with 

00:04:49.910 --> 00:04:54.350
 which I'm working on here 

00:04:52.460 --> 00:04:56.330
 I just start what it is to do the 

00:04:54.350 --> 00:04:59.220
 request of the number in the case in the 

00:04:56.330 --> 00:05:01.680
 moment when I asked for the first number 

00:04:59.220 --> 00:05:03.270
 note that I'm using net instead 

00:05:01.680 --> 00:05:07.080
 of neck line to prevent it from starting 

00:05:03.270 --> 00:05:09.930
 do jumping values ​​and stop reading to 

00:05:07.080 --> 00:05:12.720
 the best the next number I use the 

00:05:09.930 --> 00:05:15.210
 crae with the values ​​launcher method 

00:05:12.720 --> 00:05:17.370
 numbers where both the 

00:05:15.210 --> 00:05:19.770
 number as sting and the base that was requested 

00:05:17.370 --> 00:05:22.020
 at first 

00:05:19.770 --> 00:05:25.949
 then in the cache what it does is that 

00:05:22.020 --> 00:05:27.690
 sends the exception so the number 

00:05:25.949 --> 00:05:32.009
 it does not correspond to the base on which it is 

00:05:27.690 --> 00:05:34.500
 specific I use switches and if it happens 

00:05:32.009 --> 00:05:36.810
 the first one happens is to say week is 

00:05:34.500 --> 00:05:39.270
 keeps in 1 position that sw one 

00:05:36.810 --> 00:05:42.270
 start notice on this value as 

00:05:39.270 --> 00:05:44.460
 sw 2 that using two switches this 

00:05:42.270 --> 00:05:45.969
 innocent as its value since it did not enter 

00:05:44.460 --> 00:05:48.519
 in the exception 

00:05:45.969 --> 00:05:50.499
 asks for the second number and makes 

00:05:48.519 --> 00:05:51.909
 exactly the same procedure and that 

00:05:50.499 --> 00:05:54.590
 w 

00:05:51.909 --> 00:05:56.630
 is that it is still maintained in 1 

00:05:54.590 --> 00:05:58.010
 for some reason the person with the 

00:05:56.630 --> 00:06:01.100
 with digits that did not correspond to the 

00:05:58.010 --> 00:06:03.770
 base simply that in this section and 

00:06:01.100 --> 00:06:05.420
 the value assumed by the suiche does not allow 

00:06:03.770 --> 00:06:09.260
 to run in the sum at the end 

00:06:05.420 --> 00:06:12.140
 because it 's like a conditional in the 

00:06:09.260 --> 00:06:15.020
 case that both values specify a 

00:06:12.140 --> 00:06:18.080
 the specified base is done the sum 

00:06:15.020 --> 00:06:20.689
 and the result is displayed 

00:06:18.080 --> 00:06:22.939
 here is an example of executed but 

00:06:20.689 --> 00:06:25.370
 let's do it again suppose 

00:06:22.939 --> 00:06:27.229
 that placed base 5 that base does not 

00:06:25.370 --> 00:06:30.289
 within validation 

00:06:27.229 --> 00:06:33.000
 made me send the exception of just 

00:06:30.289 --> 00:06:35.100
 base 2 816 

00:06:33.000 --> 00:06:37.620
 in the event that I work with a 

00:06:35.100 --> 00:06:41.070
 base for example the goal that appears 

00:06:37.620 --> 00:06:43.560
 I put a number but I'm out of range 

00:06:41.070 --> 00:06:47.220
 of those of the bits ie I include 

00:06:43.560 --> 00:06:49.230
 values ​​other than 0 and 1 when pressed 

00:06:47.220 --> 00:06:51.660
 enter simply because he sends me a 

00:06:49.230 --> 00:06:54.860
 validation that it's not binary and that's where 

00:06:51.660 --> 00:06:59.710
 ends the program in the event that I 

00:06:54.860 --> 00:07:02.850
 is set the values ​​as they should be 

00:06:59.710 --> 00:07:05.500
 that is, number one and number two 

00:07:02.850 --> 00:07:07.150
 the sum is executed did not send any 

00:07:05.500 --> 00:07:10.060
 exception because it does not have to 

00:07:07.150 --> 00:07:13.380
 do it and we can see the result one 

00:07:10.060 --> 00:07:16.540
 plus one would give ten and the carry bonus 

00:07:13.380 --> 00:07:19.390
 11 10 and a scary monkey 11 I follow 

00:07:16.540 --> 00:07:22.510
 taking good from this network one more 110 and 

00:07:19.390 --> 00:07:24.670
 111 I'm still carrying a haul flight and 

00:07:22.510 --> 00:07:27.160
 begins the first zero plus 1 

00:07:24.670 --> 00:07:30.660
 carry over 1 remain two zeros and the 

00:07:27.160 --> 00:07:30.660
 rest of the values remains the same 

