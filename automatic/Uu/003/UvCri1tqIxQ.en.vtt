WEBVTT
Kind: captions
Language: en

00:00:05.480 --> 00:00:10.440
 In the first two episodes, we have emphasized how important it is to make your first game small. 

00:00:10.440 --> 00:00:12.460
 But this is really too critical to this time. 

00:00:12.460 --> 00:00:14.900
 We will spend a whole episode to describe it 

00:00:14.900 --> 00:00:16.180
 This will be of great benefit to you. 

00:00:16.180 --> 00:00:17.940
 Not only when you make your first game 

00:00:17.940 --> 00:00:20.882
 It will also be used when you are prototyping anything. 

00:00:20.882 --> 00:00:23.720
 There is a concept in the development term called the least feasible product. 

00:00:23.720 --> 00:00:26.340
 Describe the smallest product that can be done 

00:00:26.340 --> 00:00:29.100
 But still provide useful data when done 

00:00:29.100 --> 00:00:30.720
 Your goal should be it 

00:00:30.720 --> 00:00:34.120
 Even James received a phone call to make millions of dollars. 

00:00:34.120 --> 00:00:36.120
 Three years of development cycle 

00:00:36.120 --> 00:00:37.900
 The first thing he asked the other person 

00:00:37.900 --> 00:00:40.820
 Is if they can't make a prototype within the first three weeks 

00:00:40.820 --> 00:00:41.680
 Then they did it wrong. 

00:00:41.680 --> 00:00:43.760
 Only when you can really play your game 

00:00:43.760 --> 00:00:45.400
 You will find that there are too many problems 

00:00:45.400 --> 00:00:48.180
 You are only thinking in the mind that you can’t detect it. 

00:00:48.180 --> 00:00:50.660
 You will find the marginal situation that makes your game mechanics crash. 

00:00:50.660 --> 00:00:53.060
 And some scenes that have collapsed 

00:00:53.060 --> 00:00:55.240
 You will really find out what is fascinating 

00:00:55.240 --> 00:00:57.360
 Instead of trying to make something that you think is fascinating 

00:00:57.360 --> 00:01:00.860
 You will also find out what is most important for the game experience you are trying to create. 

00:01:00.960 --> 00:01:03.760
 Ok, you have heard me say that streamlining, streamlining and streamlining 

00:01:03.760 --> 00:01:05.460
 But when you feel that you have been fine enough 

00:01:05.460 --> 00:01:06.720
 It’s very likely that you are not doing enough 

00:01:06.720 --> 00:01:09.100
 But you really should stop at some point. 

00:01:09.100 --> 00:01:10.840
 So how do you determine for the so-called minimum viable product? 

00:01:10.840 --> 00:01:12.840
 We have been streamlined enough. 

00:01:12.840 --> 00:01:13.920
 This is indeed a problem 

00:01:13.920 --> 00:01:15.940
 And it takes experience to make good processing here. 

00:01:15.940 --> 00:01:19.620
 But the core idea is to reduce to the absolute minimum feature set. 

00:01:19.620 --> 00:01:21.960
 And will not affect core development 

00:01:21.960 --> 00:01:25.040
 If you remove a feature and your game is still able to post 

00:01:25.040 --> 00:01:27.280
 Then it should basically not be included in the smallest feasible product. 

00:01:27.280 --> 00:01:30.180
 But dealing with this matter is equally important in terms of artistry and science. 

00:01:30.180 --> 00:01:31.020
 So we will explain by some examples 

00:01:31.040 --> 00:01:33.000
 So that we can think from the same angle 

00:01:33.000 --> 00:01:35.240
 Let's start with the Super Mario Bros. 

00:01:35.240 --> 00:01:36.560
 How should we do it to test 

00:01:36.560 --> 00:01:40.100
 The core gameplay of the Super Mario Bros. is fun. 

00:01:40.100 --> 00:01:46.620
 What is the smallest product we can test before we can judge whether our game has enough potential to be perfected? 

00:01:46.620 --> 00:01:48.420
 Do we need Noku turtles? 

00:01:48.420 --> 00:01:49.200
 Do not 

00:01:49.200 --> 00:01:50.360
 Flame flower? 

00:01:50.360 --> 00:01:51.220
 Do not 

00:01:51.220 --> 00:01:52.240
 Kuba? 

00:01:52.240 --> 00:01:52.960
 Do not 

00:01:52.960 --> 00:01:54.520
 Can you climb into the water pipe? 

00:01:54.520 --> 00:01:55.300
 Do not 

00:01:55.380 --> 00:01:56.720
 All the water pipes? 

00:01:56.740 --> 00:01:57.340
 Um... don’t 

00:01:57.380 --> 00:01:58.520
 Underwater level? 

00:01:58.520 --> 00:01:59.400
 Underwater check? Mushroom? 

00:01:59.400 --> 00:02:00.040
 Underwater level? Mushroom? Hidden square? 

00:02:00.040 --> 00:02:01.120
 Underwater levels? Mushrooms? Hidden squares? Extra life? 

00:02:01.120 --> 00:02:02.400
 No no no no 

00:02:02.400 --> 00:02:02.900
 Do not! 

00:02:02.940 --> 00:02:04.460
 So what do we want? 

00:02:04.460 --> 00:02:06.940
 For Mario, the smallest viable product 

00:02:07.000 --> 00:02:09.520
 It’s probably a level that will keep you 

00:02:09.520 --> 00:02:11.860
 Move, jump and fall into the pit 

00:02:11.900 --> 00:02:12.640
 This is enough 

00:02:12.680 --> 00:02:14.620
 If these are already fun 

00:02:14.620 --> 00:02:16.800
 You can add all those elements later 

00:02:16.800 --> 00:02:18.080
 To make it even better 

00:02:18.080 --> 00:02:21.320
 But if you run and cross the deep pit, it doesn't make people feel fun. 

00:02:21.320 --> 00:02:23.320
 Super Mario brothers can't succeed 

00:02:23.320 --> 00:02:25.840
 No matter how much extra content you add to it 

00:02:25.840 --> 00:02:29.160
 So you have to figure out at the outset whether the core of the game is useful. 

00:02:29.160 --> 00:02:30.820
 But in this particular example 

00:02:30.820 --> 00:02:34.000
 I might add some features that are not strictly necessary. 

00:02:34.000 --> 00:02:35.520
 But there will be good results 

00:02:35.520 --> 00:02:36.020
 First of all 

00:02:36.020 --> 00:02:38.920
 A trigger that resets the level after the player drops the hole 

00:02:38.920 --> 00:02:40.360
 This can make testing easier 

00:02:40.360 --> 00:02:43.320
 And let the player not feel disgusted with it. 

00:02:43.320 --> 00:02:44.220
 second 

00:02:44.220 --> 00:02:45.980
 Switch from walking to running 

00:02:45.980 --> 00:02:49.080
 Because Mario's jump function is extremely related to the running key 

00:02:49.120 --> 00:02:50.420
 But stop here 

00:02:50.520 --> 00:02:52.040
 Three levels of one level 

00:02:52.040 --> 00:02:53.340
 This is your game 

00:02:53.340 --> 00:02:55.380
 Do not believe that such a simple game will be fascinating? 

00:02:55.380 --> 00:02:58.520
 Let the character run automatically, you basically made Canabalt 

00:02:58.520 --> 00:03:02.160
 When you make your first game or prototype a big game 

00:03:02.160 --> 00:03:04.820
 You will find that you can take away all the content 

00:03:04.820 --> 00:03:10.680
 Remove elements that are not rules that control the game but are added outside the rules 

00:03:10.680 --> 00:03:11.720
 Various monsters 

00:03:11.740 --> 00:03:12.540
 Various levels 

00:03:12.540 --> 00:03:13.440
 Various weapons 

00:03:13.440 --> 00:03:15.200
 All of this is usually streamlined 

00:03:15.200 --> 00:03:17.260
 You may leave one in each class 

00:03:17.300 --> 00:03:18.980
 Just to test more advanced rules 

00:03:18.980 --> 00:03:19.960
 But don't exceed these 

00:03:19.960 --> 00:03:23.700
 Because it’s easy to fall into the mud of making this content. 

00:03:23.700 --> 00:03:24.820
 The truth is 

00:03:24.820 --> 00:03:29.440
 There are very few games with a lot of content but no solid foundation. 

00:03:29.440 --> 00:03:31.120
 Worse for developers 

00:03:31.120 --> 00:03:32.700
 When your game is full of content 

00:03:32.700 --> 00:03:36.180
 It usually makes it harder to judge whether the core of the game is working. 

00:03:36.180 --> 00:03:38.900
 If you test with a prototype that adds a lot of content 

00:03:38.900 --> 00:03:43.080
 This will make it harder for players to figure out where to improve. 

00:03:43.080 --> 00:03:45.700
 Because these things will cover up the problem 

00:03:45.700 --> 00:03:48.520
 Then they are likely to tell you something bad. 

00:03:48.520 --> 00:03:53.040
 Not the underlying reason why these content have no effect 

00:03:53.040 --> 00:03:58.600
 This complicates the problem when you really want to optimize your game core. 

00:03:58.600 --> 00:04:00.360
 Ok, let's look at another one. 

00:04:00.360 --> 00:04:02.080
 Classic JRPG (Japanese role-playing game) 

00:04:02.080 --> 00:04:03.300
 People are often misled on this 

00:04:03.300 --> 00:04:07.900
 Because most developers tend to identify these games with game content rather than gameplay. 

00:04:07.900 --> 00:04:10.160
 It’s easy to fall into the story you want to tell 

00:04:10.160 --> 00:04:12.460
 Or a huge list of items and monsters 

00:04:12.460 --> 00:04:16.120
 But if the player needs to play 80 hours on the monotonous gameplay 

00:04:16.120 --> 00:04:18.400
 To touch the story in your head 

00:04:18.400 --> 00:04:19.940
 Then you really hurt your players. 

00:04:19.940 --> 00:04:25.600
 In fact, this is one of the reasons for the decline in the popularity of traditional JRPG in recent years. 

00:04:25.600 --> 00:04:27.720
 For example, with Final Fantasy 4 as an example 

00:04:27.720 --> 00:04:31.540
 This time I will remove everything except the menu-based combat system. 

00:04:31.540 --> 00:04:33.240
 I will even remove all the graphics 

00:04:33.240 --> 00:04:35.600
 Monsters can just be text on the screen 

00:04:35.600 --> 00:04:37.600
 This is all you have to test the system. 

00:04:37.600 --> 00:04:39.080
 Many people will have objections to this 

00:04:39.080 --> 00:04:43.540
 Say, "That's no use. I can't put it in without content." 

00:04:43.540 --> 00:04:44.740
 This is actually very good 

00:04:44.740 --> 00:04:48.500
 This immediately pointed out that we might be looking for a more playable game. 

00:04:48.500 --> 00:04:49.120
 Ok 

00:04:49.120 --> 00:04:49.920
 Let's look at another example. 

00:04:49.920 --> 00:04:52.120
 This time we look at the spotted 

00:04:52.120 --> 00:04:55.420
 For it we can streamline to the color change mechanism 

00:04:55.420 --> 00:04:59.360
 And randomly switch colors and launch enemies with random barrage 

00:04:59.360 --> 00:05:02.700
 Or you can randomly pick from a few pre-set barrage styles. 

00:05:02.700 --> 00:05:04.480
 This should not be difficult to make 

00:05:04.480 --> 00:05:07.500
 Then we need players to be able to move and shoot 

00:05:07.500 --> 00:05:09.820
 a scorer that will increase when you shoot an enemy 

00:05:09.820 --> 00:05:13.300
 And a death mechanism that resets the game after being hit. 

00:05:13.300 --> 00:05:15.900
 This includes all the player behavior you need. 

00:05:15.900 --> 00:05:17.540
 Let you know if your game is fun 

00:05:17.540 --> 00:05:19.760
 Your player will dodge and shoot at the enemy. 

00:05:19.760 --> 00:05:23.320
 At the same time try to use the color change mechanism as much as possible 

00:05:23.320 --> 00:05:24.480
 It is enough to have these 

00:05:24.480 --> 00:05:26.280
 I hope this will give you a way of thinking. 

00:05:26.280 --> 00:05:29.260
 To determine how small your first game is. 

00:05:29.260 --> 00:05:31.780
 Now I will rank a simple and rude game. 

00:05:31.780 --> 00:05:35.740
 Sorted by the difficulty of making a minimum viable product 

00:05:35.740 --> 00:05:37.980
 And this is only for video games. 

00:05:37.980 --> 00:05:41.900
 Some of these types will be easier to make a pen or board game or board game. 

00:05:41.900 --> 00:05:44.580
 And this ranking is not absolute 

00:05:44.580 --> 00:05:46.780
 This ranking becomes obsolete because of changes in the game engine. 

00:05:46.780 --> 00:05:49.160
 But this will at least give you a starting point 

00:05:49.160 --> 00:05:53.400
 Therefore, the production of the smallest feasible product category is ranked 

00:05:53.400 --> 00:05:55.480
 From simple to complex 

00:05:55.480 --> 00:05:56.560
 Racing game 

00:05:56.560 --> 00:05:57.820
 2. Top view shooting game 

00:05:57.820 --> 00:05:59.140
 3. 2D platform jumping game 

00:05:59.140 --> 00:06:01.200
 4. Color matching puzzle game 

00:06:01.200 --> 00:06:02.780
 5. 2D puzzle platform jumping game 

00:06:02.780 --> 00:06:04.300
 6. 3D platform jumping game 

00:06:04.300 --> 00:06:05.520
 7. FPS (first person shooter) 

00:06:05.520 --> 00:06:06.800
 8. JRPG (Japanese role-playing game) 

00:06:06.800 --> 00:06:07.940
 9. Fighting games 

00:06:07.940 --> 00:06:09.180
 10. Action Adventure Game 

00:06:09.180 --> 00:06:10.640
 11. Western role-playing game 

00:06:10.640 --> 00:06:11.820
 12. RTS (real-time strategy game) 

00:06:11.820 --> 00:06:13.980
 I didn't include a click-through adventure game. 

00:06:13.980 --> 00:06:16.520
 Because such games are usually based entirely on content 

00:06:16.520 --> 00:06:19.960
 So making a point-and-click adventure game easy to run 

00:06:19.960 --> 00:06:24.380
 It’s much harder to combine these things and make people feel fun. 

00:06:24.380 --> 00:06:27.900
 You will also find that I have not mentioned any networking or multiple people. 

00:06:27.900 --> 00:06:30.240
 Because this usually increases the difficulty several times 

00:06:30.240 --> 00:06:34.200
 Honestly, I recommend not including any multiplayer content in your first game. 

00:06:34.200 --> 00:06:35.140
 and also 

00:06:35.140 --> 00:06:37.860
 Don't treat these kinds as those games you know. 

00:06:37.860 --> 00:06:39.400
 I said racing games 

00:06:39.400 --> 00:06:41.020
 Don't think it's "GT Racing" 

00:06:41.020 --> 00:06:45.440
 Imagine two gray squares on a black background with acceleration and collision mechanisms 

00:06:45.440 --> 00:06:49.060
 That's what you need to do at the stage of the smallest viable product. 

00:06:49.060 --> 00:06:51.480
 After that you can really finish him and play 

00:06:51.480 --> 00:06:53.360
 Then know how to improve it 

00:06:53.360 --> 00:06:56.700
 You can always continue to develop and add more cool features based on this. 

00:06:56.700 --> 00:07:02.440
 But your game will get better because of the time spent on improving core gameplay. 

00:07:02.440 --> 00:07:07.000
 This is much more practical than conceiving a plan that can never be completed. 

00:07:07.000 --> 00:07:10.800
 I hope this will help you set the starting point and scale down. 

00:07:10.800 --> 00:07:14.420
 Stay tuned for the next episode about what you can do after your game is complete. 

00:07:14.420 --> 00:07:15.180
 See you next time 

00:07:15.440 --> 00:07:20.140
 Author subtitles: Spencer Wang 

