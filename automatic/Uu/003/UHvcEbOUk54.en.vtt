WEBVTT
Kind: captions
Language: en

00:00:12.099 --> 00:00:14.470 

the<00:00:13.099> goal<00:00:13.280> of<00:00:13.429> this<00:00:13.550> demo<00:00:13.820> is<00:00:14.030> to<00:00:14.150> preview<00:00:14.330> some

00:00:14.470 --> 00:00:14.480 
the goal of this demo is to preview some

00:00:14.480 --> 00:00:16.060 
the goal of this demo is to preview some
of<00:00:14.690> the<00:00:14.870> new<00:00:15.019> graphical<00:00:15.440> techniques<00:00:15.860> made

00:00:16.060 --> 00:00:16.070 
of the new graphical techniques made

00:00:16.070 --> 00:00:17.470 
of the new graphical techniques made
possible<00:00:16.520> using<00:00:16.880> the<00:00:16.970> new<00:00:17.090> features<00:00:17.119> of

00:00:17.470 --> 00:00:17.480 
possible using the new features of

00:00:17.480 --> 00:00:20.769 
possible using the new features of
DirectX<00:00:18.050> 10.1<00:00:18.770> and<00:00:18.920> the<00:00:19.250> spyder<00:00:19.490> platform<00:00:20.060> in

00:00:20.769 --> 00:00:20.779 
DirectX 10.1 and the spyder platform in

00:00:20.779 --> 00:00:22.569 
DirectX 10.1 and the spyder platform in
particular<00:00:21.169> it<00:00:21.590> shows<00:00:21.890> off<00:00:22.040> a<00:00:22.070> new<00:00:22.279> lighting

00:00:22.569 --> 00:00:22.579 
particular it shows off a new lighting

00:00:22.579 --> 00:00:24.249 
particular it shows off a new lighting
technique<00:00:22.939> known<00:00:23.239> as<00:00:23.300> real-time<00:00:23.779> global

00:00:24.249 --> 00:00:24.259 
technique known as real-time global

00:00:24.259 --> 00:00:26.229 
technique known as real-time global
illumination<00:00:24.579> together<00:00:25.579> with<00:00:25.790> a<00:00:25.820> scalable

00:00:26.229 --> 00:00:26.239 
illumination together with a scalable

00:00:26.239 --> 00:00:27.940 
illumination together with a scalable
physics<00:00:26.570> simulation<00:00:27.169> optimized<00:00:27.710> for

00:00:27.940 --> 00:00:27.950 
physics simulation optimized for

00:00:27.950 --> 00:00:30.249 
physics simulation optimized for
multi-core<00:00:28.369> systems<00:00:28.840> to<00:00:29.840> make<00:00:29.960> it<00:00:30.079> a<00:00:30.140> little

00:00:30.249 --> 00:00:30.259 
multi-core systems to make it a little

00:00:30.259 --> 00:00:32.229 
multi-core systems to make it a little
more<00:00:30.439> interesting<00:00:30.980> and<00:00:31.099> interactive<00:00:31.489> we

00:00:32.229 --> 00:00:32.239 
more interesting and interactive we

00:00:32.239 --> 00:00:33.670 
more interesting and interactive we
decided<00:00:32.630> to<00:00:32.720> include<00:00:32.930> some<00:00:33.200> simple<00:00:33.500> gameplay

00:00:33.670 --> 00:00:33.680 
decided to include some simple gameplay

00:00:33.680 --> 00:00:39.140 
decided to include some simple gameplay
elements<00:00:34.250> as<00:00:34.370> well

00:00:39.140 --> 00:00:39.150 

00:00:39.150 --> 00:00:41.160 

what<00:00:40.150> you're<00:00:40.300> currently<00:00:40.480> seeing<00:00:40.930> is

00:00:41.160 --> 00:00:41.170 
what you're currently seeing is

00:00:41.170 --> 00:00:42.990 
what you're currently seeing is
thousands<00:00:41.650> of<00:00:41.770> distinct<00:00:42.280> ping-pong<00:00:42.730> balls

00:00:42.990 --> 00:00:43.000 
thousands of distinct ping-pong balls

00:00:43.000 --> 00:00:44.730 
thousands of distinct ping-pong balls
all<00:00:43.300> being<00:00:43.630> physically<00:00:43.990> simulated<00:00:44.530> on<00:00:44.650> the

00:00:44.730 --> 00:00:44.740 
all being physically simulated on the

00:00:44.740 --> 00:00:47.190 
all being physically simulated on the
quad-core<00:00:45.220> phenom<00:00:45.610> CPU<00:00:46.060> and<00:00:46.270> rendered<00:00:46.990> on<00:00:47.170> a

00:00:47.190 --> 00:00:47.200 
quad-core phenom CPU and rendered on a

00:00:47.200 --> 00:00:50.820 
quad-core phenom CPU and rendered on a
Radeon<00:00:47.560> HD<00:00:47.760> 3800<00:00:48.760> series<00:00:49.060> GPU<00:00:49.540> you<00:00:50.500> can<00:00:50.680> see

00:00:50.820 --> 00:00:50.830 
Radeon HD 3800 series GPU you can see

00:00:50.830 --> 00:00:52.080 
Radeon HD 3800 series GPU you can see
that<00:00:51.010> every<00:00:51.220> ball<00:00:51.430> is<00:00:51.460> being<00:00:51.880> lit

00:00:52.080 --> 00:00:52.090 
that every ball is being lit

00:00:52.090 --> 00:00:54.150 
that every ball is being lit
simultaneously<00:00:52.990> by<00:00:53.170> multiple<00:00:53.200> area<00:00:53.920> light

00:00:54.150 --> 00:00:54.160 
simultaneously by multiple area light

00:00:54.160 --> 00:00:56.310 
simultaneously by multiple area light
sources<00:00:54.520> casting<00:00:55.390> soft<00:00:55.630> shadows<00:00:56.020> on<00:00:56.200> each

00:00:56.310 --> 00:00:56.320 
sources casting soft shadows on each

00:00:56.320 --> 00:00:58.800 
sources casting soft shadows on each
other<00:00:56.500> and<00:00:56.710> the<00:00:56.920> environment<00:00:57.600> some<00:00:58.600> of<00:00:58.690> the

00:00:58.800 --> 00:00:58.810 
other and the environment some of the

00:00:58.810 --> 00:01:00.420 
other and the environment some of the
more<00:00:58.960> subtle<00:00:59.170> effects<00:00:59.680> include<00:01:00.010> indirect

00:01:00.420 --> 00:01:00.430 
more subtle effects include indirect

00:01:00.430 --> 00:01:01.979 
more subtle effects include indirect
lighting<00:01:00.780> multisample

00:01:01.979 --> 00:01:01.989 
lighting multisample

00:01:01.989 --> 00:01:05.970 
lighting multisample
anti-aliasing<00:01:02.830> or<00:01:03.300> MSA<00:01:04.300> a<00:01:04.980> environmental

00:01:05.970 --> 00:01:05.980 
anti-aliasing or MSA a environmental

00:01:05.980 --> 00:01:08.400 
anti-aliasing or MSA a environmental
reflections<00:01:06.520> and<00:01:06.700> even<00:01:07.270> a<00:01:07.390> GPU<00:01:07.720> fluid

00:01:08.400 --> 00:01:08.410 
reflections and even a GPU fluid

00:01:08.410 --> 00:01:09.630 
reflections and even a GPU fluid
simulation<00:01:08.950> for<00:01:09.070> the<00:01:09.190> plasma<00:01:09.550> screen

00:01:09.630 --> 00:01:09.640 
simulation for the plasma screen

00:01:09.640 --> 00:01:11.460 
simulation for the plasma screen
dividing<00:01:10.210> the<00:01:10.300> two<00:01:10.450> halves<00:01:10.720> of<00:01:10.869> the<00:01:10.930> room<00:01:11.200> and

00:01:11.460 --> 00:01:11.470 
dividing the two halves of the room and

00:01:11.470 --> 00:01:13.560 
dividing the two halves of the room and
obviously<00:01:12.430> the<00:01:12.850> frame<00:01:13.060> rates<00:01:13.210> are<00:01:13.360> very

00:01:13.560 --> 00:01:13.570 
obviously the frame rates are very

00:01:13.570 --> 00:01:20.400 
obviously the frame rates are very
smooth<00:01:18.510> one<00:01:19.510> of<00:01:19.600> the<00:01:19.720> things<00:01:19.960> that<00:01:20.200> still

00:01:20.400 --> 00:01:20.410 
smooth one of the things that still

00:01:20.410 --> 00:01:22.560 
smooth one of the things that still
differentiates<00:01:21.100> offline<00:01:21.580> CG<00:01:22.000> rendering<00:01:22.420> from

00:01:22.560 --> 00:01:22.570 
differentiates offline CG rendering from

00:01:22.570 --> 00:01:24.749 
differentiates offline CG rendering from
real-time<00:01:22.840> 3d<00:01:23.320> rendering<00:01:23.800> today<00:01:24.040> is<00:01:24.280> indirect

00:01:24.749 --> 00:01:24.759 
real-time 3d rendering today is indirect

00:01:24.759 --> 00:01:26.910 
real-time 3d rendering today is indirect
lighting<00:01:25.320> today's<00:01:26.320> games<00:01:26.619> almost

00:01:26.910 --> 00:01:26.920 
lighting today's games almost

00:01:26.920 --> 00:01:28.890 
lighting today's games almost
exclusively<00:01:27.580> use<00:01:27.820> light<00:01:28.119> and<00:01:28.360> shadow<00:01:28.600> maps

00:01:28.890 --> 00:01:28.900 
exclusively use light and shadow maps

00:01:28.900 --> 00:01:30.930 
exclusively use light and shadow maps
for<00:01:29.229> lighting<00:01:29.440> which<00:01:30.100> work<00:01:30.310> by<00:01:30.460> rendering<00:01:30.670> the

00:01:30.930 --> 00:01:30.940 
for lighting which work by rendering the

00:01:30.940 --> 00:01:32.040 
for lighting which work by rendering the
scene<00:01:31.090> from<00:01:31.300> the<00:01:31.420> point<00:01:31.630> of<00:01:31.690> view<00:01:31.750> of<00:01:31.930> each

00:01:32.040 --> 00:01:32.050 
scene from the point of view of each

00:01:32.050 --> 00:01:34.440 
scene from the point of view of each
light<00:01:32.320> source<00:01:32.560> the<00:01:33.490> problem<00:01:33.820> is<00:01:34.000> that<00:01:34.240> in<00:01:34.360> the

00:01:34.440 --> 00:01:34.450 
light source the problem is that in the

00:01:34.450 --> 00:01:35.940 
light source the problem is that in the
real<00:01:34.630> world<00:01:34.810> LED<00:01:35.410> is<00:01:35.530> bouncing<00:01:35.860> around

00:01:35.940 --> 00:01:35.950 
real world LED is bouncing around

00:01:35.950 --> 00:01:38.249 
real world LED is bouncing around
everywhere<00:01:36.220> so<00:01:37.119> having<00:01:37.360> just<00:01:37.540> a<00:01:37.630> few<00:01:37.660> discreet

00:01:38.249 --> 00:01:38.259 
everywhere so having just a few discreet

00:01:38.259 --> 00:01:40.350 
everywhere so having just a few discreet
light<00:01:38.619> sources<00:01:38.920> cannot<00:01:39.369> accurately<00:01:39.610> simulate

00:01:40.350 --> 00:01:40.360 
light sources cannot accurately simulate

00:01:40.360 --> 00:01:44.220 
light sources cannot accurately simulate
real<00:01:40.570> lady

00:01:44.220 --> 00:01:44.230 

00:01:44.230 --> 00:01:46.260 

you<00:01:44.980> can<00:01:45.130> see<00:01:45.280> what<00:01:45.460> happens<00:01:45.820> to<00:01:45.970> the<00:01:46.060> scene

00:01:46.260 --> 00:01:46.270 
you can see what happens to the scene

00:01:46.270 --> 00:01:48.270 
you can see what happens to the scene
when<00:01:46.510> indirect<00:01:46.960> lighting<00:01:47.260> isn't<00:01:47.530> taken<00:01:48.070> into

00:01:48.270 --> 00:01:48.280 
when indirect lighting isn't taken into

00:01:48.280 --> 00:01:50.760 
when indirect lighting isn't taken into
account<00:01:48.400> in<00:01:49.300> this<00:01:49.540> case<00:01:49.810> we<00:01:50.110> use<00:01:50.230> constant

00:01:50.760 --> 00:01:50.770 
account in this case we use constant

00:01:50.770 --> 00:01:52.590 
account in this case we use constant
ambient<00:01:51.160> lighting<00:01:51.340> instead<00:01:51.760> which<00:01:52.360> is<00:01:52.510> the

00:01:52.590 --> 00:01:52.600 
ambient lighting instead which is the

00:01:52.600 --> 00:01:55.170 
ambient lighting instead which is the
approximation<00:01:53.140> most<00:01:53.470> games<00:01:53.680> use<00:01:53.860> today<00:01:54.190> you

00:01:55.170 --> 00:01:55.180 
approximation most games use today you

00:01:55.180 --> 00:01:56.430 
approximation most games use today you
can<00:01:55.330> see<00:01:55.480> that<00:01:55.660> the<00:01:55.750> multicolored<00:01:56.290> light

00:01:56.430 --> 00:01:56.440 
can see that the multicolored light

00:01:56.440 --> 00:01:57.960 
can see that the multicolored light
sources<00:01:56.770> no<00:01:57.010> longer<00:01:57.310> bounce<00:01:57.520> their<00:01:57.760> light

00:01:57.960 --> 00:01:57.970 
sources no longer bounce their light

00:01:57.970 --> 00:01:59.670 
sources no longer bounce their light
throughout<00:01:58.330> the<00:01:58.510> room<00:01:58.720> so<00:01:59.200> it<00:01:59.290> looks<00:01:59.470> much

00:01:59.670 --> 00:01:59.680 
throughout the room so it looks much

00:01:59.680 --> 00:02:01.680 
throughout the room so it looks much
less<00:01:59.830> realistic<00:02:00.460> and<00:02:00.640> the<00:02:01.120> location<00:02:01.540> of<00:02:01.600> the

00:02:01.680 --> 00:02:01.690 
less realistic and the location of the

00:02:01.690 --> 00:02:02.790 
less realistic and the location of the
balls<00:02:01.870> becomes<00:02:02.260> more<00:02:02.410> difficult<00:02:02.560> to

00:02:02.790 --> 00:02:02.800 
balls becomes more difficult to

00:02:02.800 --> 00:02:07.990 
balls becomes more difficult to
determine

00:02:07.990 --> 00:02:08.000 

00:02:08.000 --> 00:02:09.940 

when<00:02:08.840> I<00:02:08.869> turn<00:02:09.080> off<00:02:09.200> the<00:02:09.380> ambient<00:02:09.770> occlusion

00:02:09.940 --> 00:02:09.950 
when I turn off the ambient occlusion

00:02:09.950 --> 00:02:12.100 
when I turn off the ambient occlusion
shadows<00:02:10.369> you<00:02:11.060> can<00:02:11.240> see<00:02:11.390> how<00:02:11.540> important<00:02:11.990> the

00:02:12.100 --> 00:02:12.110 
shadows you can see how important the

00:02:12.110 --> 00:02:13.920 
shadows you can see how important the
soft<00:02:12.320> shadows<00:02:12.680> are<00:02:12.860> to<00:02:13.040> this<00:02:13.190> type<00:02:13.340> of<00:02:13.370> scene

00:02:13.920 --> 00:02:13.930 
soft shadows are to this type of scene

00:02:13.930 --> 00:02:16.030 
soft shadows are to this type of scene
using<00:02:14.930> shadow<00:02:15.170> maps<00:02:15.410> for<00:02:15.590> a<00:02:15.650> scene<00:02:15.830> like<00:02:15.980> this

00:02:16.030 --> 00:02:16.040 
using shadow maps for a scene like this

00:02:16.040 --> 00:02:18.340 
using shadow maps for a scene like this
with<00:02:16.430> many<00:02:16.730> dynamic<00:02:17.240> objects<00:02:17.720> isn't<00:02:18.110> really

00:02:18.340 --> 00:02:18.350 
with many dynamic objects isn't really

00:02:18.350 --> 00:02:20.320 
with many dynamic objects isn't really
practical<00:02:18.860> either<00:02:19.640> they<00:02:19.790> would<00:02:19.910> have<00:02:20.090> to<00:02:20.210> have

00:02:20.320 --> 00:02:20.330 
practical either they would have to have

00:02:20.330 --> 00:02:22.780 
practical either they would have to have
hard<00:02:20.690> aliased<00:02:21.290> edges<00:02:21.650> or<00:02:21.860> frame<00:02:22.370> weights<00:02:22.580> were

00:02:22.780 --> 00:02:22.790 
hard aliased edges or frame weights were

00:02:22.790 --> 00:02:26.080 
hard aliased edges or frame weights were
dropped<00:02:23.060> to<00:02:23.210> low<00:02:23.390> with<00:02:24.320> DirectX<00:02:24.860> 10.1<00:02:25.610> we<00:02:25.910> can

00:02:26.080 --> 00:02:26.090 
dropped to low with DirectX 10.1 we can

00:02:26.090 --> 00:02:28.300 
dropped to low with DirectX 10.1 we can
use<00:02:26.240> the<00:02:26.390> superior<00:02:26.870> technique<00:02:27.290> for<00:02:27.560> fast<00:02:27.800> high

00:02:28.300 --> 00:02:28.310 
use the superior technique for fast high

00:02:28.310 --> 00:02:30.130 
use the superior technique for fast high
quality<00:02:28.760> soft<00:02:29.000> shadows<00:02:29.390> that<00:02:29.600> work<00:02:29.780> with<00:02:29.960> any

00:02:30.130 --> 00:02:30.140 
quality soft shadows that work with any

00:02:30.140 --> 00:02:35.030 
quality soft shadows that work with any
number<00:02:30.470> of<00:02:30.500> objects

00:02:35.030 --> 00:02:35.040 

00:02:35.040 --> 00:02:37.100 

this<00:02:35.610> mode<00:02:35.849> helps<00:02:36.150> us<00:02:36.269> to<00:02:36.390> visualize<00:02:36.810> how<00:02:36.840> the

00:02:37.100 --> 00:02:37.110 
this mode helps us to visualize how the

00:02:37.110 --> 00:02:38.800 
this mode helps us to visualize how the
global<00:02:37.379> illumination<00:02:37.709> is<00:02:38.250> being<00:02:38.489> computed

00:02:38.800 --> 00:02:38.810 
global illumination is being computed

00:02:38.810 --> 00:02:41.089 
global illumination is being computed
the<00:02:39.810> scene<00:02:40.049> is<00:02:40.170> divided<00:02:40.560> into<00:02:40.799> a<00:02:40.829> grid<00:02:40.890> of

00:02:41.089 --> 00:02:41.099 
the scene is divided into a grid of

00:02:41.099 --> 00:02:43.190 
the scene is divided into a grid of
cubes<00:02:41.489> each<00:02:42.090> with<00:02:42.480> a<00:02:42.510> light<00:02:42.750> probe<00:02:42.930> at<00:02:43.049> its

00:02:43.190 --> 00:02:43.200 
cubes each with a light probe at its

00:02:43.200 --> 00:02:45.830 
cubes each with a light probe at its
center<00:02:43.530> for<00:02:44.459> each<00:02:44.640> leg<00:02:44.939> probe<00:02:45.239> the<00:02:45.659> light

00:02:45.830 --> 00:02:45.840 
center for each leg probe the light

00:02:45.840 --> 00:02:47.240 
center for each leg probe the light
falling<00:02:46.079> on<00:02:46.260> it<00:02:46.319> from<00:02:46.530> all<00:02:46.680> directions<00:02:46.980> is

00:02:47.240 --> 00:02:47.250 
falling on it from all directions is

00:02:47.250 --> 00:02:49.490 
falling on it from all directions is
captured<00:02:47.670> in<00:02:47.790> cube<00:02:48.000> maps<00:02:48.269> then<00:02:49.079> compressed

00:02:49.490 --> 00:02:49.500 
captured in cube maps then compressed

00:02:49.500 --> 00:02:52.550 
captured in cube maps then compressed
with<00:02:49.739> spherical<00:02:50.069> harmonics<00:02:51.079> cube<00:02:52.079> map<00:02:52.260> arrays

00:02:52.550 --> 00:02:52.560 
with spherical harmonics cube map arrays

00:02:52.560 --> 00:02:54.710 
with spherical harmonics cube map arrays
and<00:02:52.829> geometry<00:02:53.129> shaders<00:02:53.700> let<00:02:54.030> us<00:02:54.120> update<00:02:54.299> many

00:02:54.710 --> 00:02:54.720 
and geometry shaders let us update many

00:02:54.720 --> 00:02:56.390 
and geometry shaders let us update many
of<00:02:54.870> these<00:02:54.989> probes<00:02:55.349> in<00:02:55.560> a<00:02:55.620> single<00:02:55.920> pass<00:02:56.099> each

00:02:56.390 --> 00:02:56.400 
of these probes in a single pass each

00:02:56.400 --> 00:02:59.270 
of these probes in a single pass each
frame<00:02:57.530> note<00:02:58.530> that<00:02:58.709> this<00:02:58.829> is<00:02:58.980> a<00:02:59.010> highly

00:02:59.270 --> 00:02:59.280 
frame note that this is a highly

00:02:59.280 --> 00:03:01.099 
frame note that this is a highly
scalable<00:02:59.609> method<00:03:00.150> since<00:03:00.420> we<00:03:00.599> can<00:03:00.750> easily

00:03:01.099 --> 00:03:01.109 
scalable method since we can easily

00:03:01.109 --> 00:03:02.599 
scalable method since we can easily
increase<00:03:01.439> the<00:03:01.680> number<00:03:01.920> of<00:03:01.950> kids<00:03:02.280> to<00:03:02.489> take

00:03:02.599 --> 00:03:02.609 
increase the number of kids to take

00:03:02.609 --> 00:03:03.890 
increase the number of kids to take
advantage<00:03:03.090> of<00:03:03.209> additional<00:03:03.689> stream

00:03:03.890 --> 00:03:03.900 
advantage of additional stream

00:03:03.900 --> 00:03:06.110 
advantage of additional stream
processors<00:03:04.530> or<00:03:04.739> decrease<00:03:05.579> the<00:03:05.730> number<00:03:05.969> on

00:03:06.110 --> 00:03:06.120 
processors or decrease the number on

00:03:06.120 --> 00:03:19.789 
processors or decrease the number on
lower<00:03:06.329> end<00:03:06.420> GPUs<00:03:18.139> you<00:03:19.139> can<00:03:19.260> see<00:03:19.409> that<00:03:19.590> another

00:03:19.789 --> 00:03:19.799 
lower end GPUs you can see that another

00:03:19.799 --> 00:03:21.559 
lower end GPUs you can see that another
advantage<00:03:20.220> of<00:03:20.430> using<00:03:20.489> these<00:03:20.849> cube<00:03:21.120> maps<00:03:21.329> is

00:03:21.559 --> 00:03:21.569 
advantage of using these cube maps is

00:03:21.569 --> 00:03:23.119 
advantage of using these cube maps is
that<00:03:21.780> every<00:03:22.019> single<00:03:22.169> ball<00:03:22.439> can<00:03:22.650> reflect<00:03:22.889> the

00:03:23.119 --> 00:03:23.129 
that every single ball can reflect the

00:03:23.129 --> 00:03:25.129 
that every single ball can reflect the
entire<00:03:23.430> scene<00:03:23.730> the<00:03:24.510> quality<00:03:24.900> of<00:03:24.989> these

00:03:25.129 --> 00:03:25.139 
entire scene the quality of these

00:03:25.139 --> 00:03:27.050 
entire scene the quality of these
reflections<00:03:25.590> is<00:03:25.950> easily<00:03:26.340> scalable<00:03:26.609> as<00:03:26.879> well

00:03:27.050 --> 00:03:27.060 
reflections is easily scalable as well

00:03:27.060 --> 00:03:28.580 
reflections is easily scalable as well
according<00:03:27.780> to<00:03:27.810> the<00:03:27.959> processing<00:03:28.409> power

00:03:28.580 --> 00:03:28.590 
according to the processing power

00:03:28.590 --> 00:03:30.379 
according to the processing power
available<00:03:28.680> and<00:03:29.310> the<00:03:29.489> desired<00:03:29.819> performance

00:03:30.379 --> 00:03:30.389 
available and the desired performance

00:03:30.389 --> 00:03:32.870 
available and the desired performance
level

00:03:32.870 --> 00:03:32.880 

00:03:32.880 --> 00:03:35.540 

we<00:03:33.570> also<00:03:33.750> talked<00:03:34.080> about<00:03:34.170> how<00:03:34.350> DirectX<00:03:34.920> 10.1

00:03:35.540 --> 00:03:35.550 
we also talked about how DirectX 10.1

00:03:35.550 --> 00:03:38.120 
we also talked about how DirectX 10.1
can<00:03:35.790> prove<00:03:36.060> anti<00:03:36.390> aliasing<00:03:36.930> one<00:03:37.920> of<00:03:38.040> the

00:03:38.120 --> 00:03:38.130 
can prove anti aliasing one of the

00:03:38.130 --> 00:03:40.190 
can prove anti aliasing one of the
limitations<00:03:38.730> of<00:03:38.820> anti<00:03:39.120> aliasing<00:03:39.480> today<00:03:39.870> is

00:03:40.190 --> 00:03:40.200 
limitations of anti aliasing today is

00:03:40.200 --> 00:03:41.810 
limitations of anti aliasing today is
its<00:03:40.380> poor<00:03:40.590> compatibility<00:03:41.310> with<00:03:41.430> the<00:03:41.550> ferb

00:03:41.810 --> 00:03:41.820 
its poor compatibility with the ferb

00:03:41.820 --> 00:03:44.120 
its poor compatibility with the ferb
shading<00:03:42.300> techniques<00:03:42.750> such<00:03:43.440> as<00:03:43.470> those<00:03:43.740> used<00:03:43.980> in

00:03:44.120 --> 00:03:44.130 
shading techniques such as those used in

00:03:44.130 --> 00:03:46.730 
shading techniques such as those used in
new<00:03:44.280> Unreal<00:03:44.670> Engine<00:03:44.880> games<00:03:45.710> deferred<00:03:46.710> shading

00:03:46.730 --> 00:03:46.740 
new Unreal Engine games deferred shading

00:03:46.740 --> 00:03:49.550 
new Unreal Engine games deferred shading
is<00:03:47.490> also<00:03:47.790> used<00:03:47.970> in<00:03:48.090> this<00:03:48.210> demo<00:03:48.450> it<00:03:49.200> works<00:03:49.380> by

00:03:49.550 --> 00:03:49.560 
is also used in this demo it works by

00:03:49.560 --> 00:03:50.900 
is also used in this demo it works by
doing<00:03:49.770> a<00:03:49.860> free<00:03:50.040> pass<00:03:50.250> of<00:03:50.430> the<00:03:50.520> scene<00:03:50.730> to

00:03:50.900 --> 00:03:50.910 
doing a free pass of the scene to

00:03:50.910 --> 00:03:52.310 
doing a free pass of the scene to
determine<00:03:51.030> which<00:03:51.510> pixels<00:03:51.930> are<00:03:52.110> in<00:03:52.230> the

00:03:52.310 --> 00:03:52.320 
determine which pixels are in the

00:03:52.320 --> 00:03:54.470 
determine which pixels are in the
foreground<00:03:52.680> then<00:03:53.430> a<00:03:53.460> second<00:03:53.880> pass<00:03:54.030> to<00:03:54.300> shade

00:03:54.470 --> 00:03:54.480 
foreground then a second pass to shade

00:03:54.480 --> 00:03:56.960 
foreground then a second pass to shade
only<00:03:54.810> those<00:03:54.960> pixels<00:03:55.370> this<00:03:56.370> gains<00:03:56.580> a<00:03:56.700> lot<00:03:56.850> of

00:03:56.960 --> 00:03:56.970 
only those pixels this gains a lot of

00:03:56.970 --> 00:03:58.550 
only those pixels this gains a lot of
performance<00:03:57.420> in<00:03:57.540> a<00:03:57.600> scene<00:03:57.780> like<00:03:57.960> you<00:03:58.080> see<00:03:58.230> here

00:03:58.550 --> 00:03:58.560 
performance in a scene like you see here

00:03:58.560 --> 00:04:00.110 
performance in a scene like you see here
where<00:03:58.920> you<00:03:59.040> have<00:03:59.190> thousands<00:03:59.610> of<00:03:59.700> overlapping

00:04:00.110 --> 00:04:00.120 
where you have thousands of overlapping

00:04:00.120 --> 00:04:00.620 
where you have thousands of overlapping
balls

00:04:00.620 --> 00:04:00.630 
balls

00:04:00.630 --> 00:04:02.540 
balls
however<00:04:01.470> standard<00:04:02.070> multisample

00:04:02.540 --> 00:04:02.550 
however standard multisample

00:04:02.550 --> 00:04:04.370 
however standard multisample
anti-aliasing<00:04:03.390> works<00:04:03.630> on<00:04:03.780> polygon<00:04:04.170> edges

00:04:04.370 --> 00:04:04.380 
anti-aliasing works on polygon edges

00:04:04.380 --> 00:04:06.290 
anti-aliasing works on polygon edges
only<00:04:04.620> and<00:04:05.010> the<00:04:05.220> locations<00:04:05.730> of<00:04:05.820> these<00:04:05.970> edges

00:04:06.290 --> 00:04:06.300 
only and the locations of these edges

00:04:06.300 --> 00:04:06.830 
only and the locations of these edges
are<00:04:06.390> lost

00:04:06.830 --> 00:04:06.840 
are lost

00:04:06.840 --> 00:04:09.640 
are lost
after<00:04:07.080> the<00:04:07.200> pre<00:04:07.350> pass<00:04:07.530> is<00:04:07.710> completed

00:04:09.640 --> 00:04:09.650 
after the pre pass is completed

00:04:09.650 --> 00:04:11.860 
after the pre pass is completed
in<00:04:10.220> the<00:04:10.489> ping-pong<00:04:10.849> game<00:04:11.060> we<00:04:11.450> use<00:04:11.569> the<00:04:11.750> new

00:04:11.860 --> 00:04:11.870 
in the ping-pong game we use the new

00:04:11.870 --> 00:04:14.170 
in the ping-pong game we use the new
features<00:04:12.049> of<00:04:12.349> DirectX<00:04:12.709> 10.1<00:04:13.430> to<00:04:13.670> implement<00:04:14.060> a

00:04:14.170 --> 00:04:14.180 
features of DirectX 10.1 to implement a

00:04:14.180 --> 00:04:16.659 
features of DirectX 10.1 to implement a
custom<00:04:14.360> edge<00:04:14.659> detect<00:04:15.140> filter<00:04:15.500> the<00:04:16.280> pics<00:04:16.489> is

00:04:16.659 --> 00:04:16.669 
custom edge detect filter the pics is

00:04:16.669 --> 00:04:18.430 
custom edge detect filter the pics is
highlighted<00:04:17.090> in<00:04:17.209> red<00:04:17.239> represent<00:04:17.840> edge<00:04:17.989> pixels

00:04:18.430 --> 00:04:18.440 
highlighted in red represent edge pixels

00:04:18.440 --> 00:04:20.890 
highlighted in red represent edge pixels
detected<00:04:18.859> by<00:04:18.979> this<00:04:19.040> filter<00:04:19.459> edge<00:04:20.299> pixels<00:04:20.780> are

00:04:20.890 --> 00:04:20.900 
detected by this filter edge pixels are

00:04:20.900 --> 00:04:22.030 
detected by this filter edge pixels are
identified<00:04:21.350> by<00:04:21.500> searching<00:04:21.859> for

00:04:22.030 --> 00:04:22.040 
identified by searching for

00:04:22.040 --> 00:04:23.800 
identified by searching for
discontinuities<00:04:22.880> in<00:04:22.910> the<00:04:23.090> multi<00:04:23.419> sampled

00:04:23.800 --> 00:04:23.810 
discontinuities in the multi sampled

00:04:23.810 --> 00:04:26.560 
discontinuities in the multi sampled
depth<00:04:24.020> buffer<00:04:25.090> anti-aliasing<00:04:26.090> is<00:04:26.180> performed

00:04:26.560 --> 00:04:26.570 
depth buffer anti-aliasing is performed

00:04:26.570 --> 00:04:28.300 
depth buffer anti-aliasing is performed
on<00:04:26.660> these<00:04:26.750> pixels<00:04:27.229> only<00:04:27.590> resulting<00:04:28.220> in

00:04:28.300 --> 00:04:28.310 
on these pixels only resulting in

00:04:28.310 --> 00:04:31.210 
on these pixels only resulting in
maximum<00:04:28.699> efficiency<00:04:29.300> the<00:04:30.010> ping-pong<00:04:31.010> balls

00:04:31.210 --> 00:04:31.220 
maximum efficiency the ping-pong balls

00:04:31.220 --> 00:04:32.409 
maximum efficiency the ping-pong balls
are<00:04:31.400> drawn<00:04:31.550> as<00:04:31.699> billboards<00:04:31.910> with<00:04:32.360> a

00:04:32.409 --> 00:04:32.419 
are drawn as billboards with a

00:04:32.419 --> 00:04:34.450 
are drawn as billboards with a
procedural<00:04:32.960> shader<00:04:33.199> that<00:04:33.440> exports<00:04:34.040> a<00:04:34.100> sample

00:04:34.450 --> 00:04:34.460 
procedural shader that exports a sample

00:04:34.460 --> 00:04:35.890 
procedural shader that exports a sample
mask<00:04:34.669> at<00:04:34.880> the<00:04:34.970> procedural<00:04:35.389> boundaries

00:04:35.890 --> 00:04:35.900 
mask at the procedural boundaries

00:04:35.900 --> 00:04:37.780 
mask at the procedural boundaries
ensuring<00:04:36.650> that<00:04:36.680> anti-aliasing<00:04:37.490> will<00:04:37.669> be

00:04:37.780 --> 00:04:37.790 
ensuring that anti-aliasing will be

00:04:37.790 --> 00:04:40.689 
ensuring that anti-aliasing will be
performed<00:04:38.210> correctly<00:04:38.660> for<00:04:38.870> the<00:04:38.900> balls<00:04:39.139> as<00:04:39.699> you

00:04:40.689 --> 00:04:40.699 
performed correctly for the balls as you

00:04:40.699 --> 00:04:43.210 
performed correctly for the balls as you
can<00:04:40.970> see<00:04:41.150> the<00:04:41.540> new<00:04:41.690> features<00:04:42.020> of<00:04:42.199> DirectX<00:04:42.530> 10.1

00:04:43.210 --> 00:04:43.220 
can see the new features of DirectX 10.1

00:04:43.220 --> 00:04:45.520 
can see the new features of DirectX 10.1
make<00:04:43.610> AMD's<00:04:44.030> spider<00:04:44.360> platform<00:04:44.930> the<00:04:45.199> smarter

00:04:45.520 --> 00:04:45.530 
make AMD's spider platform the smarter

00:04:45.530 --> 00:04:46.870 
make AMD's spider platform the smarter
choice<00:04:45.710> for<00:04:45.740> the<00:04:46.220> ultimate<00:04:46.310> visual

00:04:46.870 --> 00:04:46.880 
choice for the ultimate visual

00:04:46.880 --> 00:04:49.690 
choice for the ultimate visual
experience

