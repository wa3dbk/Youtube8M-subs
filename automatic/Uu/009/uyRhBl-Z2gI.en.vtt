WEBVTT
Kind: captions
Language: en

00:00:00.940 --> 00:00:05.170 

algorithms

00:00:05.170 --> 00:00:05.180 

00:00:05.180 --> 00:00:08.770 

what<00:00:05.960> is<00:00:06.080> an<00:00:06.259> algorithm<00:00:06.710> an<00:00:07.250> algorithm<00:00:08.240> is<00:00:08.750> a

00:00:08.770 --> 00:00:08.780 
what is an algorithm an algorithm is a

00:00:08.780 --> 00:00:11.610 
what is an algorithm an algorithm is a
set<00:00:09.139> of<00:00:09.260> basic<00:00:09.709> instructions<00:00:09.889> for<00:00:10.760> a<00:00:10.789> program

00:00:11.610 --> 00:00:11.620 
set of basic instructions for a program

00:00:11.620 --> 00:00:14.650 
set of basic instructions for a program
to<00:00:12.620> write<00:00:12.799> an<00:00:13.010> algorithm<00:00:13.730> you<00:00:13.760> must<00:00:14.180> know<00:00:14.480> the

00:00:14.650 --> 00:00:14.660 
to write an algorithm you must know the

00:00:14.660 --> 00:00:16.990 
to write an algorithm you must know the
symbols<00:00:15.139> for<00:00:15.410> addition<00:00:16.000> subtraction

00:00:16.990 --> 00:00:17.000 
symbols for addition subtraction

00:00:17.000 --> 00:00:20.230 
symbols for addition subtraction
multiplication<00:00:17.350> division<00:00:18.490> more<00:00:19.490> than<00:00:19.730> less

00:00:20.230 --> 00:00:20.240 
multiplication division more than less

00:00:20.240 --> 00:00:22.870 
multiplication division more than less
than<00:00:20.510> equal<00:00:21.200> to<00:00:21.230> more<00:00:21.710> than<00:00:21.950> or<00:00:22.070> equal<00:00:22.490> to<00:00:22.700> and

00:00:22.870 --> 00:00:22.880 
than equal to more than or equal to and

00:00:22.880 --> 00:00:26.620 
than equal to more than or equal to and
less<00:00:22.940> than<00:00:23.210> or<00:00:23.480> equal<00:00:23.690> to<00:00:25.060> furthermore<00:00:26.060> you

00:00:26.620 --> 00:00:26.630 
less than or equal to furthermore you

00:00:26.630 --> 00:00:28.510 
less than or equal to furthermore you
must<00:00:26.660> know<00:00:27.050> the<00:00:27.230> loops<00:00:27.500> and<00:00:27.770> conditions<00:00:28.310> in

00:00:28.510 --> 00:00:28.520 
must know the loops and conditions in

00:00:28.520 --> 00:00:31.180 
must know the loops and conditions in
programming<00:00:29.270> there<00:00:29.840> are<00:00:30.020> two<00:00:30.289> conditions<00:00:30.949> and

00:00:31.180 --> 00:00:31.190 
programming there are two conditions and

00:00:31.190 --> 00:00:34.209 
programming there are two conditions and
three<00:00:31.460> loops<00:00:32.020> condition<00:00:33.020> one<00:00:33.230> if<00:00:33.530> then<00:00:33.980> else

00:00:34.209 --> 00:00:34.219 
three loops condition one if then else

00:00:34.219 --> 00:00:36.939 
three loops condition one if then else
and<00:00:34.940> if<00:00:35.239> here<00:00:35.690> is<00:00:35.870> an<00:00:36.050> example<00:00:36.530> of<00:00:36.800> an

00:00:36.939 --> 00:00:36.949 
and if here is an example of an

00:00:36.949 --> 00:00:39.819 
and if here is an example of an
algorithm<00:00:37.340> using<00:00:38.239> this<00:00:38.420> condition<00:00:38.829> input

00:00:39.819 --> 00:00:39.829 
algorithm using this condition input

00:00:39.829 --> 00:00:42.370 
algorithm using this condition input
variable<00:00:40.550> called<00:00:40.970> number<00:00:41.300> if<00:00:41.720> number<00:00:41.989> is

00:00:42.370 --> 00:00:42.380 
variable called number if number is

00:00:42.380 --> 00:00:45.130 
variable called number if number is
greater<00:00:42.739> than<00:00:43.070> zero<00:00:43.370> then<00:00:43.970> display<00:00:44.510> positive

00:00:45.130 --> 00:00:45.140 
greater than zero then display positive

00:00:45.140 --> 00:00:49.030 
greater than zero then display positive
else<00:00:45.700> display<00:00:46.700> negative<00:00:47.239> and<00:00:47.450> if<00:00:48.040> condition

00:00:49.030 --> 00:00:49.040 
else display negative and if condition

00:00:49.040 --> 00:00:52.569 
else display negative and if condition
to<00:00:49.250> case<00:00:49.880> off<00:00:50.149> end<00:00:50.540> case<00:00:51.140> this<00:00:51.739> condition<00:00:52.430> is

00:00:52.569 --> 00:00:52.579 
to case off end case this condition is

00:00:52.579 --> 00:00:55.090 
to case off end case this condition is
not<00:00:52.790> used<00:00:53.180> very<00:00:53.570> often<00:00:53.840> but<00:00:54.260> you<00:00:54.469> need<00:00:54.739> to<00:00:54.950> be

00:00:55.090 --> 00:00:55.100 
not used very often but you need to be

00:00:55.100 --> 00:00:58.209 
not used very often but you need to be
aware<00:00:55.370> of<00:00:55.430> it<00:00:55.730> case<00:00:56.090> of<00:00:56.390> day<00:00:56.570> 1<00:00:57.050> equals<00:00:57.530> write

00:00:58.209 --> 00:00:58.219 
aware of it case of day 1 equals write

00:00:58.219 --> 00:01:01.270 
aware of it case of day 1 equals write
Monday<00:00:58.760> 2<00:00:59.120> equals<00:00:59.660> write<00:00:59.930> Tuesday<00:01:00.530> 3<00:01:00.829> equals

00:01:01.270 --> 00:01:01.280 
Monday 2 equals write Tuesday 3 equals

00:01:01.280 --> 00:01:03.670 
Monday 2 equals write Tuesday 3 equals
write<00:01:01.610> Wednesday<00:01:02.180> and<00:01:02.420> so<00:01:02.690> on<00:01:02.930> for<00:01:03.170> every<00:01:03.469> day

00:01:03.670 --> 00:01:03.680 
write Wednesday and so on for every day

00:01:03.680 --> 00:01:07.719 
write Wednesday and so on for every day
of<00:01:03.710> the<00:01:04.070> week<00:01:04.100> and<00:01:04.519> case<00:01:05.269> loop<00:01:05.990> 1<00:01:06.350> repeat<00:01:07.130> until

00:01:07.719 --> 00:01:07.729 
of the week and case loop 1 repeat until

00:01:07.729 --> 00:01:10.330 
of the week and case loop 1 repeat until
first<00:01:08.360> you<00:01:08.659> need<00:01:08.899> to<00:01:09.110> set<00:01:09.380> your<00:01:09.590> variables

00:01:10.330 --> 00:01:10.340 
first you need to set your variables

00:01:10.340 --> 00:01:13.899 
first you need to set your variables
total<00:01:11.090> equals<00:01:11.600> 0<00:01:11.930> count<00:01:12.650> equals<00:01:13.220> 0

00:01:13.899 --> 00:01:13.909 
total equals 0 count equals 0

00:01:13.909 --> 00:01:17.230 
total equals 0 count equals 0
repeat<00:01:14.360> input<00:01:15.110> variable<00:01:15.740> called<00:01:16.220> value<00:01:16.700> total

00:01:17.230 --> 00:01:17.240 
repeat input variable called value total

00:01:17.240 --> 00:01:20.530 
repeat input variable called value total
equals<00:01:18.020> total<00:01:18.350> plus<00:01:18.770> value<00:01:19.400> count<00:01:20.060> equals

00:01:20.530 --> 00:01:20.540 
equals total plus value count equals

00:01:20.540 --> 00:01:23.440 
equals total plus value count equals
count<00:01:20.630> plus<00:01:20.960> 1<00:01:21.560> until<00:01:22.220> count<00:01:22.610> equals<00:01:23.119> 10

00:01:23.440 --> 00:01:23.450 
count plus 1 until count equals 10

00:01:23.450 --> 00:01:26.560 
count plus 1 until count equals 10
output<00:01:24.290> total<00:01:24.680> using<00:01:25.340> this<00:01:25.580> piece<00:01:26.060> of<00:01:26.299> code<00:01:26.510> a

00:01:26.560 --> 00:01:26.570 
output total using this piece of code a

00:01:26.570 --> 00:01:29.380 
output total using this piece of code a
user<00:01:26.990> can<00:01:27.350> input<00:01:27.740> 10<00:01:28.040> numbers<00:01:28.580> and<00:01:28.850> find<00:01:29.090> their

00:01:29.380 --> 00:01:29.390 
user can input 10 numbers and find their

00:01:29.390 --> 00:01:34.060 
user can input 10 numbers and find their
total<00:01:29.750> value<00:01:30.400> loop<00:01:31.400> 2<00:01:31.700> while<00:01:32.299> do<00:01:33.140> and<00:01:33.470> while

00:01:34.060 --> 00:01:34.070 
total value loop 2 while do and while

00:01:34.070 --> 00:01:37.120 
total value loop 2 while do and while
this<00:01:34.729> loop<00:01:35.119> is<00:01:35.330> similar<00:01:35.810> to<00:01:36.049> loop<00:01:36.290> 1<00:01:36.650> but<00:01:36.979> it

00:01:37.120 --> 00:01:37.130 
this loop is similar to loop 1 but it

00:01:37.130 --> 00:01:40.090 
this loop is similar to loop 1 but it
works<00:01:37.430> in<00:01:37.729> a<00:01:37.820> different<00:01:37.970> way<00:01:38.240> total<00:01:39.229> equals<00:01:39.740> 0

00:01:40.090 --> 00:01:40.100 
works in a different way total equals 0

00:01:40.100 --> 00:01:42.280 
works in a different way total equals 0
count<00:01:41.030> equals<00:01:41.479> 0

00:01:42.280 --> 00:01:42.290 
count equals 0

00:01:42.290 --> 00:01:45.070 
count equals 0
while<00:01:42.890> count<00:01:43.220> is<00:01:43.400> less<00:01:43.640> than<00:01:43.880> or<00:01:44.030> equal<00:01:44.450> to<00:01:44.600> 10

00:01:45.070 --> 00:01:45.080 
while count is less than or equal to 10

00:01:45.080 --> 00:01:48.310 
while count is less than or equal to 10
input<00:01:45.740> value<00:01:46.189> total<00:01:47.000> equals<00:01:47.570> total<00:01:47.900> plus

00:01:48.310 --> 00:01:48.320 
input value total equals total plus

00:01:48.320 --> 00:01:51.460 
input value total equals total plus
value<00:01:48.950> count<00:01:49.610> equals<00:01:50.090> count<00:01:50.150> plus<00:01:50.509> 1<00:01:51.200> and

00:01:51.460 --> 00:01:51.470 
value count equals count plus 1 and

00:01:51.470 --> 00:01:57.789 
value count equals count plus 1 and
while<00:01:52.900> loop<00:01:53.900> 3<00:01:54.290> 4<00:01:54.829> 2<00:01:55.460> next<00:01:56.210> in<00:01:56.659> this<00:01:57.170> loop<00:01:57.590> the

00:01:57.789 --> 00:01:57.799 
while loop 3 4 2 next in this loop the

00:01:57.799 --> 00:02:00.100 
while loop 3 4 2 next in this loop the
counter<00:01:58.220> is<00:01:58.400> automatically<00:01:59.210> increase<00:01:59.810> each

00:02:00.100 --> 00:02:00.110 
counter is automatically increase each

00:02:00.110 --> 00:02:02.740 
counter is automatically increase each
time<00:02:00.530> the<00:02:00.799> loop<00:02:01.009> is<00:02:01.220> performed<00:02:01.909> for<00:02:02.390> count

00:02:02.740 --> 00:02:02.750 
time the loop is performed for count

00:02:02.750 --> 00:02:05.980 
time the loop is performed for count
equals<00:02:03.229> 1<00:02:03.500> to<00:02:04.070> 10<00:02:04.310> input<00:02:05.060> a<00:02:05.090> variable<00:02:05.780> called

00:02:05.980 --> 00:02:05.990 
equals 1 to 10 input a variable called

00:02:05.990 --> 00:02:09.009 
equals 1 to 10 input a variable called
number<00:02:06.350> total<00:02:07.189> equals<00:02:07.759> total<00:02:08.269> plus<00:02:08.509> number

00:02:09.009 --> 00:02:09.019 
number total equals total plus number

00:02:09.019 --> 00:02:12.369 
number total equals total plus number
next<00:02:09.649> count<00:02:10.299> now<00:02:11.299> that<00:02:11.540> you<00:02:11.720> know<00:02:11.930> all<00:02:11.959> the

00:02:12.369 --> 00:02:12.379 
next count now that you know all the

00:02:12.379 --> 00:02:15.069 
next count now that you know all the
symbols<00:02:12.799> conditions<00:02:13.669> and<00:02:13.909> loops<00:02:14.150> try<00:02:15.019> to

00:02:15.069 --> 00:02:15.079 
symbols conditions and loops try to

00:02:15.079 --> 00:02:17.409 
symbols conditions and loops try to
write<00:02:15.409> an<00:02:15.590> algorithm<00:02:16.309> where<00:02:16.549> the<00:02:17.090> teacher

00:02:17.409 --> 00:02:17.419 
write an algorithm where the teacher

00:02:17.419 --> 00:02:18.370 
write an algorithm where the teacher
inputs

00:02:18.370 --> 00:02:18.380 
inputs

00:02:18.380 --> 00:02:21.190 
inputs
students<00:02:18.680> score<00:02:19.070> if<00:02:19.400> the<00:02:19.880> score<00:02:20.180> is<00:02:20.210> above<00:02:20.690> 50

00:02:21.190 --> 00:02:21.200 
students score if the score is above 50

00:02:21.200 --> 00:02:23.890 
students score if the score is above 50
then<00:02:21.500> the<00:02:21.770> student<00:02:22.220> passes<00:02:22.760> outputs<00:02:23.570> whether

00:02:23.890 --> 00:02:23.900 
then the student passes outputs whether

00:02:23.900 --> 00:02:28.780 
then the student passes outputs whether
the<00:02:24.170> student<00:02:24.590> passed<00:02:24.890> or<00:02:25.190> failed<00:02:27.580> remember<00:02:28.580> to

00:02:28.780 --> 00:02:28.790 
the student passed or failed remember to

00:02:28.790 --> 00:02:34.120 
the student passed or failed remember to
always<00:02:28.970> set<00:02:29.510> your<00:02:29.750> variables<00:02:30.530> first

00:02:34.120 --> 00:02:34.130 

00:02:34.130 --> 00:02:37.960 

thank<00:02:34.970> you<00:02:35.180> for<00:02:35.450> watching

