WEBVTT
Kind: captions
Language: en

00:00:03.290 --> 00:00:06.410 

in<00:00:04.290> today's<00:00:04.920> video<00:00:05.130> we<00:00:05.580> will<00:00:05.670> be<00:00:05.729> providing<00:00:06.000> an

00:00:06.410 --> 00:00:06.420 
in today's video we will be providing an

00:00:06.420 --> 00:00:07.670 
in today's video we will be providing an
early<00:00:06.720> glimpse<00:00:06.839> of<00:00:07.169> the<00:00:07.319> z<00:00:07.470> labs

00:00:07.670 --> 00:00:07.680 
early glimpse of the z labs

00:00:07.680 --> 00:00:10.369 
early glimpse of the z labs
implementation<00:00:08.520> of<00:00:08.700> opencl<00:00:09.420> running<00:00:10.139> on<00:00:10.260> our

00:00:10.369 --> 00:00:10.379 
implementation of opencl running on our

00:00:10.379 --> 00:00:12.830 
implementation of opencl running on our
CMS<00:00:10.860> media<00:00:11.309> rich<00:00:11.490> applications<00:00:11.840> processors

00:00:12.830 --> 00:00:12.840 
CMS media rich applications processors

00:00:12.840 --> 00:00:15.680 
CMS media rich applications processors
the<00:00:13.769> unveiling<00:00:14.130> of<00:00:14.400> opencl<00:00:15.000> on<00:00:15.150> the<00:00:15.299> CMS

00:00:15.680 --> 00:00:15.690 
the unveiling of opencl on the CMS

00:00:15.690 --> 00:00:17.690 
the unveiling of opencl on the CMS
processes<00:00:16.290> highlights<00:00:16.800> how<00:00:16.950> developers<00:00:17.490> can

00:00:17.690 --> 00:00:17.700 
processes highlights how developers can

00:00:17.700 --> 00:00:19.939 
processes highlights how developers can
now<00:00:17.820> write<00:00:18.060> efficient<00:00:18.630> portable<00:00:19.199> code<00:00:19.439> that

00:00:19.939 --> 00:00:19.949 
now write efficient portable code that

00:00:19.949 --> 00:00:21.769 
now write efficient portable code that
liberties<00:00:20.400> the<00:00:20.520> performance<00:00:21.090> flexibility

00:00:21.769 --> 00:00:21.779 
liberties the performance flexibility

00:00:21.779 --> 00:00:23.870 
liberties the performance flexibility
and<00:00:22.019> floating-point<00:00:22.500> acceleration<00:00:23.400> of<00:00:23.550> the

00:00:23.870 --> 00:00:23.880 
and floating-point acceleration of the

00:00:23.880 --> 00:00:26.029 
and floating-point acceleration of the
stem-cell<00:00:24.269> computing<00:00:24.960> array<00:00:25.199> that<00:00:25.560> lies<00:00:25.800> at

00:00:26.029 --> 00:00:26.039 
stem-cell computing array that lies at

00:00:26.039 --> 00:00:29.570 
stem-cell computing array that lies at
the<00:00:26.070> heart<00:00:26.160> of<00:00:26.519> the<00:00:26.580> CMS<00:00:27.029> architecture<00:00:28.580> for

00:00:29.570 --> 00:00:29.580 
the heart of the CMS architecture for

00:00:29.580 --> 00:00:31.040 
the heart of the CMS architecture for
more<00:00:29.730> information<00:00:29.939> on<00:00:30.449> the<00:00:30.599> stem<00:00:30.810> cell

00:00:31.040 --> 00:00:31.050 
more information on the stem cell

00:00:31.050 --> 00:00:33.320 
more information on the stem cell
computing<00:00:31.470> array<00:00:31.740> and<00:00:31.980> the<00:00:32.309> Chronos<00:00:32.699> opencl

00:00:33.320 --> 00:00:33.330 
computing array and the Chronos opencl

00:00:33.330 --> 00:00:36.170 
computing array and the Chronos opencl
api<00:00:33.750> please<00:00:34.500> visit<00:00:34.680> our<00:00:34.920> website<00:00:35.370> as<00:00:35.580> z<00:00:35.970> labs

00:00:36.170 --> 00:00:36.180 
api please visit our website as z labs

00:00:36.180 --> 00:00:39.380 
api please visit our website as z labs
com<00:00:36.629> forward<00:00:37.199> slash<00:00:37.440> opencl<00:00:38.220> but<00:00:39.030> let's<00:00:39.180> jump

00:00:39.380 --> 00:00:39.390 
com forward slash opencl but let's jump

00:00:39.390 --> 00:00:40.850 
com forward slash opencl but let's jump
into<00:00:39.570> the<00:00:39.720> demos<00:00:40.049> to<00:00:40.260> get<00:00:40.409> at<00:00:40.530> an<00:00:40.620> early

00:00:40.850 --> 00:00:40.860 
into the demos to get at an early

00:00:40.860 --> 00:00:43.700 
into the demos to get at an early
glimpse<00:00:40.949> at<00:00:41.309> what<00:00:41.370> can<00:00:41.610> be<00:00:41.670> done<00:00:42.409> in<00:00:43.409> all<00:00:43.589> the

00:00:43.700 --> 00:00:43.710 
glimpse at what can be done in all the

00:00:43.710 --> 00:00:45.619 
glimpse at what can be done in all the
demos<00:00:43.890> you<00:00:44.159> will<00:00:44.280> see<00:00:44.460> opencl<00:00:45.239> is<00:00:45.360> running

00:00:45.619 --> 00:00:45.629 
demos you will see opencl is running

00:00:45.629 --> 00:00:47.509 
demos you will see opencl is running
exclusively<00:00:46.290> on<00:00:46.470> the<00:00:46.559> simdi<00:00:46.890> array<00:00:47.220> of<00:00:47.250> the

00:00:47.509 --> 00:00:47.519 
exclusively on the simdi array of the

00:00:47.519 --> 00:00:49.939 
exclusively on the simdi array of the
CMS<00:00:47.909> processes<00:00:48.449> and<00:00:48.600> taking<00:00:49.199> an<00:00:49.260> advantage<00:00:49.799> of

00:00:49.939 --> 00:00:49.949 
CMS processes and taking an advantage of

00:00:49.949 --> 00:00:51.710 
CMS processes and taking an advantage of
the<00:00:50.040> floating<00:00:50.430> point<00:00:50.699> processing<00:00:51.269> elements

00:00:51.710 --> 00:00:51.720 
the floating point processing elements

00:00:51.720 --> 00:00:54.530 
the floating point processing elements
which<00:00:52.559> in<00:00:52.680> the<00:00:52.799> case<00:00:52.979> of<00:00:53.040> the<00:00:53.280> CMS<00:00:53.790> 08<00:00:54.180> being

00:00:54.530 --> 00:00:54.540 
which in the case of the CMS 08 being

00:00:54.540 --> 00:00:57.670 
which in the case of the CMS 08 being
showcased<00:00:54.780> has<00:00:55.619> 64<00:00:56.400> processing<00:00:57.030> elements<00:00:57.420> in

00:00:57.670 --> 00:00:57.680 
showcased has 64 processing elements in

00:00:57.680 --> 00:01:01.160 
showcased has 64 processing elements in
this<00:00:58.680> first<00:00:58.979> demo<00:00:59.369> we<00:00:59.580> see<00:00:59.729> opencl<00:01:00.360> being<00:01:00.900> used

00:01:01.160 --> 00:01:01.170 
this first demo we see opencl being used

00:01:01.170 --> 00:01:02.899 
this first demo we see opencl being used
to<00:01:01.320> apply<00:01:01.530> various<00:01:02.010> image<00:01:02.369> processing

00:01:02.899 --> 00:01:02.909 
to apply various image processing

00:01:02.909 --> 00:01:05.240 
to apply various image processing
filters<00:01:03.330> to<00:01:03.540> jpeg<00:01:03.960> image<00:01:04.290> files<00:01:04.559> that<00:01:05.129> are

00:01:05.240 --> 00:01:05.250 
filters to jpeg image files that are

00:01:05.250 --> 00:01:07.550 
filters to jpeg image files that are
being<00:01:05.400> output<00:01:05.909> from<00:01:06.030> the<00:01:06.180> CMS<00:01:06.540> 08<00:01:06.930> /<00:01:07.290> is

00:01:07.550 --> 00:01:07.560 
being output from the CMS 08 / is

00:01:07.560 --> 00:01:11.080 
being output from the CMS 08 / is
integrated<00:01:08.250> hdmi<00:01:08.850> interface<00:01:09.030> to<00:01:09.750> an<00:01:09.840> HDTV

00:01:11.080 --> 00:01:11.090 
integrated hdmi interface to an HDTV

00:01:11.090 --> 00:01:13.820 
integrated hdmi interface to an HDTV
first<00:01:12.090> we<00:01:12.330> see<00:01:12.510> the<00:01:12.630> original<00:01:12.810> JPEG<00:01:13.500> image

00:01:13.820 --> 00:01:13.830 
first we see the original JPEG image

00:01:13.830 --> 00:01:15.560 
first we see the original JPEG image
decoded<00:01:14.430> and<00:01:14.610> displayed<00:01:14.970> using<00:01:15.210> our<00:01:15.450> standard

00:01:15.560 --> 00:01:15.570 
decoded and displayed using our standard

00:01:15.570 --> 00:01:17.960 
decoded and displayed using our standard
imaging<00:01:16.350> the<00:01:16.380> library<00:01:16.860> we<00:01:17.550> then<00:01:17.730> take<00:01:17.940> that

00:01:17.960 --> 00:01:17.970 
imaging the library we then take that

00:01:17.970 --> 00:01:20.510 
imaging the library we then take that
same<00:01:18.300> image<00:01:18.690> and<00:01:18.900> apply<00:01:19.230> for<00:01:19.520> simultaneous

00:01:20.510 --> 00:01:20.520 
same image and apply for simultaneous

00:01:20.520 --> 00:01:22.970 
same image and apply for simultaneous
filters<00:01:20.970> really<00:01:21.450> an<00:01:21.510> open<00:01:21.780> CL<00:01:22.110> where<00:01:22.830> each

00:01:22.970 --> 00:01:22.980 
filters really an open CL where each

00:01:22.980 --> 00:01:25.340 
filters really an open CL where each
pixel<00:01:23.490> is<00:01:23.580> treated<00:01:23.970> as<00:01:24.120> an<00:01:24.270> open<00:01:24.570> seal<00:01:24.780> work

00:01:25.340 --> 00:01:25.350 
pixel is treated as an open seal work

00:01:25.350 --> 00:01:28.220 
pixel is treated as an open seal work
item<00:01:25.860> at<00:01:26.040> the<00:01:26.820> top<00:01:26.910> left<00:01:27.300> we<00:01:27.510> see<00:01:27.540> a<00:01:27.690> greyscale

00:01:28.220 --> 00:01:28.230 
item at the top left we see a greyscale

00:01:28.230 --> 00:01:30.080 
item at the top left we see a greyscale
filter<00:01:28.620> applied<00:01:28.710> at<00:01:29.190> the<00:01:29.250> top<00:01:29.610> right<00:01:29.820> is<00:01:29.880> a

00:01:30.080 --> 00:01:30.090 
filter applied at the top right is a

00:01:30.090 --> 00:01:32.060 
filter applied at the top right is a
sepia<00:01:30.540> filter<00:01:30.750> and<00:01:31.140> the<00:01:31.440> bottom<00:01:31.710> left<00:01:31.950> and

00:01:32.060 --> 00:01:32.070 
sepia filter and the bottom left and

00:01:32.070 --> 00:01:34.040 
sepia filter and the bottom left and
edge<00:01:32.310> detection<00:01:32.760> and<00:01:33.120> emboss<00:01:33.360> filter<00:01:33.840> and

00:01:34.040 --> 00:01:34.050 
edge detection and emboss filter and

00:01:34.050 --> 00:01:36.200 
edge detection and emboss filter and
finally<00:01:34.920> bottom<00:01:35.400> right<00:01:35.610> our<00:01:35.790> painters

00:01:36.200 --> 00:01:36.210 
finally bottom right our painters

00:01:36.210 --> 00:01:38.270 
finally bottom right our painters
algorithm<00:01:36.540> where<00:01:37.020> each<00:01:37.170> destination<00:01:37.500> pixel

00:01:38.270 --> 00:01:38.280 
algorithm where each destination pixel

00:01:38.280 --> 00:01:40.370 
algorithm where each destination pixel
color<00:01:38.490> is<00:01:38.790> created<00:01:39.450> by<00:01:39.600> analyzing<00:01:40.230> its

00:01:40.370 --> 00:01:40.380 
color is created by analyzing its

00:01:40.380 --> 00:01:42.020 
color is created by analyzing its
neighbors<00:01:40.800> within<00:01:41.010> a<00:01:41.190> seven<00:01:41.490> times<00:01:41.700> seven

00:01:42.020 --> 00:01:42.030 
neighbors within a seven times seven

00:01:42.030 --> 00:01:44.270 
neighbors within a seven times seven
grid<00:01:42.270> from<00:01:42.480> the<00:01:42.570> source<00:01:42.810> image<00:01:43.170> these<00:01:44.010> color

00:01:44.270 --> 00:01:44.280 
grid from the source image these color

00:01:44.280 --> 00:01:46.100 
grid from the source image these color
values<00:01:44.640> are<00:01:44.760> then<00:01:44.909> quantized<00:01:45.420> encountered

00:01:46.100 --> 00:01:46.110 
values are then quantized encountered

00:01:46.110 --> 00:01:47.570 
values are then quantized encountered
with<00:01:46.290> the<00:01:46.350> most<00:01:46.560> frequently<00:01:47.070> used<00:01:47.130> color

00:01:47.570 --> 00:01:47.580 
with the most frequently used color

00:01:47.580 --> 00:01:50.080 
with the most frequently used color
being<00:01:47.970> used<00:01:48.180> for<00:01:48.330> the<00:01:48.420> final<00:01:48.780> output<00:01:48.960> color<00:01:49.409> in

00:01:50.080 --> 00:01:50.090 
being used for the final output color in

00:01:50.090 --> 00:01:53.240 
being used for the final output color in
the<00:01:51.090> second<00:01:51.450> demo<00:01:51.690> we<00:01:51.960> apply<00:01:52.229> the<00:01:52.290> same<00:01:52.590> opencl

00:01:53.240 --> 00:01:53.250 
the second demo we apply the same opencl

00:01:53.250 --> 00:01:55.190 
the second demo we apply the same opencl
image<00:01:53.580> processing<00:01:54.030> algorithms<00:01:54.570> running<00:01:55.110> on

00:01:55.190 --> 00:01:55.200 
image processing algorithms running on

00:01:55.200 --> 00:01:57.020 
image processing algorithms running on
the<00:01:55.350> array<00:01:55.620> but<00:01:56.130> this<00:01:56.310> time<00:01:56.580> we<00:01:56.760> are<00:01:56.850> also

00:01:57.020 --> 00:01:57.030 
the array but this time we are also

00:01:57.030 --> 00:01:59.360 
the array but this time we are also
using<00:01:57.240> the<00:01:57.600> array<00:01:57.870> to<00:01:57.930> decode<00:01:58.560> the<00:01:58.680> h.264

00:01:59.360 --> 00:01:59.370 
using the array to decode the h.264

00:01:59.370 --> 00:02:01.610 
using the array to decode the h.264
high-definition<00:02:00.360> video<00:02:00.600> and<00:02:00.870> using<00:02:01.530> the

00:02:01.610 --> 00:02:01.620 
high-definition video and using the

00:02:01.620 --> 00:02:03.800 
high-definition video and using the
video<00:02:01.860> frame<00:02:02.310> data<00:02:02.580> as<00:02:02.909> the<00:02:03.270> source<00:02:03.510> for<00:02:03.720> the

00:02:03.800 --> 00:02:03.810 
video frame data as the source for the

00:02:03.810 --> 00:02:06.289 
video frame data as the source for the
filter<00:02:04.280> in<00:02:05.280> the<00:02:05.400> final<00:02:05.790> demo<00:02:06.060> we've

00:02:06.289 --> 00:02:06.299 
filter in the final demo we've

00:02:06.299 --> 00:02:08.449 
filter in the final demo we've
implemented<00:02:06.720> the<00:02:07.049> sphere<00:02:07.350> ray<00:02:07.680> tracer<00:02:07.979> which

00:02:08.449 --> 00:02:08.459 
implemented the sphere ray tracer which

00:02:08.459 --> 00:02:10.130 
implemented the sphere ray tracer which
is<00:02:08.610> a<00:02:08.640> very<00:02:08.849> floating-point<00:02:09.420> intensive

00:02:10.130 --> 00:02:10.140 
is a very floating-point intensive

00:02:10.140 --> 00:02:12.230 
is a very floating-point intensive
algorithm<00:02:10.679> that<00:02:10.830> supports<00:02:11.459> soft<00:02:11.700> shadows<00:02:12.060> and

00:02:12.230 --> 00:02:12.240 
algorithm that supports soft shadows and

00:02:12.240 --> 00:02:14.840 
algorithm that supports soft shadows and
up<00:02:12.390> to<00:02:12.540> thirty<00:02:12.780> bounces<00:02:13.350> each<00:02:14.220> processing

00:02:14.840 --> 00:02:14.850 
up to thirty bounces each processing

00:02:14.850 --> 00:02:15.430 
up to thirty bounces each processing
element

00:02:15.430 --> 00:02:15.440 
element

00:02:15.440 --> 00:02:17.980 
element
the<00:02:15.560> array<00:02:15.860> was<00:02:16.340> on<00:02:16.520> a<00:02:16.550> single<00:02:16.970> pixel<00:02:17.240> until

00:02:17.980 --> 00:02:17.990 
the array was on a single pixel until

00:02:17.990 --> 00:02:20.650 
the array was on a single pixel until
all<00:02:18.230> the<00:02:18.380> work<00:02:18.560> is<00:02:18.710> done<00:02:18.910> one<00:02:19.910> ray<00:02:20.120> is<00:02:20.330> cast

00:02:20.650 --> 00:02:20.660 
all the work is done one ray is cast

00:02:20.660 --> 00:02:22.330 
all the work is done one ray is cast
into<00:02:20.930> the<00:02:21.140> scene<00:02:21.380> and<00:02:21.560> its<00:02:21.950> point<00:02:22.220> of

00:02:22.330 --> 00:02:22.340 
into the scene and its point of

00:02:22.340 --> 00:02:24.820 
into the scene and its point of
intersection<00:02:22.850> is<00:02:23.180> detected<00:02:23.780> the<00:02:24.350> reflected

00:02:24.820 --> 00:02:24.830 
intersection is detected the reflected

00:02:24.830 --> 00:02:26.500 
intersection is detected the reflected
ray<00:02:25.010> at<00:02:25.160> this<00:02:25.310> intersection<00:02:25.610> is<00:02:26.060> then

00:02:26.500 --> 00:02:26.510 
ray at this intersection is then

00:02:26.510 --> 00:02:28.420 
ray at this intersection is then
calculated<00:02:26.930> and<00:02:27.320> cast<00:02:27.530> back<00:02:27.740> into<00:02:27.770> the<00:02:28.220> scene

00:02:28.420 --> 00:02:28.430 
calculated and cast back into the scene

00:02:28.430 --> 00:02:30.220 
calculated and cast back into the scene
until<00:02:28.910> the<00:02:29.000> ray<00:02:29.210> hits<00:02:29.480> the<00:02:29.690> floor<00:02:29.930> or<00:02:30.170> the

00:02:30.220 --> 00:02:30.230 
until the ray hits the floor or the

00:02:30.230 --> 00:02:32.770 
until the ray hits the floor or the
background<00:02:31.330> initially<00:02:32.330> we<00:02:32.450> see<00:02:32.630> this

00:02:32.770 --> 00:02:32.780 
background initially we see this

00:02:32.780 --> 00:02:34.390 
background initially we see this
raytracer<00:02:33.050> run<00:02:33.620> on<00:02:33.740> the<00:02:33.860> array<00:02:34.100> as<00:02:34.370> a

00:02:34.390 --> 00:02:34.400 
raytracer run on the array as a

00:02:34.400 --> 00:02:37.720 
raytracer run on the array as a
standalone<00:02:34.880> opencl<00:02:35.720> ray<00:02:35.900> tracer<00:02:36.460> we<00:02:37.460> will<00:02:37.580> now

00:02:37.720 --> 00:02:37.730 
standalone opencl ray tracer we will now

00:02:37.730 --> 00:02:39.520 
standalone opencl ray tracer we will now
see<00:02:37.790> on<00:02:38.030> the<00:02:38.240> right<00:02:38.450> of<00:02:38.480> the<00:02:38.660> display<00:02:39.080> the<00:02:39.320> same

00:02:39.520 --> 00:02:39.530 
see on the right of the display the same

00:02:39.530 --> 00:02:41.740 
see on the right of the display the same
opencl<00:02:40.190> programmers<00:02:40.790> before<00:02:41.150> running<00:02:41.450> on<00:02:41.630> the

00:02:41.740 --> 00:02:41.750 
opencl programmers before running on the

00:02:41.750 --> 00:02:43.960 
opencl programmers before running on the
array<00:02:42.020> dealing<00:02:42.680> with<00:02:42.800> only<00:02:42.920> half<00:02:43.220> a<00:02:43.400> scene<00:02:43.700> or

00:02:43.960 --> 00:02:43.970 
array dealing with only half a scene or

00:02:43.970 --> 00:02:46.330 
array dealing with only half a scene or
on<00:02:44.420> the<00:02:44.570> left<00:02:44.810> AC<00:02:45.170> implementation<00:02:46.160> of<00:02:46.250> the

00:02:46.330 --> 00:02:46.340 
on the left AC implementation of the

00:02:46.340 --> 00:02:48.310 
on the left AC implementation of the
algorithm<00:02:46.580> can<00:02:47.180> part<00:02:47.450> for<00:02:47.690> the<00:02:47.780> arm<00:02:47.990> with

00:02:48.310 --> 00:02:48.320 
algorithm can part for the arm with

00:02:48.320 --> 00:02:50.860 
algorithm can part for the arm with
hardware<00:02:48.740> floating-point<00:02:49.750> highlighting<00:02:50.750> the

00:02:50.860 --> 00:02:50.870 
hardware floating-point highlighting the

00:02:50.870 --> 00:02:52.720 
hardware floating-point highlighting the
open<00:02:51.200> seal<00:02:51.410> on<00:02:51.590> the<00:02:51.680> array<00:02:51.920> can<00:02:52.160> show<00:02:52.370> an<00:02:52.520> aid

00:02:52.720 --> 00:02:52.730 
open seal on the array can show an aid

00:02:52.730 --> 00:02:55.360 
open seal on the array can show an aid
to<00:02:52.760> time<00:02:53.120> speed<00:02:53.510> up<00:02:53.740> that<00:02:54.740> completes<00:02:55.190> our

00:02:55.360 --> 00:02:55.370 
to time speed up that completes our

00:02:55.370 --> 00:02:57.510 
to time speed up that completes our
glimpse<00:02:55.700> of<00:02:55.820> the<00:02:56.090> open<00:02:56.420> serial<00:02:56.810> technology

00:02:57.510 --> 00:02:57.520 
glimpse of the open serial technology

00:02:57.520 --> 00:02:59.800 
glimpse of the open serial technology
see<00:02:58.520> labs<00:02:58.760> is<00:02:58.970> currently<00:02:59.330> inviting

00:02:59.800 --> 00:02:59.810 
see labs is currently inviting

00:02:59.810 --> 00:03:01.660 
see labs is currently inviting
developers<00:03:00.260> with<00:03:00.470> innovative<00:03:00.920> ideas<00:03:01.430> for

00:03:01.660 --> 00:03:01.670 
developers with innovative ideas for

00:03:01.670 --> 00:03:04.450 
developers with innovative ideas for
using<00:03:01.850> opencl<00:03:02.660> on<00:03:02.870> consumer<00:03:03.620> class<00:03:03.800> handheld

00:03:04.450 --> 00:03:04.460 
using opencl on consumer class handheld

00:03:04.460 --> 00:03:06.880 
using opencl on consumer class handheld
and<00:03:04.550> connected<00:03:05.060> platforms<00:03:05.630> to<00:03:05.750> join<00:03:06.410> the<00:03:06.680> Z

00:03:06.880 --> 00:03:06.890 
and connected platforms to join the Z

00:03:06.890 --> 00:03:09.090 
and connected platforms to join the Z
labs<00:03:07.130> open<00:03:07.400> CL<00:03:07.760> early<00:03:08.060> access<00:03:08.210> program

00:03:09.090 --> 00:03:09.100 
labs open CL early access program

00:03:09.100 --> 00:03:11.680 
labs open CL early access program
selected<00:03:10.100> partners<00:03:10.460> will<00:03:10.940> be<00:03:11.060> provided<00:03:11.570> with

00:03:11.680 --> 00:03:11.690 
selected partners will be provided with

00:03:11.690 --> 00:03:14.260 
selected partners will be provided with
an<00:03:11.810> early<00:03:12.140> release<00:03:12.260> of<00:03:12.620> the<00:03:12.800> opencl<00:03:13.280> sdk<00:03:14.060> for

00:03:14.260 --> 00:03:14.270 
an early release of the opencl sdk for

00:03:14.270 --> 00:03:17.950 
an early release of the opencl sdk for
zms<00:03:14.870> processes<00:03:15.440> to<00:03:16.430> apply<00:03:16.790> please<00:03:17.450> visit<00:03:17.690> us

00:03:17.950 --> 00:03:17.960 
zms processes to apply please visit us

00:03:17.960 --> 00:03:22.660 
zms processes to apply please visit us
at<00:03:18.670> WWF<00:03:19.670> com<00:03:20.120> Ford's<00:03:20.750> lat<00:03:20.959> opencl<00:03:21.739> thank<00:03:22.550> you

00:03:22.660 --> 00:03:22.670 
at WWF com Ford's lat opencl thank you

00:03:22.670 --> 00:03:24.940 
at WWF com Ford's lat opencl thank you
for<00:03:22.790> watching

