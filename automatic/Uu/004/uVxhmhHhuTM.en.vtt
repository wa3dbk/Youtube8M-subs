WEBVTT
Kind: captions
Language: en

00:00:09.210 --> 00:00:13.610 

you

00:00:13.610 --> 00:00:13.620 

00:00:13.620 --> 00:00:16.140 

get<00:00:14.620> away<00:00:14.740> from<00:00:14.860> that<00:00:15.070> compiler<00:00:15.670> we're<00:00:16.029> not

00:00:16.140 --> 00:00:16.150 
get away from that compiler we're not

00:00:16.150 --> 00:00:18.240 
get away from that compiler we're not
done<00:00:16.390> yet<00:00:16.470> we<00:00:17.470> haven't<00:00:17.680> covered<00:00:17.800> everything

00:00:18.240 --> 00:00:18.250 
done yet we haven't covered everything

00:00:18.250 --> 00:00:21.269 
done yet we haven't covered everything
we<00:00:18.550> need<00:00:18.789> for<00:00:19.000> making<00:00:19.330> a<00:00:19.390> game<00:00:20.009> even<00:00:21.009> though<00:00:21.130> we

00:00:21.269 --> 00:00:21.279 
we need for making a game even though we

00:00:21.279 --> 00:00:23.400 
we need for making a game even though we
now<00:00:21.430> know<00:00:21.669> how<00:00:21.820> to<00:00:21.849> use<00:00:21.939> graphics<00:00:22.509> sound<00:00:22.960> input

00:00:23.400 --> 00:00:23.410 
now know how to use graphics sound input

00:00:23.410 --> 00:00:25.890 
now know how to use graphics sound input
in<00:00:23.829> text<00:00:24.279> we<00:00:24.640> also<00:00:24.789> need<00:00:25.090> to<00:00:25.119> regulate<00:00:25.450> frames

00:00:25.890 --> 00:00:25.900 
in text we also need to regulate frames

00:00:25.900 --> 00:00:29.220 
in text we also need to regulate frames
per<00:00:26.140> second<00:00:26.529> why<00:00:27.449> have<00:00:28.449> you<00:00:28.630> ever<00:00:28.750> popped<00:00:29.020> in

00:00:29.220 --> 00:00:29.230 
per second why have you ever popped in

00:00:29.230 --> 00:00:31.499 
per second why have you ever popped in
an<00:00:29.320> old<00:00:29.470> pc<00:00:29.890> game<00:00:30.099> only<00:00:30.820> to<00:00:30.939> find<00:00:31.119> that<00:00:31.269> it<00:00:31.420> runs

00:00:31.499 --> 00:00:31.509 
an old pc game only to find that it runs

00:00:31.509 --> 00:00:34.740 
an old pc game only to find that it runs
way<00:00:31.750> too<00:00:31.810> fast<00:00:32.610> sonic<00:00:33.610> 3<00:00:33.760> &amp;<00:00:33.820> knuckles<00:00:33.910> for<00:00:34.360> PC

00:00:34.740 --> 00:00:34.750 
way too fast sonic 3 &amp; knuckles for PC

00:00:34.750 --> 00:00:36.720 
way too fast sonic 3 &amp; knuckles for PC
and<00:00:35.019> I<00:00:35.379> think<00:00:35.620> the<00:00:35.739> original<00:00:36.070> Duke<00:00:36.280> Nukem<00:00:36.460> do

00:00:36.720 --> 00:00:36.730 
and I think the original Duke Nukem do

00:00:36.730 --> 00:00:39.869 
and I think the original Duke Nukem do
that<00:00:36.879> for<00:00:37.089> me<00:00:37.470> we<00:00:38.470> need<00:00:38.650> to<00:00:38.769> regulate<00:00:39.070> the<00:00:39.430> FPS

00:00:39.869 --> 00:00:39.879 
that for me we need to regulate the FPS

00:00:39.879 --> 00:00:41.670 
that for me we need to regulate the FPS
using<00:00:40.210> a<00:00:40.269> timer<00:00:40.510> so<00:00:40.930> that<00:00:41.080> it<00:00:41.170> won't<00:00:41.290> run<00:00:41.559> at

00:00:41.670 --> 00:00:41.680 
using a timer so that it won't run at

00:00:41.680 --> 00:00:43.079 
using a timer so that it won't run at
different<00:00:41.800> speeds<00:00:42.250> on<00:00:42.489> different<00:00:42.820> grades<00:00:42.970> of

00:00:43.079 --> 00:00:43.089 
different speeds on different grades of

00:00:43.089 --> 00:00:45.869 
different speeds on different grades of
computers<00:00:43.600> unless<00:00:44.559> you<00:00:45.040> just<00:00:45.250> want<00:00:45.489> to<00:00:45.549> spite

00:00:45.869 --> 00:00:45.879 
computers unless you just want to spite

00:00:45.879 --> 00:00:47.910 
computers unless you just want to spite
people<00:00:46.239> with<00:00:46.360> better<00:00:46.510> PCs<00:00:47.049> than<00:00:47.290> you<00:00:47.470> and<00:00:47.650> make

00:00:47.910 --> 00:00:47.920 
people with better PCs than you and make

00:00:47.920 --> 00:00:49.530 
people with better PCs than you and make
it<00:00:48.070> harder<00:00:48.400> for<00:00:48.430> them<00:00:48.670> to<00:00:48.729> play<00:00:48.909> because<00:00:49.239> their

00:00:49.530 --> 00:00:49.540 
it harder for them to play because their

00:00:49.540 --> 00:00:56.039 
it harder for them to play because their
game<00:00:49.750> will<00:00:49.989> run<00:00:50.199> too<00:00:50.379> fast<00:00:54.420> the<00:00:55.420> Allegro<00:00:55.809> code

00:00:56.039 --> 00:00:56.049 
game will run too fast the Allegro code

00:00:56.049 --> 00:00:58.560 
game will run too fast the Allegro code
is<00:00:56.229> pretty<00:00:56.470> simple<00:00:56.890> this<00:00:57.610> code<00:00:57.850> is<00:00:58.030> basically

00:00:58.560 --> 00:00:58.570 
is pretty simple this code is basically

00:00:58.570 --> 00:01:00.240 
is pretty simple this code is basically
a<00:00:58.600> modified<00:00:59.110> version<00:00:59.500> of<00:00:59.589> the<00:00:59.650> loom<00:00:59.949> soft

00:01:00.240 --> 00:01:00.250 
a modified version of the loom soft

00:01:00.250 --> 00:01:03.329 
a modified version of the loom soft
tutorials<00:01:00.820> timer<00:01:01.089> function<00:01:01.890> first<00:01:02.890> create<00:01:03.309> a

00:01:03.329 --> 00:01:03.339 
tutorials timer function first create a

00:01:03.339 --> 00:01:06.260 
tutorials timer function first create a
volatile<00:01:03.850> long<00:01:04.210> name<00:01:04.629> counter<00:01:05.500> and

00:01:06.260 --> 00:01:06.270 
volatile long name counter and

00:01:06.270 --> 00:01:08.670 
volatile long name counter and
afterwards<00:01:07.270> create<00:01:07.630> a<00:01:07.689> small<00:01:07.960> function<00:01:08.500> that

00:01:08.670 --> 00:01:08.680 
afterwards create a small function that

00:01:08.680 --> 00:01:12.390 
afterwards create a small function that
increments<00:01:09.490> the<00:01:09.520> number<00:01:09.909> in<00:01:10.740> maine<00:01:11.740> after<00:01:12.310> you

00:01:12.390 --> 00:01:12.400 
increments the number in maine after you

00:01:12.400 --> 00:01:13.910 
increments the number in maine after you
initialize<00:01:12.850> everything<00:01:13.330> for<00:01:13.479> Allegro

00:01:13.910 --> 00:01:13.920 
initialize everything for Allegro

00:01:13.920 --> 00:01:15.960 
initialize everything for Allegro
immediately<00:01:14.920> use<00:01:15.220> the<00:01:15.490> lock<00:01:15.700> variable

00:01:15.960 --> 00:01:15.970 
immediately use the lock variable

00:01:15.970 --> 00:01:18.960 
immediately use the lock variable
function<00:01:16.689> the<00:01:17.500> lock<00:01:17.710> function<00:01:18.010> function<00:01:18.550> and

00:01:18.960 --> 00:01:18.970 
function the lock function function and

00:01:18.970 --> 00:01:22.410 
function the lock function function and
the<00:01:19.690> install<00:01:20.050> int<00:01:20.350> X<00:01:20.620> function<00:01:21.210> these<00:01:22.210> will

00:01:22.410 --> 00:01:22.420 
the install int X function these will

00:01:22.420 --> 00:01:24.030 
the install int X function these will
keep<00:01:22.600> these<00:01:22.840> updating<00:01:23.380> at<00:01:23.470> an<00:01:23.590> even<00:01:23.740> rate

00:01:24.030 --> 00:01:24.040 
keep these updating at an even rate

00:01:24.040 --> 00:01:27.780 
keep these updating at an even rate
which<00:01:24.790> is<00:01:24.970> based<00:01:25.210> on<00:01:25.480> the<00:01:25.660> system<00:01:26.050> clock<00:01:26.790> so

00:01:27.780 --> 00:01:27.790 
which is based on the system clock so

00:01:27.790 --> 00:01:29.700 
which is based on the system clock so
now<00:01:27.970> we'll<00:01:28.270> add<00:01:28.450> another<00:01:28.870> while<00:01:29.170> loop<00:01:29.440> it's

00:01:29.700 --> 00:01:29.710 
now we'll add another while loop it's

00:01:29.710 --> 00:01:32.010 
now we'll add another while loop it's
out<00:01:29.890> of<00:01:29.920> the<00:01:30.130> loop<00:01:30.280> we<00:01:30.430> already<00:01:30.700> have<00:01:31.020> the

00:01:32.010 --> 00:01:32.020 
out of the loop we already have the

00:01:32.020 --> 00:01:33.660 
out of the loop we already have the
first<00:01:32.230> loop<00:01:32.530> is<00:01:32.710> checking<00:01:33.010> if<00:01:33.220> the<00:01:33.340> game<00:01:33.520> is

00:01:33.660 --> 00:01:33.670 
first loop is checking if the game is

00:01:33.670 --> 00:01:35.399 
first loop is checking if the game is
done<00:01:33.850> like<00:01:34.330> if<00:01:34.600> the<00:01:34.870> quick<00:01:35.080> key<00:01:35.290> has<00:01:35.380> been

00:01:35.399 --> 00:01:35.409 
done like if the quick key has been

00:01:35.409 --> 00:01:37.590 
done like if the quick key has been
pressed<00:01:35.590> and<00:01:36.130> the<00:01:36.820> second<00:01:37.150> loop<00:01:37.270> is<00:01:37.450> to

00:01:37.590 --> 00:01:37.600 
pressed and the second loop is to

00:01:37.600 --> 00:01:40.080 
pressed and the second loop is to
regulate<00:01:37.810> frames<00:01:38.260> per<00:01:38.530> second<00:01:38.920> now<00:01:39.730> we'll

00:01:40.080 --> 00:01:40.090 
regulate frames per second now we'll

00:01:40.090 --> 00:01:41.880 
regulate frames per second now we'll
have<00:01:40.120> our<00:01:40.420> input<00:01:40.840> and<00:01:41.080> update<00:01:41.380> functions

00:01:41.880 --> 00:01:41.890 
have our input and update functions

00:01:41.890 --> 00:01:43.890 
have our input and update functions
inside<00:01:42.460> the<00:01:42.670> wild<00:01:42.970> counter<00:01:43.420> greater<00:01:43.659> than

00:01:43.890 --> 00:01:43.900 
inside the wild counter greater than

00:01:43.900 --> 00:01:46.140 
inside the wild counter greater than
zero<00:01:44.140> loop<00:01:44.409> and<00:01:44.650> our<00:01:45.280> drawing<00:01:45.580> stuff<00:01:45.850> will<00:01:46.030> be

00:01:46.140 --> 00:01:46.150 
zero loop and our drawing stuff will be

00:01:46.150 --> 00:01:48.270 
zero loop and our drawing stuff will be
outside<00:01:46.330> that<00:01:46.810> loop<00:01:47.050> but<00:01:47.440> inside<00:01:47.800> the<00:01:47.979> wild

00:01:48.270 --> 00:01:48.280 
outside that loop but inside the wild

00:01:48.280 --> 00:01:50.610 
outside that loop but inside the wild
game<00:01:48.430> is<00:01:48.640> not<00:01:48.820> done<00:01:49.090> loop<00:01:49.330> and<00:01:49.540> at<00:01:50.170> the<00:01:50.350> end<00:01:50.380> of

00:01:50.610 --> 00:01:50.620 
game is not done loop and at the end of

00:01:50.620 --> 00:01:52.500 
game is not done loop and at the end of
the<00:01:50.740> wild<00:01:51.070> counter<00:01:51.490> greater<00:01:51.760> than<00:01:51.970> zero<00:01:52.240> loop

00:01:52.500 --> 00:01:52.510 
the wild counter greater than zero loop

00:01:52.510 --> 00:01:56.310 
the wild counter greater than zero loop
decrement<00:01:53.470> the<00:01:53.530> counter<00:01:53.920> by<00:01:54.130> one<00:01:55.320> alrighty

00:01:56.310 --> 00:01:56.320 
decrement the counter by one alrighty

00:01:56.320 --> 00:01:58.560 
decrement the counter by one alrighty
next<00:01:57.190> we're<00:01:57.310> going<00:01:57.430> to<00:01:57.490> review<00:01:57.820> enumerations

00:01:58.560 --> 00:01:58.570 
next we're going to review enumerations

00:01:58.570 --> 00:02:00.450 
next we're going to review enumerations
and<00:01:58.840> random<00:01:59.170> numbers<00:01:59.500> which<00:01:59.890> can<00:02:00.100> both<00:02:00.280> be

00:02:00.450 --> 00:02:00.460 
and random numbers which can both be

00:02:00.460 --> 00:02:01.800 
and random numbers which can both be
really<00:02:00.760> helpful<00:02:00.970> when<00:02:01.180> it<00:02:01.360> comes<00:02:01.540> to<00:02:01.690> making

00:02:01.800 --> 00:02:01.810 
really helpful when it comes to making

00:02:01.810 --> 00:02:05.130 
really helpful when it comes to making
games<00:02:02.229> take<00:02:02.920> care

