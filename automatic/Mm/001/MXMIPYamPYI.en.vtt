WEBVTT
Kind: captions
Language: en

00:00:10.980 --> 00:00:13.220 

the<00:00:11.910> iphone<00:00:12.240> doesn't<00:00:12.509> use<00:00:12.809> garbage

00:00:13.220 --> 00:00:13.230 
the iphone doesn't use garbage

00:00:13.230 --> 00:00:15.169 
the iphone doesn't use garbage
collection<00:00:13.740> it<00:00:13.919> uses<00:00:14.280> a<00:00:14.369> reference<00:00:14.759> counting

00:00:15.169 --> 00:00:15.179 
collection it uses a reference counting

00:00:15.179 --> 00:00:17.810 
collection it uses a reference counting
system<00:00:15.599> if<00:00:16.259> you<00:00:16.830> want<00:00:17.009> to<00:00:17.130> keep<00:00:17.279> a<00:00:17.490> reference

00:00:17.810 --> 00:00:17.820 
system if you want to keep a reference

00:00:17.820 --> 00:00:19.970 
system if you want to keep a reference
to<00:00:18.000> an<00:00:18.119> object<00:00:18.240> you<00:00:18.900> have<00:00:19.050> to<00:00:19.200> manually<00:00:19.560> call

00:00:19.970 --> 00:00:19.980 
to an object you have to manually call

00:00:19.980 --> 00:00:23.450 
to an object you have to manually call
the<00:00:20.520> retain<00:00:20.910> method<00:00:21.419> on<00:00:21.599> that<00:00:21.990> object<00:00:22.460> when

00:00:23.450 --> 00:00:23.460 
the retain method on that object when

00:00:23.460 --> 00:00:25.100 
the retain method on that object when
you<00:00:23.550> create<00:00:23.789> an<00:00:23.910> object<00:00:24.000> it<00:00:24.779> will<00:00:24.840> have<00:00:25.050> a

00:00:25.100 --> 00:00:25.110 
you create an object it will have a

00:00:25.110 --> 00:00:27.679 
you create an object it will have a
reference<00:00:25.439> count<00:00:25.800> of<00:00:26.070> one<00:00:26.400> when<00:00:27.330> you're<00:00:27.480> done

00:00:27.679 --> 00:00:27.689 
reference count of one when you're done

00:00:27.689 --> 00:00:29.660 
reference count of one when you're done
with<00:00:27.839> that<00:00:27.869> object<00:00:28.140> you<00:00:28.800> call<00:00:29.099> a<00:00:29.310> release

00:00:29.660 --> 00:00:29.670 
with that object you call a release

00:00:29.670 --> 00:00:33.020 
with that object you call a release
method<00:00:30.240> a<00:00:31.070> reference<00:00:32.070> count<00:00:32.339> on<00:00:32.550> that<00:00:32.790> object

00:00:33.020 --> 00:00:33.030 
method a reference count on that object

00:00:33.030 --> 00:00:35.329 
method a reference count on that object
which<00:00:33.480> is<00:00:33.510> zero<00:00:34.050> the<00:00:34.620> system<00:00:35.070> will

00:00:35.329 --> 00:00:35.339 
which is zero the system will

00:00:35.339 --> 00:00:38.090 
which is zero the system will
automatically<00:00:36.120> call<00:00:36.629> the<00:00:37.019> d<00:00:37.170> alec<00:00:37.470> method<00:00:37.890> on

00:00:38.090 --> 00:00:38.100 
automatically call the d alec method on

00:00:38.100 --> 00:00:44.210 
automatically call the d alec method on
that<00:00:38.699> object<00:00:38.970> and<00:00:39.449> free<00:00:39.989> up<00:00:40.170> the<00:00:40.379> memory

00:00:44.210 --> 00:00:44.220 

00:00:44.220 --> 00:00:46.710 

just<00:00:45.220> going<00:00:45.340> to<00:00:45.430> create<00:00:45.940> a<00:00:46.000> simple

00:00:46.710 --> 00:00:46.720 
just going to create a simple

00:00:46.720 --> 00:00:53.060 
just going to create a simple
windows-based<00:00:47.170> application<00:00:48.900> and<00:00:51.960> create

00:00:53.060 --> 00:00:53.070 
windows-based application and create

00:00:53.070 --> 00:00:56.580 
windows-based application and create
there's<00:00:54.070> a<00:00:54.190> test<00:00:54.430> class<00:00:55.020> but<00:00:56.020> we're<00:00:56.170> simple

00:00:56.580 --> 00:00:56.590 
there's a test class but we're simple

00:00:56.590 --> 00:01:01.940 
there's a test class but we're simple
init<00:00:57.280> method<00:00:57.310> inside<00:00:57.910> it<00:00:59.190> it's<00:01:00.190> the<00:01:00.340> usual

00:01:01.940 --> 00:01:01.950 
init method inside it it's the usual

00:01:01.950 --> 00:01:04.950 
init method inside it it's the usual
code<00:01:02.950> here<00:01:03.340> and<00:01:04.210> we're<00:01:04.390> just<00:01:04.540> going<00:01:04.690> to<00:01:04.720> add<00:01:04.930> a

00:01:04.950 --> 00:01:04.960 
code here and we're just going to add a

00:01:04.960 --> 00:01:06.980 
code here and we're just going to add a
logging<00:01:05.350> statement<00:01:05.800> here<00:01:06.070> to<00:01:06.400> show<00:01:06.610> it<00:01:06.760> is

00:01:06.980 --> 00:01:06.990 
logging statement here to show it is

00:01:06.990 --> 00:01:10.560 
logging statement here to show it is
call<00:01:07.990> my<00:01:08.200> code<00:01:08.530> and<00:01:08.940> also<00:01:09.940> we're<00:01:10.119> going<00:01:10.330> to<00:01:10.420> add

00:01:10.560 --> 00:01:10.570 
call my code and also we're going to add

00:01:10.570 --> 00:01:13.080 
call my code and also we're going to add
a<00:01:10.600> the<00:01:11.410> allocation<00:01:12.070> method<00:01:12.460> this<00:01:12.580> method<00:01:12.640> gets

00:01:13.080 --> 00:01:13.090 
a the allocation method this method gets

00:01:13.090 --> 00:01:16.770 
a the allocation method this method gets
called<00:01:14.070> just<00:01:15.070> before<00:01:15.220> the<00:01:15.970> memory<00:01:16.300> for<00:01:16.750> your

00:01:16.770 --> 00:01:16.780 
called just before the memory for your

00:01:16.780 --> 00:01:21.520 
called just before the memory for your
object<00:01:17.140> gets<00:01:17.290> freed

00:01:21.520 --> 00:01:21.530 

00:01:21.530 --> 00:01:23.930 

now<00:01:22.530> we're<00:01:22.680> just<00:01:22.710> importing<00:01:23.310> that<00:01:23.460> class<00:01:23.730> so

00:01:23.930 --> 00:01:23.940 
now we're just importing that class so

00:01:23.940 --> 00:01:26.300 
now we're just importing that class so
we<00:01:24.060> can<00:01:24.240> use<00:01:24.510> it<00:01:24.590> and<00:01:25.590> now<00:01:25.770> we're<00:01:25.950> just<00:01:25.980> going

00:01:26.300 --> 00:01:26.310 
we can use it and now we're just going

00:01:26.310 --> 00:01:31.180 
we can use it and now we're just going
to<00:01:26.450> create<00:01:27.450> an<00:01:27.600> instance<00:01:27.900> of<00:01:28.170> that<00:01:28.230> class<00:01:28.350> and

00:01:31.180 --> 00:01:31.190 

00:01:31.190 --> 00:01:38.080 

no<00:01:32.190> to<00:01:32.250> log<00:01:32.640> to<00:01:33.600> the<00:01:33.630> output<00:01:35.180> retained<00:01:36.180> count

00:01:38.080 --> 00:01:38.090 
no to log to the output retained count

00:01:38.090 --> 00:01:41.030 
no to log to the output retained count
for<00:01:39.090> that<00:01:39.240> object<00:01:39.420> it<00:01:39.690> should<00:01:39.840> be<00:01:39.930> one<00:01:40.140> will

00:01:41.030 --> 00:01:41.040 
for that object it should be one will

00:01:41.040 --> 00:01:43.480 
for that object it should be one will
just<00:01:41.250> initialize<00:01:41.729> it<00:01:41.910> once<00:01:42.150> so<00:01:42.869> if<00:01:42.930> you<00:01:43.020> run<00:01:43.260> it

00:01:43.480 --> 00:01:43.490 
just initialize it once so if you run it

00:01:43.490 --> 00:01:46.010 
just initialize it once so if you run it
open<00:01:44.490> up<00:01:44.580> a<00:01:44.640> log<00:01:44.820> window<00:01:45.060> and<00:01:45.570> can<00:01:45.750> see<00:01:45.900> it's

00:01:46.010 --> 00:01:46.020 
open up a log window and can see it's

00:01:46.020 --> 00:01:48.109 
open up a log window and can see it's
one<00:01:46.229> there<00:01:46.500> it's<00:01:47.130> initialized<00:01:47.580> and<00:01:47.850> it's

00:01:48.109 --> 00:01:48.119 
one there it's initialized and it's

00:01:48.119 --> 00:01:52.670 
one there it's initialized and it's
being<00:01:48.330> deallocated<00:01:49.640> sofu<00:01:50.640> you<00:01:51.530> return<00:01:52.530> it

00:01:52.670 --> 00:01:52.680 
being deallocated sofu you return it

00:01:52.680 --> 00:01:55.550 
being deallocated sofu you return it
again<00:01:52.979> should<00:01:53.729> have<00:01:53.850> jumped<00:01:54.300> to<00:01:55.290> pack<00:01:55.440> the

00:01:55.550 --> 00:01:55.560 
again should have jumped to pack the

00:01:55.560 --> 00:02:02.090 
again should have jumped to pack the
hole<00:01:55.649> with<00:01:55.740> 10<00:01:56.190> count<00:01:56.460> of<00:01:56.610> two<00:02:00.680> if<00:02:01.680> you<00:02:01.830> release

00:02:02.090 --> 00:02:02.100 
hole with 10 count of two if you release

00:02:02.100 --> 00:02:06.260 
hole with 10 count of two if you release
it<00:02:02.130> it<00:02:02.700> will<00:02:02.820> go<00:02:02.940> back<00:02:03.119> down<00:02:03.330> to<00:02:03.360> one<00:02:05.149> and<00:02:06.149> it

00:02:06.260 --> 00:02:06.270 
it it will go back down to one and it

00:02:06.270 --> 00:02:13.340 
it it will go back down to one and it
should<00:02:06.450> be<00:02:08.720> deallocated<00:02:09.720> there<00:02:10.440> we<00:02:10.530> go<00:02:12.260> now<00:02:13.260> if

00:02:13.340 --> 00:02:13.350 
should be deallocated there we go now if

00:02:13.350 --> 00:02:18.040 
should be deallocated there we go now if
we<00:02:13.440> try<00:02:13.620> to<00:02:13.680> do<00:02:13.860> this<00:02:13.980> again<00:02:15.830> it's<00:02:16.830> full<00:02:17.220> error

00:02:18.040 --> 00:02:18.050 
we try to do this again it's full error

00:02:18.050 --> 00:02:26.530 
we try to do this again it's full error
there<00:02:19.050> we<00:02:19.170> go

00:02:26.530 --> 00:02:26.540 

00:02:26.540 --> 00:02:30.289 

you

00:02:30.289 --> 00:02:30.299 

00:02:30.299 --> 00:02:32.699 

here<00:02:31.299> I'm<00:02:31.659> just<00:02:31.959> waiting<00:02:32.230> a<00:02:32.290> very<00:02:32.319> simple

00:02:32.699 --> 00:02:32.709 
here I'm just waiting a very simple

00:02:32.709 --> 00:02:40.340 
here I'm just waiting a very simple
function<00:02:33.189> that<00:02:33.519> returns<00:02:33.700> a<00:02:34.060> string

00:02:40.340 --> 00:02:40.350 

00:02:40.350 --> 00:02:46.790 

you

00:02:46.790 --> 00:02:46.800 

00:02:46.800 --> 00:02:49.490 

a<00:02:46.860> problem<00:02:47.640> here<00:02:47.910> is<00:02:48.060> who<00:02:48.630> calls<00:02:48.990> the<00:02:49.200> release

00:02:49.490 --> 00:02:49.500 
a problem here is who calls the release

00:02:49.500 --> 00:02:53.480 
a problem here is who calls the release
method<00:02:49.950> on<00:02:50.460> this<00:02:50.730> string<00:02:51.090> object<00:02:52.280> if<00:02:53.280> we

00:02:53.480 --> 00:02:53.490 
method on this string object if we

00:02:53.490 --> 00:02:55.580 
method on this string object if we
release<00:02:53.760> it<00:02:53.910> in<00:02:54.030> this<00:02:54.150> get<00:02:54.390> string<00:02:54.660> method<00:02:55.050> of

00:02:55.580 --> 00:02:55.590 
release it in this get string method of

00:02:55.590 --> 00:02:57.860 
release it in this get string method of
a<00:02:55.710> reference<00:02:56.070> count<00:02:56.370> equals<00:02:56.790> zero<00:02:57.120> and<00:02:57.360> it

00:02:57.860 --> 00:02:57.870 
a reference count equals zero and it

00:02:57.870 --> 00:03:03.410 
a reference count equals zero and it
will<00:02:57.960> get<00:02:58.020> deallocated<00:02:58.620> straight<00:02:59.010> away

00:03:03.410 --> 00:03:03.420 

00:03:03.420 --> 00:03:05.130 

if<00:03:04.260> a<00:03:04.410> function

00:03:05.130 --> 00:03:05.140 
if a function

00:03:05.140 --> 00:03:07.940 
if a function
release<00:03:05.290> it<00:03:05.500> then<00:03:06.069> the<00:03:06.250> caller<00:03:06.520> will<00:03:06.700> have<00:03:06.910> to

00:03:07.940 --> 00:03:07.950 
release it then the caller will have to

00:03:07.950 --> 00:03:10.860 
release it then the caller will have to
what<00:03:08.950> you<00:03:09.010> can't<00:03:09.220> see<00:03:09.400> here<00:03:09.430> is<00:03:10.180> that<00:03:10.240> testing

00:03:10.860 --> 00:03:10.870 
what you can't see here is that testing

00:03:10.870 --> 00:03:14.790 
what you can't see here is that testing
has<00:03:11.020> not<00:03:11.200> been<00:03:11.410> deallocated

00:03:14.790 --> 00:03:14.800 

00:03:14.800 --> 00:03:17.730 

what<00:03:15.250> would<00:03:15.430> have<00:03:15.640> to<00:03:15.670> do<00:03:15.970> to<00:03:16.960> sign<00:03:17.230> the<00:03:17.440> string

00:03:17.730 --> 00:03:17.740 
what would have to do to sign the string

00:03:17.740 --> 00:03:22.200 
what would have to do to sign the string
to<00:03:17.770> temporary<00:03:18.430> variable<00:03:20.220> use<00:03:21.220> it<00:03:21.460> then

00:03:22.200 --> 00:03:22.210 
to temporary variable use it then

00:03:22.210 --> 00:03:24.910 
to temporary variable use it then
release<00:03:22.900> it

00:03:24.910 --> 00:03:24.920 
release it

00:03:24.920 --> 00:03:30.600 
release it
which<00:03:25.849> makes<00:03:26.090> the<00:03:26.240> code<00:03:26.420> Zoe<00:03:26.720> ugly

00:03:30.600 --> 00:03:30.610 

00:03:30.610 --> 00:03:33.450 

but<00:03:31.510> is<00:03:31.600> a<00:03:31.630> way<00:03:31.840> around<00:03:31.960> this<00:03:32.320> summer<00:03:32.530> instead

00:03:33.450 --> 00:03:33.460 
but is a way around this summer instead

00:03:33.460 --> 00:03:35.280 
but is a way around this summer instead
of<00:03:33.670> releasing<00:03:34.000> the<00:03:34.240> object<00:03:34.720> in<00:03:34.930> the<00:03:35.140> gut

00:03:35.280 --> 00:03:35.290 
of releasing the object in the gut

00:03:35.290 --> 00:03:38.760 
of releasing the object in the gut
string<00:03:35.530> method<00:03:36.030> we<00:03:37.030> use<00:03:37.180> your<00:03:37.360> command<00:03:37.770> called

00:03:38.760 --> 00:03:38.770 
string method we use your command called

00:03:38.770 --> 00:03:43.020 
string method we use your command called
Auto<00:03:39.040> release<00:03:41.280> and<00:03:42.280> this<00:03:42.460> tells<00:03:42.670> the<00:03:42.790> system

00:03:43.020 --> 00:03:43.030 
Auto release and this tells the system

00:03:43.030 --> 00:03:46.020 
Auto release and this tells the system
to<00:03:43.720> release<00:03:43.960> that<00:03:43.990> object<00:03:44.620> at<00:03:44.980> some<00:03:45.400> point<00:03:45.760> in

00:03:46.020 --> 00:03:46.030 
to release that object at some point in

00:03:46.030 --> 00:03:49.770 
to release that object at some point in
the<00:03:46.570> future<00:03:47.580> when<00:03:48.580> you<00:03:48.610> send<00:03:48.940> an<00:03:49.060> object<00:03:49.420> the

00:03:49.770 --> 00:03:49.780 
the future when you send an object the

00:03:49.780 --> 00:03:52.200 
the future when you send an object the
auto<00:03:49.930> release<00:03:50.290> message<00:03:50.770> it<00:03:51.490> is<00:03:51.640> then<00:03:51.820> put<00:03:52.180> into

00:03:52.200 --> 00:03:52.210 
auto release message it is then put into

00:03:52.210 --> 00:03:58.080 
auto release message it is then put into
the<00:03:53.110> auto<00:03:53.290> release<00:03:53.740> pull<00:03:56.610> the<00:03:57.610> auto<00:03:57.760> release

00:03:58.080 --> 00:03:58.090 
the auto release pull the auto release

00:03:58.090 --> 00:04:00.570 
the auto release pull the auto release
Paul<00:03:58.390> is<00:03:58.840> simply<00:03:59.320> a<00:03:59.500> big<00:03:59.980> collection<00:04:00.340> of

00:04:00.570 --> 00:04:00.580 
Paul is simply a big collection of

00:04:00.580 --> 00:04:02.880 
Paul is simply a big collection of
objects<00:04:01.030> that<00:04:01.300> have<00:04:01.690> been<00:04:01.810> sent<00:04:02.110> with<00:04:02.650> Auto

00:04:02.880 --> 00:04:02.890 
objects that have been sent with Auto

00:04:02.890 --> 00:04:07.110 
objects that have been sent with Auto
release<00:04:03.250> message<00:04:05.040> at<00:04:06.040> some<00:04:06.580> point<00:04:06.790> in<00:04:07.030> the

00:04:07.110 --> 00:04:07.120 
release message at some point in the

00:04:07.120 --> 00:04:09.540 
release message at some point in the
future<00:04:07.150> like<00:04:07.930> after<00:04:08.140> the<00:04:08.380> current<00:04:08.530> event<00:04:08.890> has

00:04:09.540 --> 00:04:09.550 
future like after the current event has

00:04:09.550 --> 00:04:11.610 
future like after the current event has
been<00:04:09.580> processed<00:04:09.970> and<00:04:10.540> the<00:04:11.080> system<00:04:11.440> goes

00:04:11.610 --> 00:04:11.620 
been processed and the system goes

00:04:11.620 --> 00:04:13.740 
been processed and the system goes
through<00:04:11.860> every<00:04:12.040> object<00:04:12.459> in<00:04:12.970> the<00:04:13.239> auto<00:04:13.390> release

00:04:13.740 --> 00:04:13.750 
through every object in the auto release

00:04:13.750 --> 00:04:18.539 
through every object in the auto release
pull<00:04:14.020> and<00:04:14.320> sends<00:04:15.070> it<00:04:15.160> the<00:04:15.520> release<00:04:15.850> message

00:04:18.539 --> 00:04:18.549 
pull and sends it the release message

00:04:18.549 --> 00:04:21.240 
pull and sends it the release message
this<00:04:19.359> example<00:04:19.720> shows<00:04:19.870> Auto<00:04:20.349> release<00:04:20.739> working

00:04:21.240 --> 00:04:21.250 
this example shows Auto release working

00:04:21.250 --> 00:04:24.089 
this example shows Auto release working
this<00:04:22.090> press<00:04:22.419> method<00:04:22.840> gets<00:04:23.050> called<00:04:23.139> when<00:04:23.680> we

00:04:24.089 --> 00:04:24.099 
this press method gets called when we

00:04:24.099 --> 00:04:25.820 
this press method gets called when we
user<00:04:24.310> clicks<00:04:24.639> on<00:04:24.729> a<00:04:24.789> button<00:04:24.879> in<00:04:25.210> the<00:04:25.419> interface

00:04:25.820 --> 00:04:25.830 
user clicks on a button in the interface

00:04:25.830 --> 00:04:29.580 
user clicks on a button in the interface
it<00:04:26.830> then<00:04:27.099> calls<00:04:27.340> baguette<00:04:27.789> test<00:04:28.300> method<00:04:28.810> but

00:04:29.580 --> 00:04:29.590 
it then calls baguette test method but

00:04:29.590 --> 00:04:32.070 
it then calls baguette test method but
we<00:04:29.710> turn<00:04:29.919> to<00:04:30.099> a<00:04:30.129> test<00:04:30.370> class<00:04:30.669> and<00:04:31.080> Otto

00:04:32.070 --> 00:04:32.080 
we turn to a test class and Otto

00:04:32.080 --> 00:04:36.550 
we turn to a test class and Otto
releases<00:04:32.650> it

00:04:36.550 --> 00:04:36.560 

00:04:36.560 --> 00:04:40.370 

so<00:04:37.560> if<00:04:37.620> we<00:04:37.680> just<00:04:37.860> push<00:04:38.070> a<00:04:38.100> button<00:04:38.220> here<00:04:39.380> I'll

00:04:40.370 --> 00:04:40.380 
so if we just push a button here I'll

00:04:40.380 --> 00:04:43.250 
so if we just push a button here I'll
just<00:04:40.440> clear<00:04:40.800> a<00:04:40.830> lot<00:04:41.360> we<00:04:42.360> try<00:04:42.600> again<00:04:42.900> we<00:04:43.050> push<00:04:43.230> a

00:04:43.250 --> 00:04:43.260 
just clear a lot we try again we push a

00:04:43.260 --> 00:04:45.470 
just clear a lot we try again we push a
button<00:04:43.500> and<00:04:43.830> you<00:04:44.430> can<00:04:44.460> see<00:04:44.760> it's<00:04:45.270> been

00:04:45.470 --> 00:04:45.480 
button and you can see it's been

00:04:45.480 --> 00:04:48.410 
button and you can see it's been
deallocated<00:04:46.020> and<00:04:46.580> we<00:04:47.580> haven't<00:04:47.820> specifically

00:04:48.410 --> 00:04:48.420 
deallocated and we haven't specifically

00:04:48.420 --> 00:04:55.930 
deallocated and we haven't specifically
called<00:04:49.320> the<00:04:50.220> release<00:04:50.490> method

00:04:55.930 --> 00:04:55.940 

00:04:55.940 --> 00:04:58.480 

so<00:04:56.300> these<00:04:56.450> are<00:04:56.510> the<00:04:56.630> basic<00:04:56.990> rules<00:04:57.230> if<00:04:58.190> you<00:04:58.340> get

00:04:58.480 --> 00:04:58.490 
so these are the basic rules if you get

00:04:58.490 --> 00:05:01.600 
so these are the basic rules if you get
an<00:04:58.520> object<00:04:58.970> by<00:04:59.510> allocating<00:04:59.930> new<00:05:00.710> copy<00:05:01.310> or

00:05:01.600 --> 00:05:01.610 
an object by allocating new copy or

00:05:01.610 --> 00:05:03.880 
an object by allocating new copy or
mutable<00:05:02.090> copy<00:05:02.560> then<00:05:03.560> it<00:05:03.650> will<00:05:03.740> have<00:05:03.770> a

00:05:03.880 --> 00:05:03.890 
mutable copy then it will have a

00:05:03.890 --> 00:05:05.470 
mutable copy then it will have a
reference<00:05:04.130> count<00:05:04.430> of<00:05:04.550> one<00:05:04.760> and<00:05:04.940> you<00:05:05.270> are

00:05:05.470 --> 00:05:05.480 
reference count of one and you are

00:05:05.480 --> 00:05:08.140 
reference count of one and you are
responsible<00:05:05.600> for<00:05:06.170> releasing<00:05:06.530> it<00:05:06.940> and<00:05:07.940> if<00:05:08.060> you

00:05:08.140 --> 00:05:08.150 
responsible for releasing it and if you

00:05:08.150 --> 00:05:09.750 
responsible for releasing it and if you
get<00:05:08.270> an<00:05:08.360> object<00:05:08.660> from<00:05:08.780> any<00:05:09.020> other<00:05:09.110> means

00:05:09.750 --> 00:05:09.760 
get an object from any other means

00:05:09.760 --> 00:05:12.640 
get an object from any other means
assume<00:05:10.760> it's<00:05:11.030> an<00:05:11.180> autorelease<00:05:11.570> pool<00:05:11.780> and<00:05:12.380> it

00:05:12.640 --> 00:05:12.650 
assume it's an autorelease pool and it

00:05:12.650 --> 00:05:17.200 
assume it's an autorelease pool and it
has<00:05:12.800> leased<00:05:13.340> a<00:05:13.550> reference<00:05:13.910> count<00:05:14.150> of<00:05:14.300> one<00:05:16.210> so

00:05:17.200 --> 00:05:17.210 
has leased a reference count of one so

00:05:17.210 --> 00:05:18.430 
has leased a reference count of one so
if<00:05:17.300> you<00:05:17.360> don't<00:05:17.510> want<00:05:17.660> to<00:05:17.720> use<00:05:17.900> this<00:05:18.020> object

00:05:18.430 --> 00:05:18.440 
if you don't want to use this object

00:05:18.440 --> 00:05:20.140 
if you don't want to use this object
after<00:05:18.860> the<00:05:19.190> end<00:05:19.310> of<00:05:19.370> a<00:05:19.460> method<00:05:19.760> you<00:05:19.850> don't<00:05:20.030> need

00:05:20.140 --> 00:05:20.150 
after the end of a method you don't need

00:05:20.150 --> 00:05:21.310 
after the end of a method you don't need
to<00:05:20.240> do<00:05:20.330> anything<00:05:20.540> you<00:05:20.690> don't<00:05:20.840> need<00:05:21.050> to<00:05:21.170> call

00:05:21.310 --> 00:05:21.320 
to do anything you don't need to call

00:05:21.320 --> 00:05:24.490 
to do anything you don't need to call
police<00:05:21.410> retain<00:05:22.450> also<00:05:23.450> release<00:05:23.720> anything<00:05:24.020> you

00:05:24.490 --> 00:05:24.500 
police retain also release anything you

00:05:24.500 --> 00:05:26.080 
police retain also release anything you
can<00:05:24.680> just<00:05:24.830> leave<00:05:24.980> it<00:05:25.160> and<00:05:25.310> it<00:05:25.460> will<00:05:25.730> be<00:05:25.910> also

00:05:26.080 --> 00:05:26.090 
can just leave it and it will be also

00:05:26.090 --> 00:05:30.580 
can just leave it and it will be also
released<00:05:26.540> at<00:05:27.260> some<00:05:27.920> point<00:05:28.370> in<00:05:28.460> the<00:05:28.550> future

