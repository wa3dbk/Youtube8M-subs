WEBVTT
Kind: captions
Language: en

00:00:00.589 --> 00:00:03.200 

welcome<00:00:01.589> this<00:00:02.159> is<00:00:02.220> a<00:00:02.370> series<00:00:02.700> of<00:00:02.730> tutorial

00:00:03.200 --> 00:00:03.210 
welcome this is a series of tutorial

00:00:03.210 --> 00:00:06.980 
welcome this is a series of tutorial
videos<00:00:03.240> on<00:00:03.750> arm<00:00:04.259> cortex-m<00:00:04.650> processors<00:00:05.990> this

00:00:06.980 --> 00:00:06.990 
videos on arm cortex-m processors this

00:00:06.990 --> 00:00:09.080 
videos on arm cortex-m processors this
video<00:00:07.410> will<00:00:07.770> deep<00:00:07.950> dive<00:00:08.160> further<00:00:08.429> to<00:00:08.940> discuss

00:00:09.080 --> 00:00:09.090 
video will deep dive further to discuss

00:00:09.090 --> 00:00:13.610 
video will deep dive further to discuss
debug<00:00:09.900> and<00:00:10.050> trace<00:00:11.870> one<00:00:12.870> of<00:00:12.990> the<00:00:13.049> key<00:00:13.200> features

00:00:13.610 --> 00:00:13.620 
debug and trace one of the key features

00:00:13.620 --> 00:00:15.560 
debug and trace one of the key features
of<00:00:13.650> the<00:00:13.830> cortex-m<00:00:14.190> family<00:00:14.730> is<00:00:14.910> the<00:00:15.420> use<00:00:15.540> of

00:00:15.560 --> 00:00:15.570 
of the cortex-m family is the use of

00:00:15.570 --> 00:00:17.599 
of the cortex-m family is the use of
cosine<00:00:16.139> the<00:00:16.980> arm<00:00:17.130> debug<00:00:17.430> and<00:00:17.550> trace

00:00:17.599 --> 00:00:17.609 
cosine the arm debug and trace

00:00:17.609 --> 00:00:20.090 
cosine the arm debug and trace
technology<00:00:18.270> which<00:00:19.109> is<00:00:19.230> the<00:00:19.289> most<00:00:19.500> complete<00:00:19.830> on

00:00:20.090 --> 00:00:20.100 
technology which is the most complete on

00:00:20.100 --> 00:00:23.380 
technology which is the most complete on
chip<00:00:20.400> debug<00:00:20.789> and<00:00:21.000> real<00:00:21.330> time<00:00:21.539> trace<00:00:21.810> solution

00:00:23.380 --> 00:00:23.390 
chip debug and real time trace solution

00:00:23.390 --> 00:00:26.179 
chip debug and real time trace solution
cosine<00:00:24.390> row<00:00:24.750> cortex-m<00:00:25.109> series<00:00:25.500> processor<00:00:26.010> is

00:00:26.179 --> 00:00:26.189 
cosine row cortex-m series processor is

00:00:26.189 --> 00:00:27.920 
cosine row cortex-m series processor is
an<00:00:26.670> embedded<00:00:26.970> part<00:00:27.330> of<00:00:27.480> the<00:00:27.539> cortex-m

00:00:27.920 --> 00:00:27.930 
an embedded part of the cortex-m

00:00:27.930 --> 00:00:29.750 
an embedded part of the cortex-m
processor<00:00:28.619> based<00:00:28.830> microcontroller<00:00:29.039> and

00:00:29.750 --> 00:00:29.760 
processor based microcontroller and

00:00:29.760 --> 00:00:31.550 
processor based microcontroller and
provides<00:00:30.480> low-cost<00:00:30.720> debug<00:00:31.320> and<00:00:31.470> trace

00:00:31.550 --> 00:00:31.560 
provides low-cost debug and trace

00:00:31.560 --> 00:00:34.520 
provides low-cost debug and trace
capability<00:00:32.430> to<00:00:32.550> developers<00:00:33.170> it<00:00:34.170> provides

00:00:34.520 --> 00:00:34.530 
capability to developers it provides

00:00:34.530 --> 00:00:36.380 
capability to developers it provides
advanced<00:00:34.829> deeper<00:00:35.190> capabilities<00:00:35.850> not

00:00:36.380 --> 00:00:36.390 
advanced deeper capabilities not

00:00:36.390 --> 00:00:38.450 
advanced deeper capabilities not
generally<00:00:36.809> available<00:00:37.140> in<00:00:37.440> the<00:00:37.500> eight<00:00:37.680> 16-bit

00:00:38.450 --> 00:00:38.460 
generally available in the eight 16-bit

00:00:38.460 --> 00:00:42.110 
generally available in the eight 16-bit
MC<00:00:39.030> market<00:00:40.040> the<00:00:41.040> cortex-m<00:00:41.430> course<00:00:41.850> can<00:00:42.090> be

00:00:42.110 --> 00:00:42.120 
MC market the cortex-m course can be

00:00:42.120 --> 00:00:44.540 
MC market the cortex-m course can be
Deibert<00:00:42.570> over<00:00:43.230> a<00:00:43.260> two<00:00:43.500> pin<00:00:43.710> server<00:00:44.160> debug

00:00:44.540 --> 00:00:44.550 
Deibert over a two pin server debug

00:00:44.550 --> 00:00:46.910 
Deibert over a two pin server debug
interface<00:00:44.700> or<00:00:45.210> an<00:00:45.719> industry<00:00:45.960> standard<00:00:46.530> JTAG

00:00:46.910 --> 00:00:46.920 
interface or an industry standard JTAG

00:00:46.920 --> 00:00:48.920 
interface or an industry standard JTAG
interface<00:00:47.210> the<00:00:48.210> cause<00:00:48.420> are<00:00:48.600> components

00:00:48.920 --> 00:00:48.930 
interface the cause are components

00:00:48.930 --> 00:00:50.869 
interface the cause are components
embedded<00:00:49.469> in<00:00:49.530> the<00:00:49.590> core<00:00:49.800> support<00:00:50.190> halting

00:00:50.869 --> 00:00:50.879 
embedded in the core support halting

00:00:50.879 --> 00:00:53.299 
embedded in the core support halting
regime<00:00:51.510> single<00:00:52.079> stepping<00:00:52.320> restart<00:00:53.129> and

00:00:53.299 --> 00:00:53.309 
regime single stepping restart and

00:00:53.309 --> 00:00:56.240 
regime single stepping restart and
register<00:00:53.879> read<00:00:54.059> and<00:00:54.239> write<00:00:54.390> data<00:00:55.250> water

00:00:56.240 --> 00:00:56.250 
register read and write data water

00:00:56.250 --> 00:00:57.920 
register read and write data water
points<00:00:56.670> allow<00:00:56.969> for<00:00:57.180> an<00:00:57.239> event<00:00:57.510> at<00:00:57.870> the

00:00:57.920 --> 00:00:57.930 
points allow for an event at the

00:00:57.930 --> 00:00:59.869 
points allow for an event at the
particular<00:00:58.410> address<00:00:58.559> to<00:00:58.859> be<00:00:58.949> highlighted<00:00:59.430> but

00:00:59.869 --> 00:00:59.879 
particular address to be highlighted but

00:00:59.879 --> 00:01:01.689 
particular address to be highlighted but
I<00:00:59.910> Ashley<00:01:00.300> stopping<00:01:00.719> the<00:01:00.780> process<00:01:00.960> core

00:01:01.689 --> 00:01:01.699 
I Ashley stopping the process core

00:01:01.699 --> 00:01:04.549 
I Ashley stopping the process core
software<00:01:02.699> and<00:01:02.879> hardware<00:01:03.329> breakpoints<00:01:04.170> allow

00:01:04.549 --> 00:01:04.559 
software and hardware breakpoints allow

00:01:04.559 --> 00:01:06.260 
software and hardware breakpoints allow
for<00:01:04.769> execution<00:01:05.309> halt<00:01:05.519> when<00:01:06.000> a<00:01:06.030> specific

00:01:06.260 --> 00:01:06.270 
for execution halt when a specific

00:01:06.270 --> 00:01:10.190 
for execution halt when a specific
address<00:01:06.630> is<00:01:07.020> in<00:01:07.170> tempted<00:01:08.689> on-the-fly<00:01:09.689> debug

00:01:10.190 --> 00:01:10.200 
address is in tempted on-the-fly debug

00:01:10.200 --> 00:01:11.600 
address is in tempted on-the-fly debug
access<00:01:10.560> to<00:01:10.680> memory<00:01:10.890> and<00:01:11.040> peripherals<00:01:11.189> is

00:01:11.600 --> 00:01:11.610 
access to memory and peripherals is

00:01:11.610 --> 00:01:14.480 
access to memory and peripherals is
another<00:01:12.000> important<00:01:12.390> feature<00:01:13.490> flash

00:01:14.480 --> 00:01:14.490 
another important feature flash

00:01:14.490 --> 00:01:16.670 
another important feature flash
programming<00:01:15.030> is<00:01:15.180> also<00:01:15.479> key<00:01:15.780> for<00:01:16.170> flexible<00:01:16.590> and

00:01:16.670 --> 00:01:16.680 
programming is also key for flexible and

00:01:16.680 --> 00:01:18.410 
programming is also key for flexible and
fast<00:01:16.830> code<00:01:17.100> development<00:01:17.670> for<00:01:18.090> modern

00:01:18.410 --> 00:01:18.420 
fast code development for modern

00:01:18.420 --> 00:01:21.590 
fast code development for modern
microcontroller<00:01:19.020> based<00:01:19.200> systems<00:01:20.570> there<00:01:21.570> are

00:01:21.590 --> 00:01:21.600 
microcontroller based systems there are

00:01:21.600 --> 00:01:23.090 
microcontroller based systems there are
multiple<00:01:22.080> tracing<00:01:22.409> options<00:01:22.560> available<00:01:22.830> in

00:01:23.090 --> 00:01:23.100 
multiple tracing options available in

00:01:23.100 --> 00:01:25.640 
multiple tracing options available in
the<00:01:23.189> cortex-m<00:01:23.549> family<00:01:24.119> this<00:01:24.960> fieldwire<00:01:25.380> wheel

00:01:25.640 --> 00:01:25.650 
the cortex-m family this fieldwire wheel

00:01:25.650 --> 00:01:28.100 
the cortex-m family this fieldwire wheel
from<00:01:25.920> TPI<00:01:26.280> u<00:01:26.369> is<00:01:26.700> the<00:01:27.119> lowest<00:01:27.450> cost<00:01:27.689> solution

00:01:28.100 --> 00:01:28.110 
from TPI u is the lowest cost solution

00:01:28.110 --> 00:01:31.219 
from TPI u is the lowest cost solution
that<00:01:28.560> only<00:01:28.920> uses<00:01:29.369> one<00:01:29.970> pin<00:01:30.299> for<00:01:30.750> data<00:01:30.930> trace

00:01:31.219 --> 00:01:31.229 
that only uses one pin for data trace

00:01:31.229 --> 00:01:33.859 
that only uses one pin for data trace
information<00:01:32.030> typically<00:01:33.030> data<00:01:33.240> center<00:01:33.750> with

00:01:33.859 --> 00:01:33.869 
information typically data center with

00:01:33.869 --> 00:01:35.270 
information typically data center with
this<00:01:33.990> port<00:01:34.229> without<00:01:34.530> having<00:01:34.770> to<00:01:34.890> stop<00:01:35.130> the

00:01:35.270 --> 00:01:35.280 
this port without having to stop the

00:01:35.280 --> 00:01:37.760 
this port without having to stop the
process<00:01:35.490> core<00:01:36.110> facilities<00:01:37.110> for<00:01:37.380> the<00:01:37.439> printed

00:01:37.760 --> 00:01:37.770 
process core facilities for the printed

00:01:37.770 --> 00:01:39.499 
process core facilities for the printed
type<00:01:37.979> of<00:01:38.130> output<00:01:38.520> and<00:01:38.640> being<00:01:38.909> able<00:01:39.030> to<00:01:39.180> look<00:01:39.329> at

00:01:39.499 --> 00:01:39.509 
type of output and being able to look at

00:01:39.509 --> 00:01:41.179 
type of output and being able to look at
memory<00:01:39.659> regions<00:01:40.200> while<00:01:40.650> running<00:01:41.040> are

00:01:41.179 --> 00:01:41.189 
memory regions while running are

00:01:41.189 --> 00:01:43.730 
memory regions while running are
available<00:01:41.700> data<00:01:42.630> watch<00:01:42.899> point<00:01:43.259> and<00:01:43.439> trace

00:01:43.730 --> 00:01:43.740 
available data watch point and trace

00:01:43.740 --> 00:01:45.620 
available data watch point and trace
units<00:01:44.130> are<00:01:44.310> built-in<00:01:44.790> to<00:01:45.060> provide<00:01:45.420> useful

00:01:45.620 --> 00:01:45.630 
units are built-in to provide useful

00:01:45.630 --> 00:01:47.749 
units are built-in to provide useful
information<00:01:46.470> such<00:01:47.040> as<00:01:47.100> date<00:01:47.369> to<00:01:47.549> trace

00:01:47.749 --> 00:01:47.759 
information such as date to trace

00:01:47.759 --> 00:01:50.300 
information such as date to trace
program<00:01:48.390> counter<00:01:48.899> sampling<00:01:49.320> CP<00:01:50.009> cycle

00:01:50.300 --> 00:01:50.310 
program counter sampling CP cycle

00:01:50.310 --> 00:01:50.990 
program counter sampling CP cycle
information

00:01:50.990 --> 00:01:51.000 
information

00:01:51.000 --> 00:01:54.310 
information
profiling<00:01:51.600> information<00:01:52.229> an<00:01:52.409> exception<00:01:53.130> trace

00:01:54.310 --> 00:01:54.320 
profiling information an exception trace

00:01:54.320 --> 00:01:57.139 
profiling information an exception trace
finally<00:01:55.350> software<00:01:55.950> can<00:01:56.070> write<00:01:56.250> items<00:01:56.670> tightly

00:01:57.139 --> 00:01:57.149 
finally software can write items tightly

00:01:57.149 --> 00:01:58.999 
finally software can write items tightly
to<00:01:57.540> the<00:01:57.630> instrumentation<00:01:58.110> trace<00:01:58.469> microcell

00:01:58.999 --> 00:01:59.009 
to the instrumentation trace microcell

00:01:59.009 --> 00:02:01.940 
to the instrumentation trace microcell
the<00:01:59.430> ITM<00:01:59.820> and<00:02:00.030> these<00:02:00.600> are<00:02:00.810> output<00:02:01.140> in<00:02:01.290> a<00:02:01.560> printf

00:02:01.940 --> 00:02:01.950 
the ITM and these are output in a printf

00:02:01.950 --> 00:02:05.690 
the ITM and these are output in a printf
type<00:02:02.159> format<00:02:04.130> furthermore<00:02:05.130> the<00:02:05.369> cortex-m

00:02:05.690 --> 00:02:05.700 
type format furthermore the cortex-m

00:02:05.700 --> 00:02:07.700 
type format furthermore the cortex-m
family<00:02:06.210> provides<00:02:06.540> embedded<00:02:06.990> trace<00:02:07.170> microcell

00:02:07.700 --> 00:02:07.710 
family provides embedded trace microcell

00:02:07.710 --> 00:02:09.680 
family provides embedded trace microcell
for<00:02:08.099> non<00:02:08.250> increases<00:02:08.849> cycle<00:02:09.300> accurate

00:02:09.680 --> 00:02:09.690 
for non increases cycle accurate

00:02:09.690 --> 00:02:12.110 
for non increases cycle accurate
instruction<00:02:10.289> trace<00:02:10.610> the<00:02:11.610> e-team<00:02:11.879> trace

00:02:12.110 --> 00:02:12.120 
instruction trace the e-team trace

00:02:12.120 --> 00:02:13.280 
instruction trace the e-team trace
reflects<00:02:12.540> every<00:02:12.959> in-store

00:02:13.280 --> 00:02:13.290 
reflects every in-store

00:02:13.290 --> 00:02:14.780 
reflects every in-store
and<00:02:13.379> those<00:02:13.500> executing<00:02:14.159> on<00:02:14.219> the<00:02:14.250> processor

00:02:14.780 --> 00:02:14.790 
and those executing on the processor

00:02:14.790 --> 00:02:17.449 
and those executing on the processor
this<00:02:15.750> trace<00:02:16.079> data<00:02:16.349> can<00:02:16.680> be<00:02:16.709> used<00:02:16.980> to<00:02:17.129> capture

00:02:17.449 --> 00:02:17.459 
this trace data can be used to capture

00:02:17.459 --> 00:02:19.250 
this trace data can be used to capture
the<00:02:17.549> events<00:02:17.790> leading<00:02:17.939> up<00:02:18.090> to<00:02:18.150> define<00:02:18.510> event<00:02:18.780> or

00:02:19.250 --> 00:02:19.260 
the events leading up to define event or

00:02:19.260 --> 00:02:20.690 
the events leading up to define event or
also<00:02:19.590> used<00:02:19.739> to<00:02:19.829> provide<00:02:20.099> code<00:02:20.400> coverage

00:02:20.690 --> 00:02:20.700 
also used to provide code coverage

00:02:20.700 --> 00:02:23.050 
also used to provide code coverage
statistics<00:02:21.269> or<00:02:21.450> execution<00:02:22.230> information

00:02:23.050 --> 00:02:23.060 
statistics or execution information

00:02:23.060 --> 00:02:25.339 
statistics or execution information
these<00:02:24.060> feature<00:02:24.329> is<00:02:24.480> important<00:02:24.930> for<00:02:25.019> vital

00:02:25.339 --> 00:02:25.349 
these feature is important for vital

00:02:25.349 --> 00:02:28.009 
these feature is important for vital
software<00:02:25.709> development<00:02:26.159> and<00:02:26.310> debug<00:02:26.989> the<00:02:27.989> code

00:02:28.009 --> 00:02:28.019 
software development and debug the code

00:02:28.019 --> 00:02:29.839 
software development and debug the code
xmz<00:02:28.620> row<00:02:28.709> plus<00:02:28.890> processor<00:02:29.459> which<00:02:29.819> is

00:02:29.839 --> 00:02:29.849 
xmz row plus processor which is

00:02:29.849 --> 00:02:31.610 
xmz row plus processor which is
typically<00:02:30.269> used<00:02:30.510> in<00:02:30.720> pin<00:02:30.900> limited<00:02:31.230> systems

00:02:31.610 --> 00:02:31.620 
typically used in pin limited systems

00:02:31.620 --> 00:02:33.979 
typically used in pin limited systems
has<00:02:32.099> a<00:02:32.189> noble<00:02:32.430> and<00:02:32.819> low-cost<00:02:33.269> resolution

00:02:33.979 --> 00:02:33.989 
has a noble and low-cost resolution

00:02:33.989 --> 00:02:36.250 
has a noble and low-cost resolution
based<00:02:34.709> on<00:02:34.890> using<00:02:35.040> the<00:02:35.220> micro<00:02:35.489> trace<00:02:35.700> buffer

00:02:36.250 --> 00:02:36.260 
based on using the micro trace buffer

00:02:36.260 --> 00:02:39.050 
based on using the micro trace buffer
the<00:02:37.260> micro<00:02:37.560> trace<00:02:37.739> buffer<00:02:38.189> is<00:02:38.519> useful<00:02:38.939> for

00:02:39.050 --> 00:02:39.060 
the micro trace buffer is useful for

00:02:39.060 --> 00:02:40.910 
the micro trace buffer is useful for
faster<00:02:39.450> debug<00:02:39.810> with<00:02:40.170> instruction<00:02:40.680> trace

00:02:40.910 --> 00:02:40.920 
faster debug with instruction trace

00:02:40.920 --> 00:02:43.990 
faster debug with instruction trace
without<00:02:41.430> the<00:02:41.700> need<00:02:41.849> of<00:02:41.879> any<00:02:42.209> extra<00:02:42.569> pins<00:02:42.810> in

00:02:43.990 --> 00:02:44.000 
without the need of any extra pins in

00:02:44.000 --> 00:02:46.190 
without the need of any extra pins in
summary<00:02:45.000> the<00:02:45.239> cortex-m<00:02:45.629> family<00:02:46.079> has<00:02:46.170> a

00:02:46.190 --> 00:02:46.200 
summary the cortex-m family has a

00:02:46.200 --> 00:02:47.780 
summary the cortex-m family has a
comprehensive<00:02:46.560> debug<00:02:47.040> and<00:02:47.159> trace<00:02:47.220> solution

00:02:47.780 --> 00:02:47.790 
comprehensive debug and trace solution

00:02:47.790 --> 00:02:49.759 
comprehensive debug and trace solution
that<00:02:48.329> is<00:02:48.510> widely<00:02:48.870> supported<00:02:49.019> by<00:02:49.470> world's

00:02:49.759 --> 00:02:49.769 
that is widely supported by world's

00:02:49.769 --> 00:02:51.860 
that is widely supported by world's
major<00:02:49.950> debugger<00:02:50.430> vendors<00:02:50.790> provides<00:02:51.689> low-cost

00:02:51.860 --> 00:02:51.870 
major debugger vendors provides low-cost

00:02:51.870 --> 00:02:55.520 
major debugger vendors provides low-cost
solutions<00:02:52.560> such<00:02:52.769> as<00:02:52.799> CLI<00:02:53.250> debug<00:02:54.079> supports<00:02:55.079> non

00:02:55.520 --> 00:02:55.530 
solutions such as CLI debug supports non

00:02:55.530 --> 00:02:59.000 
solutions such as CLI debug supports non
intrusive<00:02:55.879> instruction<00:02:56.879> trace<00:02:57.799> allows<00:02:58.799> for

00:02:59.000 --> 00:02:59.010 
intrusive instruction trace allows for

00:02:59.010 --> 00:03:00.679 
intrusive instruction trace allows for
configurable<00:02:59.549> and<00:02:59.730> flexible<00:03:00.209> debug<00:03:00.569> and

00:03:00.679 --> 00:03:00.689 
configurable and flexible debug and

00:03:00.689 --> 00:03:02.300 
configurable and flexible debug and
trace<00:03:00.810> solution<00:03:01.319> to<00:03:01.650> suit<00:03:01.829> your<00:03:02.010> system

00:03:02.300 --> 00:03:02.310 
trace solution to suit your system

00:03:02.310 --> 00:03:05.059 
trace solution to suit your system
requirements<00:03:02.790> and<00:03:03.109> finally<00:03:04.109> it<00:03:04.500> hits<00:03:04.739> a<00:03:04.889> wide

00:03:05.059 --> 00:03:05.069 
requirements and finally it hits a wide

00:03:05.069 --> 00:03:08.569 
requirements and finally it hits a wide
variety<00:03:05.310> of<00:03:05.519> price<00:03:05.790> points<00:03:07.310> thank<00:03:08.310> you<00:03:08.430> for

00:03:08.569 --> 00:03:08.579 
variety of price points thank you for

00:03:08.579 --> 00:03:10.190 
variety of price points thank you for
watching<00:03:08.849> this<00:03:08.939> video<00:03:09.120> and<00:03:09.450> hope<00:03:09.930> it<00:03:10.079> has<00:03:10.169> been

00:03:10.190 --> 00:03:10.200 
watching this video and hope it has been

00:03:10.200 --> 00:03:13.250 
watching this video and hope it has been
useful<00:03:10.639> arm<00:03:11.639> cortex-m<00:03:12.150> processors<00:03:12.840> are<00:03:13.109> a

00:03:13.250 --> 00:03:13.260 
useful arm cortex-m processors are a

00:03:13.260 --> 00:03:15.289 
useful arm cortex-m processors are a
global<00:03:13.530> microcontroller<00:03:14.250> standard<00:03:14.669> having

00:03:15.289 --> 00:03:15.299 
global microcontroller standard having

00:03:15.299 --> 00:03:18.020 
global microcontroller standard having
been<00:03:15.450> licensed<00:03:15.900> to<00:03:16.319> many<00:03:16.500> arm<00:03:16.709> partners<00:03:17.129> using

00:03:18.020 --> 00:03:18.030 
been licensed to many arm partners using

00:03:18.030 --> 00:03:20.210 
been licensed to many arm partners using
a<00:03:18.209> standard<00:03:18.599> process<00:03:18.780> allows<00:03:19.260> arm<00:03:19.739> partners

00:03:20.210 --> 00:03:20.220 
a standard process allows arm partners

00:03:20.220 --> 00:03:22.009 
a standard process allows arm partners
to<00:03:20.340> create<00:03:20.459> devices<00:03:20.819> the<00:03:21.510> consistent

00:03:22.009 --> 00:03:22.019 
to create devices the consistent

00:03:22.019 --> 00:03:23.869 
to create devices the consistent
architecture<00:03:22.650> while<00:03:23.069> enabling<00:03:23.340> them<00:03:23.729> to

00:03:23.869 --> 00:03:23.879 
architecture while enabling them to

00:03:23.879 --> 00:03:25.670 
architecture while enabling them to
focus<00:03:24.090> creating<00:03:24.989> superior<00:03:25.409> device

00:03:25.670 --> 00:03:25.680 
focus creating superior device

00:03:25.680 --> 00:03:28.309 
focus creating superior device
implementations<00:03:26.780> hope<00:03:27.780> you<00:03:27.959> add<00:03:28.049> to<00:03:28.229> the

00:03:28.309 --> 00:03:28.319 
implementations hope you add to the

00:03:28.319 --> 00:03:30.709 
implementations hope you add to the
partnership

