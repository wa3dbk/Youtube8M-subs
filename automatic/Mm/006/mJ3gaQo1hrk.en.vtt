WEBVTT
Kind: captions
Language: en

00:00:01.370 --> 00:00:04.660 

welcome<00:00:02.370> to<00:00:02.550> our<00:00:02.700> first<00:00:03.000> hot<00:00:03.360> pc<00:00:03.780> user<00:00:04.049> video

00:00:04.660 --> 00:00:04.670 
welcome to our first hot pc user video

00:00:04.670 --> 00:00:07.340 
welcome to our first hot pc user video
today<00:00:05.670> we'll<00:00:06.029> show<00:00:06.060> you<00:00:06.330> how<00:00:06.569> an<00:00:07.170> ordinary

00:00:07.340 --> 00:00:07.350 
today we'll show you how an ordinary

00:00:07.350 --> 00:00:09.680 
today we'll show you how an ordinary
dual-core<00:00:08.130> processor<00:00:08.610> can<00:00:08.940> be<00:00:08.970> transformed

00:00:09.680 --> 00:00:09.690 
dual-core processor can be transformed

00:00:09.690 --> 00:00:11.629 
dual-core processor can be transformed
into<00:00:09.929> a<00:00:10.110> full<00:00:10.380> quad-core<00:00:10.920> cpu<00:00:11.429> with

00:00:11.629 --> 00:00:11.639 
into a full quad-core cpu with

00:00:11.639 --> 00:00:14.450 
into a full quad-core cpu with
additional<00:00:12.090> cash<00:00:12.360> the<00:00:13.170> CPU<00:00:13.740> has<00:00:13.799> indeed

00:00:14.450 --> 00:00:14.460 
additional cash the CPU has indeed

00:00:14.460 --> 00:00:17.420 
additional cash the CPU has indeed
according<00:00:15.330> to<00:00:15.540> official<00:00:16.190> specifications<00:00:17.190> 2

00:00:17.420 --> 00:00:17.430 
according to official specifications 2

00:00:17.430 --> 00:00:20.960 
according to official specifications 2
cores<00:00:17.820> only<00:00:18.390> these<00:00:19.050> are<00:00:19.080> our<00:00:19.680> newest<00:00:20.070> 2.2

00:00:20.960 --> 00:00:20.970 
cores only these are our newest 2.2

00:00:20.970 --> 00:00:23.480 
cores only these are our newest 2.2
gigahertz<00:00:21.359> and<00:00:21.840> the<00:00:22.140> processor<00:00:22.590> itself<00:00:22.859> has<00:00:23.460> a

00:00:23.480 --> 00:00:23.490 
gigahertz and the processor itself has a

00:00:23.490 --> 00:00:25.040 
gigahertz and the processor itself has a
c2<00:00:24.269> stepping

00:00:25.040 --> 00:00:25.050 
c2 stepping

00:00:25.050 --> 00:00:27.980 
c2 stepping
but<00:00:25.439> what<00:00:25.710> course<00:00:26.519> does<00:00:26.699> it<00:00:26.849> have<00:00:27.119> I'm<00:00:27.630> in<00:00:27.900> a

00:00:27.980 --> 00:00:27.990 
but what course does it have I'm in a

00:00:27.990 --> 00:00:28.660 
but what course does it have I'm in a
codename

00:00:28.660 --> 00:00:28.670 
codename

00:00:28.670 --> 00:00:31.160 
codename
we<00:00:29.670> we<00:00:29.849> are<00:00:29.970> very<00:00:30.240> surprised<00:00:30.750> with<00:00:31.019> the

00:00:31.160 --> 00:00:31.170 
we we are very surprised with the

00:00:31.170 --> 00:00:33.260 
we we are very surprised with the
results<00:00:31.199> of<00:00:31.740> our<00:00:31.859> experiment<00:00:32.340> after

00:00:33.260 --> 00:00:33.270 
results of our experiment after

00:00:33.270 --> 00:00:35.389 
results of our experiment after
unlocking<00:00:33.660> the<00:00:34.020> CPU<00:00:34.469> with<00:00:34.739> advanced<00:00:35.100> for

00:00:35.389 --> 00:00:35.399 
unlocking the CPU with advanced for

00:00:35.399 --> 00:00:37.490 
unlocking the CPU with advanced for
calibration<00:00:36.120> function<00:00:36.630> we've<00:00:37.200> got<00:00:37.469> a

00:00:37.490 --> 00:00:37.500 
calibration function we've got a

00:00:37.500 --> 00:00:41.270 
calibration function we've got a
powerful<00:00:37.980> CPU<00:00:38.640> with<00:00:39.180> 4<00:00:39.480> cores<00:00:39.840> in<00:00:40.680> order<00:00:41.070> to

00:00:41.270 --> 00:00:41.280 
powerful CPU with 4 cores in order to

00:00:41.280 --> 00:00:43.400 
powerful CPU with 4 cores in order to
unlock<00:00:41.610> the<00:00:41.879> CPU<00:00:42.450> you<00:00:42.719> will<00:00:42.870> need<00:00:43.079> a<00:00:43.110> specific

00:00:43.400 --> 00:00:43.410 
unlock the CPU you will need a specific

00:00:43.410 --> 00:00:46.279 
unlock the CPU you will need a specific
motherboard<00:00:44.309> in<00:00:45.270> our<00:00:45.420> case<00:00:45.780> it<00:00:46.050> was<00:00:46.230> a

00:00:46.279 --> 00:00:46.289 
motherboard in our case it was a

00:00:46.289 --> 00:00:49.369 
motherboard in our case it was a
gigabyte<00:00:46.890> board<00:00:46.920> with<00:00:47.730> a<00:00:47.910> m2<00:00:48.570> plus<00:00:48.780> CPU

00:00:49.369 --> 00:00:49.379 
gigabyte board with a m2 plus CPU

00:00:49.379 --> 00:00:52.819 
gigabyte board with a m2 plus CPU
support<00:00:50.149> important<00:00:51.149> is<00:00:51.390> revision<00:00:51.960> 2.0

00:00:52.819 --> 00:00:52.829 
support important is revision 2.0

00:00:52.829 --> 00:00:55.580 
support important is revision 2.0
because<00:00:53.190> this<00:00:53.730> one<00:00:54.000> possesses<00:00:54.660> a<00:00:54.899> CC<00:00:55.350> function

00:00:55.580 --> 00:00:55.590 
because this one possesses a CC function

00:00:55.590 --> 00:00:58.849 
because this one possesses a CC function
supports<00:00:56.550> PC<00:00:57.030> to<00:00:57.270> memory<00:00:57.629> and<00:00:57.870> is<00:00:58.140> famous<00:00:58.590> for

00:00:58.849 --> 00:00:58.859 
supports PC to memory and is famous for

00:00:58.859 --> 00:01:01.580 
supports PC to memory and is famous for
overclocking<00:00:59.370> possibilities<00:01:00.329> also<00:01:00.930> don't

00:01:01.580 --> 00:01:01.590 
overclocking possibilities also don't

00:01:01.590 --> 00:01:04.070 
overclocking possibilities also don't
forget<00:01:01.770> to<00:01:02.010> update<00:01:02.309> your<00:01:02.670> bias<00:01:02.969> if<00:01:03.629> you<00:01:03.870> get

00:01:04.070 --> 00:01:04.080 
forget to update your bias if you get

00:01:04.080 --> 00:01:06.980 
forget to update your bias if you get
this<00:01:04.290> board<00:01:04.589> with<00:01:04.920> an<00:01:05.040> old<00:01:05.250> bias<00:01:05.549> be<00:01:06.210> sure<00:01:06.450> you

00:01:06.980 --> 00:01:06.990 
this board with an old bias be sure you

00:01:06.990 --> 00:01:11.109 
this board with an old bias be sure you
have<00:01:07.290> a<00:01:07.530> FG<00:01:08.100> bias<00:01:08.460> with<00:01:08.909> core<00:01:09.240> control<00:01:09.659> option

00:01:11.109 --> 00:01:11.119 
have a FG bias with core control option

00:01:11.119 --> 00:01:14.230 
have a FG bias with core control option
in<00:01:11.929> this<00:01:12.320> case<00:01:12.619> if<00:01:13.219> you<00:01:13.399> have<00:01:13.609> problems<00:01:14.149> with

00:01:14.230 --> 00:01:14.240 
in this case if you have problems with

00:01:14.240 --> 00:01:16.630 
in this case if you have problems with
some<00:01:14.659> unlocked<00:01:15.140> core<00:01:15.469> you<00:01:16.100> can<00:01:16.130> easily

00:01:16.630 --> 00:01:16.640 
some unlocked core you can easily

00:01:16.640 --> 00:01:19.359 
some unlocked core you can easily
disable<00:01:17.359> this<00:01:17.539> core<00:01:17.869> and<00:01:18.109> you<00:01:18.590> will<00:01:18.799> still<00:01:19.100> get

00:01:19.359 --> 00:01:19.369 
disable this core and you will still get

00:01:19.369 --> 00:01:22.440 
disable this core and you will still get
a<00:01:19.579> triple<00:01:20.030> core<00:01:20.329> CPU<00:01:20.899> with<00:01:21.289> additional<00:01:21.799> cash

00:01:22.440 --> 00:01:22.450 
a triple core CPU with additional cash

00:01:22.450 --> 00:01:25.630 
a triple core CPU with additional cash
it<00:01:23.450> will<00:01:23.750> be<00:01:23.869> still<00:01:24.140> faster<00:01:24.740> as<00:01:24.920> an<00:01:25.340> ordinary

00:01:25.630 --> 00:01:25.640 
it will be still faster as an ordinary

00:01:25.640 --> 00:01:30.940 
it will be still faster as an ordinary
dual-core<00:01:26.329> processor<00:01:29.289> after<00:01:30.289> we<00:01:30.380> turned<00:01:30.709> on

00:01:30.940 --> 00:01:30.950 
dual-core processor after we turned on

00:01:30.950 --> 00:01:33.779 
dual-core processor after we turned on
the<00:01:31.009> ACC<00:01:31.850> function<00:01:32.360> we<00:01:32.569> saw<00:01:32.780> the<00:01:32.840> CPUC

00:01:33.779 --> 00:01:33.789 
the ACC function we saw the CPUC

00:01:33.789 --> 00:01:37.630 
the ACC function we saw the CPUC
information<00:01:34.990> the<00:01:35.990> code<00:01:36.229> name<00:01:36.530> is<00:01:36.560> Deneb<00:01:37.250> the

00:01:37.630 --> 00:01:37.640 
information the code name is Deneb the

00:01:37.640 --> 00:01:41.980 
information the code name is Deneb the
cpu<00:01:38.090> has<00:01:38.329> 4<00:01:38.689> cores<00:01:39.819> our<00:01:40.819> operation<00:01:41.569> system

00:01:41.980 --> 00:01:41.990 
cpu has 4 cores our operation system

00:01:41.990 --> 00:01:44.620 
cpu has 4 cores our operation system
Windows<00:01:42.350> XP<00:01:42.859> has<00:01:43.369> recognized<00:01:43.939> 4<00:01:44.270> cores

00:01:44.620 --> 00:01:44.630 
Windows XP has recognized 4 cores

00:01:44.630 --> 00:01:46.990 
Windows XP has recognized 4 cores
correctly<00:01:45.289> as<00:01:45.409> well<00:01:45.439> we've<00:01:46.280> got<00:01:46.549> a<00:01:46.729> real

00:01:46.990 --> 00:01:47.000 
correctly as well we've got a real

00:01:47.000 --> 00:01:49.719 
correctly as well we've got a real
quad-core<00:01:47.689> processor<00:01:48.380> with<00:01:48.619> all<00:01:49.159> features<00:01:49.700> of

00:01:49.719 --> 00:01:49.729 
quad-core processor with all features of

00:01:49.729 --> 00:01:53.520 
quad-core processor with all features of
top<00:01:50.149> models<00:01:50.569> such<00:01:50.989> as<00:01:51.020> phenom<00:01:51.860> ii<00:01:52.280> x4

00:01:53.520 --> 00:01:53.530 
top models such as phenom ii x4

00:01:53.530 --> 00:01:56.229 
top models such as phenom ii x4
according<00:01:54.530> to<00:01:54.709> our<00:01:54.739> experiments<00:01:55.670> to<00:01:55.879> under

00:01:56.229 --> 00:01:56.239 
according to our experiments to under

00:01:56.239 --> 00:01:59.559 
according to our experiments to under
Walton<00:01:56.689> the<00:01:57.259> CPU<00:01:57.709> could<00:01:57.950> operate<00:01:58.340> at<00:01:58.700> 2.2

00:01:59.559 --> 00:01:59.569 
Walton the CPU could operate at 2.2

00:01:59.569 --> 00:02:03.729 
Walton the CPU could operate at 2.2
gigahertz<00:01:59.959> and<00:02:00.379> it's<00:02:00.890> voltage<00:02:01.489> was<00:02:02.119> 1.2<00:02:03.110> Walt

00:02:03.729 --> 00:02:03.739 
gigahertz and it's voltage was 1.2 Walt

00:02:03.739 --> 00:02:06.999 
gigahertz and it's voltage was 1.2 Walt
the<00:02:04.489> system<00:02:04.849> was<00:02:05.030> stable<00:02:05.329> and<00:02:05.750> it<00:02:06.289> was<00:02:06.500> tested

00:02:06.999 --> 00:02:07.009 
the system was stable and it was tested

00:02:07.009 --> 00:02:10.449 
the system was stable and it was tested
with<00:02:07.459> these<00:02:07.700> two<00:02:08.000> programs<00:02:08.269> I<00:02:09.129> would<00:02:10.129> try<00:02:10.399> to

00:02:10.449 --> 00:02:10.459 
with these two programs I would try to

00:02:10.459 --> 00:02:12.910 
with these two programs I would try to
overclock<00:02:11.090> these<00:02:11.480> quad-core<00:02:12.140> CPU<00:02:12.680> was

00:02:12.910 --> 00:02:12.920 
overclock these quad-core CPU was

00:02:12.920 --> 00:02:13.839 
overclock these quad-core CPU was
successful

00:02:13.839 --> 00:02:13.849 
successful

00:02:13.849 --> 00:02:17.229 
successful
we've<00:02:14.120> reached<00:02:14.920> 3.3<00:02:15.920> gigahertz<00:02:16.280> at<00:02:16.790> default

00:02:17.229 --> 00:02:17.239 
we've reached 3.3 gigahertz at default

00:02:17.239 --> 00:02:19.390 
we've reached 3.3 gigahertz at default
Walt<00:02:17.959> edge

00:02:19.390 --> 00:02:19.400 
Walt edge

00:02:19.400 --> 00:02:23.050 
Walt edge
the<00:02:20.030> system<00:02:20.420> was<00:02:20.599> tested<00:02:21.049> once<00:02:21.319> again<00:02:21.830> it<00:02:22.760> was

00:02:23.050 --> 00:02:23.060 
the system was tested once again it was

00:02:23.060 --> 00:02:27.280 
the system was tested once again it was
table<00:02:24.069> but<00:02:25.069> what<00:02:25.430> if<00:02:25.849> we<00:02:26.180> will<00:02:26.269> increase<00:02:26.810> CPU

00:02:27.280 --> 00:02:27.290 
table but what if we will increase CPU

00:02:27.290 --> 00:02:33.339 
table but what if we will increase CPU
voltage<00:02:27.799> a<00:02:27.950> little<00:02:28.280> bit

00:02:33.339 --> 00:02:33.349 

00:02:33.349 --> 00:02:37.390 

we<00:02:34.040> have<00:02:34.219> reached<00:02:34.840> 3.5<00:02:35.840> gigahertz<00:02:36.409> and<00:02:36.920> it<00:02:37.189> was

00:02:37.390 --> 00:02:37.400 
we have reached 3.5 gigahertz and it was

00:02:37.400 --> 00:02:41.310 
we have reached 3.5 gigahertz and it was
very<00:02:37.670> impressive<00:02:37.999> for<00:02:38.450> this<00:02:38.629> processor

00:02:41.310 --> 00:02:41.320 
very impressive for this processor

00:02:41.320 --> 00:02:44.200 
very impressive for this processor
unfortunately<00:02:42.320> we<00:02:42.860> made<00:02:43.070> no<00:02:43.400> tests<00:02:43.910> for

00:02:44.200 --> 00:02:44.210 
unfortunately we made no tests for

00:02:44.210 --> 00:02:46.600 
unfortunately we made no tests for
stability<00:02:44.480> check<00:02:45.040> because<00:02:46.040> of<00:02:46.280> the<00:02:46.430> dead

00:02:46.600 --> 00:02:46.610 
stability check because of the dead

00:02:46.610 --> 00:02:49.150 
stability check because of the dead
cooling<00:02:47.030> but<00:02:47.840> the<00:02:48.050> system<00:02:48.470> seems<00:02:48.830> to<00:02:49.070> be

00:02:49.150 --> 00:02:49.160 
cooling but the system seems to be

00:02:49.160 --> 00:02:52.150 
cooling but the system seems to be
stable<00:02:49.700> we<00:02:50.240> detected<00:02:50.900> no<00:02:51.050> crashes<00:02:51.620> during<00:02:51.830> our

00:02:52.150 --> 00:02:52.160 
stable we detected no crashes during our

00:02:52.160 --> 00:02:53.890 
stable we detected no crashes during our
experiments

00:02:53.890 --> 00:02:53.900 
experiments

00:02:53.900 --> 00:02:56.649 
experiments
we<00:02:54.470> think<00:02:54.739> that<00:02:55.069> the<00:02:55.220> most<00:02:55.459> users<00:02:56.030> may<00:02:56.269> prefer

00:02:56.649 --> 00:02:56.659 
we think that the most users may prefer

00:02:56.659 --> 00:02:59.350 
we think that the most users may prefer
these<00:02:56.870> optimal<00:02:57.769> options<00:02:58.250> for<00:02:58.459> everyday<00:02:58.879> use

00:02:59.350 --> 00:02:59.360 
these optimal options for everyday use

00:02:59.360 --> 00:03:03.039 
these optimal options for everyday use
even<00:03:00.349> if<00:03:00.590> you<00:03:00.769> overclock<00:03:01.280> the<00:03:01.430> CPU<00:03:01.640> up<00:03:02.390> to<00:03:02.690> 3

00:03:03.039 --> 00:03:03.049 
even if you overclock the CPU up to 3

00:03:03.049 --> 00:03:05.949 
even if you overclock the CPU up to 3
gigahertz<00:03:03.530> with<00:03:04.280> default<00:03:04.670> voltage<00:03:05.269> you<00:03:05.810> will

00:03:05.949 --> 00:03:05.959 
gigahertz with default voltage you will

00:03:05.959 --> 00:03:08.350 
gigahertz with default voltage you will
still<00:03:06.260> have<00:03:06.620> a<00:03:06.680> quad-core<00:03:07.099> processor<00:03:08.030> with<00:03:08.209> a

00:03:08.350 --> 00:03:08.360 
still have a quad-core processor with a

00:03:08.360 --> 00:03:11.860 
still have a quad-core processor with a
lot<00:03:08.599> of<00:03:08.629> power<00:03:09.310> it's<00:03:10.310> very<00:03:10.610> simple<00:03:11.150> if<00:03:11.629> you

00:03:11.860 --> 00:03:11.870 
lot of power it's very simple if you

00:03:11.870 --> 00:03:14.380 
lot of power it's very simple if you
want<00:03:11.900> to<00:03:12.379> find<00:03:12.590> out<00:03:12.890> how<00:03:13.459> lucky<00:03:13.730> you<00:03:14.000> are

00:03:14.380 --> 00:03:14.390 
want to find out how lucky you are

00:03:14.390 --> 00:03:16.780 
want to find out how lucky you are
you<00:03:14.780> can<00:03:14.989> try<00:03:15.230> to<00:03:15.290> unlock<00:03:15.890> this<00:03:16.159> dual-core

00:03:16.780 --> 00:03:16.790 
you can try to unlock this dual-core

00:03:16.790 --> 00:03:19.270 
you can try to unlock this dual-core
Athlon<00:03:17.329> processor<00:03:17.500> and<00:03:18.500> if<00:03:18.739> you<00:03:18.890> get<00:03:19.099> a

00:03:19.270 --> 00:03:19.280 
Athlon processor and if you get a

00:03:19.280 --> 00:03:21.880 
Athlon processor and if you get a
database<00:03:19.879> Athlon<00:03:20.510> you<00:03:21.049> may<00:03:21.260> get<00:03:21.470> a<00:03:21.500> very

00:03:21.880 --> 00:03:21.890 
database Athlon you may get a very

00:03:21.890 --> 00:03:26.140 
database Athlon you may get a very
powerful<00:03:22.159> CPU<00:03:23.030> as<00:03:23.599> a<00:03:23.629> bonus<00:03:24.910> one<00:03:25.910> should

00:03:26.140 --> 00:03:26.150 
powerful CPU as a bonus one should

00:03:26.150 --> 00:03:28.330 
powerful CPU as a bonus one should
remember<00:03:26.420> that<00:03:26.900> there<00:03:27.109> is<00:03:27.140> no<00:03:27.440> guarantee<00:03:27.709> that

00:03:28.330 --> 00:03:28.340 
remember that there is no guarantee that

00:03:28.340 --> 00:03:30.930 
remember that there is no guarantee that
your<00:03:28.790> CPU<00:03:29.420> can<00:03:29.780> be<00:03:29.930> successfully<00:03:30.530> unlocked

00:03:30.930 --> 00:03:30.940 
your CPU can be successfully unlocked

00:03:30.940 --> 00:03:34.210 
your CPU can be successfully unlocked
your<00:03:31.940> system<00:03:32.359> make<00:03:32.540> it<00:03:32.720> unstable<00:03:33.500> or<00:03:33.890> you<00:03:34.010> can

00:03:34.210 --> 00:03:34.220 
your system make it unstable or you can

00:03:34.220 --> 00:03:36.910 
your system make it unstable or you can
damage<00:03:34.640> your<00:03:34.879> hardware<00:03:35.420> it<00:03:36.079> was<00:03:36.379> just<00:03:36.799> an

00:03:36.910 --> 00:03:36.920 
damage your hardware it was just an

00:03:36.920 --> 00:03:39.490 
damage your hardware it was just an
experiment<00:03:37.370> and<00:03:37.819> we<00:03:37.849> shared<00:03:38.659> our<00:03:38.900> results

00:03:39.490 --> 00:03:39.500 
experiment and we shared our results

00:03:39.500 --> 00:03:46.210 
experiment and we shared our results
with<00:03:39.680> other<00:03:39.890> users<00:03:44.590> for<00:03:45.590> more<00:03:45.799> interesting

00:03:46.210 --> 00:03:46.220 
with other users for more interesting

00:03:46.220 --> 00:03:48.699 
with other users for more interesting
reviews<00:03:46.849> and<00:03:47.120> experiments<00:03:47.930> visit<00:03:48.530> our

00:03:48.699 --> 00:03:48.709 
reviews and experiments visit our

00:03:48.709 --> 00:03:53.500 
reviews and experiments visit our
Facebook<00:03:49.549> group<00:03:49.579> hot<00:03:50.390> busy<00:03:51.079> user

