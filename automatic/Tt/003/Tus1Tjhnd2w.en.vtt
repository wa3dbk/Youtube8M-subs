WEBVTT
Kind: captions
Language: en

00:00:00.290 --> 00:00:02.750 

because<00:00:01.290> it<00:00:01.410> is<00:00:01.530> difficult<00:00:01.740> for<00:00:02.100> us<00:00:02.310> to<00:00:02.520> read

00:00:02.750 --> 00:00:02.760 
because it is difficult for us to read

00:00:02.760 --> 00:00:04.490 
because it is difficult for us to read
and<00:00:03.000> understand<00:00:03.570> the<00:00:03.659> binary<00:00:04.049> codes<00:00:04.319> of

00:00:04.490 --> 00:00:04.500 
and understand the binary codes of

00:00:04.500 --> 00:00:07.010 
and understand the binary codes of
computers<00:00:04.950> it<00:00:05.670> is<00:00:05.819> often<00:00:05.970> advantageous<00:00:06.569> to

00:00:07.010 --> 00:00:07.020 
computers it is often advantageous to

00:00:07.020 --> 00:00:09.919 
computers it is often advantageous to
use<00:00:07.170> alternative<00:00:07.859> codes<00:00:08.130> or<00:00:08.400> languages<00:00:09.120> to

00:00:09.919 --> 00:00:09.929 
use alternative codes or languages to

00:00:09.929 --> 00:00:11.799 
use alternative codes or languages to
represent<00:00:09.960> what<00:00:10.469> the<00:00:10.559> computer<00:00:10.920> is<00:00:11.040> doing

00:00:11.799 --> 00:00:11.809 
represent what the computer is doing

00:00:11.809 --> 00:00:14.030 
represent what the computer is doing
these<00:00:12.809> languages<00:00:13.290> range<00:00:13.530> from<00:00:13.710> the<00:00:13.799> high

00:00:14.030 --> 00:00:14.040 
these languages range from the high

00:00:14.040 --> 00:00:17.000 
these languages range from the high
level<00:00:14.370> languages<00:00:14.790> such<00:00:15.000> as<00:00:15.030> C++<00:00:15.299> Java<00:00:16.109> or

00:00:17.000 --> 00:00:17.010 
level languages such as C++ Java or

00:00:17.010 --> 00:00:19.939 
level languages such as C++ Java or
Python<00:00:17.930> down<00:00:18.930> to<00:00:19.109> the<00:00:19.230> low<00:00:19.380> level<00:00:19.710> assembly

00:00:19.939 --> 00:00:19.949 
Python down to the low level assembly

00:00:19.949 --> 00:00:22.580 
Python down to the low level assembly
languages<00:00:20.600> before<00:00:21.600> we<00:00:21.810> discuss<00:00:22.170> assembly

00:00:22.580 --> 00:00:22.590 
languages before we discuss assembly

00:00:22.590 --> 00:00:24.740 
languages before we discuss assembly
language<00:00:22.949> we<00:00:23.850> will<00:00:23.910> discuss<00:00:24.210> a<00:00:24.240> useful

00:00:24.740 --> 00:00:24.750 
language we will discuss a useful

00:00:24.750 --> 00:00:26.599 
language we will discuss a useful
simpler<00:00:25.350> language<00:00:25.500> called<00:00:26.189> register

00:00:26.599 --> 00:00:26.609 
simpler language called register

00:00:26.609 --> 00:00:31.759 
simpler language called register
transfer<00:00:27.150> language<00:00:27.480> or<00:00:28.220> RTL<00:00:29.220> as<00:00:30.679> we<00:00:31.679> have

00:00:31.759 --> 00:00:31.769 
transfer language or RTL as we have

00:00:31.769 --> 00:00:34.819 
transfer language or RTL as we have
discussed<00:00:32.130> previously<00:00:32.809> computers<00:00:33.809> do<00:00:34.020> two

00:00:34.819 --> 00:00:34.829 
discussed previously computers do two

00:00:34.829 --> 00:00:35.380 
discussed previously computers do two
things

00:00:35.380 --> 00:00:35.390 
things

00:00:35.390 --> 00:00:38.600 
things
store<00:00:36.390> state<00:00:36.630> information<00:00:36.870> and<00:00:37.610> manipulate

00:00:38.600 --> 00:00:38.610 
store state information and manipulate

00:00:38.610 --> 00:00:41.360 
store state information and manipulate
state<00:00:38.969> information<00:00:39.770> one<00:00:40.770> place<00:00:41.010> to<00:00:41.160> store

00:00:41.360 --> 00:00:41.370 
state information one place to store

00:00:41.370 --> 00:00:43.220 
state information one place to store
state<00:00:41.640> information<00:00:41.910> is<00:00:42.329> in<00:00:42.660> the<00:00:42.750> computers

00:00:43.220 --> 00:00:43.230 
state information is in the computers

00:00:43.230 --> 00:00:46.970 
state information is in the computers
registers<00:00:44.510> now<00:00:45.510> registers<00:00:45.960> are<00:00:46.079> simple<00:00:46.469> but

00:00:46.970 --> 00:00:46.980 
registers now registers are simple but

00:00:46.980 --> 00:00:49.580 
registers now registers are simple but
fast<00:00:47.460> storage<00:00:48.090> devices<00:00:48.390> that<00:00:48.750> each<00:00:48.899> store<00:00:49.320> a

00:00:49.580 --> 00:00:49.590 
fast storage devices that each store a

00:00:49.590 --> 00:00:53.479 
fast storage devices that each store a
set<00:00:50.550> number<00:00:50.730> of<00:00:50.910> bits<00:00:51.180> where<00:00:52.140> a<00:00:52.170> bit<00:00:52.440> is<00:00:52.680> the

00:00:53.479 --> 00:00:53.489 
set number of bits where a bit is the

00:00:53.489 --> 00:00:56.119 
set number of bits where a bit is the
smallest<00:00:53.760> piece<00:00:53.969> of<00:00:54.120> information<00:00:55.010> stored<00:00:56.010> as

00:00:56.119 --> 00:00:56.129 
smallest piece of information stored as

00:00:56.129 --> 00:01:00.290 
smallest piece of information stored as
a<00:00:56.160> 1<00:00:56.430> or<00:00:56.670> a<00:00:56.730> 0<00:00:57.059> in<00:00:57.980> this<00:00:58.980> example<00:00:59.309> all<00:00:59.670> of<00:00:59.730> the

00:01:00.290 --> 00:01:00.300 
a 1 or a 0 in this example all of the

00:01:00.300 --> 00:01:03.219 
a 1 or a 0 in this example all of the
registers<00:01:00.660> store<00:01:00.989> 8<00:01:01.440> bits

00:01:03.219 --> 00:01:03.229 
registers store 8 bits

00:01:03.229 --> 00:01:06.859 
registers store 8 bits
RTL<00:01:04.229> code<00:01:04.500> is<00:01:04.769> a<00:01:04.830> simple<00:01:05.519> language<00:01:05.700> but<00:01:06.630> tells

00:01:06.859 --> 00:01:06.869 
RTL code is a simple language but tells

00:01:06.869 --> 00:01:08.210 
RTL code is a simple language but tells
us<00:01:07.049> how<00:01:07.229> we<00:01:07.290> want<00:01:07.530> to<00:01:07.590> transfer<00:01:08.040> information

00:01:08.210 --> 00:01:08.220 
us how we want to transfer information

00:01:08.220 --> 00:01:12.039 
us how we want to transfer information
from<00:01:08.580> one<00:01:08.909> register<00:01:09.330> to<00:01:09.409> another<00:01:10.409> register

00:01:12.039 --> 00:01:12.049 
from one register to another register

00:01:12.049 --> 00:01:14.740 
from one register to another register
most<00:01:13.049> computers<00:01:13.470> use<00:01:13.710> a<00:01:13.920> number<00:01:14.189> of<00:01:14.250> registers

00:01:14.740 --> 00:01:14.750 
most computers use a number of registers

00:01:14.750 --> 00:01:19.500 
most computers use a number of registers
but<00:01:15.750> a<00:01:15.810> computer<00:01:16.110> may<00:01:16.290> have<00:01:16.409> as<00:01:16.530> few<00:01:16.890> as<00:01:17.070> 1

00:01:19.500 --> 00:01:19.510 
but a computer may have as few as 1

00:01:19.510 --> 00:01:23.460 
but a computer may have as few as 1
for<00:01:20.110> the<00:01:20.200> sake<00:01:20.380> of<00:01:20.410> this<00:01:20.650> example<00:01:20.710> though<00:01:22.470> we

00:01:23.460 --> 00:01:23.470 
for the sake of this example though we

00:01:23.470 --> 00:01:28.160 
for the sake of this example though we
number<00:01:23.740> the<00:01:23.830> registers<00:01:24.250> from<00:01:24.460> zero<00:01:24.790> to<00:01:25.330> seven

00:01:28.160 --> 00:01:28.170 

00:01:28.170 --> 00:01:31.260 

perhaps<00:01:29.170> the<00:01:29.440> simplest<00:01:29.860> RTL<00:01:30.490> instruction<00:01:30.970> is

00:01:31.260 --> 00:01:31.270 
perhaps the simplest RTL instruction is

00:01:31.270 --> 00:01:33.060 
perhaps the simplest RTL instruction is
instruction<00:01:31.600> that<00:01:31.990> transfers<00:01:32.440> the<00:01:32.620> contents

00:01:33.060 --> 00:01:33.070 
instruction that transfers the contents

00:01:33.070 --> 00:01:36.230 
instruction that transfers the contents
of<00:01:33.190> one<00:01:33.490> register<00:01:34.000> into<00:01:34.960> another<00:01:35.200> register

00:01:36.230 --> 00:01:36.240 
of one register into another register

00:01:36.240 --> 00:01:39.300 
of one register into another register
for<00:01:37.240> example<00:01:37.330> this<00:01:38.170> line<00:01:38.440> of<00:01:38.590> RTL<00:01:39.040> code

00:01:39.300 --> 00:01:39.310 
for example this line of RTL code

00:01:39.310 --> 00:01:41.370 
for example this line of RTL code
commands<00:01:39.940> the<00:01:40.180> computer<00:01:40.720> to<00:01:40.840> transfer<00:01:41.080> the

00:01:41.370 --> 00:01:41.380 
commands the computer to transfer the

00:01:41.380 --> 00:01:44.820 
commands the computer to transfer the
contents<00:01:41.920> of<00:01:42.090> register<00:01:43.090> five<00:01:43.360> and<00:01:43.830> to

00:01:44.820 --> 00:01:44.830 
contents of register five and to

00:01:44.830 --> 00:01:48.390 
contents of register five and to
register<00:01:45.160> for<00:01:46.470> notice<00:01:47.470> that<00:01:47.980> the<00:01:48.190> arrow

00:01:48.390 --> 00:01:48.400 
register for notice that the arrow

00:01:48.400 --> 00:01:50.910 
register for notice that the arrow
points<00:01:48.730> to<00:01:49.180> the<00:01:49.210> register<00:01:49.690> more<00:01:50.140> data<00:01:50.410> will<00:01:50.710> be

00:01:50.910 --> 00:01:50.920 
points to the register more data will be

00:01:50.920 --> 00:01:53.970 
points to the register more data will be
stored<00:01:51.960> the<00:01:52.960> contents<00:01:53.470> of<00:01:53.590> each<00:01:53.740> of<00:01:53.920> these

00:01:53.970 --> 00:01:53.980 
stored the contents of each of these

00:01:53.980 --> 00:01:56.490 
stored the contents of each of these
registers<00:01:54.510> can<00:01:55.510> be<00:01:55.540> any<00:01:55.810> number<00:01:56.140> that<00:01:56.170> can<00:01:56.350> be

00:01:56.490 --> 00:01:56.500 
registers can be any number that can be

00:01:56.500 --> 00:01:59.910 
registers can be any number that can be
encoded<00:01:56.770> with<00:01:57.130> eight<00:01:57.730> bits<00:01:58.090> in<00:01:58.710> a<00:01:59.710> more

00:01:59.910 --> 00:01:59.920 
encoded with eight bits in a more

00:01:59.920 --> 00:02:01.680 
encoded with eight bits in a more
sophisticated<00:02:00.070> computer<00:02:00.910> the<00:02:01.330> number<00:02:01.600> of

00:02:01.680 --> 00:02:01.690 
sophisticated computer the number of

00:02:01.690 --> 00:02:04.110 
sophisticated computer the number of
bits<00:02:01.870> in<00:02:02.080> each<00:02:02.470> register<00:02:02.950> likely<00:02:03.730> be<00:02:03.880> greater

00:02:04.110 --> 00:02:04.120 
bits in each register likely be greater

00:02:04.120 --> 00:02:07.470 
bits in each register likely be greater
in<00:02:04.470> some<00:02:05.470> computers<00:02:05.980> we<00:02:06.610> can<00:02:06.730> simply<00:02:07.120> store<00:02:07.450> a

00:02:07.470 --> 00:02:07.480 
in some computers we can simply store a

00:02:07.480 --> 00:02:10.070 
in some computers we can simply store a
specific<00:02:08.200> number<00:02:08.320> into<00:02:08.740> a<00:02:08.920> register<00:02:09.280> directly

00:02:10.070 --> 00:02:10.080 
specific number into a register directly

00:02:10.080 --> 00:02:13.170 
specific number into a register directly
for<00:02:11.080> example<00:02:11.590> we<00:02:12.070> could<00:02:12.250> store<00:02:12.490> the<00:02:12.640> value<00:02:12.850> 0

00:02:13.170 --> 00:02:13.180 
for example we could store the value 0

00:02:13.180 --> 00:02:17.550 
for example we could store the value 0
into<00:02:14.020> register<00:02:14.380> 0<00:02:15.480> notice<00:02:16.480> that<00:02:17.200> an<00:02:17.380> R

00:02:17.550 --> 00:02:17.560 
into register 0 notice that an R

00:02:17.560 --> 00:02:20.820 
into register 0 notice that an R
followed<00:02:17.950> by<00:02:18.250> a<00:02:18.280> number<00:02:19.560> symbolizes<00:02:20.560> when<00:02:20.710> the

00:02:20.820 --> 00:02:20.830 
followed by a number symbolizes when the

00:02:20.830 --> 00:02:24.030 
followed by a number symbolizes when the
contents<00:02:21.550> of<00:02:21.790> specific<00:02:22.510> astir<00:02:22.810> are<00:02:23.110> being

00:02:24.030 --> 00:02:24.040 
contents of specific astir are being

00:02:24.040 --> 00:02:28.199 
contents of specific astir are being
used<00:02:24.720> but<00:02:25.720> a<00:02:25.780> number<00:02:26.200> without<00:02:26.530> an<00:02:26.920> R<00:02:27.130> is<00:02:27.790> simply

00:02:28.199 --> 00:02:28.209 
used but a number without an R is simply

00:02:28.209 --> 00:02:31.830 
used but a number without an R is simply
the<00:02:28.870> number<00:02:29.230> as<00:02:29.410> a<00:02:29.470> quick<00:02:30.430> side<00:02:30.670> note<00:02:30.700> the<00:02:31.600> term

00:02:31.830 --> 00:02:31.840 
the number as a quick side note the term

00:02:31.840 --> 00:02:34.920 
the number as a quick side note the term
transfer<00:02:32.530> is<00:02:32.980> a<00:02:33.130> little<00:02:33.490> misleading<00:02:33.930> because

00:02:34.920 --> 00:02:34.930 
transfer is a little misleading because

00:02:34.930 --> 00:02:38.370 
transfer is a little misleading because
we<00:02:35.860> can<00:02:36.100> transfer<00:02:36.550> information<00:02:37.090> back<00:02:38.050> into

00:02:38.370 --> 00:02:38.380 
we can transfer information back into

00:02:38.380 --> 00:02:41.910 
we can transfer information back into
the<00:02:39.100> same<00:02:39.340> register<00:02:39.900> for<00:02:40.900> example<00:02:41.320> we<00:02:41.680> could

00:02:41.910 --> 00:02:41.920 
the same register for example we could

00:02:41.920 --> 00:02:45.690 
the same register for example we could
store<00:02:42.160> the<00:02:42.310> contents<00:02:42.760> of<00:02:42.820> our<00:02:43.000> 6<00:02:43.620> back<00:02:44.620> into<00:02:45.160> R

00:02:45.690 --> 00:02:45.700 
store the contents of our 6 back into R

00:02:45.700 --> 00:02:47.589 
store the contents of our 6 back into R
6

00:02:47.589 --> 00:02:47.599 
6

00:02:47.599 --> 00:02:50.550 
6
let's<00:02:48.260> explore<00:02:48.650> a<00:02:48.920> more<00:02:49.400> complicated<00:02:49.999> example

00:02:50.550 --> 00:02:50.560 
let's explore a more complicated example

00:02:50.560 --> 00:02:53.830 
let's explore a more complicated example
this<00:02:51.560> RTL<00:02:52.099> expression<00:02:52.609> shows<00:02:53.329> that<00:02:53.540> we<00:02:53.629> want

00:02:53.830 --> 00:02:53.840 
this RTL expression shows that we want

00:02:53.840 --> 00:02:56.649 
this RTL expression shows that we want
to<00:02:53.959> add<00:02:54.079> the<00:02:54.349> contents<00:02:54.829> of<00:02:54.889> register<00:02:55.310> 1<00:02:55.659> with

00:02:56.649 --> 00:02:56.659 
to add the contents of register 1 with

00:02:56.659 --> 00:02:59.709 
to add the contents of register 1 with
the<00:02:56.810> contents<00:02:57.230> of<00:02:57.349> register<00:02:57.739> 2<00:02:57.980> and<00:02:58.569> store<00:02:59.569> the

00:02:59.709 --> 00:02:59.719 
the contents of register 2 and store the

00:02:59.719 --> 00:03:04.979 
the contents of register 2 and store the
sum<00:02:59.930> of<00:02:59.959> this<00:03:00.170> addition<00:03:00.590> into<00:03:01.219> register<00:03:01.639> 3<00:03:03.819> if

00:03:04.979 --> 00:03:04.989 
sum of this addition into register 3 if

00:03:04.989 --> 00:03:08.800 
sum of this addition into register 3 if
we<00:03:05.989> removed<00:03:06.379> this<00:03:06.590> R<00:03:07.090> then<00:03:08.090> we<00:03:08.209> would<00:03:08.389> simply

00:03:08.800 --> 00:03:08.810 
we removed this R then we would simply

00:03:08.810 --> 00:03:12.179 
we removed this R then we would simply
add<00:03:09.019> 1<00:03:09.530> to<00:03:10.519> the<00:03:10.639> contents<00:03:11.120> of<00:03:11.209> register<00:03:11.569> 2<00:03:11.840> and

00:03:12.179 --> 00:03:12.189 
add 1 to the contents of register 2 and

00:03:12.189 --> 00:03:17.589 
add 1 to the contents of register 2 and
store<00:03:13.189> that<00:03:13.219> sum<00:03:14.439> into<00:03:15.439> register<00:03:15.829> 3<00:03:16.359> now<00:03:17.359> there

00:03:17.589 --> 00:03:17.599 
store that sum into register 3 now there

00:03:17.599 --> 00:03:21.190 
store that sum into register 3 now there
are<00:03:17.689> a<00:03:17.749> variety<00:03:17.870> of<00:03:18.499> RTL<00:03:19.370> instructions<00:03:20.200> but

00:03:21.190 --> 00:03:21.200 
are a variety of RTL instructions but

00:03:21.200 --> 00:03:22.990 
are a variety of RTL instructions but
the<00:03:21.560> basic<00:03:21.889> operations<00:03:22.430> consist<00:03:22.730> of

00:03:22.990 --> 00:03:23.000 
the basic operations consist of

00:03:23.000 --> 00:03:28.619 
the basic operations consist of
arithmetic<00:03:23.599> operations<00:03:26.409> logic<00:03:27.409> operations

00:03:28.619 --> 00:03:28.629 
arithmetic operations logic operations

00:03:28.629 --> 00:03:33.130 
arithmetic operations logic operations
and<00:03:29.629> shift<00:03:30.379> operations

00:03:33.130 --> 00:03:33.140 

00:03:33.140 --> 00:03:36.070 

these<00:03:33.710> operations<00:03:34.160> are<00:03:34.460> performed<00:03:34.580> by<00:03:35.240> a

00:03:36.070 --> 00:03:36.080 
these operations are performed by a

00:03:36.080 --> 00:03:38.350 
these operations are performed by a
component<00:03:36.530> called<00:03:36.890> the<00:03:37.370> arithmetic<00:03:37.670> logic

00:03:38.350 --> 00:03:38.360 
component called the arithmetic logic

00:03:38.360 --> 00:03:43.210 
component called the arithmetic logic
unit<00:03:38.390> or<00:03:39.380> ALU<00:03:40.900> the<00:03:41.900> details<00:03:42.319> of<00:03:42.680> the<00:03:42.830> ALU

00:03:43.210 --> 00:03:43.220 
unit or ALU the details of the ALU

00:03:43.220 --> 00:03:46.170 
unit or ALU the details of the ALU
operations<00:03:43.819> are<00:03:44.180> discussed<00:03:44.630> in<00:03:44.840> other<00:03:45.440> videos

00:03:46.170 --> 00:03:46.180 
operations are discussed in other videos

00:03:46.180 --> 00:03:49.150 
operations are discussed in other videos
it's<00:03:47.180> also<00:03:47.300> important<00:03:47.780> to<00:03:47.840> mention<00:03:47.990> that<00:03:48.860> most

00:03:49.150 --> 00:03:49.160 
it's also important to mention that most

00:03:49.160 --> 00:03:52.540 
it's also important to mention that most
RTL<00:03:49.820> instructions<00:03:50.360> take<00:03:50.930> one<00:03:51.620> clock<00:03:51.950> cycle<00:03:51.980> to

00:03:52.540 --> 00:03:52.550 
RTL instructions take one clock cycle to

00:03:52.550 --> 00:03:55.870 
RTL instructions take one clock cycle to
complete<00:03:52.880> so<00:03:53.840> with<00:03:54.380> a<00:03:54.410> two<00:03:54.920> gigahertz<00:03:55.220> system

00:03:55.870 --> 00:03:55.880 
complete so with a two gigahertz system

00:03:55.880 --> 00:03:57.970 
complete so with a two gigahertz system
we<00:03:56.750> could<00:03:56.840> execute<00:03:57.110> approximately<00:03:57.830> two

00:03:57.970 --> 00:03:57.980 
we could execute approximately two

00:03:57.980 --> 00:03:58.620 
we could execute approximately two
billion

00:03:58.620 --> 00:03:58.630 
billion

00:03:58.630 --> 00:04:02.199 
billion
rtl<00:03:59.630> instructions<00:04:00.140> per<00:04:00.290> second<00:04:01.060> types<00:04:02.060> of

00:04:02.199 --> 00:04:02.209 
rtl instructions per second types of

00:04:02.209 --> 00:04:04.510 
rtl instructions per second types of
instructions<00:04:02.780> and<00:04:03.110> the<00:04:03.650> number<00:04:04.010> of<00:04:04.130> our<00:04:04.280> tail

00:04:04.510 --> 00:04:04.520 
instructions and the number of our tail

00:04:04.520 --> 00:04:06.790 
instructions and the number of our tail
instructions<00:04:05.000> will<00:04:05.120> vary<00:04:05.480> depending<00:04:05.780> on<00:04:06.680> the

00:04:06.790 --> 00:04:06.800 
instructions will vary depending on the

00:04:06.800 --> 00:04:09.300 
instructions will vary depending on the
computer<00:04:07.040> that<00:04:07.280> you<00:04:07.400> are<00:04:07.489> programming<00:04:08.140> so

00:04:09.300 --> 00:04:09.310 
computer that you are programming so

00:04:09.310 --> 00:04:11.740 
computer that you are programming so
unfortunately<00:04:10.310> can<00:04:11.180> I<00:04:11.209> discuss<00:04:11.600> the

00:04:11.740 --> 00:04:11.750 
unfortunately can I discuss the

00:04:11.750 --> 00:04:13.750 
unfortunately can I discuss the
specifics<00:04:12.260> of<00:04:12.320> RTL<00:04:12.739> beyond<00:04:13.160> these<00:04:13.459> basic

00:04:13.750 --> 00:04:13.760 
specifics of RTL beyond these basic

00:04:13.760 --> 00:04:16.060 
specifics of RTL beyond these basic
ideas<00:04:14.090> but<00:04:14.959> hopefully<00:04:15.350> they're<00:04:15.830> enough<00:04:15.950> to

00:04:16.060 --> 00:04:16.070 
ideas but hopefully they're enough to

00:04:16.070 --> 00:04:18.370 
ideas but hopefully they're enough to
get<00:04:16.190> you<00:04:16.310> started

