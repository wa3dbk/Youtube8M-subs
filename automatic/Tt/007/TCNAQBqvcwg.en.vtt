WEBVTT
Kind: captions
Language: en

00:00:07.670 --> 00:00:11.180 

should<00:00:08.670> I<00:00:08.700> learn<00:00:08.910> list<00:00:09.240> before<00:00:09.630> cloture<00:00:10.190> there

00:00:11.180 --> 00:00:11.190 
should I learn list before cloture there

00:00:11.190 --> 00:00:12.650 
should I learn list before cloture there
are<00:00:11.340> people<00:00:11.639> who<00:00:11.759> think<00:00:11.969> closure<00:00:12.509> is

00:00:12.650 --> 00:00:12.660 
are people who think closure is

00:00:12.660 --> 00:00:15.259 
are people who think closure is
replacing<00:00:13.230> Lisp<00:00:13.670> cloture<00:00:14.670> is<00:00:14.700> often

00:00:15.259 --> 00:00:15.269 
replacing Lisp cloture is often

00:00:15.269 --> 00:00:18.290 
replacing Lisp cloture is often
condemned<00:00:15.660> as<00:00:15.900> slow<00:00:16.230> though<00:00:17.090> Lisp<00:00:18.090> is

00:00:18.290 --> 00:00:18.300 
condemned as slow though Lisp is

00:00:18.300 --> 00:00:20.960 
condemned as slow though Lisp is
efficient<00:00:18.779> it<00:00:19.710> is<00:00:19.920> also<00:00:20.160> heaven<00:00:20.580> for<00:00:20.820> those

00:00:20.960 --> 00:00:20.970 
efficient it is also heaven for those

00:00:20.970 --> 00:00:22.960 
efficient it is also heaven for those
who<00:00:21.210> love<00:00:21.420> ellipses<00:00:21.930> and<00:00:21.960> parentheses<00:00:22.680> and

00:00:22.960 --> 00:00:22.970 
who love ellipses and parentheses and

00:00:22.970 --> 00:00:26.390 
who love ellipses and parentheses and
list<00:00:23.970> has<00:00:24.180> been<00:00:24.390> around<00:00:24.660> forever<00:00:24.960> I<00:00:25.439> thought

00:00:26.390 --> 00:00:26.400 
list has been around forever I thought

00:00:26.400 --> 00:00:29.359 
list has been around forever I thought
that<00:00:26.640> was<00:00:26.820> about<00:00:27.090> fifty<00:00:27.510> years<00:00:27.830> ten<00:00:28.830> years<00:00:28.859> is

00:00:29.359 --> 00:00:29.369 
that was about fifty years ten years is

00:00:29.369 --> 00:00:31.130 
that was about fifty years ten years is
forever<00:00:29.580> on<00:00:30.029> the<00:00:30.119> internet<00:00:30.510> and<00:00:30.660> this

00:00:31.130 --> 00:00:31.140 
forever on the internet and this

00:00:31.140 --> 00:00:33.440 
forever on the internet and this
predates<00:00:31.590> the<00:00:31.890> internet<00:00:32.279> i<00:00:32.489> read<00:00:33.420> that

00:00:33.440 --> 00:00:33.450 
predates the internet i read that

00:00:33.450 --> 00:00:36.170 
predates the internet i read that
cloture<00:00:33.899> with<00:00:34.260> an<00:00:34.380> update<00:00:34.800> of<00:00:34.829> Lisp<00:00:35.280> its

00:00:36.170 --> 00:00:36.180 
cloture with an update of Lisp its

00:00:36.180 --> 00:00:39.200 
cloture with an update of Lisp its
disadvantages<00:00:37.079> its<00:00:37.260> newness<00:00:37.680> it<00:00:38.670> needs<00:00:38.969> to

00:00:39.200 --> 00:00:39.210 
disadvantages its newness it needs to

00:00:39.210 --> 00:00:42.619 
disadvantages its newness it needs to
mature<00:00:39.329> a<00:00:39.600> little<00:00:39.950> what<00:00:41.149> another<00:00:42.149> year<00:00:42.450> until

00:00:42.619 --> 00:00:42.629 
mature a little what another year until

00:00:42.629 --> 00:00:45.979 
mature a little what another year until
it<00:00:42.989> is<00:00:43.079> taken<00:00:43.469> seriously<00:00:44.329> Common<00:00:45.329> Lisp<00:00:45.360> is<00:00:45.780> in

00:00:45.979 --> 00:00:45.989 
it is taken seriously Common Lisp is in

00:00:45.989 --> 00:00:47.720 
it is taken seriously Common Lisp is in
bed<00:00:46.200> in<00:00:46.320> a<00:00:46.410> nightie<00:00:46.620> because<00:00:47.190> of<00:00:47.340> things<00:00:47.579> like

00:00:47.720 --> 00:00:47.730 
bed in a nightie because of things like

00:00:47.730 --> 00:00:51.500 
bed in a nightie because of things like
a<00:00:48.090> NSI<00:00:48.570> Common<00:00:49.020> Lisp<00:00:49.050> as<00:00:49.410> an<00:00:49.620> IT<00:00:49.829> standard<00:00:50.520> Lisp

00:00:51.500 --> 00:00:51.510 
a NSI Common Lisp as an IT standard Lisp

00:00:51.510 --> 00:00:53.330 
a NSI Common Lisp as an IT standard Lisp
in<00:00:51.690> some<00:00:51.960> ways<00:00:52.170> is<00:00:52.410> more<00:00:52.649> flexible<00:00:52.949> than

00:00:53.330 --> 00:00:53.340 
in some ways is more flexible than

00:00:53.340 --> 00:00:55.939 
in some ways is more flexible than
cloture<00:00:54.120> treating<00:00:54.809> data<00:00:55.020> and<00:00:55.260> functions<00:00:55.530> the

00:00:55.939 --> 00:00:55.949 
cloture treating data and functions the

00:00:55.949 --> 00:00:57.650 
cloture treating data and functions the
same<00:00:56.190> while<00:00:56.730> letting<00:00:57.030> you<00:00:57.239> build<00:00:57.449> your<00:00:57.600> own

00:00:57.650 --> 00:00:57.660 
same while letting you build your own

00:00:57.660 --> 00:01:00.470 
same while letting you build your own
programming<00:00:58.350> language<00:00:58.829> in<00:00:59.460> some<00:01:00.180> ways

00:01:00.470 --> 00:01:00.480 
programming language in some ways

00:01:00.480 --> 00:01:02.540 
programming language in some ways
learning<00:01:01.350> closure<00:01:01.829> would<00:01:02.010> be<00:01:02.190> better<00:01:02.430> than

00:01:02.540 --> 00:01:02.550 
learning closure would be better than

00:01:02.550 --> 00:01:05.210 
learning closure would be better than
learning<00:01:02.850> list<00:01:03.530> closure<00:01:04.530> is<00:01:04.559> a<00:01:04.710> lot<00:01:04.979> more

00:01:05.210 --> 00:01:05.220 
learning list closure is a lot more

00:01:05.220 --> 00:01:07.640 
learning list closure is a lot more
disciplined<00:01:05.820> than<00:01:06.030> Lisp<00:01:06.420> maybe<00:01:06.990> picking<00:01:07.530> that

00:01:07.640 --> 00:01:07.650 
disciplined than Lisp maybe picking that

00:01:07.650 --> 00:01:10.700 
disciplined than Lisp maybe picking that
up<00:01:07.710> from<00:01:08.100> Haskell<00:01:08.390> is<00:01:09.390> clergy<00:01:09.840> more<00:01:10.200> practical

00:01:10.700 --> 00:01:10.710 
up from Haskell is clergy more practical

00:01:10.710 --> 00:01:14.929 
up from Haskell is clergy more practical
than<00:01:10.740> Haskell<00:01:11.340> oh<00:01:12.020> very<00:01:13.020> much<00:01:13.140> so<00:01:13.909> closure<00:01:14.909> is

00:01:14.929 --> 00:01:14.939 
than Haskell oh very much so closure is

00:01:14.939 --> 00:01:18.710 
than Haskell oh very much so closure is
an<00:01:15.210> active<00:01:15.570> language<00:01:16.020> that<00:01:16.229> runs<00:01:16.500> on<00:01:16.710> JVM<00:01:17.720> JVM

00:01:18.710 --> 00:01:18.720 
an active language that runs on JVM JVM

00:01:18.720 --> 00:01:21.050 
an active language that runs on JVM JVM
is<00:01:18.960> golden<00:01:19.439> assuming<00:01:20.310> you<00:01:20.430> can<00:01:20.640> use<00:01:20.790> it<00:01:20.820> to

00:01:21.050 --> 00:01:21.060 
is golden assuming you can use it to

00:01:21.060 --> 00:01:24.109 
is golden assuming you can use it to
access<00:01:21.509> their<00:01:21.689> libraries<00:01:22.400> yes<00:01:23.400> which<00:01:23.909> is

00:01:24.109 --> 00:01:24.119 
access their libraries yes which is

00:01:24.119 --> 00:01:26.030 
access their libraries yes which is
where<00:01:24.360> closure<00:01:24.900> is<00:01:25.049> better<00:01:25.290> than<00:01:25.500> list<00:01:25.770> and

00:01:26.030 --> 00:01:26.040 
where closure is better than list and

00:01:26.040 --> 00:01:28.130 
where closure is better than list and
then<00:01:26.909> there<00:01:27.090> is<00:01:27.119> the<00:01:27.360> fact<00:01:27.659> that<00:01:27.780> you<00:01:27.990> can

00:01:28.130 --> 00:01:28.140 
then there is the fact that you can

00:01:28.140 --> 00:01:30.380 
then there is the fact that you can
extend<00:01:28.560> the<00:01:28.770> code<00:01:29.009> as<00:01:29.280> data<00:01:29.520> system<00:01:30.090> beyond

00:01:30.380 --> 00:01:30.390 
extend the code as data system beyond

00:01:30.390 --> 00:01:33.469 
extend the code as data system beyond
lists<00:01:30.960> two<00:01:31.170> vectors<00:01:31.590> and<00:01:31.740> maps<00:01:32.119> that's<00:01:33.119> about

00:01:33.469 --> 00:01:33.479 
lists two vectors and maps that's about

00:01:33.479 --> 00:01:36.109 
lists two vectors and maps that's about
to<00:01:33.630> heaven<00:01:33.930> for<00:01:34.140> true<00:01:34.320> IT<00:01:34.500> nerds<00:01:35.119> whereas

00:01:36.109 --> 00:01:36.119 
to heaven for true IT nerds whereas

00:01:36.119 --> 00:01:38.359 
to heaven for true IT nerds whereas
Common<00:01:36.570> Lisp<00:01:36.600> doesn't<00:01:37.229> officially<00:01:37.500> agree<00:01:38.189> to

00:01:38.359 --> 00:01:38.369 
Common Lisp doesn't officially agree to

00:01:38.369 --> 00:01:41.749 
Common Lisp doesn't officially agree to
get<00:01:38.520> along<00:01:38.820> with<00:01:38.880> java<00:01:39.509> or<00:01:39.720> JVM<00:01:40.470> do<00:01:41.400> you<00:01:41.490> think

00:01:41.749 --> 00:01:41.759 
get along with java or JVM do you think

00:01:41.759 --> 00:01:44.600 
get along with java or JVM do you think
closure<00:01:42.240> would<00:01:42.390> replace<00:01:42.780> common<00:01:43.259> lisp<00:01:43.610> they

00:01:44.600 --> 00:01:44.610 
closure would replace common lisp they

00:01:44.610 --> 00:01:47.630 
closure would replace common lisp they
are<00:01:44.729> rivals<00:01:45.240> to<00:01:45.689> be<00:01:45.810> sure<00:01:46.040> but<00:01:47.040> I<00:01:47.100> don't<00:01:47.430> think

00:01:47.630 --> 00:01:47.640 
are rivals to be sure but I don't think

00:01:47.640 --> 00:01:49.670 
are rivals to be sure but I don't think
closure<00:01:48.030> will<00:01:48.420> become<00:01:48.750> the<00:01:48.869> official<00:01:48.990> Common

00:01:49.670 --> 00:01:49.680 
closure will become the official Common

00:01:49.680 --> 00:01:52.940 
closure will become the official Common
Lisp<00:01:49.710> replacement<00:01:50.610> why<00:01:51.509> not<00:01:51.750> I<00:01:52.049> thought

00:01:52.940 --> 00:01:52.950 
Lisp replacement why not I thought

00:01:52.950 --> 00:01:55.149 
Lisp replacement why not I thought
clergy<00:01:53.490> made<00:01:53.700> programmers<00:01:54.360> more<00:01:54.570> efficient

00:01:55.149 --> 00:01:55.159 
clergy made programmers more efficient

00:01:55.159 --> 00:01:58.429 
clergy made programmers more efficient
so<00:01:56.159> does<00:01:56.369> ruby<00:01:56.729> on<00:01:56.880> rails<00:01:56.909> but<00:01:57.840> that<00:01:58.079> doesn't

00:01:58.429 --> 00:01:58.439 
so does ruby on rails but that doesn't

00:01:58.439 --> 00:02:01.069 
so does ruby on rails but that doesn't
mean<00:01:58.619> it<00:01:58.799> makes<00:01:59.009> good<00:01:59.340> code<00:01:59.670> you<00:02:00.659> can't<00:02:00.960> make

00:02:01.069 --> 00:02:01.079 
mean it makes good code you can't make

00:02:01.079 --> 00:02:03.050 
mean it makes good code you can't make
good<00:02:01.350> time<00:02:01.590> on<00:02:01.649> the<00:02:01.860> highway<00:02:02.430> because<00:02:02.670> you're

00:02:03.050 --> 00:02:03.060 
good time on the highway because you're

00:02:03.060 --> 00:02:05.660 
good time on the highway because you're
going<00:02:03.329> the<00:02:03.450> wrong<00:02:03.630> direction<00:02:04.189> which<00:02:05.189> language

00:02:05.660 --> 00:02:05.670 
going the wrong direction which language

00:02:05.670 --> 00:02:09.260 
going the wrong direction which language
should<00:02:05.700> i<00:02:06.000> learn<00:02:06.380> learn<00:02:07.380> cloture<00:02:07.950> first<00:02:08.270> you

00:02:09.260 --> 00:02:09.270 
should i learn learn cloture first you

00:02:09.270 --> 00:02:11.360 
should i learn learn cloture first you
can<00:02:09.450> study<00:02:09.720> Lisp<00:02:10.170> later<00:02:10.440> whether<00:02:11.069> to<00:02:11.340> upgrade

00:02:11.360 --> 00:02:11.370 
can study Lisp later whether to upgrade

00:02:11.370 --> 00:02:13.720 
can study Lisp later whether to upgrade
someone's<00:02:12.150> code<00:02:12.420> to<00:02:12.629> closure<00:02:13.110> as<00:02:13.349> a<00:02:13.379> hiss

00:02:13.720 --> 00:02:13.730 
someone's code to closure as a hiss

00:02:13.730 --> 00:02:16.239 
someone's code to closure as a hiss
lesson

