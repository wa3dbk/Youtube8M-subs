WEBVTT
Kind: captions
Language: en

00:00:02.520 --> 00:00:05.520
 i 

00:00:10.250 --> 00:00:14.540
 welcome to the tutorial of the day 

00:00:12.830 --> 00:00:17.570
 today's javascript course in which 

00:00:14.540 --> 00:00:19.800
 let's talk about the cycle for 

00:00:17.570 --> 00:00:22.679
 let's start 

00:00:19.800 --> 00:00:28.470
 well basically the syntax is the 

00:00:22.679 --> 00:00:31.080
 next the one that wolford after 

00:00:28.470 --> 00:00:34.550
 a block of code this block of 

00:00:31.080 --> 00:00:37.199
 code is what is going to be executed 

00:00:34.550 --> 00:00:40.110
 multiple times that is to say depending on 

00:00:37.199 --> 00:00:43.910
 the conditions that the cycle has here 

00:00:40.110 --> 00:00:46.910
 cycle for receives three parameters one of 

00:00:43.910 --> 00:00:46.910
 initialization 

00:00:50.650 --> 00:00:58.870
 1 of initialization after here we have 

00:00:54.850 --> 00:01:01.390
 a condition and then here we have a 

00:00:58.870 --> 00:01:05.560
 increase is just right now 

00:01:01.390 --> 00:01:07.450
 like the text editor got stuck and 

00:01:05.560 --> 00:01:09.120
 actually what was happening is that 

00:01:07.450 --> 00:01:11.650
 how to auto-run javascript 

00:01:09.120 --> 00:01:15.190
 when we did not pass any 

00:01:11.650 --> 00:01:17.020
 parameter to cycle four is the same as 

00:01:15.190 --> 00:01:19.570
 if we were doing a while trump 

00:01:17.020 --> 00:01:23.740
 that is, this is an infinite cycle that 

00:01:19.570 --> 00:01:26.550
 is going to continue running in this case 

00:01:23.740 --> 00:01:29.950
 until there is a break comes out then 

00:01:26.550 --> 00:01:32.080
 these two are are two forms or two 

00:01:29.950 --> 00:01:37.410
 syntax through which we 

00:01:32.080 --> 00:01:40.510
 we can write a cycle without a limit 

00:01:37.410 --> 00:01:44.229
 specific and already normally obviously 

00:01:40.510 --> 00:01:46.750
 we do not want to have an infinite cycle for 

00:01:44.229 --> 00:01:50.410
 nothing because especially because in 

00:01:46.750 --> 00:01:53.130
 javascript execution of scripts 

00:01:50.410 --> 00:01:56.789
 run in it 

00:01:53.130 --> 00:01:58.220
 order of execution in the same thread or in 

00:01:56.789 --> 00:02:03.020
 the same 

00:01:58.220 --> 00:02:05.950
 place that the code that feeds the 

00:02:03.020 --> 00:02:09.770
 graphic interface then if we 

00:02:05.950 --> 00:02:12.050
 we place the javascript or some process or 

00:02:09.770 --> 00:02:16.820
 some method is very slow 

00:02:12.050 --> 00:02:20.120
 also the interface in general the page 

00:02:16.820 --> 00:02:22.130
 stop responding to the input of the 

00:02:20.120 --> 00:02:24.370
 user or anything the user 

00:02:22.130 --> 00:02:27.680
 is trying to do then 

00:02:24.370 --> 00:02:29.330
 we generally do not want to do things that 

00:02:27.680 --> 00:02:32.060
 take a long time in javascript so that 

00:02:29.330 --> 00:02:34.940
 our application can respond to 

00:02:32.060 --> 00:02:37.760
 user at any time in html5 

00:02:34.940 --> 00:02:41.800
 there's something called web workers that 

00:02:37.760 --> 00:02:41.800
 they allow us to run in the background 

00:02:41.860 --> 00:02:49.250
 very long javascript processes 

00:02:45.180 --> 00:02:53.290
 so here we go 

00:02:49.250 --> 00:02:53.290
 to continue as follows 

00:02:53.720 --> 00:02:59.150
 let's define the parameters as if 

00:02:57.350 --> 00:03:01.550
 we were writing a normal cycle 

00:02:59.150 --> 00:03:03.550
 then here we are going to place var equal 

00:03:01.550 --> 00:03:06.540
 to zero 

00:03:03.550 --> 00:03:09.380
 and less than 10 

00:03:06.540 --> 00:03:14.550
 and then here and more more comes out 

00:03:09.380 --> 00:03:16.740
 and here we are going to print console log 

00:03:14.550 --> 00:03:18.630
 We are not going to stop seeing you again 

00:03:16.740 --> 00:03:25.910
 came to the endless part of the cycles 

00:03:18.630 --> 00:03:25.910
 yes that is the interface is jammed 

00:03:26.600 --> 00:03:29.620
 start this 

00:03:33.530 --> 00:03:43.100
 and we are going to print with sol lock and go 

00:03:38.959 --> 00:03:45.980
 to prove that this does the same thing 

00:03:43.100 --> 00:03:47.630
 we were eventually doing in the 

00:03:45.980 --> 00:03:49.190
 cycle while as well as we're seeing it 

00:03:47.630 --> 00:03:51.560
 here 

00:03:49.190 --> 00:03:54.020
 One thing that needs to be mentioned is that it is 

00:03:51.560 --> 00:03:56.660
 most common that we write a 

00:03:54.020 --> 00:03:59.210
 cycle for when we have the limit 

00:03:56.660 --> 00:04:02.390
 defined of the cycle is to say how many 

00:03:59.210 --> 00:04:04.850
 Sometimes it will be executed with a while 

00:04:02.390 --> 00:04:07.460
 We also use the for many times 

00:04:04.850 --> 00:04:09.280
 to integrate an arrangement then 

00:04:07.460 --> 00:04:12.620
 we have not yet talked about an arrangement 

00:04:09.280 --> 00:04:14.660
 but I'm going to put the example here for 

00:04:12.620 --> 00:04:18.800
 what 

00:04:14.660 --> 00:04:21.340
 let's know that it's like that eventually we're going to 

00:04:18.800 --> 00:04:21.340
 reach a 

00:04:22.700 --> 00:04:27.730
 even to a part where we're going to see 

00:04:25.850 --> 00:04:29.770
 iteration 

00:04:27.730 --> 00:04:31.360
 and there we are going to talk about the most 

00:04:29.770 --> 00:04:32.980
 optimal to integrate an array 

00:04:31.360 --> 00:04:36.610
 using a for cycle but basically 

00:04:32.980 --> 00:04:38.950
 here you can see that with this syntax 

00:04:36.610 --> 00:04:41.350
 I can go through all the elements of 

00:04:38.950 --> 00:04:43.510
 this arrangement goes in this case this 

00:04:41.350 --> 00:04:45.040
 arrangement has two elements but as 

00:04:43.510 --> 00:04:48.970
 I was telling them eventually we're going to get to 

00:04:45.040 --> 00:04:51.930
 talk about arrangements ok another thing that 

00:04:48.970 --> 00:04:51.930
 you have to mention is that 

00:04:53.910 --> 00:05:02.400
 also the reserved words breaking 

00:04:59.010 --> 00:05:04.300
 next work in 

00:05:02.400 --> 00:05:07.900
 in 

00:05:04.300 --> 00:05:10.389
 in javascript it goes out for example here 

00:05:07.900 --> 00:05:13.120
 just print hello because I'm 

00:05:10.389 --> 00:05:15.909
 saying that if the index is higher or this 

00:05:13.120 --> 00:05:17.919
 variable and is greater than or equal to 1 that 

00:05:15.909 --> 00:05:20.080
 break the cycle not then it never reaches 

00:05:17.919 --> 00:05:21.819
 this position of the arrangement eventually 

00:05:20.080 --> 00:05:24.550
 We will also talk about the positions of 

00:05:21.819 --> 00:05:27.159
 an arrangement I think would be better now 

00:05:24.550 --> 00:05:28.650
 that we would do it here from 1 to 

00:05:27.159 --> 00:05:31.260
 10 

00:05:28.650 --> 00:05:34.700
 and we saw that here 

00:05:31.260 --> 00:05:36.680
 and consolidate it and 

00:05:34.700 --> 00:05:40.010
 and we saw that here he is only going to print 

00:05:36.680 --> 00:05:44.300
 the 0 because if it is greater than or equal to 1 

00:05:40.010 --> 00:05:47.210
 breaks the cycle comes out and another here also 

00:05:44.300 --> 00:05:50.710
 we can prove that if for example that 

00:05:47.210 --> 00:05:50.710
 just print the 

00:05:51.080 --> 00:05:54.370
 The pairs 

00:05:55.849 --> 00:05:58.749
 it is continuous 

00:06:00.550 --> 00:06:03.910
 then there is again we have this 

00:06:02.530 --> 00:06:06.400
 exercise to print the pairs 

00:06:03.910 --> 00:06:08.230
 using the word continuous also 

00:06:06.400 --> 00:06:09.580
 we can use the break cycle then 

00:06:08.230 --> 00:06:11.710
 see you in the next video tutorial 

00:06:09.580 --> 00:06:14.070
 I send them a single ariel hernandez many 

00:06:11.710 --> 00:06:14.070
 Thank you 

