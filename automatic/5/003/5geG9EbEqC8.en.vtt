WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:03.260 

many<00:00:00.780> allergies<00:00:01.669> parallel<00:00:02.669> many<00:00:03.030> of<00:00:03.179> you

00:00:03.260 --> 00:00:03.270 
many allergies parallel many of you

00:00:03.270 --> 00:00:05.120 
many allergies parallel many of you
level<00:00:03.600> of<00:00:03.689> detail<00:00:04.050> selection<00:00:04.620> for<00:00:04.830> real-time

00:00:05.120 --> 00:00:05.130 
level of detail selection for real-time

00:00:05.130 --> 00:00:08.870 
level of detail selection for real-time
double<00:00:05.730> elimination

00:00:08.870 --> 00:00:08.880 

00:00:08.880 --> 00:00:11.390 

in<00:00:09.390> this<00:00:09.690> work<00:00:09.990> we<00:00:10.260> addressed<00:00:10.740> the<00:00:10.890> problem<00:00:11.040> of

00:00:11.390 --> 00:00:11.400 
in this work we addressed the problem of

00:00:11.400 --> 00:00:13.370 
in this work we addressed the problem of
efficiently<00:00:11.600> rasterizing<00:00:12.600> point<00:00:13.139> best

00:00:13.370 --> 00:00:13.380 
efficiently rasterizing point best

00:00:13.380 --> 00:00:15.830 
efficiently rasterizing point best
geometry<00:00:13.950> in<00:00:14.010> too<00:00:14.160> many<00:00:14.309> views<00:00:14.730> as<00:00:14.910> required

00:00:15.830 --> 00:00:15.840 
geometry in too many views as required

00:00:15.840 --> 00:00:17.090 
geometry in too many views as required
by<00:00:15.990> several<00:00:16.470> indirect<00:00:16.920> illumination

00:00:17.090 --> 00:00:17.100 
by several indirect illumination

00:00:17.100 --> 00:00:19.860 
by several indirect illumination
techniques

00:00:19.860 --> 00:00:19.870 
techniques

00:00:19.870 --> 00:00:22.350 
techniques
our<00:00:19.960> work<00:00:20.590> is<00:00:20.860> inspired<00:00:21.310> by<00:00:21.610> the<00:00:21.700> classical

00:00:22.350 --> 00:00:22.360 
our work is inspired by the classical

00:00:22.360 --> 00:00:25.070 
our work is inspired by the classical
point<00:00:22.630> base<00:00:22.870> LOD<00:00:23.440> algorithm<00:00:24.040> q<00:00:24.490> splat<00:00:24.790> as

00:00:25.070 --> 00:00:25.080 
point base LOD algorithm q splat as

00:00:25.080 --> 00:00:27.540 
point base LOD algorithm q splat as
global<00:00:26.080> illumination<00:00:26.290> techniques<00:00:27.160> require

00:00:27.540 --> 00:00:27.550 
global illumination techniques require

00:00:27.550 --> 00:00:30.030 
global illumination techniques require
only<00:00:27.790> a<00:00:28.000> low<00:00:28.300> resolution<00:00:28.450> rasterization<00:00:29.350> our

00:00:30.030 --> 00:00:30.040 
only a low resolution rasterization our

00:00:30.040 --> 00:00:33.270 
only a low resolution rasterization our
point-based<00:00:31.000> LOD<00:00:31.540> approach<00:00:31.900> 12<00:00:32.740> point<00:00:33.130> nine

00:00:33.270 --> 00:00:33.280 
point-based LOD approach 12 point nine

00:00:33.280 --> 00:00:36.180 
point-based LOD approach 12 point nine
million<00:00:33.490> seconds<00:00:34.060> on<00:00:34.210> the<00:00:34.270> Left<00:00:35.190> outperforms

00:00:36.180 --> 00:00:36.190 
million seconds on the Left outperforms

00:00:36.190 --> 00:00:38.220 
million seconds on the Left outperforms
polygons<00:00:36.790> based<00:00:37.000> rendering<00:00:37.300> 80<00:00:37.870> milliseconds

00:00:38.220 --> 00:00:38.230 
polygons based rendering 80 milliseconds

00:00:38.230 --> 00:00:41.400 
polygons based rendering 80 milliseconds
on<00:00:38.770> the<00:00:38.980> right<00:00:39.190> with<00:00:40.090> decreasing<00:00:40.570> resolution

00:00:41.400 --> 00:00:41.410 
on the right with decreasing resolution

00:00:41.410 --> 00:00:45.270 
on the right with decreasing resolution
the<00:00:41.860> advantage<00:00:42.309> increases<00:00:42.910> at<00:00:43.239> factor<00:00:43.989> 2<00:00:44.280> 5.7

00:00:45.270 --> 00:00:45.280 
the advantage increases at factor 2 5.7

00:00:45.280 --> 00:00:48.440 
the advantage increases at factor 2 5.7
milliseconds<00:00:46.270> versus<00:00:46.690> 80<00:00:46.960> milliseconds

00:00:48.440 --> 00:00:48.450 
milliseconds versus 80 milliseconds

00:00:48.450 --> 00:00:51.110 
milliseconds versus 80 milliseconds
factor<00:00:49.450> for<00:00:49.750> one<00:00:50.200> point<00:00:50.440> six<00:00:50.650> milliseconds

00:00:51.110 --> 00:00:51.120 
factor for one point six milliseconds

00:00:51.120 --> 00:00:54.810 
factor for one point six milliseconds
versus<00:00:52.120> 80<00:00:52.360> milliseconds<00:00:53.519> consider<00:00:54.519> this

00:00:54.810 --> 00:00:54.820 
versus 80 milliseconds consider this

00:00:54.820 --> 00:00:56.939 
versus 80 milliseconds consider this
bunny<00:00:55.089> we<00:00:55.629> build<00:00:55.809> a<00:00:55.930> simple<00:00:56.140> bounding<00:00:56.710> sphere

00:00:56.939 --> 00:00:56.949 
bunny we build a simple bounding sphere

00:00:56.949 --> 00:00:59.130 
bunny we build a simple bounding sphere
hierarchy<00:00:57.580> on<00:00:57.670> this<00:00:57.790> geometry<00:00:58.059> which<00:00:58.839> can<00:00:59.050> be

00:00:59.130 --> 00:00:59.140 
hierarchy on this geometry which can be

00:00:59.140 --> 00:01:04.610 
hierarchy on this geometry which can be
efficiently<00:00:59.620> updated<00:01:00.129> at<00:01:00.250> runtime

00:01:04.610 --> 00:01:04.620 

00:01:04.620 --> 00:01:07.050 

computing<00:01:05.620> a<00:01:05.710> cut<00:01:05.950> for<00:01:06.220> a<00:01:06.250> single<00:01:06.610> view<00:01:06.790> means

00:01:07.050 --> 00:01:07.060 
computing a cut for a single view means

00:01:07.060 --> 00:01:08.880 
computing a cut for a single view means
to<00:01:07.240> extract<00:01:07.690> the<00:01:07.810> level<00:01:08.080> of<00:01:08.170> detail<00:01:08.230> from<00:01:08.830> the

00:01:08.880 --> 00:01:08.890 
to extract the level of detail from the

00:01:08.890 --> 00:01:11.460 
to extract the level of detail from the
bounding<00:01:09.310> volume<00:01:09.340> hierarchy<00:01:10.180> when<00:01:11.050> multiple

00:01:11.460 --> 00:01:11.470 
bounding volume hierarchy when multiple

00:01:11.470 --> 00:01:13.950 
bounding volume hierarchy when multiple
views<00:01:11.800> are<00:01:12.010> used<00:01:12.340> we<00:01:12.880> find<00:01:13.180> all<00:01:13.390> their<00:01:13.660> cuts

00:01:13.950 --> 00:01:13.960 
views are used we find all their cuts

00:01:13.960 --> 00:01:15.960 
views are used we find all their cuts
using<00:01:14.260> a<00:01:14.500> single<00:01:14.920> fine<00:01:15.160> grain<00:01:15.460> Powell

00:01:15.960 --> 00:01:15.970 
using a single fine grain Powell

00:01:15.970 --> 00:01:18.660 
using a single fine grain Powell
approach<00:01:16.330> one<00:01:17.200> such<00:01:17.440> a<00:01:17.470> cut<00:01:17.800> is<00:01:17.950> computed<00:01:18.520> it

00:01:18.660 --> 00:01:18.670 
approach one such a cut is computed it

00:01:18.670 --> 00:01:21.000 
approach one such a cut is computed it
can<00:01:18.880> be<00:01:19.030> rasterized<00:01:19.270> for<00:01:20.110> example<00:01:20.590> into<00:01:20.890> the

00:01:21.000 --> 00:01:21.010 
can be rasterized for example into the

00:01:21.010 --> 00:01:22.980 
can be rasterized for example into the
mini<00:01:21.220> virtual<00:01:21.670> shadow<00:01:21.940> maps<00:01:22.240> required<00:01:22.720> by

00:01:22.980 --> 00:01:22.990 
mini virtual shadow maps required by

00:01:22.990 --> 00:01:25.469 
mini virtual shadow maps required by
instant<00:01:23.440> global<00:01:23.830> illumination<00:01:24.390> here's<00:01:25.390> a

00:01:25.469 --> 00:01:25.479 
instant global illumination here's a

00:01:25.479 --> 00:01:27.180 
instant global illumination here's a
scene<00:01:25.810> with<00:01:25.990> a<00:01:26.020> dynamic<00:01:26.440> light<00:01:26.650> source<00:01:26.979> and

00:01:27.180 --> 00:01:27.190 
scene with a dynamic light source and

00:01:27.190 --> 00:01:29.250 
scene with a dynamic light source and
with<00:01:27.910> more<00:01:28.180> than<00:01:28.210> a<00:01:28.420> million<00:01:28.690> surface

00:01:29.250 --> 00:01:29.260 
with more than a million surface

00:01:29.260 --> 00:01:31.469 
with more than a million surface
elements<00:01:29.770> the<00:01:30.310> resulting<00:01:30.820> indirect<00:01:31.240> shadow

00:01:31.469 --> 00:01:31.479 
elements the resulting indirect shadow

00:01:31.479 --> 00:01:33.840 
elements the resulting indirect shadow
maps<00:01:31.810> are<00:01:32.050> of<00:01:32.320> high<00:01:32.560> quality<00:01:32.590> in<00:01:33.280> contrast<00:01:33.760> to

00:01:33.840 --> 00:01:33.850 
maps are of high quality in contrast to

00:01:33.850 --> 00:01:43.000 
maps are of high quality in contrast to
existing<00:01:34.360> approximate<00:01:34.960> solutions

00:01:43.000 --> 00:01:43.010 

00:01:43.010 --> 00:01:47.420 

you

00:01:47.420 --> 00:01:47.430 

00:01:47.430 --> 00:01:50.390 

our<00:01:47.970> algorithm<00:01:48.840> works<00:01:49.080> as<00:01:49.350> follows<00:01:49.380> we<00:01:49.980> start

00:01:50.390 --> 00:01:50.400 
our algorithm works as follows we start

00:01:50.400 --> 00:01:51.860 
our algorithm works as follows we start
from<00:01:50.550> a<00:01:50.670> bounding<00:01:51.030> volume<00:01:51.060> hierarchy

00:01:51.860 --> 00:01:51.870 
from a bounding volume hierarchy

00:01:51.870 --> 00:01:53.990 
from a bounding volume hierarchy
representation<00:01:52.650> of<00:01:52.800> the<00:01:52.920> scene<00:01:53.160> here<00:01:53.820> a

00:01:53.990 --> 00:01:54.000 
representation of the scene here a

00:01:54.000 --> 00:01:56.690 
representation of the scene here a
simple<00:01:54.420> binary<00:01:54.780> tree<00:01:55.310> let's<00:01:56.310> consider

00:01:56.690 --> 00:01:56.700 
simple binary tree let's consider

00:01:56.700 --> 00:01:58.760 
simple binary tree let's consider
computing<00:01:57.330> the<00:01:57.480> cut<00:01:57.690> of<00:01:57.720> four<00:01:58.110> views<00:01:58.440> in<00:01:58.620> this

00:01:58.760 --> 00:01:58.770 
computing the cut of four views in this

00:01:58.770 --> 00:02:01.040 
computing the cut of four views in this
example<00:01:59.160> we<00:01:59.520> pair<00:02:00.420> the<00:02:00.600> nodes<00:02:00.810> of<00:02:00.990> the

00:02:01.040 --> 00:02:01.050 
example we pair the nodes of the

00:02:01.050 --> 00:02:02.719 
example we pair the nodes of the
hierarchy<00:02:01.350> together<00:02:01.920> with<00:02:02.340> the<00:02:02.460> views

00:02:02.719 --> 00:02:02.729 
hierarchy together with the views

00:02:02.729 --> 00:02:05.440 
hierarchy together with the views
resulting<00:02:03.270> in<00:02:03.360> the<00:02:03.450> so<00:02:03.630> called<00:02:03.900> node<00:02:04.350> views

00:02:05.440 --> 00:02:05.450 
resulting in the so called node views

00:02:05.450 --> 00:02:07.999 
resulting in the so called node views
then<00:02:06.450> we're<00:02:06.990> proceeding<00:02:07.200> a<00:02:07.560> number<00:02:07.890> of

00:02:07.999 --> 00:02:08.009 
then we're proceeding a number of

00:02:08.009 --> 00:02:09.980 
then we're proceeding a number of
iterations<00:02:08.789> in<00:02:09.030> which<00:02:09.209> a<00:02:09.360> single<00:02:09.690> fine

00:02:09.980 --> 00:02:09.990 
iterations in which a single fine

00:02:09.990 --> 00:02:12.530 
iterations in which a single fine
grained<00:02:10.320> computation<00:02:10.950> is<00:02:11.100> carried<00:02:11.430> out<00:02:11.550> split

00:02:12.530 --> 00:02:12.540 
grained computation is carried out split

00:02:12.540 --> 00:02:16.280 
grained computation is carried out split
cow<00:02:13.230> draw<00:02:13.950> a<00:02:14.160> merge<00:02:14.640> two<00:02:15.240> lists<00:02:15.630> of<00:02:15.720> nodes<00:02:16.020> are

00:02:16.280 --> 00:02:16.290 
cow draw a merge two lists of nodes are

00:02:16.290 --> 00:02:18.770 
cow draw a merge two lists of nodes are
managed<00:02:16.709> by<00:02:16.920> our<00:02:16.950> algorithm<00:02:17.730> the<00:02:18.240> first<00:02:18.540> list

00:02:18.770 --> 00:02:18.780 
managed by our algorithm the first list

00:02:18.780 --> 00:02:20.930 
managed by our algorithm the first list
contains<00:02:19.320> all<00:02:19.590> active<00:02:20.040> node<00:02:20.250> views<00:02:20.610> which

00:02:20.930 --> 00:02:20.940 
contains all active node views which

00:02:20.940 --> 00:02:23.720 
contains all active node views which
need<00:02:21.180> further<00:02:21.450> processing<00:02:22.280> it<00:02:23.280> is<00:02:23.430> initially

00:02:23.720 --> 00:02:23.730 
need further processing it is initially

00:02:23.730 --> 00:02:25.750 
need further processing it is initially
filled<00:02:24.180> with<00:02:24.390> the<00:02:24.480> root<00:02:24.690> nodes<00:02:24.989> for<00:02:25.230> all<00:02:25.410> views

00:02:25.750 --> 00:02:25.760 
filled with the root nodes for all views

00:02:25.760 --> 00:02:28.520 
filled with the root nodes for all views
the<00:02:26.760> second<00:02:27.150> list<00:02:27.300> will<00:02:27.570> be<00:02:27.720> filled<00:02:28.020> with<00:02:28.140> all

00:02:28.520 --> 00:02:28.530 
the second list will be filled with all

00:02:28.530 --> 00:02:30.320 
the second list will be filled with all
the<00:02:28.680> node<00:02:28.860> views<00:02:29.160> that<00:02:29.370> belong<00:02:29.700> to<00:02:29.850> the<00:02:29.970> final

00:02:30.320 --> 00:02:30.330 
the node views that belong to the final

00:02:30.330 --> 00:02:33.470 
the node views that belong to the final
cut<00:02:30.739> note<00:02:31.739> that<00:02:32.010> each<00:02:32.250> thread<00:02:32.640> performs<00:02:33.209> only

00:02:33.470 --> 00:02:33.480 
cut note that each thread performs only

00:02:33.480 --> 00:02:36.760 
cut note that each thread performs only
a<00:02:33.510> small<00:02:33.870> task<00:02:34.200> feenin<00:02:34.950> modern<00:02:35.280> GPUs

00:02:36.760 --> 00:02:36.770 
a small task feenin modern GPUs

00:02:36.770 --> 00:02:39.070 
a small task feenin modern GPUs
here<00:02:37.340> is<00:02:37.460> an<00:02:37.610> animated<00:02:38.180> character<00:02:38.390> led<00:02:38.930> by

00:02:39.070 --> 00:02:39.080 
here is an animated character led by

00:02:39.080 --> 00:02:41.530 
here is an animated character led by
Club<00:02:39.320> elimination<00:02:40.130> computed<00:02:40.880> using<00:02:41.210> our

00:02:41.530 --> 00:02:41.540 
Club elimination computed using our

00:02:41.540 --> 00:02:45.370 
Club elimination computed using our
method<00:02:42.070> for<00:02:43.070> incoherent<00:02:43.940> motion<00:02:44.390> performance

00:02:45.370 --> 00:02:45.380 
method for incoherent motion performance

00:02:45.380 --> 00:02:48.550 
method for incoherent motion performance
of<00:02:45.530> our<00:02:45.710> full<00:02:46.340> version<00:02:46.850> might<00:02:47.060> vary<00:02:47.390> this<00:02:48.350> can

00:02:48.550 --> 00:02:48.560 
of our full version might vary this can

00:02:48.560 --> 00:02:50.440 
of our full version might vary this can
be<00:02:48.590> solved<00:02:49.100> by<00:02:49.220> applying<00:02:49.610> our<00:02:49.880> lazy<00:02:50.240> approach

00:02:50.440 --> 00:02:50.450 
be solved by applying our lazy approach

00:02:50.450 --> 00:02:55.740 
be solved by applying our lazy approach
as<00:02:51.020> explained<00:02:51.680> in<00:02:51.860> the<00:02:52.010> paper

00:02:55.740 --> 00:02:55.750 

00:02:55.750 --> 00:02:58.290 

in<00:02:55.890> comparison<00:02:56.890> the<00:02:57.340> lazy<00:02:57.550> version<00:02:57.880> on<00:02:58.270> the

00:02:58.290 --> 00:02:58.300 
in comparison the lazy version on the

00:02:58.300 --> 00:03:00.900 
in comparison the lazy version on the
left<00:02:58.660> is<00:02:59.010> perceptually<00:03:00.010> equivalent<00:03:00.640> to<00:03:00.820> the

00:03:00.900 --> 00:03:00.910 
left is perceptually equivalent to the

00:03:00.910 --> 00:03:03.390 
left is perceptually equivalent to the
full<00:03:01.120> solution<00:03:01.480> on<00:03:01.780> the<00:03:01.810> right

00:03:03.390 --> 00:03:03.400 
full solution on the right

00:03:03.400 --> 00:03:06.220 
full solution on the right
natural<00:03:04.400> illumination<00:03:04.640> can<00:03:05.360> also<00:03:05.600> benefit

00:03:06.220 --> 00:03:06.230 
natural illumination can also benefit

00:03:06.230 --> 00:03:09.160 
natural illumination can also benefit
from<00:03:06.290> our<00:03:06.620> approach<00:03:07.010> now<00:03:07.970> an<00:03:08.300> aerial<00:03:08.930> I<00:03:09.110> to

00:03:09.160 --> 00:03:09.170 
from our approach now an aerial I to

00:03:09.170 --> 00:03:11.200 
from our approach now an aerial I to
sampled<00:03:09.950> and<00:03:10.100> many<00:03:10.370> shadow<00:03:10.670> maps<00:03:11.000> are

00:03:11.200 --> 00:03:11.210 
sampled and many shadow maps are

00:03:11.210 --> 00:03:19.550 
sampled and many shadow maps are
computed<00:03:11.750> in<00:03:11.870> only<00:03:12.230> a<00:03:12.410> few<00:03:12.530> milliseconds

00:03:19.550 --> 00:03:19.560 

00:03:19.560 --> 00:03:27.080 

the<00:03:20.130> light<00:03:20.310> can<00:03:20.550> be<00:03:20.580> changed<00:03:21.090> dynamically

00:03:27.080 --> 00:03:27.090 

00:03:27.090 --> 00:03:35.260 

you

00:03:35.260 --> 00:03:35.270 

00:03:35.270 --> 00:03:37.450 

the<00:03:35.840> resulting<00:03:36.350> shadow<00:03:36.560> maps<00:03:36.860> are<00:03:37.070> displayed

00:03:37.450 --> 00:03:37.460 
the resulting shadow maps are displayed

00:03:37.460 --> 00:03:43.020 
the resulting shadow maps are displayed
here

00:03:43.020 --> 00:03:43.030 

00:03:43.030 --> 00:03:45.130 

you

00:03:45.130 --> 00:03:45.140 

00:03:45.140 --> 00:03:47.530 

further<00:03:45.770> our<00:03:46.190> approach<00:03:46.760> can<00:03:47.000> be<00:03:47.060> used<00:03:47.420> for

00:03:47.530 --> 00:03:47.540 
further our approach can be used for

00:03:47.540 --> 00:03:49.449 
further our approach can be used for
reflection<00:03:48.230> and<00:03:48.350> refraction<00:03:48.459> mapping

00:03:49.449 --> 00:03:49.459 
reflection and refraction mapping

00:03:49.459 --> 00:03:51.430 
reflection and refraction mapping
involving<00:03:50.120> a<00:03:50.240> high<00:03:50.420> number<00:03:50.660> of<00:03:50.959> complex

00:03:51.430 --> 00:03:51.440 
involving a high number of complex

00:03:51.440 --> 00:03:54.370 
involving a high number of complex
subjects<00:03:51.950> for<00:03:52.850> each<00:03:53.060> object<00:03:53.330> in<00:03:53.750> every<00:03:54.080> frame

00:03:54.370 --> 00:03:54.380 
subjects for each object in every frame

00:03:54.380 --> 00:03:56.530 
subjects for each object in every frame
an<00:03:54.680> environment<00:03:55.490> map<00:03:55.640> is<00:03:55.850> rendered<00:03:56.270> which

00:03:56.530 --> 00:03:56.540 
an environment map is rendered which

00:03:56.540 --> 00:03:59.350 
an environment map is rendered which
contains<00:03:57.020> all<00:03:57.200> the<00:03:57.500> other<00:03:57.650> objects<00:03:58.250> the<00:03:59.120> maps

00:03:59.350 --> 00:03:59.360 
contains all the other objects the maps

00:03:59.360 --> 00:04:03.670 
contains all the other objects the maps
are<00:03:59.569> displayed<00:04:00.050> in<00:04:00.290> the<00:04:00.500> inset<00:04:00.830> figure

00:04:03.670 --> 00:04:03.680 

00:04:03.680 --> 00:04:05.949 

now<00:04:04.310> if<00:04:04.489> the<00:04:04.609> environment<00:04:04.879> maps<00:04:05.329> are<00:04:05.569> used<00:04:05.780> for

00:04:05.949 --> 00:04:05.959 
now if the environment maps are used for

00:04:05.959 --> 00:04:14.790 
now if the environment maps are used for
reflection<00:04:06.500> and<00:04:06.650> refraction<00:04:06.790> mapping

00:04:14.790 --> 00:04:14.800 

00:04:14.800 --> 00:04:16.860 

you

