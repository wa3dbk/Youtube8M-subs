WEBVTT
Kind: captions
Language: en

00:00:04.020 --> 00:00:06.019 

the<00:00:04.530> program<00:00:04.950> is<00:00:05.070> entered<00:00:05.310> in<00:00:05.430> binary

00:00:06.019 --> 00:00:06.029 
the program is entered in binary

00:00:06.029 --> 00:00:07.070 
the program is entered in binary
bye-bye-bye

00:00:07.070 --> 00:00:07.080 
bye-bye-bye

00:00:07.080 --> 00:00:08.900 
bye-bye-bye
so<00:00:07.410> we<00:00:07.529> start<00:00:07.800> with<00:00:07.920> putting<00:00:08.069> an<00:00:08.280> address<00:00:08.639> in

00:00:08.900 --> 00:00:08.910 
so we start with putting an address in

00:00:08.910 --> 00:00:13.160 
so we start with putting an address in
and<00:00:09.719> then<00:00:10.049> I<00:00:10.469> check<00:00:11.340> my<00:00:11.549> code<00:00:11.879> here<00:00:11.910> and<00:00:12.450> I<00:00:12.960> see

00:00:13.160 --> 00:00:13.170 
and then I check my code here and I see

00:00:13.170 --> 00:00:16.220 
and then I check my code here and I see
what<00:00:13.349> that<00:00:13.500> particular<00:00:13.800> bike<00:00:14.309> should<00:00:14.610> be<00:00:15.230> and

00:00:16.220 --> 00:00:16.230 
what that particular bike should be and

00:00:16.230 --> 00:00:19.040 
what that particular bike should be and
then<00:00:17.070> I<00:00:17.160> toggle<00:00:17.430> it<00:00:17.640> in<00:00:17.759> the<00:00:17.880> memory<00:00:18.029> like<00:00:18.840> that

00:00:19.040 --> 00:00:19.050 
then I toggle it in the memory like that

00:00:19.050 --> 00:00:30.630 
then I toggle it in the memory like that
and<00:00:19.349> then<00:00:20.070> you<00:00:20.189> login<00:00:20.430> the<00:00:20.579> next<00:00:20.880> address

00:00:30.630 --> 00:00:30.640 

00:00:30.640 --> 00:00:33.580 

so<00:00:31.640> these<00:00:32.000> are<00:00:32.150> the<00:00:32.210> registers<00:00:32.690> here<00:00:33.050> there

00:00:33.580 --> 00:00:33.590 
so these are the registers here there

00:00:33.590 --> 00:00:36.700 
so these are the registers here there
are<00:00:33.770> eight<00:00:34.250> 8-bit<00:00:34.970> registers<00:00:35.540> and<00:00:35.840> this<00:00:36.560> is

00:00:36.700 --> 00:00:36.710 
are eight 8-bit registers and this is

00:00:36.710 --> 00:00:40.090 
are eight 8-bit registers and this is
the<00:00:36.860> arithmetic<00:00:37.490> logic<00:00:37.760> unit<00:00:38.120> right<00:00:38.810> here<00:00:39.140> the

00:00:40.090 --> 00:00:40.100 
the arithmetic logic unit right here the

00:00:40.100 --> 00:00:42.460 
the arithmetic logic unit right here the
ALU<00:00:40.580> takes<00:00:40.970> its<00:00:41.120> inputs<00:00:41.450> from<00:00:41.540> the<00:00:41.630> B<00:00:41.870> and<00:00:42.170> the

00:00:42.460 --> 00:00:42.470 
ALU takes its inputs from the B and the

00:00:42.470 --> 00:00:45.700 
ALU takes its inputs from the B and the
C<00:00:42.500> registers<00:00:43.250> and<00:00:43.550> the<00:00:44.450> output<00:00:44.900> is<00:00:45.170> fed<00:00:45.470> back

00:00:45.700 --> 00:00:45.710 
C registers and the output is fed back

00:00:45.710 --> 00:00:48.160 
C registers and the output is fed back
on<00:00:45.950> to<00:00:46.130> add<00:00:46.250> eight<00:00:46.430> of<00:00:46.550> us<00:00:46.690> there's<00:00:47.690> an<00:00:47.780> 8-bit

00:00:48.160 --> 00:00:48.170 
on to add eight of us there's an 8-bit

00:00:48.170 --> 00:00:49.900 
on to add eight of us there's an 8-bit
data<00:00:48.380> bus<00:00:48.650> running<00:00:48.950> up<00:00:49.190> and<00:00:49.309> down<00:00:49.400> eight

00:00:49.900 --> 00:00:49.910 
data bus running up and down eight

00:00:49.910 --> 00:00:53.470 
data bus running up and down eight
parallel<00:00:50.420> wires<00:00:50.660> essentially<00:00:51.320> and<00:00:52.150> so<00:00:53.150> for

00:00:53.470 --> 00:00:53.480 
parallel wires essentially and so for

00:00:53.480 --> 00:00:55.840 
parallel wires essentially and so for
example<00:00:53.930> we<00:00:54.050> can<00:00:54.290> select<00:00:54.830> a<00:00:55.220> register<00:00:55.730> like

00:00:55.840 --> 00:00:55.850 
example we can select a register like

00:00:55.850 --> 00:00:57.910 
example we can select a register like
selecting<00:00:56.330> the<00:00:56.450> B<00:00:56.570> register<00:00:56.809> and<00:00:57.589> then<00:00:57.830> you

00:00:57.910 --> 00:00:57.920 
selecting the B register and then you

00:00:57.920 --> 00:01:00.250 
selecting the B register and then you
see<00:00:58.129> down<00:00:58.489> here<00:00:58.550> that<00:00:58.879> that<00:00:59.210> value<00:00:59.690> comes<00:01:00.110> out

00:01:00.250 --> 00:01:00.260 
see down here that that value comes out

00:01:00.260 --> 00:01:02.320 
see down here that that value comes out
on<00:01:00.379> the<00:01:00.440> bus<00:01:00.650> and<00:01:00.980> then<00:01:01.580> we<00:01:01.699> can<00:01:01.879> load<00:01:02.089> it<00:01:02.210> into

00:01:02.320 --> 00:01:02.330 
on the bus and then we can load it into

00:01:02.330 --> 00:01:04.500 
on the bus and then we can load it into
a<00:01:02.449> register<00:01:02.510> such<00:01:03.080> as<00:01:03.199> the<00:01:03.320> X<00:01:03.500> register<00:01:04.040> here

00:01:04.500 --> 00:01:04.510 
a register such as the X register here

00:01:04.510 --> 00:01:09.190 
a register such as the X register here
and<00:01:05.510> then<00:01:05.660> unselective<00:01:06.350> and<00:01:07.330> over<00:01:08.330> here<00:01:08.690> you

00:01:09.190 --> 00:01:09.200 
and then unselective and over here you

00:01:09.200 --> 00:01:12.130 
and then unselective and over here you
have<00:01:09.380> the<00:01:09.650> program<00:01:10.280> counter<00:01:10.640> the<00:01:11.600> instruction

00:01:12.130 --> 00:01:12.140 
have the program counter the instruction

00:01:12.140 --> 00:01:15.130 
have the program counter the instruction
register<00:01:12.170> and<00:01:12.920> some<00:01:13.580> other<00:01:13.760> stuff<00:01:14.510> there's

00:01:15.130 --> 00:01:15.140 
register and some other stuff there's

00:01:15.140 --> 00:01:19.090 
register and some other stuff there's
also<00:01:15.290> a<00:01:15.409> 16-bit<00:01:16.400> bus<00:01:16.630> or<00:01:17.630> addresses<00:01:18.380> and<00:01:18.740> then

00:01:19.090 --> 00:01:19.100 
also a 16-bit bus or addresses and then

00:01:19.100 --> 00:01:22.060 
also a 16-bit bus or addresses and then
in<00:01:19.220> this<00:01:19.370> box<00:01:19.610> here<00:01:19.940> you<00:01:20.600> have<00:01:20.780> the<00:01:21.070> program

00:01:22.060 --> 00:01:22.070 
in this box here you have the program

00:01:22.070 --> 00:01:24.219 
in this box here you have the program
control<00:01:22.640> and<00:01:22.940> the<00:01:23.479> sequencing<00:01:24.020> and

00:01:24.219 --> 00:01:24.229 
control and the sequencing and

00:01:24.229 --> 00:01:26.500 
control and the sequencing and
instruction<00:01:24.950> decoding<00:01:25.310> and<00:01:25.670> also<00:01:26.120> the<00:01:26.240> memory

00:01:26.500 --> 00:01:26.510 
instruction decoding and also the memory

00:01:26.510 --> 00:01:41.470 
instruction decoding and also the memory
unit

00:01:41.470 --> 00:01:41.480 

00:01:41.480 --> 00:01:44.170 

by<00:01:41.540> travelpod<00:01:42.080> member

