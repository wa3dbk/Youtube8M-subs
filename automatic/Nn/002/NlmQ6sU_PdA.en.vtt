WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.690 

hi<00:00:00.989> my<00:00:01.230> name<00:00:01.380> is<00:00:01.410> John<00:00:01.770> free<00:00:02.100> I'm<00:00:02.310> the

00:00:02.690 --> 00:00:02.700 
hi my name is John free I'm the

00:00:02.700 --> 00:00:04.070 
hi my name is John free I'm the
worldwide<00:00:03.149> Business<00:00:03.540> Development<00:00:03.720> Manager

00:00:04.070 --> 00:00:04.080 
worldwide Business Development Manager

00:00:04.080 --> 00:00:06.499 
worldwide Business Development Manager
for<00:00:04.620> AMD<00:00:04.950> opteron<00:00:05.370> today<00:00:06.000> I<00:00:06.029> wanted<00:00:06.299> to<00:00:06.390> talk

00:00:06.499 --> 00:00:06.509 
for AMD opteron today I wanted to talk

00:00:06.509 --> 00:00:08.419 
for AMD opteron today I wanted to talk
to<00:00:06.690> you<00:00:06.899> about<00:00:06.960> the<00:00:07.230> new<00:00:07.350> Intel<00:00:07.830> dunnington

00:00:08.419 --> 00:00:08.429 
to you about the new Intel dunnington

00:00:08.429 --> 00:00:10.610 
to you about the new Intel dunnington
platform<00:00:09.000> now<00:00:09.719> a<00:00:09.750> lot<00:00:09.870> of<00:00:09.929> customers<00:00:10.500> have

00:00:10.610 --> 00:00:10.620 
platform now a lot of customers have

00:00:10.620 --> 00:00:12.440 
platform now a lot of customers have
been<00:00:10.650> asking<00:00:10.830> hey<00:00:11.610> you<00:00:11.670> know<00:00:11.880> Intel's<00:00:12.240> got

00:00:12.440 --> 00:00:12.450 
been asking hey you know Intel's got

00:00:12.450 --> 00:00:14.390 
been asking hey you know Intel's got
this<00:00:12.599> new<00:00:12.840> dunnington<00:00:13.349> processor<00:00:13.980> at<00:00:14.130> six

00:00:14.390 --> 00:00:14.400 
this new dunnington processor at six

00:00:14.400 --> 00:00:17.390 
this new dunnington processor at six
cores<00:00:14.960> what<00:00:15.960> do<00:00:16.230> you<00:00:16.289> think<00:00:16.529> of<00:00:16.590> it<00:00:16.740> and<00:00:16.980> the

00:00:17.390 --> 00:00:17.400 
cores what do you think of it and the

00:00:17.400 --> 00:00:19.189 
cores what do you think of it and the
reality<00:00:17.670> is<00:00:17.940> we<00:00:18.240> couldn't<00:00:18.720> be<00:00:18.779> happier

00:00:19.189 --> 00:00:19.199 
reality is we couldn't be happier

00:00:19.199 --> 00:00:21.109 
reality is we couldn't be happier
because<00:00:19.830> what<00:00:20.130> they've<00:00:20.279> essentially<00:00:20.730> done<00:00:21.090> is

00:00:21.109 --> 00:00:21.119 
because what they've essentially done is

00:00:21.119 --> 00:00:23.390 
because what they've essentially done is
they've<00:00:21.449> taken<00:00:21.480> the<00:00:22.320> old<00:00:22.560> front<00:00:22.980> side<00:00:23.189> bus

00:00:23.390 --> 00:00:23.400 
they've taken the old front side bus

00:00:23.400 --> 00:00:25.370 
they've taken the old front side bus
architecture<00:00:24.210> the<00:00:24.510> architecture<00:00:24.539> with<00:00:25.230> that

00:00:25.370 --> 00:00:25.380 
architecture the architecture with that

00:00:25.380 --> 00:00:27.320 
architecture the architecture with that
huge<00:00:25.560> bottleneck<00:00:26.070> in<00:00:26.400> it<00:00:26.519> that<00:00:26.910> makes<00:00:27.119> it<00:00:27.240> even

00:00:27.320 --> 00:00:27.330 
huge bottleneck in it that makes it even

00:00:27.330 --> 00:00:29.960 
huge bottleneck in it that makes it even
more<00:00:27.510> difficult<00:00:27.660> for<00:00:28.349> quad<00:00:29.160> socket<00:00:29.580> servers

00:00:29.960 --> 00:00:29.970 
more difficult for quad socket servers

00:00:29.970 --> 00:00:31.970 
more difficult for quad socket servers
and<00:00:30.119> they've<00:00:30.570> now<00:00:30.750> added<00:00:31.080> six<00:00:31.320> cores<00:00:31.619> to<00:00:31.859> it

00:00:31.970 --> 00:00:31.980 
and they've now added six cores to it

00:00:31.980 --> 00:00:34.190 
and they've now added six cores to it
creating<00:00:32.520> more<00:00:32.669> of<00:00:32.730> a<00:00:32.880> bottleneck<00:00:33.390> so<00:00:33.960> overall

00:00:34.190 --> 00:00:34.200 
creating more of a bottleneck so overall

00:00:34.200 --> 00:00:36.620 
creating more of a bottleneck so overall
we're<00:00:34.559> real<00:00:34.739> happy<00:00:35.160> to<00:00:35.309> see<00:00:35.550> that<00:00:35.880> instead<00:00:36.570> of

00:00:36.620 --> 00:00:36.630 
we're real happy to see that instead of

00:00:36.630 --> 00:00:38.090 
we're real happy to see that instead of
moving<00:00:36.870> forward<00:00:37.350> with<00:00:37.440> their<00:00:37.530> architecture

00:00:38.090 --> 00:00:38.100 
moving forward with their architecture

00:00:38.100 --> 00:00:39.860 
moving forward with their architecture
they're<00:00:38.430> actually<00:00:38.730> moving<00:00:38.910> backwards<00:00:39.629> and

00:00:39.860 --> 00:00:39.870 
they're actually moving backwards and

00:00:39.870 --> 00:00:41.750 
they're actually moving backwards and
going<00:00:40.260> back<00:00:40.440> to<00:00:40.620> that<00:00:40.649> front<00:00:41.070> side<00:00:41.219> bus<00:00:41.430> one

00:00:41.750 --> 00:00:41.760 
going back to that front side bus one

00:00:41.760 --> 00:00:43.670 
going back to that front side bus one
more<00:00:41.940> time<00:00:42.210> now<00:00:42.809> of<00:00:42.899> course<00:00:43.079> they<00:00:43.320> include

00:00:43.670 --> 00:00:43.680 
more time now of course they include

00:00:43.680 --> 00:00:45.709 
more time now of course they include
fully<00:00:43.950> buffered<00:00:44.309> dim<00:00:44.489> memory<00:00:44.940> so<00:00:45.510> that's

00:00:45.709 --> 00:00:45.719 
fully buffered dim memory so that's

00:00:45.719 --> 00:00:47.510 
fully buffered dim memory so that's
going<00:00:45.870> to<00:00:45.930> increase<00:00:46.350> the<00:00:46.649> heat<00:00:46.860> overall<00:00:47.489> for

00:00:47.510 --> 00:00:47.520 
going to increase the heat overall for

00:00:47.520 --> 00:00:49.720 
going to increase the heat overall for
the<00:00:47.820> platform<00:00:48.059> so<00:00:48.930> what<00:00:49.200> ultimately

00:00:49.720 --> 00:00:49.730 
the platform so what ultimately

00:00:49.730 --> 00:00:51.500 
the platform so what ultimately
customers<00:00:50.730> are<00:00:50.820> going<00:00:50.910> to<00:00:50.969> see<00:00:51.149> us<00:00:51.239> as<00:00:51.390> they

00:00:51.500 --> 00:00:51.510 
customers are going to see us as they

00:00:51.510 --> 00:00:52.939 
customers are going to see us as they
add<00:00:51.629> more<00:00:51.840> course<00:00:52.170> they're<00:00:52.649> going<00:00:52.770> to<00:00:52.829> add

00:00:52.939 --> 00:00:52.949 
add more course they're going to add

00:00:52.949 --> 00:00:54.770 
add more course they're going to add
more<00:00:53.190> memory<00:00:53.370> it's<00:00:53.760> going<00:00:54.059> to<00:00:54.090> add<00:00:54.270> more<00:00:54.510> heat

00:00:54.770 --> 00:00:54.780 
more memory it's going to add more heat

00:00:54.780 --> 00:00:56.150 
more memory it's going to add more heat
it's<00:00:55.020> going<00:00:55.230> to<00:00:55.289> be<00:00:55.379> a<00:00:55.410> less<00:00:55.649> efficient

00:00:56.150 --> 00:00:56.160 
it's going to be a less efficient

00:00:56.160 --> 00:00:59.299 
it's going to be a less efficient
platform<00:00:56.780> the<00:00:57.780> two<00:00:58.079> key<00:00:58.440> workloads<00:00:59.039> that

00:00:59.299 --> 00:00:59.309 
platform the two key workloads that

00:00:59.309 --> 00:01:01.010 
platform the two key workloads that
customers<00:01:00.059> are<00:01:00.149> going<00:01:00.239> to<00:01:00.329> care<00:01:00.539> about<00:01:00.660> are

00:01:01.010 --> 00:01:01.020 
customers are going to care about are

00:01:01.020 --> 00:01:03.579 
customers are going to care about are
going<00:01:01.260> to<00:01:01.320> be<00:01:01.379> database<00:01:01.890> in<00:01:02.129> virtualization

00:01:03.579 --> 00:01:03.589 
going to be database in virtualization

00:01:03.589 --> 00:01:06.679 
going to be database in virtualization
from<00:01:04.589> a<00:01:04.680> database<00:01:05.070> perspective<00:01:05.970> you're<00:01:06.570> going

00:01:06.679 --> 00:01:06.689 
from a database perspective you're going

00:01:06.689 --> 00:01:08.719 
from a database perspective you're going
to<00:01:06.750> want<00:01:06.990> a<00:01:07.200> lot<00:01:07.650> of<00:01:07.770> throughput<00:01:08.189> a<00:01:08.400> lot<00:01:08.610> of

00:01:08.719 --> 00:01:08.729 
to want a lot of throughput a lot of

00:01:08.729 --> 00:01:10.190 
to want a lot of throughput a lot of
memory<00:01:09.030> through<00:01:09.270> put<00:01:09.479> in<00:01:09.630> a<00:01:09.810> lot<00:01:09.900> of<00:01:09.960> i/o

00:01:10.190 --> 00:01:10.200 
memory through put in a lot of i/o

00:01:10.200 --> 00:01:12.620 
memory through put in a lot of i/o
throughput<00:01:10.890> our<00:01:11.330> Direct<00:01:12.330> Connect

00:01:12.620 --> 00:01:12.630 
throughput our Direct Connect

00:01:12.630 --> 00:01:14.929 
throughput our Direct Connect
architecture<00:01:13.260> is<00:01:13.409> designed<00:01:14.130> with<00:01:14.369> separate

00:01:14.929 --> 00:01:14.939 
architecture is designed with separate

00:01:14.939 --> 00:01:17.030 
architecture is designed with separate
channels<00:01:15.360> from<00:01:15.540> memory<00:01:15.900> and<00:01:16.020> i/o<00:01:16.170> to<00:01:16.770> give<00:01:16.920> you

00:01:17.030 --> 00:01:17.040 
channels from memory and i/o to give you

00:01:17.040 --> 00:01:18.679 
channels from memory and i/o to give you
the<00:01:17.130> best<00:01:17.310> memory<00:01:17.700> throughput<00:01:18.119> the<00:01:18.270> best<00:01:18.450> io

00:01:18.679 --> 00:01:18.689 
the best memory throughput the best io

00:01:18.689 --> 00:01:21.499 
the best memory throughput the best io
throughput<00:01:19.320> now<00:01:20.189> the<00:01:20.250> dunnington<00:01:20.939> platform

00:01:21.499 --> 00:01:21.509 
throughput now the dunnington platform

00:01:21.509 --> 00:01:24.609 
throughput now the dunnington platform
is<00:01:21.659> going<00:01:21.990> to<00:01:22.049> rely<00:01:22.409> on<00:01:22.439> that<00:01:22.770> same<00:01:23.220> old<00:01:23.759> tired

00:01:24.609 --> 00:01:24.619 
is going to rely on that same old tired

00:01:24.619 --> 00:01:27.380 
is going to rely on that same old tired
frontside<00:01:25.619> bus<00:01:25.890> where<00:01:26.670> your<00:01:26.880> memory<00:01:27.060> and<00:01:27.330> your

00:01:27.380 --> 00:01:27.390 
frontside bus where your memory and your

00:01:27.390 --> 00:01:30.080 
frontside bus where your memory and your
i/o<00:01:27.689> have<00:01:28.140> to<00:01:28.320> share<00:01:28.530> the<00:01:28.680> same<00:01:28.860> bus<00:01:29.159> so<00:01:30.000> it

00:01:30.080 --> 00:01:30.090 
i/o have to share the same bus so it

00:01:30.090 --> 00:01:32.330 
i/o have to share the same bus so it
creates<00:01:30.450> a<00:01:30.570> bottleneck<00:01:30.750> so<00:01:31.680> for<00:01:31.890> database

00:01:32.330 --> 00:01:32.340 
creates a bottleneck so for database

00:01:32.340 --> 00:01:34.219 
creates a bottleneck so for database
applications<00:01:33.090> you're<00:01:33.479> not<00:01:33.689> going<00:01:33.900> to<00:01:33.960> see<00:01:34.079> the

00:01:34.219 --> 00:01:34.229 
applications you're not going to see the

00:01:34.229 --> 00:01:35.929 
applications you're not going to see the
kind<00:01:34.439> of<00:01:34.500> performance<00:01:34.799> that<00:01:35.159> you<00:01:35.310> want<00:01:35.549> but

00:01:35.929 --> 00:01:35.939 
kind of performance that you want but

00:01:35.939 --> 00:01:37.010 
kind of performance that you want but
the<00:01:36.000> kind<00:01:36.119> of<00:01:36.240> performance<00:01:36.659> you're<00:01:36.840> going<00:01:36.960> to

00:01:37.010 --> 00:01:37.020 
the kind of performance you're going to

00:01:37.020 --> 00:01:39.550 
the kind of performance you're going to
get<00:01:37.170> from<00:01:37.619> a<00:01:37.710> direct<00:01:37.979> connect<00:01:38.280> architecture

00:01:39.550 --> 00:01:39.560 
get from a direct connect architecture

00:01:39.560 --> 00:01:43.190 
get from a direct connect architecture
the<00:01:40.560> other<00:01:40.710> workload<00:01:41.189> is<00:01:41.340> virtualization<00:01:42.240> now

00:01:43.190 --> 00:01:43.200 
the other workload is virtualization now

00:01:43.200 --> 00:01:45.819 
the other workload is virtualization now
virtualization<00:01:44.100> is<00:01:44.250> all<00:01:44.579> about<00:01:44.970> efficiency

00:01:45.819 --> 00:01:45.829 
virtualization is all about efficiency

00:01:45.829 --> 00:01:48.350 
virtualization is all about efficiency
so<00:01:46.829> why<00:01:47.070> would<00:01:47.280> a<00:01:47.310> customer<00:01:47.850> want<00:01:48.119> to<00:01:48.210> use<00:01:48.329> a

00:01:48.350 --> 00:01:48.360 
so why would a customer want to use a

00:01:48.360 --> 00:01:50.719 
so why would a customer want to use a
platform<00:01:48.990> like<00:01:49.049> Dunnington<00:01:49.770> in<00:01:49.979> an

00:01:50.719 --> 00:01:50.729 
platform like Dunnington in an

00:01:50.729 --> 00:01:52.370 
platform like Dunnington in an
efficiency<00:01:51.180> environment<00:01:51.899> where<00:01:52.259> you're

00:01:52.370 --> 00:01:52.380 
efficiency environment where you're

00:01:52.380 --> 00:01:54.530 
efficiency environment where you're
going<00:01:52.500> to<00:01:52.560> be<00:01:52.649> adding<00:01:52.799> the<00:01:53.490> fully<00:01:54.149> buffered

00:01:54.530 --> 00:01:54.540 
going to be adding the fully buffered

00:01:54.540 --> 00:01:57.109 
going to be adding the fully buffered
dim<00:01:54.750> memory<00:01:55.170> that's<00:01:55.619> going<00:01:55.890> to<00:01:55.950> create<00:01:56.189> more

00:01:57.109 --> 00:01:57.119 
dim memory that's going to create more

00:01:57.119 --> 00:01:59.289 
dim memory that's going to create more
heat<00:01:57.420> because<00:01:57.990> it's<00:01:58.200> consuming<00:01:58.710> more<00:01:58.890> power

00:01:59.289 --> 00:01:59.299 
heat because it's consuming more power

00:01:59.299 --> 00:02:02.300 
heat because it's consuming more power
the<00:02:00.299> TDP<00:02:00.659> is<00:02:00.869> on<00:02:01.049> the<00:02:01.170> processors<00:02:01.770> as<00:02:01.890> well<00:02:02.100> go

00:02:02.300 --> 00:02:02.310 
the TDP is on the processors as well go

00:02:02.310 --> 00:02:04.039 
the TDP is on the processors as well go
up<00:02:02.490> that's<00:02:03.030> not<00:02:03.299> what<00:02:03.450> you<00:02:03.600> want<00:02:03.840> from

00:02:04.039 --> 00:02:04.049 
up that's not what you want from

00:02:04.049 --> 00:02:06.109 
up that's not what you want from
virtualization<00:02:04.680> want<00:02:05.280> a<00:02:05.369> nice<00:02:05.549> efficient

00:02:06.109 --> 00:02:06.119 
virtualization want a nice efficient

00:02:06.119 --> 00:02:08.510 
virtualization want a nice efficient
system<00:02:06.540> running<00:02:07.229> with<00:02:07.380> a<00:02:07.409> cool<00:02:07.770> Direct

00:02:08.510 --> 00:02:08.520 
system running with a cool Direct

00:02:08.520 --> 00:02:10.400 
system running with a cool Direct
Connect<00:02:08.819> architecture<00:02:09.479> like<00:02:09.780> AMD<00:02:10.080> can

00:02:10.400 --> 00:02:10.410 
Connect architecture like AMD can

00:02:10.410 --> 00:02:11.320 
Connect architecture like AMD can
deliver

00:02:11.320 --> 00:02:11.330 
deliver

00:02:11.330 --> 00:02:14.230 
deliver
so<00:02:11.750> remember<00:02:12.260> when<00:02:12.770> it<00:02:12.890> comes<00:02:13.130> to<00:02:13.340> quad<00:02:13.760> socket

00:02:14.230 --> 00:02:14.240 
so remember when it comes to quad socket

00:02:14.240 --> 00:02:16.270 
so remember when it comes to quad socket
servers<00:02:14.660> AMD<00:02:15.650> is<00:02:15.770> going<00:02:15.920> to<00:02:15.980> have<00:02:16.070> the<00:02:16.100> right

00:02:16.270 --> 00:02:16.280 
servers AMD is going to have the right

00:02:16.280 --> 00:02:18.310 
servers AMD is going to have the right
choice<00:02:16.340> for<00:02:16.610> you<00:02:17.030> we've<00:02:17.810> got<00:02:18.050> the<00:02:18.170> right

00:02:18.310 --> 00:02:18.320 
choice for you we've got the right

00:02:18.320 --> 00:02:20.260 
choice for you we've got the right
architecture<00:02:18.980> that's<00:02:19.490> optimized<00:02:20.120> for

00:02:20.260 --> 00:02:20.270 
architecture that's optimized for

00:02:20.270 --> 00:02:22.990 
architecture that's optimized for
high-throughput<00:02:20.620> environments<00:02:21.640> we<00:02:22.640> deliver

00:02:22.990 --> 00:02:23.000 
high-throughput environments we deliver

00:02:23.000 --> 00:02:25.570 
high-throughput environments we deliver
great<00:02:23.090> database<00:02:23.750> performance<00:02:24.250> we<00:02:25.250> deliver

00:02:25.570 --> 00:02:25.580 
great database performance we deliver

00:02:25.580 --> 00:02:28.150 
great database performance we deliver
great<00:02:25.720> virtualization<00:02:26.720> performance<00:02:27.320> import

00:02:28.150 --> 00:02:28.160 
great virtualization performance import

00:02:28.160 --> 00:02:30.580 
great virtualization performance import
more<00:02:28.400> importantly<00:02:28.880> we're<00:02:29.390> doing<00:02:29.690> it<00:02:29.810> all<00:02:29.960> with

00:02:30.580 --> 00:02:30.590 
more importantly we're doing it all with

00:02:30.590 --> 00:02:34.500 
more importantly we're doing it all with
low<00:02:30.920> power<00:02:31.220> and<00:02:31.610> cool<00:02:32.600> efficient<00:02:33.500> ddr2<00:02:34.310> memory

00:02:34.500 --> 00:02:34.510 
low power and cool efficient ddr2 memory

00:02:34.510 --> 00:02:37.720 
low power and cool efficient ddr2 memory
thank<00:02:35.510> you

