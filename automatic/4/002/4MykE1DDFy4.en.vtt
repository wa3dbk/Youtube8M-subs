WEBVTT
Kind: captions
Language: en

00:00:03.920 --> 00:00:07.160 

your<00:00:04.920> server<00:00:05.370> i/o<00:00:05.580> performance<00:00:06.000> is<00:00:06.540> critical

00:00:07.160 --> 00:00:07.170 
your server i/o performance is critical

00:00:07.170 --> 00:00:08.570 
your server i/o performance is critical
to<00:00:07.290> your<00:00:07.379> apps<00:00:07.620> success

00:00:08.570 --> 00:00:08.580 
to your apps success

00:00:08.580 --> 00:00:10.600 
to your apps success
and<00:00:08.700> your<00:00:09.120> ability<00:00:09.540> to<00:00:09.570> stay<00:00:09.960> competitive

00:00:10.600 --> 00:00:10.610 
and your ability to stay competitive

00:00:10.610 --> 00:00:12.709 
and your ability to stay competitive
bottlenecks<00:00:11.610> in<00:00:11.790> your<00:00:11.940> i/o<00:00:12.090> throughput

00:00:12.709 --> 00:00:12.719 
bottlenecks in your i/o throughput

00:00:12.719 --> 00:00:15.560 
bottlenecks in your i/o throughput
become<00:00:13.290> your<00:00:13.469> worst<00:00:13.769> enemy<00:00:14.340> right<00:00:15.059> now<00:00:15.210> all

00:00:15.560 --> 00:00:15.570 
become your worst enemy right now all

00:00:15.570 --> 00:00:17.480 
become your worst enemy right now all
your<00:00:15.870> data<00:00:16.080> is<00:00:16.289> hanging<00:00:16.619> out<00:00:16.770> on<00:00:16.949> the<00:00:17.070> big<00:00:17.279> and

00:00:17.480 --> 00:00:17.490 
your data is hanging out on the big and

00:00:17.490 --> 00:00:19.490 
your data is hanging out on the big and
slow<00:00:17.789> spinning<00:00:18.300> drives<00:00:18.539> because<00:00:19.140> of<00:00:19.289> all<00:00:19.380> the

00:00:19.490 --> 00:00:19.500 
slow spinning drives because of all the

00:00:19.500 --> 00:00:20.870 
slow spinning drives because of all the
storage<00:00:19.770> space<00:00:20.100> you<00:00:20.130> can<00:00:20.369> get<00:00:20.490> per<00:00:20.699> dollar

00:00:20.870 --> 00:00:20.880 
storage space you can get per dollar

00:00:20.880 --> 00:00:23.120 
storage space you can get per dollar
every<00:00:21.689> time<00:00:21.869> your<00:00:22.020> app<00:00:22.170> needs<00:00:22.439> data<00:00:22.740> the

00:00:23.120 --> 00:00:23.130 
every time your app needs data the

00:00:23.130 --> 00:00:25.580 
every time your app needs data the
processor<00:00:23.789> chugs<00:00:24.180> it<00:00:24.359> up<00:00:24.449> to<00:00:24.660> ram<00:00:24.869> your

00:00:25.580 --> 00:00:25.590 
processor chugs it up to ram your

00:00:25.590 --> 00:00:27.560 
processor chugs it up to ram your
storage<00:00:25.980> solution<00:00:26.550> does<00:00:26.730> a<00:00:26.760> great<00:00:27.119> job<00:00:27.180> of

00:00:27.560 --> 00:00:27.570 
storage solution does a great job of

00:00:27.570 --> 00:00:36.680 
storage solution does a great job of
storing<00:00:27.990> but<00:00:28.470> it<00:00:28.890> is<00:00:29.279> slow<00:00:35.300> big<00:00:36.300> spinning

00:00:36.680 --> 00:00:36.690 
storing but it is slow big spinning

00:00:36.690 --> 00:00:39.020 
storing but it is slow big spinning
drives<00:00:37.020> are<00:00:37.200> cost<00:00:37.380> effective<00:00:37.530> but<00:00:38.370> forces<00:00:38.910> you

00:00:39.020 --> 00:00:39.030 
drives are cost effective but forces you

00:00:39.030 --> 00:00:44.240 
drives are cost effective but forces you
to<00:00:39.059> treat<00:00:39.420> all<00:00:39.629> your<00:00:39.840> data<00:00:40.050> equally<00:00:43.010> but<00:00:44.010> some

00:00:44.240 --> 00:00:44.250 
to treat all your data equally but some

00:00:44.250 --> 00:00:46.869 
to treat all your data equally but some
data<00:00:44.460> is<00:00:44.670> just<00:00:44.969> hotter<00:00:45.750> than<00:00:46.379> others

00:00:46.869 --> 00:00:46.879 
data is just hotter than others

00:00:46.879 --> 00:00:49.459 
data is just hotter than others
performance<00:00:47.879> like<00:00:48.030> this<00:00:48.300> can<00:00:49.050> be<00:00:49.140> tough<00:00:49.350> on

00:00:49.459 --> 00:00:49.469 
performance like this can be tough on

00:00:49.469 --> 00:00:50.260 
performance like this can be tough on
your<00:00:49.620> bottom<00:00:49.920> line

00:00:50.260 --> 00:00:50.270 
your bottom line

00:00:50.270 --> 00:00:53.569 
your bottom line
DRAM<00:00:51.270> can<00:00:51.780> make<00:00:52.050> things<00:00:52.289> faster<00:00:52.800> but<00:00:53.370> that

00:00:53.569 --> 00:00:53.579 
DRAM can make things faster but that

00:00:53.579 --> 00:00:55.520 
DRAM can make things faster but that
doesn't<00:00:54.090> solve<00:00:54.329> your<00:00:54.480> i/o<00:00:54.750> throughput

00:00:55.520 --> 00:00:55.530 
doesn't solve your i/o throughput

00:00:55.530 --> 00:00:59.810 
doesn't solve your i/o throughput
problem<00:00:56.070> and<00:00:56.449> it's<00:00:57.739> expensive<00:00:58.739> did<00:00:59.730> we

00:00:59.810 --> 00:00:59.820 
problem and it's expensive did we

00:00:59.820 --> 00:01:01.779 
problem and it's expensive did we
mention<00:01:00.000> it's<00:01:00.270> expensive<00:01:00.780> because<00:01:00.989> it<00:01:01.320> is

00:01:01.779 --> 00:01:01.789 
mention it's expensive because it is

00:01:01.789 --> 00:01:04.520 
mention it's expensive because it is
SSDs<00:01:02.789> can<00:01:03.090> be<00:01:03.270> a<00:01:03.300> fast<00:01:03.570> solution<00:01:03.780> but<00:01:04.290> it<00:01:04.409> may

00:01:04.520 --> 00:01:04.530 
SSDs can be a fast solution but it may

00:01:04.530 --> 00:01:06.710 
SSDs can be a fast solution but it may
not<00:01:04.710> meet<00:01:04.949> your<00:01:05.100> specific<00:01:05.610> need<00:01:05.850> what<00:01:06.630> if

00:01:06.710 --> 00:01:06.720 
not meet your specific need what if

00:01:06.720 --> 00:01:08.300 
not meet your specific need what if
you've<00:01:06.900> made<00:01:07.110> an<00:01:07.290> important<00:01:07.710> investment<00:01:08.070> in

00:01:08.300 --> 00:01:08.310 
you've made an important investment in

00:01:08.310 --> 00:01:10.219 
you've made an important investment in
your<00:01:08.400> spinning<00:01:08.790> back-end<00:01:09.240> storage<00:01:09.510> but<00:01:10.110> would

00:01:10.219 --> 00:01:10.229 
your spinning back-end storage but would

00:01:10.229 --> 00:01:11.420 
your spinning back-end storage but would
really<00:01:10.380> like<00:01:10.590> to<00:01:10.619> take<00:01:10.830> advantage<00:01:11.250> of<00:01:11.310> the

00:01:11.420 --> 00:01:11.430 
really like to take advantage of the

00:01:11.430 --> 00:01:13.700 
really like to take advantage of the
performance<00:01:11.610> benefits<00:01:12.390> SSDs<00:01:13.110> could<00:01:13.320> bring<00:01:13.560> to

00:01:13.700 --> 00:01:13.710 
performance benefits SSDs could bring to

00:01:13.710 --> 00:01:16.010 
performance benefits SSDs could bring to
your<00:01:13.799> application<00:01:14.580> what<00:01:15.330> you<00:01:15.509> need<00:01:15.720> is<00:01:15.900> an

00:01:16.010 --> 00:01:16.020 
your application what you need is an

00:01:16.020 --> 00:01:18.140 
your application what you need is an
intelligent<00:01:16.590> way<00:01:16.740> to<00:01:16.799> access<00:01:17.430> just<00:01:17.759> the<00:01:17.939> hot

00:01:18.140 --> 00:01:18.150 
intelligent way to access just the hot

00:01:18.150 --> 00:01:20.600 
intelligent way to access just the hot
data<00:01:18.390> without<00:01:18.930> a<00:01:18.960> total<00:01:19.500> makeover<00:01:19.860> and<00:01:20.159> at<00:01:20.580> a

00:01:20.600 --> 00:01:20.610 
data without a total makeover and at a

00:01:20.610 --> 00:01:23.300 
data without a total makeover and at a
reasonable<00:01:20.909> cost<00:01:21.390> you<00:01:22.259> need<00:01:22.500> Intel<00:01:23.040> cache

00:01:23.300 --> 00:01:23.310 
reasonable cost you need Intel cache

00:01:23.310 --> 00:01:25.539 
reasonable cost you need Intel cache
acceleration<00:01:24.150> software<00:01:24.689> the<00:01:25.320> software

00:01:25.539 --> 00:01:25.549 
acceleration software the software

00:01:25.549 --> 00:01:28.130 
acceleration software the software
prioritizes<00:01:26.549> your<00:01:26.700> hot<00:01:26.880> data<00:01:27.119> on<00:01:27.360> superfast

00:01:28.130 --> 00:01:28.140 
prioritizes your hot data on superfast

00:01:28.140 --> 00:01:30.649 
prioritizes your hot data on superfast
SSDs<00:01:28.799> and<00:01:29.009> keeps<00:01:29.520> the<00:01:29.670> cold<00:01:29.909> data<00:01:30.150> where<00:01:30.540> it's

00:01:30.649 --> 00:01:30.659 
SSDs and keeps the cold data where it's

00:01:30.659 --> 00:01:33.380 
SSDs and keeps the cold data where it's
cost<00:01:30.900> effective<00:01:31.310> Intel<00:01:32.310> casts<00:01:32.549> continually

00:01:33.380 --> 00:01:33.390 
cost effective Intel casts continually

00:01:33.390 --> 00:01:35.480 
cost effective Intel casts continually
evaluates<00:01:33.930> your<00:01:34.020> application<00:01:34.680> data<00:01:34.860> to<00:01:35.310> see

00:01:35.480 --> 00:01:35.490 
evaluates your application data to see

00:01:35.490 --> 00:01:38.240 
evaluates your application data to see
what's<00:01:35.729> hot<00:01:35.939> and<00:01:36.119> what's<00:01:36.299> not<00:01:36.930> and<00:01:37.409> which<00:01:38.009> data

00:01:38.240 --> 00:01:38.250 
what's hot and what's not and which data

00:01:38.250 --> 00:01:41.210 
what's hot and what's not and which data
is<00:01:38.400> making<00:01:38.909> a<00:01:39.030> comeback<00:01:39.439> Intel<00:01:40.439> casts<00:01:40.890> scouts

00:01:41.210 --> 00:01:41.220 
is making a comeback Intel casts scouts

00:01:41.220 --> 00:01:43.069 
is making a comeback Intel casts scouts
out<00:01:41.400> the<00:01:41.579> hottest<00:01:41.790> data<00:01:42.119> and<00:01:42.329> places<00:01:42.780> them<00:01:42.930> on

00:01:43.069 --> 00:01:43.079 
out the hottest data and places them on

00:01:43.079 --> 00:01:45.770 
out the hottest data and places them on
superfast<00:01:43.799> SSDs<00:01:44.490> so<00:01:45.060> when<00:01:45.210> the<00:01:45.329> app<00:01:45.450> needs

00:01:45.770 --> 00:01:45.780 
superfast SSDs so when the app needs

00:01:45.780 --> 00:01:47.660 
superfast SSDs so when the app needs
them<00:01:46.049> the<00:01:46.500> data<00:01:46.710> is<00:01:46.829> right<00:01:47.070> where<00:01:47.250> it<00:01:47.369> needs<00:01:47.549> to

00:01:47.660 --> 00:01:47.670 
them the data is right where it needs to

00:01:47.670 --> 00:01:50.210 
them the data is right where it needs to
be<00:01:47.790> the<00:01:48.450> Intel<00:01:48.840> cache<00:01:49.049> acceleration<00:01:49.740> software

00:01:50.210 --> 00:01:50.220 
be the Intel cache acceleration software

00:01:50.220 --> 00:01:52.219 
be the Intel cache acceleration software
is<00:01:50.399> always<00:01:50.850> intelligently<00:01:51.479> analyzing<00:01:52.140> your

00:01:52.219 --> 00:01:52.229 
is always intelligently analyzing your

00:01:52.229 --> 00:01:54.139 
is always intelligently analyzing your
data<00:01:52.290> to<00:01:52.710> make<00:01:52.860> sure<00:01:53.070> everything<00:01:53.729> is<00:01:53.850> where<00:01:54.030> it

00:01:54.139 --> 00:01:54.149 
data to make sure everything is where it

00:01:54.149 --> 00:01:55.850 
data to make sure everything is where it
should<00:01:54.180> be<00:01:54.570> no<00:01:55.290> one<00:01:55.409> knows<00:01:55.590> your<00:01:55.740> app

00:01:55.850 --> 00:01:55.860 
should be no one knows your app

00:01:55.860 --> 00:01:57.800 
should be no one knows your app
requirements<00:01:56.549> or<00:01:56.670> storage<00:01:57.000> use<00:01:57.210> cases<00:01:57.479> better

00:01:57.800 --> 00:01:57.810 
requirements or storage use cases better

00:01:57.810 --> 00:02:00.080 
requirements or storage use cases better
than<00:01:57.930> view<00:01:58.469> so<00:01:58.979> tell<00:01:59.189> Intel<00:01:59.520> casts<00:01:59.909> which

00:02:00.080 --> 00:02:00.090 
than view so tell Intel casts which

00:02:00.090 --> 00:02:01.730 
than view so tell Intel casts which
specific<00:02:00.659> data<00:02:00.869> or<00:02:01.079> files<00:02:01.350> to<00:02:01.619> make

00:02:01.730 --> 00:02:01.740 
specific data or files to make

00:02:01.740 --> 00:02:03.530 
specific data or files to make
high-priority<00:02:02.189> which<00:02:02.909> selectively

00:02:03.530 --> 00:02:03.540 
high-priority which selectively

00:02:03.540 --> 00:02:05.719 
high-priority which selectively
optimizes<00:02:04.350> the<00:02:04.380> performance<00:02:05.040> for<00:02:05.219> only<00:02:05.430> the

00:02:05.719 --> 00:02:05.729 
optimizes the performance for only the

00:02:05.729 --> 00:02:06.710 
optimizes the performance for only the
apps<00:02:05.880> you<00:02:06.420> on<00:02:06.600> a

00:02:06.710 --> 00:02:06.720 
apps you on a

00:02:06.720 --> 00:02:09.139 
apps you on a
accelerate<00:02:07.200> get<00:02:08.100> the<00:02:08.220> competitive<00:02:08.729> edge<00:02:08.910> with

00:02:09.139 --> 00:02:09.149 
accelerate get the competitive edge with

00:02:09.149 --> 00:02:11.330 
accelerate get the competitive edge with
the<00:02:09.300> performance<00:02:09.869> and<00:02:10.050> flexibility<00:02:10.619> of<00:02:10.710> Intel

00:02:11.330 --> 00:02:11.340 
the performance and flexibility of Intel

00:02:11.340 --> 00:02:14.180 
the performance and flexibility of Intel
cache<00:02:11.580> acceleration<00:02:12.360> software<00:02:12.840> hot<00:02:13.620> and<00:02:13.830> cold

00:02:14.180 --> 00:02:14.190 
cache acceleration software hot and cold

00:02:14.190 --> 00:02:18.560 
cache acceleration software hot and cold
data<00:02:14.430> right<00:02:15.120> where<00:02:15.300> you<00:02:15.390> need<00:02:15.570> it<00:02:15.600> seamless

