WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.819 

the<00:00:00.240> Harvard<00:00:00.599> architecture<00:00:00.750> is<00:00:01.380> a<00:00:01.410> computer

00:00:01.819 --> 00:00:01.829 
the Harvard architecture is a computer

00:00:01.829 --> 00:00:03.889 
the Harvard architecture is a computer
architecture<00:00:02.790> with<00:00:02.939> physically<00:00:03.480> separate

00:00:03.889 --> 00:00:03.899 
architecture with physically separate

00:00:03.899 --> 00:00:05.690 
architecture with physically separate
storage<00:00:04.259> and<00:00:04.560> signal<00:00:04.920> pathways<00:00:05.430> for

00:00:05.690 --> 00:00:05.700 
storage and signal pathways for

00:00:05.700 --> 00:00:07.820 
storage and signal pathways for
instructions<00:00:06.359> and<00:00:06.569> data<00:00:06.720> the<00:00:07.560> term

00:00:07.820 --> 00:00:07.830 
instructions and data the term

00:00:07.830 --> 00:00:10.070 
instructions and data the term
originated<00:00:08.580> from<00:00:08.610> the<00:00:08.849> harvard<00:00:09.240> mark<00:00:09.480> i<00:00:09.660> relay

00:00:10.070 --> 00:00:10.080 
originated from the harvard mark i relay

00:00:10.080 --> 00:00:12.560 
originated from the harvard mark i relay
based<00:00:10.380> computer<00:00:11.130> which<00:00:11.490> stored<00:00:11.880> instructions

00:00:12.560 --> 00:00:12.570 
based computer which stored instructions

00:00:12.570 --> 00:00:16.269 
based computer which stored instructions
on<00:00:12.750> punched<00:00:13.110> tape<00:00:13.460> 24<00:00:14.460> bits<00:00:14.759> wide<00:00:15.030> and<00:00:15.420> data<00:00:15.870> in

00:00:16.269 --> 00:00:16.279 
on punched tape 24 bits wide and data in

00:00:16.279 --> 00:00:18.950 
on punched tape 24 bits wide and data in
electromechanical<00:00:17.279> counters<00:00:17.760> these<00:00:18.480> early

00:00:18.950 --> 00:00:18.960 
electromechanical counters these early

00:00:18.960 --> 00:00:21.140 
electromechanical counters these early
machines<00:00:19.380> had<00:00:19.680> data<00:00:19.949> storage<00:00:20.460> entirely

00:00:21.140 --> 00:00:21.150 
machines had data storage entirely

00:00:21.150 --> 00:00:22.730 
machines had data storage entirely
contained<00:00:21.510> within<00:00:21.810> the<00:00:22.050> central<00:00:22.380> processing

00:00:22.730 --> 00:00:22.740 
contained within the central processing

00:00:22.740 --> 00:00:25.130 
contained within the central processing
unit<00:00:23.430> and<00:00:23.550> provided<00:00:24.240> no<00:00:24.390> access<00:00:24.840> to<00:00:25.019> the

00:00:25.130 --> 00:00:25.140 
unit and provided no access to the

00:00:25.140 --> 00:00:27.920 
unit and provided no access to the
instruction<00:00:25.800> storage<00:00:26.220> as<00:00:26.460> data<00:00:26.930> programs

00:00:27.920 --> 00:00:27.930 
instruction storage as data programs

00:00:27.930 --> 00:00:30.200 
instruction storage as data programs
needed<00:00:28.260> to<00:00:28.470> be<00:00:28.650> loaded<00:00:28.830> by<00:00:29.039> an<00:00:29.310> operator<00:00:29.699> the

00:00:30.200 --> 00:00:30.210 
needed to be loaded by an operator the

00:00:30.210 --> 00:00:33.139 
needed to be loaded by an operator the
processor<00:00:30.779> could<00:00:31.080> not<00:00:31.289> boot<00:00:31.560> itself<00:00:32.149> today

00:00:33.139 --> 00:00:33.149 
processor could not boot itself today

00:00:33.149 --> 00:00:35.720 
processor could not boot itself today
most<00:00:33.600> processors<00:00:34.290> implement<00:00:34.980> such<00:00:35.219> separate

00:00:35.720 --> 00:00:35.730 
most processors implement such separate

00:00:35.730 --> 00:00:37.549 
most processors implement such separate
signal<00:00:36.149> pathways<00:00:36.690> for<00:00:36.899> performance<00:00:37.440> reasons

00:00:37.549 --> 00:00:37.559 
signal pathways for performance reasons

00:00:37.559 --> 00:00:40.069 
signal pathways for performance reasons
but<00:00:38.430> actually<00:00:38.910> implement<00:00:39.480> a<00:00:39.600> modified

00:00:40.069 --> 00:00:40.079 
but actually implement a modified

00:00:40.079 --> 00:00:42.229 
but actually implement a modified
Harvard<00:00:40.469> architecture<00:00:40.670> so<00:00:41.670> they<00:00:41.820> can<00:00:42.030> support

00:00:42.229 --> 00:00:42.239 
Harvard architecture so they can support

00:00:42.239 --> 00:00:44.510 
Harvard architecture so they can support
tasks<00:00:42.690> such<00:00:43.140> as<00:00:43.170> loading<00:00:43.680> a<00:00:43.770> program<00:00:44.280> from

00:00:44.510 --> 00:00:44.520 
tasks such as loading a program from

00:00:44.520 --> 00:00:47.150 
tasks such as loading a program from
disk<00:00:44.789> storage<00:00:45.000> as<00:00:45.510> data<00:00:45.809> and<00:00:46.170> then<00:00:46.440> executing

00:00:47.150 --> 00:00:47.160 
disk storage as data and then executing

00:00:47.160 --> 00:00:49.910 
disk storage as data and then executing
it<00:00:47.340> memory<00:00:48.180> details<00:00:48.629> in<00:00:48.989> a<00:00:49.559> Harvard

00:00:49.910 --> 00:00:49.920 
it memory details in a Harvard

00:00:49.920 --> 00:00:52.189 
it memory details in a Harvard
architecture<00:00:50.100> there<00:00:51.059> is<00:00:51.210> no<00:00:51.390> need<00:00:51.629> to<00:00:51.840> make

00:00:52.189 --> 00:00:52.199 
architecture there is no need to make

00:00:52.199 --> 00:00:54.619 
architecture there is no need to make
the<00:00:52.350> to<00:00:52.559> memories<00:00:52.980> share<00:00:53.010> characteristics<00:00:53.940> in

00:00:54.619 --> 00:00:54.629 
the to memories share characteristics in

00:00:54.629 --> 00:00:57.490 
the to memories share characteristics in
particular<00:00:55.410> the<00:00:56.100> word<00:00:56.280> with<00:00:56.579> timing

00:00:57.490 --> 00:00:57.500 
particular the word with timing

00:00:57.500 --> 00:00:59.959 
particular the word with timing
implementation<00:00:58.500> technology<00:00:59.190> and<00:00:59.399> memory

00:00:59.959 --> 00:00:59.969 
implementation technology and memory

00:00:59.969 --> 00:01:02.180 
implementation technology and memory
address<00:01:00.329> structure<00:01:00.780> can<00:01:00.960> differ<00:01:01.320> and<00:01:01.530> some

00:01:02.180 --> 00:01:02.190 
address structure can differ and some

00:01:02.190 --> 00:01:04.549 
address structure can differ and some
systems<00:01:02.780> instructions<00:01:03.780> can<00:01:04.019> be<00:01:04.049> stored<00:01:04.409> in

00:01:04.549 --> 00:01:04.559 
systems instructions can be stored in

00:01:04.559 --> 00:01:06.530 
systems instructions can be stored in
read-only<00:01:04.920> memory<00:01:05.280> while<00:01:05.880> data<00:01:06.210> memory

00:01:06.530 --> 00:01:06.540 
read-only memory while data memory

00:01:06.540 --> 00:01:08.840 
read-only memory while data memory
generally<00:01:07.110> requires<00:01:07.500> readwrite<00:01:08.159> memory<00:01:08.640> and

00:01:08.840 --> 00:01:08.850 
generally requires readwrite memory and

00:01:08.850 --> 00:01:10.850 
generally requires readwrite memory and
some<00:01:09.510> systems<00:01:10.020> there<00:01:10.470> is<00:01:10.619> much<00:01:10.799> more

00:01:10.850 --> 00:01:10.860 
some systems there is much more

00:01:10.860 --> 00:01:13.580 
some systems there is much more
instruction<00:01:11.820> memory<00:01:11.939> than<00:01:12.330> data<00:01:12.570> memory<00:01:12.960> so

00:01:13.580 --> 00:01:13.590 
instruction memory than data memory so

00:01:13.590 --> 00:01:15.530 
instruction memory than data memory so
instruction<00:01:14.220> addresses<00:01:14.670> a<00:01:14.700> wider<00:01:15.060> than<00:01:15.240> data

00:01:15.530 --> 00:01:15.540 
instruction addresses a wider than data

00:01:15.540 --> 00:01:18.260 
instruction addresses a wider than data
addresses<00:01:16.430> contrasts<00:01:17.430> with<00:01:17.640> von<00:01:17.850> Neumann

00:01:18.260 --> 00:01:18.270 
addresses contrasts with von Neumann

00:01:18.270 --> 00:01:20.840 
addresses contrasts with von Neumann
architectures<00:01:19.020> under<00:01:19.950> pure<00:01:20.130> von<00:01:20.400> Neumann

00:01:20.840 --> 00:01:20.850 
architectures under pure von Neumann

00:01:20.850 --> 00:01:22.580 
architectures under pure von Neumann
architecture<00:01:20.939> the<00:01:21.540> CPU<00:01:22.110> can<00:01:22.320> be<00:01:22.409> either

00:01:22.580 --> 00:01:22.590 
architecture the CPU can be either

00:01:22.590 --> 00:01:24.830 
architecture the CPU can be either
reading<00:01:23.070> an<00:01:23.189> instruction<00:01:23.820> or<00:01:24.030> reading<00:01:24.540> /

00:01:24.830 --> 00:01:24.840 
reading an instruction or reading /

00:01:24.840 --> 00:01:27.620 
reading an instruction or reading /
writing<00:01:25.020> data<00:01:25.530> from<00:01:25.950> /<00:01:26.220> to<00:01:26.460> the<00:01:26.580> memory<00:01:26.970> both

00:01:27.620 --> 00:01:27.630 
writing data from / to the memory both

00:01:27.630 --> 00:01:30.200 
writing data from / to the memory both
cannot<00:01:28.170> occur<00:01:28.500> at<00:01:28.770> the<00:01:28.890> same<00:01:29.130> time<00:01:29.430> since<00:01:30.000> the

00:01:30.200 --> 00:01:30.210 
cannot occur at the same time since the

00:01:30.210 --> 00:01:32.240 
cannot occur at the same time since the
instructions<00:01:30.900> and<00:01:31.079> data<00:01:31.259> use<00:01:31.619> the<00:01:31.770> same<00:01:32.009> bus

00:01:32.240 --> 00:01:32.250 
instructions and data use the same bus

00:01:32.250 --> 00:01:34.819 
instructions and data use the same bus
system<00:01:32.820> in<00:01:32.970> a<00:01:33.509> computer<00:01:34.049> using<00:01:34.350> the<00:01:34.380> Harvard

00:01:34.819 --> 00:01:34.829 
system in a computer using the Harvard

00:01:34.829 --> 00:01:37.280 
system in a computer using the Harvard
architecture<00:01:35.009> the<00:01:35.909> CPU<00:01:36.509> can<00:01:36.720> both<00:01:36.900> read<00:01:37.140> an

00:01:37.280 --> 00:01:37.290 
architecture the CPU can both read an

00:01:37.290 --> 00:01:39.440 
architecture the CPU can both read an
instruction<00:01:37.950> and<00:01:38.130> perform<00:01:38.729> a<00:01:38.850> data<00:01:39.090> memory

00:01:39.440 --> 00:01:39.450 
instruction and perform a data memory

00:01:39.450 --> 00:01:41.749 
instruction and perform a data memory
access<00:01:40.020> at<00:01:40.200> the<00:01:40.229> same<00:01:40.530> time<00:01:40.829> even<00:01:41.460> without<00:01:41.579> a

00:01:41.749 --> 00:01:41.759 
access at the same time even without a

00:01:41.759 --> 00:01:44.060 
access at the same time even without a
cache<00:01:42.119> a<00:01:42.450> Harvard<00:01:43.229> architecture<00:01:43.350> computer

00:01:44.060 --> 00:01:44.070 
cache a Harvard architecture computer

00:01:44.070 --> 00:01:46.399 
cache a Harvard architecture computer
can<00:01:44.520> thus<00:01:44.700> be<00:01:44.729> faster<00:01:45.420> for<00:01:45.450> a<00:01:45.659> given<00:01:45.869> circuit

00:01:46.399 --> 00:01:46.409 
can thus be faster for a given circuit

00:01:46.409 --> 00:01:48.920 
can thus be faster for a given circuit
complexity<00:01:47.040> because<00:01:47.790> instruction<00:01:48.509> fetches

00:01:48.920 --> 00:01:48.930 
complexity because instruction fetches

00:01:48.930 --> 00:01:51.020 
complexity because instruction fetches
and<00:01:49.079> data<00:01:49.320> access<00:01:49.920> do<00:01:50.100> not<00:01:50.310> contend<00:01:50.729> for<00:01:50.850> a

00:01:51.020 --> 00:01:51.030 
and data access do not contend for a

00:01:51.030 --> 00:01:54.260 
and data access do not contend for a
single<00:01:51.420> memory<00:01:51.630> pathway<00:01:52.520> also<00:01:53.520> a<00:01:53.759> Harvard

00:01:54.260 --> 00:01:54.270 
single memory pathway also a Harvard

00:01:54.270 --> 00:01:56.240 
single memory pathway also a Harvard
architecture<00:01:54.390> machine<00:01:55.229> has<00:01:55.470> distinct<00:01:55.979> code

00:01:56.240 --> 00:01:56.250 
architecture machine has distinct code

00:01:56.250 --> 00:01:59.060 
architecture machine has distinct code
and<00:01:56.579> data<00:01:56.969> address<00:01:57.509> spaces<00:01:58.070> instruction

00:01:59.060 --> 00:01:59.070 
and data address spaces instruction

00:01:59.070 --> 00:02:00.740 
and data address spaces instruction
address<00:01:59.189> 0<00:01:59.610> is<00:01:59.820> not<00:01:59.969> the<00:02:00.119> same<00:02:00.329> as<00:02:00.479> data

00:02:00.740 --> 00:02:00.750 
address 0 is not the same as data

00:02:00.750 --> 00:02:03.679 
address 0 is not the same as data
address<00:02:01.170> 0<00:02:01.850> instruction<00:02:02.850> address<00:02:02.969> 0<00:02:03.390> might

00:02:03.679 --> 00:02:03.689 
address 0 instruction address 0 might

00:02:03.689 --> 00:02:06.530 
address 0 instruction address 0 might
identify<00:02:03.899> a<00:02:04.409> 24-bit<00:02:05.219> value<00:02:05.850> while<00:02:06.210> data

00:02:06.530 --> 00:02:06.540 
identify a 24-bit value while data

00:02:06.540 --> 00:02:08.900 
identify a 24-bit value while data
address<00:02:06.990> 0<00:02:07.229> might<00:02:07.530> indicate<00:02:07.860> an<00:02:08.190> 8-bit<00:02:08.640> byte

00:02:08.900 --> 00:02:08.910 
address 0 might indicate an 8-bit byte

00:02:08.910 --> 00:02:11.770 
address 0 might indicate an 8-bit byte
that<00:02:09.390> isn't<00:02:09.810> part<00:02:09.989> of<00:02:10.200> that<00:02:10.379> 24-bit<00:02:11.250> value

00:02:11.770 --> 00:02:11.780 
that isn't part of that 24-bit value

00:02:11.780 --> 00:02:13.910 
that isn't part of that 24-bit value
contrast<00:02:12.780> with<00:02:12.989> modified

00:02:13.910 --> 00:02:13.920 
contrast with modified

00:02:13.920 --> 00:02:16.160 
contrast with modified
architecture<00:02:14.700> a<00:02:14.849> modified<00:02:15.780> Harvard

00:02:16.160 --> 00:02:16.170 
architecture a modified Harvard

00:02:16.170 --> 00:02:18.170 
architecture a modified Harvard
architecture<00:02:16.290> machine<00:02:17.130> is<00:02:17.340> very<00:02:17.580> much<00:02:17.819> like<00:02:18.120> a

00:02:18.170 --> 00:02:18.180 
architecture machine is very much like a

00:02:18.180 --> 00:02:20.059 
architecture machine is very much like a
Harvard<00:02:18.660> architecture<00:02:18.780> machine<00:02:19.650> but<00:02:20.040> it

00:02:20.059 --> 00:02:20.069 
Harvard architecture machine but it

00:02:20.069 --> 00:02:22.100 
Harvard architecture machine but it
relaxes<00:02:20.700> the<00:02:20.849> strict<00:02:21.180> separation<00:02:21.450> between

00:02:22.100 --> 00:02:22.110 
relaxes the strict separation between

00:02:22.110 --> 00:02:24.440 
relaxes the strict separation between
instruction<00:02:22.920> and<00:02:23.069> data<00:02:23.130> while<00:02:23.940> still<00:02:24.270> letting

00:02:24.440 --> 00:02:24.450 
instruction and data while still letting

00:02:24.450 --> 00:02:27.320 
instruction and data while still letting
the<00:02:24.720> CPU<00:02:25.290> concurrently<00:02:25.890> access<00:02:26.370> two<00:02:26.670> or<00:02:26.940> more

00:02:27.320 --> 00:02:27.330 
the CPU concurrently access two or more

00:02:27.330 --> 00:02:29.839 
the CPU concurrently access two or more
memory<00:02:28.020> buses<00:02:28.440> the<00:02:29.190> most<00:02:29.430> common

00:02:29.839 --> 00:02:29.849 
memory buses the most common

00:02:29.849 --> 00:02:31.550 
memory buses the most common
modification<00:02:30.660> includes<00:02:31.050> separate

00:02:31.550 --> 00:02:31.560 
modification includes separate

00:02:31.560 --> 00:02:33.680 
modification includes separate
instruction<00:02:32.190> and<00:02:32.340> data<00:02:32.400> caches<00:02:33.180> backed<00:02:33.420> by<00:02:33.660> a

00:02:33.680 --> 00:02:33.690 
instruction and data caches backed by a

00:02:33.690 --> 00:02:36.350 
instruction and data caches backed by a
common<00:02:34.080> address<00:02:34.380> space<00:02:34.739> while<00:02:35.700> the<00:02:35.819> cpu

00:02:36.350 --> 00:02:36.360 
common address space while the cpu

00:02:36.360 --> 00:02:38.809 
common address space while the cpu
executes<00:02:36.930> sfrom<00:02:37.200> cash<00:02:37.500> it<00:02:37.920> acts<00:02:38.250> as<00:02:38.459> a<00:02:38.489> pure

00:02:38.809 --> 00:02:38.819 
executes sfrom cash it acts as a pure

00:02:38.819 --> 00:02:41.449 
executes sfrom cash it acts as a pure
harvard<00:02:39.239> machine<00:02:39.660> when<00:02:40.440> accessing<00:02:40.950> backing

00:02:41.449 --> 00:02:41.459 
harvard machine when accessing backing

00:02:41.459 --> 00:02:43.460 
harvard machine when accessing backing
memory<00:02:41.819> it<00:02:42.090> acts<00:02:42.420> like<00:02:42.600> a<00:02:42.750> von<00:02:43.019> Neumann

00:02:43.460 --> 00:02:43.470 
memory it acts like a von Neumann

00:02:43.470 --> 00:02:45.110 
memory it acts like a von Neumann
machine<00:02:43.860> where<00:02:44.310> code<00:02:44.580> can<00:02:44.760> be<00:02:44.880> moved<00:02:45.120> around

00:02:45.110 --> 00:02:45.120 
machine where code can be moved around

00:02:45.120 --> 00:02:48.199 
machine where code can be moved around
like<00:02:45.720> data<00:02:46.050> a<00:02:46.350> powerful<00:02:47.069> technique<00:02:47.519> this

00:02:48.199 --> 00:02:48.209 
like data a powerful technique this

00:02:48.209 --> 00:02:50.390 
like data a powerful technique this
modification<00:02:48.750> is<00:02:49.260> widespread<00:02:49.530> in<00:02:49.950> modern

00:02:50.390 --> 00:02:50.400 
modification is widespread in modern

00:02:50.400 --> 00:02:52.070 
modification is widespread in modern
processes<00:02:50.910> such<00:02:51.239> as<00:02:51.300> the<00:02:51.569> ARM<00:02:51.750> architecture

00:02:52.070 --> 00:02:52.080 
processes such as the ARM architecture

00:02:52.080 --> 00:02:55.580 
processes such as the ARM architecture
in<00:02:52.680> x86<00:02:53.209> processors<00:02:54.209> it<00:02:54.870> is<00:02:55.019> sometimes

00:02:55.580 --> 00:02:55.590 
in x86 processors it is sometimes

00:02:55.590 --> 00:02:57.309 
in x86 processors it is sometimes
loosely<00:02:55.860> called<00:02:56.310> a<00:02:56.400> Harvard<00:02:56.760> architecture

00:02:57.309 --> 00:02:57.319 
loosely called a Harvard architecture

00:02:57.319 --> 00:02:59.660 
loosely called a Harvard architecture
overlooking<00:02:58.319> the<00:02:58.440> fact<00:02:58.680> that<00:02:59.040> it<00:02:59.340> is<00:02:59.370> actually

00:02:59.660 --> 00:02:59.670 
overlooking the fact that it is actually

00:02:59.670 --> 00:03:02.900 
overlooking the fact that it is actually
modified<00:03:00.480> another<00:03:01.380> modification<00:03:01.830> provides<00:03:02.700> a

00:03:02.900 --> 00:03:02.910 
modified another modification provides a

00:03:02.910 --> 00:03:04.729 
modified another modification provides a
pathway<00:03:03.180> between<00:03:03.569> the<00:03:03.900> instruction<00:03:04.590> memory

00:03:04.729 --> 00:03:04.739 
pathway between the instruction memory

00:03:04.739 --> 00:03:07.580 
pathway between the instruction memory
such<00:03:05.430> as<00:03:05.610> Rumble<00:03:05.940> flash<00:03:06.269> and<00:03:06.600> the<00:03:06.870> CPU<00:03:07.410> to

00:03:07.580 --> 00:03:07.590 
such as Rumble flash and the CPU to

00:03:07.590 --> 00:03:09.410 
such as Rumble flash and the CPU to
allow<00:03:07.890> words<00:03:08.220> from<00:03:08.549> the<00:03:08.640> instruction<00:03:09.269> memory

00:03:09.410 --> 00:03:09.420 
allow words from the instruction memory

00:03:09.420 --> 00:03:12.199 
allow words from the instruction memory
to<00:03:09.989> be<00:03:10.140> treated<00:03:10.380> as<00:03:10.650> read-only<00:03:10.890> data<00:03:11.400> this

00:03:12.199 --> 00:03:12.209 
to be treated as read-only data this

00:03:12.209 --> 00:03:13.520 
to be treated as read-only data this
technique<00:03:12.750> is<00:03:12.930> used<00:03:13.140> in<00:03:13.350> some

00:03:13.520 --> 00:03:13.530 
technique is used in some

00:03:13.530 --> 00:03:16.000 
technique is used in some
microcontrollers<00:03:14.360> including<00:03:15.360> the<00:03:15.450> atmel<00:03:15.810> AVR

00:03:16.000 --> 00:03:16.010 
microcontrollers including the atmel AVR

00:03:16.010 --> 00:03:19.430 
microcontrollers including the atmel AVR
this<00:03:17.010> allows<00:03:17.370> constant<00:03:18.060> data<00:03:18.269> such<00:03:18.900> as<00:03:18.930> text

00:03:19.430 --> 00:03:19.440 
this allows constant data such as text

00:03:19.440 --> 00:03:21.620 
this allows constant data such as text
strings<00:03:19.829> or<00:03:20.010> function<00:03:20.519> tables<00:03:21.000> to<00:03:21.510> be

00:03:21.620 --> 00:03:21.630 
strings or function tables to be

00:03:21.630 --> 00:03:23.360 
strings or function tables to be
accessed<00:03:21.810> without<00:03:22.200> first<00:03:22.709> having<00:03:22.859> to<00:03:23.250> be

00:03:23.360 --> 00:03:23.370 
accessed without first having to be

00:03:23.370 --> 00:03:25.550 
accessed without first having to be
copied<00:03:23.760> into<00:03:23.910> data<00:03:24.269> memory<00:03:24.660> preserving

00:03:25.550 --> 00:03:25.560 
copied into data memory preserving

00:03:25.560 --> 00:03:28.400 
copied into data memory preserving
scares<00:03:25.950> and<00:03:26.250> power-hungry<00:03:26.910> data<00:03:27.780> memory<00:03:28.109> for

00:03:28.400 --> 00:03:28.410 
scares and power-hungry data memory for

00:03:28.410 --> 00:03:31.520 
scares and power-hungry data memory for
read<00:03:28.590> /<00:03:28.920> write<00:03:29.100> variables<00:03:30.170> special<00:03:31.170> machine

00:03:31.520 --> 00:03:31.530 
read / write variables special machine

00:03:31.530 --> 00:03:33.349 
read / write variables special machine
language<00:03:31.799> instructions<00:03:32.130> are<00:03:32.850> provided<00:03:32.970> to

00:03:33.349 --> 00:03:33.359 
language instructions are provided to

00:03:33.359 --> 00:03:35.210 
language instructions are provided to
read<00:03:33.720> data<00:03:33.959> from<00:03:34.170> the<00:03:34.440> instruction<00:03:35.070> memory

00:03:35.210 --> 00:03:35.220 
read data from the instruction memory

00:03:35.220 --> 00:03:37.849 
read data from the instruction memory
this<00:03:35.790> is<00:03:35.970> distinct<00:03:36.480> from<00:03:36.630> instructions<00:03:37.410> which

00:03:37.849 --> 00:03:37.859 
this is distinct from instructions which

00:03:37.859 --> 00:03:39.979 
this is distinct from instructions which
themselves<00:03:38.130> embed<00:03:38.790> constant<00:03:39.359> data<00:03:39.570> although

00:03:39.979 --> 00:03:39.989 
themselves embed constant data although

00:03:39.989 --> 00:03:41.990 
themselves embed constant data although
for<00:03:40.500> individual<00:03:41.070> constants<00:03:41.640> the<00:03:41.790> two

00:03:41.990 --> 00:03:42.000 
for individual constants the two

00:03:42.000 --> 00:03:44.240 
for individual constants the two
mechanisms<00:03:42.269> can<00:03:42.870> substitute<00:03:43.410> for<00:03:43.859> each<00:03:43.980> other

00:03:44.240 --> 00:03:44.250 
mechanisms can substitute for each other

00:03:44.250 --> 00:03:47.360 
mechanisms can substitute for each other
speed<00:03:45.150> in<00:03:45.359> recent<00:03:46.230> years<00:03:46.260> the<00:03:46.950> speed<00:03:47.220> of<00:03:47.340> the

00:03:47.360 --> 00:03:47.370 
speed in recent years the speed of the

00:03:47.370 --> 00:03:49.940 
speed in recent years the speed of the
CPU<00:03:47.609> has<00:03:48.180> grown<00:03:48.420> many<00:03:48.720> times<00:03:49.049> in<00:03:49.260> comparison

00:03:49.940 --> 00:03:49.950 
CPU has grown many times in comparison

00:03:49.950 --> 00:03:51.830 
CPU has grown many times in comparison
to<00:03:50.070> the<00:03:50.190> access<00:03:50.549> speed<00:03:50.940> of<00:03:51.090> the<00:03:51.180> main<00:03:51.359> memory

00:03:51.830 --> 00:03:51.840 
to the access speed of the main memory

00:03:51.840 --> 00:03:54.289 
to the access speed of the main memory
care<00:03:52.620> needs<00:03:52.920> to<00:03:53.010> be<00:03:53.130> taken<00:03:53.250> to<00:03:53.640> reduce<00:03:53.880> the

00:03:54.289 --> 00:03:54.299 
care needs to be taken to reduce the

00:03:54.299 --> 00:03:56.300 
care needs to be taken to reduce the
number<00:03:54.600> of<00:03:54.630> times<00:03:54.930> main<00:03:55.260> memory<00:03:55.680> is<00:03:55.799> accessed

00:03:56.300 --> 00:03:56.310 
number of times main memory is accessed

00:03:56.310 --> 00:03:59.660 
number of times main memory is accessed
in<00:03:56.579> order<00:03:57.060> to<00:03:57.209> maintain<00:03:57.390> performance<00:03:58.170> if<00:03:58.680> for

00:03:59.660 --> 00:03:59.670 
in order to maintain performance if for

00:03:59.670 --> 00:04:01.729 
in order to maintain performance if for
instance<00:03:59.720> every<00:04:00.720> instruction<00:04:01.170> run<00:04:01.530> in<00:04:01.650> the

00:04:01.729 --> 00:04:01.739 
instance every instruction run in the

00:04:01.739 --> 00:04:04.190 
instance every instruction run in the
CPU<00:04:02.280> requires<00:04:02.700> an<00:04:02.940> access<00:04:03.329> to<00:04:03.510> memory<00:04:03.750> the

00:04:04.190 --> 00:04:04.200 
CPU requires an access to memory the

00:04:04.200 --> 00:04:06.800 
CPU requires an access to memory the
computer<00:04:04.769> gains<00:04:05.010> nothing<00:04:05.310> for<00:04:05.730> increased<00:04:06.120> CPU

00:04:06.800 --> 00:04:06.810 
computer gains nothing for increased CPU

00:04:06.810 --> 00:04:08.809 
computer gains nothing for increased CPU
speed<00:04:07.019> a<00:04:07.170> problem<00:04:07.650> referred<00:04:08.040> to<00:04:08.220> as<00:04:08.340> being<00:04:08.549> men

00:04:08.809 --> 00:04:08.819 
speed a problem referred to as being men

00:04:08.819 --> 00:04:11.420 
speed a problem referred to as being men
rebound<00:04:09.239> it<00:04:09.989> is<00:04:10.170> possible<00:04:10.620> to<00:04:10.680> make<00:04:10.920> extremely

00:04:11.420 --> 00:04:11.430 
rebound it is possible to make extremely

00:04:11.430 --> 00:04:13.729 
rebound it is possible to make extremely
fast<00:04:11.880> memory<00:04:12.180> but<00:04:12.569> this<00:04:12.720> is<00:04:12.870> only<00:04:13.019> practical

00:04:13.729 --> 00:04:13.739 
fast memory but this is only practical

00:04:13.739 --> 00:04:15.470 
fast memory but this is only practical
for<00:04:13.920> small<00:04:14.130> amounts<00:04:14.609> of<00:04:14.730> memory<00:04:14.940> for<00:04:15.269> cost

00:04:15.470 --> 00:04:15.480 
for small amounts of memory for cost

00:04:15.480 --> 00:04:18.229 
for small amounts of memory for cost
power<00:04:16.019> and<00:04:16.289> signal<00:04:16.620> routing<00:04:16.829> reasons<00:04:17.489> the

00:04:18.229 --> 00:04:18.239 
power and signal routing reasons the

00:04:18.239 --> 00:04:20.300 
power and signal routing reasons the
solution<00:04:18.840> is<00:04:18.959> to<00:04:19.109> provide<00:04:19.410> a<00:04:19.470> small<00:04:19.829> amount<00:04:20.190> of

00:04:20.300 --> 00:04:20.310 
solution is to provide a small amount of

00:04:20.310 --> 00:04:22.670 
solution is to provide a small amount of
very<00:04:20.549> fast<00:04:20.880> memory<00:04:21.209> known<00:04:21.570> as<00:04:21.720> a<00:04:21.750> CPU<00:04:22.380> cache

00:04:22.670 --> 00:04:22.680 
very fast memory known as a CPU cache

00:04:22.680 --> 00:04:24.920 
very fast memory known as a CPU cache
which<00:04:22.950> holds<00:04:23.400> recently<00:04:23.880> accessed<00:04:24.060> data<00:04:24.570> as

00:04:24.920 --> 00:04:24.930 
which holds recently accessed data as

00:04:24.930 --> 00:04:27.800 
which holds recently accessed data as
long<00:04:25.650> as<00:04:25.800> the<00:04:25.919> data<00:04:26.159> that<00:04:26.640> the<00:04:26.820> CPU<00:04:27.000> needs

00:04:27.800 --> 00:04:27.810 
long as the data that the CPU needs

00:04:27.810 --> 00:04:29.930 
long as the data that the CPU needs
is<00:04:27.990> in<00:04:28.260> the<00:04:28.380> cache<00:04:28.650> the<00:04:29.130> performance<00:04:29.730> it<00:04:29.910> is

00:04:29.930 --> 00:04:29.940 
is in the cache the performance it is

00:04:29.940 --> 00:04:31.640 
is in the cache the performance it is
much<00:04:30.270> smaller<00:04:30.570> than<00:04:30.780> it<00:04:31.020> is<00:04:31.139> when<00:04:31.260> the<00:04:31.410> cache

00:04:31.640 --> 00:04:31.650 
much smaller than it is when the cache

00:04:31.650 --> 00:04:33.790 
much smaller than it is when the cache
has<00:04:31.950> to<00:04:32.160> get<00:04:32.310> the<00:04:32.490> data<00:04:32.700> from<00:04:32.850> the<00:04:33.090> main<00:04:33.270> memory

00:04:33.790 --> 00:04:33.800 
has to get the data from the main memory

00:04:33.800 --> 00:04:37.070 
has to get the data from the main memory
internal<00:04:34.800> versus<00:04:35.190> external<00:04:35.280> design<00:04:36.080> modern

00:04:37.070 --> 00:04:37.080 
internal versus external design modern

00:04:37.080 --> 00:04:39.470 
internal versus external design modern
high<00:04:37.380> performance<00:04:38.070> CPU<00:04:38.730> chip<00:04:38.760> designs

00:04:39.470 --> 00:04:39.480 
high performance CPU chip designs

00:04:39.480 --> 00:04:41.840 
high performance CPU chip designs
incorporate<00:04:39.930> aspects<00:04:40.770> of<00:04:40.980> both<00:04:41.190> Harvard<00:04:41.730> and

00:04:41.840 --> 00:04:41.850 
incorporate aspects of both Harvard and

00:04:41.850 --> 00:04:44.000 
incorporate aspects of both Harvard and
von<00:04:42.030> Neumann<00:04:42.450> architecture<00:04:42.570> in<00:04:43.320> particular

00:04:44.000 --> 00:04:44.010 
von Neumann architecture in particular

00:04:44.010 --> 00:04:46.340 
von Neumann architecture in particular
the<00:04:44.700> modified<00:04:45.210> Harvard<00:04:45.600> architecture<00:04:45.720> is

00:04:46.340 --> 00:04:46.350 
the modified Harvard architecture is

00:04:46.350 --> 00:04:49.400 
the modified Harvard architecture is
very<00:04:46.620> common<00:04:47.210> CPU<00:04:48.210> cache<00:04:48.510> memory<00:04:48.930> is<00:04:49.050> divided

00:04:49.400 --> 00:04:49.410 
very common CPU cache memory is divided

00:04:49.410 --> 00:04:51.710 
very common CPU cache memory is divided
into<00:04:49.710> an<00:04:49.950> instruction<00:04:50.580> cache<00:04:50.880> and<00:04:51.210> a<00:04:51.480> data

00:04:51.710 --> 00:04:51.720 
into an instruction cache and a data

00:04:51.720 --> 00:04:54.350 
into an instruction cache and a data
cache<00:04:52.190> Harvard<00:04:53.190> architecture<00:04:53.340> is<00:04:53.970> used<00:04:54.180> as

00:04:54.350 --> 00:04:54.360 
cache Harvard architecture is used as

00:04:54.360 --> 00:04:57.170 
cache Harvard architecture is used as
the<00:04:54.480> CPU<00:04:54.990> accesses<00:04:55.169> the<00:04:55.770> cash<00:04:56.040> in<00:04:56.340> the<00:04:56.940> case<00:04:57.150> of

00:04:57.170 --> 00:04:57.180 
the CPU accesses the cash in the case of

00:04:57.180 --> 00:04:59.690 
the CPU accesses the cash in the case of
a<00:04:57.480> cache<00:04:57.720> miss<00:04:57.750> however<00:04:58.740> the<00:04:59.190> data<00:04:59.430> is

00:04:59.690 --> 00:04:59.700 
a cache miss however the data is

00:04:59.700 --> 00:05:01.760 
a cache miss however the data is
retrieved<00:05:00.180> from<00:05:00.450> the<00:05:00.540> main<00:05:00.780> memory<00:05:01.229> which<00:05:01.590> is

00:05:01.760 --> 00:05:01.770 
retrieved from the main memory which is

00:05:01.770 --> 00:05:03.620 
retrieved from the main memory which is
not<00:05:01.979> formally<00:05:02.460> divided<00:05:03.000> into<00:05:03.240> separate

00:05:03.620 --> 00:05:03.630 
not formally divided into separate

00:05:03.630 --> 00:05:05.840 
not formally divided into separate
instruction<00:05:04.290> and<00:05:04.440> data<00:05:04.470> sections<00:05:05.310> although

00:05:05.840 --> 00:05:05.850 
instruction and data sections although

00:05:05.850 --> 00:05:07.400 
instruction and data sections although
it<00:05:06.000> may<00:05:06.150> well<00:05:06.300> have<00:05:06.600> separate<00:05:07.080> memory

00:05:07.400 --> 00:05:07.410 
it may well have separate memory

00:05:07.410 --> 00:05:09.170 
it may well have separate memory
controllers<00:05:08.010> used<00:05:08.280> for<00:05:08.490> concurrent<00:05:09.000> access

00:05:09.170 --> 00:05:09.180 
controllers used for concurrent access

00:05:09.180 --> 00:05:13.310 
controllers used for concurrent access
to<00:05:09.630> ram<00:05:09.840> ROM<00:05:10.440> and<00:05:10.620> nor<00:05:11.520> flash<00:05:12.090> memory<00:05:12.570> thus

00:05:13.310 --> 00:05:13.320 
to ram ROM and nor flash memory thus

00:05:13.320 --> 00:05:15.290 
to ram ROM and nor flash memory thus
while<00:05:13.800> a<00:05:13.830> von<00:05:14.100> Neumann<00:05:14.520> architecture<00:05:14.639> is

00:05:15.290 --> 00:05:15.300 
while a von Neumann architecture is

00:05:15.300 --> 00:05:17.659 
while a von Neumann architecture is
visible<00:05:15.720> in<00:05:15.810> some<00:05:16.050> contexts<00:05:16.800> such<00:05:16.979> as<00:05:17.340> when

00:05:17.659 --> 00:05:17.669 
visible in some contexts such as when

00:05:17.669 --> 00:05:19.490 
visible in some contexts such as when
data<00:05:17.970> and<00:05:18.360> code<00:05:18.540> come<00:05:18.840> through<00:05:19.110> the<00:05:19.260> same

00:05:19.490 --> 00:05:19.500 
data and code come through the same

00:05:19.500 --> 00:05:21.219 
data and code come through the same
memory<00:05:19.889> controller<00:05:20.370> the<00:05:20.760> hardware

00:05:21.219 --> 00:05:21.229 
memory controller the hardware

00:05:21.229 --> 00:05:23.390 
memory controller the hardware
implementation<00:05:22.229> gains<00:05:22.530> the<00:05:22.740> efficiencies<00:05:23.370> of

00:05:23.390 --> 00:05:23.400 
implementation gains the efficiencies of

00:05:23.400 --> 00:05:25.070 
implementation gains the efficiencies of
the<00:05:23.639> Harvard<00:05:23.970> architecture<00:05:24.120> for<00:05:24.840> cash

00:05:25.070 --> 00:05:25.080 
the Harvard architecture for cash

00:05:25.080 --> 00:05:27.170 
the Harvard architecture for cash
accesses<00:05:25.770> and<00:05:25.889> at<00:05:26.010> least<00:05:26.160> some<00:05:26.550> main<00:05:26.760> memory

00:05:27.170 --> 00:05:27.180 
accesses and at least some main memory

00:05:27.180 --> 00:05:30.469 
accesses and at least some main memory
accesses<00:05:27.660> in<00:05:28.470> addition<00:05:29.190> CPUs<00:05:30.030> often<00:05:30.360> have

00:05:30.469 --> 00:05:30.479 
accesses in addition CPUs often have

00:05:30.479 --> 00:05:32.750 
accesses in addition CPUs often have
right<00:05:30.870> buffers<00:05:31.320> which<00:05:31.470> let<00:05:31.710> CPUs<00:05:32.280> proceed

00:05:32.750 --> 00:05:32.760 
right buffers which let CPUs proceed

00:05:32.760 --> 00:05:35.659 
right buffers which let CPUs proceed
after<00:05:33.000> rights<00:05:33.510> to<00:05:33.810> non<00:05:33.960> cached<00:05:34.320> regions<00:05:34.950> the

00:05:35.659 --> 00:05:35.669 
after rights to non cached regions the

00:05:35.669 --> 00:05:37.580 
after rights to non cached regions the
volume<00:05:35.940> and<00:05:36.330> nature<00:05:36.780> of<00:05:36.900> memory<00:05:37.260> is<00:05:37.380> then

00:05:37.580 --> 00:05:37.590 
volume and nature of memory is then

00:05:37.590 --> 00:05:39.590 
volume and nature of memory is then
visible<00:05:38.070> when<00:05:38.430> instructions<00:05:39.090> are<00:05:39.240> written<00:05:39.270> as

00:05:39.590 --> 00:05:39.600 
visible when instructions are written as

00:05:39.600 --> 00:05:41.570 
visible when instructions are written as
dated<00:05:39.990> by<00:05:40.080> the<00:05:40.140> CPU<00:05:40.770> and<00:05:40.919> software<00:05:41.370> must

00:05:41.570 --> 00:05:41.580 
dated by the CPU and software must

00:05:41.580 --> 00:05:43.670 
dated by the CPU and software must
ensure<00:05:42.000> that<00:05:42.030> the<00:05:42.210> caches<00:05:42.810> data<00:05:43.350> and

00:05:43.670 --> 00:05:43.680 
ensure that the caches data and

00:05:43.680 --> 00:05:45.770 
ensure that the caches data and
instruction<00:05:44.580> and<00:05:44.760> write<00:05:45.180> buffer<00:05:45.419> are

00:05:45.770 --> 00:05:45.780 
instruction and write buffer are

00:05:45.780 --> 00:05:47.870 
instruction and write buffer are
synchronized<00:05:46.560> before<00:05:47.010> trying<00:05:47.340> to<00:05:47.550> execute

00:05:47.870 --> 00:05:47.880 
synchronized before trying to execute

00:05:47.880 --> 00:05:50.630 
synchronized before trying to execute
those<00:05:48.210> just<00:05:48.600> written<00:05:48.840> instructions<00:05:49.650> modern

00:05:50.630 --> 00:05:50.640 
those just written instructions modern

00:05:50.640 --> 00:05:52.880 
those just written instructions modern
uses<00:05:50.850> of<00:05:51.120> the<00:05:51.210> Harvard<00:05:51.539> architecture<00:05:51.890> the

00:05:52.880 --> 00:05:52.890 
uses of the Harvard architecture the

00:05:52.890 --> 00:05:54.830 
uses of the Harvard architecture the
principal<00:05:53.400> advantage<00:05:53.910> of<00:05:54.060> the<00:05:54.180> pure<00:05:54.419> Harvard

00:05:54.830 --> 00:05:54.840 
principal advantage of the pure Harvard

00:05:54.840 --> 00:05:56.990 
principal advantage of the pure Harvard
architecture<00:05:55.220> simultaneous<00:05:56.220> access<00:05:56.460> to<00:05:56.880> more

00:05:56.990 --> 00:05:57.000 
architecture simultaneous access to more

00:05:57.000 --> 00:05:59.029 
architecture simultaneous access to more
than<00:05:57.060> one<00:05:57.419> memory<00:05:57.810> system<00:05:58.229> has<00:05:58.440> been<00:05:58.650> reduced

00:05:59.029 --> 00:05:59.039 
than one memory system has been reduced

00:05:59.039 --> 00:06:01.490 
than one memory system has been reduced
by<00:05:59.460> modified<00:06:00.180> Harvard<00:06:00.570> processes<00:06:01.260> using

00:06:01.490 --> 00:06:01.500 
by modified Harvard processes using

00:06:01.500 --> 00:06:04.909 
by modified Harvard processes using
modern<00:06:01.830> CPU<00:06:02.550> cache<00:06:02.850> systems<00:06:03.680> relatively<00:06:04.680> pure

00:06:04.909 --> 00:06:04.919 
modern CPU cache systems relatively pure

00:06:04.919 --> 00:06:06.770 
modern CPU cache systems relatively pure
Harvard<00:06:05.370> architecture<00:06:05.490> machines<00:06:06.360> are<00:06:06.600> used

00:06:06.770 --> 00:06:06.780 
Harvard architecture machines are used

00:06:06.780 --> 00:06:09.440 
Harvard architecture machines are used
mostly<00:06:07.260> in<00:06:07.350> applications<00:06:08.190> which<00:06:08.400> a<00:06:08.580> dr's<00:06:08.970> like

00:06:09.440 --> 00:06:09.450 
mostly in applications which a dr's like

00:06:09.450 --> 00:06:11.480 
mostly in applications which a dr's like
the<00:06:09.600> cost<00:06:09.840> and<00:06:10.050> power<00:06:10.289> savings<00:06:10.860> from<00:06:11.070> emitting

00:06:11.480 --> 00:06:11.490 
the cost and power savings from emitting

00:06:11.490 --> 00:06:14.000 
the cost and power savings from emitting
caches<00:06:11.970> outweighing<00:06:12.660> programming<00:06:13.530> penalties

00:06:14.000 --> 00:06:14.010 
caches outweighing programming penalties

00:06:14.010 --> 00:06:16.010 
caches outweighing programming penalties
from<00:06:14.220> featuring<00:06:14.789> distinct<00:06:15.330> code<00:06:15.570> and<00:06:15.840> data

00:06:16.010 --> 00:06:16.020 
from featuring distinct code and data

00:06:16.020 --> 00:06:19.219 
from featuring distinct code and data
address<00:06:16.530> spaces<00:06:17.150> digital<00:06:18.150> signal<00:06:18.539> processors

00:06:19.219 --> 00:06:19.229 
address spaces digital signal processors

00:06:19.229 --> 00:06:22.460 
address spaces digital signal processors
dsps<00:06:19.789> generally<00:06:20.789> execute<00:06:21.270> small<00:06:21.660> highly

00:06:22.460 --> 00:06:22.470 
dsps generally execute small highly

00:06:22.470 --> 00:06:24.650 
dsps generally execute small highly
optimized<00:06:22.979> audio<00:06:23.400> or<00:06:23.610> video<00:06:23.789> processing

00:06:24.650 --> 00:06:24.660 
optimized audio or video processing

00:06:24.660 --> 00:06:27.740 
optimized audio or video processing
algorithms<00:06:25.380> they<00:06:26.130> avoid<00:06:26.490> caches<00:06:27.090> because

00:06:27.740 --> 00:06:27.750 
algorithms they avoid caches because

00:06:27.750 --> 00:06:29.350 
algorithms they avoid caches because
their<00:06:27.990> behavior<00:06:28.470> must<00:06:28.680> be<00:06:28.830> extremely

00:06:29.350 --> 00:06:29.360 
their behavior must be extremely

00:06:29.360 --> 00:06:32.270 
their behavior must be extremely
reproducible<00:06:30.360> the<00:06:30.990> difficulties<00:06:31.590> of<00:06:31.620> coping

00:06:32.270 --> 00:06:32.280 
reproducible the difficulties of coping

00:06:32.280 --> 00:06:34.010 
reproducible the difficulties of coping
with<00:06:32.310> multiple<00:06:32.970> address<00:06:33.300> spaces<00:06:33.630> are<00:06:33.930> of

00:06:34.010 --> 00:06:34.020 
with multiple address spaces are of

00:06:34.020 --> 00:06:36.700 
with multiple address spaces are of
secondary<00:06:34.560> concern<00:06:35.010> to<00:06:35.310> speed<00:06:35.550> of<00:06:35.700> execution

00:06:36.700 --> 00:06:36.710 
secondary concern to speed of execution

00:06:36.710 --> 00:06:39.440 
secondary concern to speed of execution
consequently<00:06:37.710> some<00:06:38.220> DSPs<00:06:38.880> feature<00:06:39.150> multiple

00:06:39.440 --> 00:06:39.450 
consequently some DSPs feature multiple

00:06:39.450 --> 00:06:41.450 
consequently some DSPs feature multiple
data<00:06:40.050> memories<00:06:40.590> and<00:06:40.830> distinct

00:06:41.450 --> 00:06:41.460 
data memories and distinct

00:06:41.460 --> 00:06:44.570 
data memories and distinct
spacers<00:06:42.180> to<00:06:42.600> facilitate<00:06:43.259> SIMD<00:06:44.069> and<00:06:44.250> Liam

00:06:44.570 --> 00:06:44.580 
spacers to facilitate SIMD and Liam

00:06:44.580 --> 00:06:48.740 
spacers to facilitate SIMD and Liam
processing<00:06:45.330> Texas<00:06:46.289> Instruments<00:06:46.889> dms<00:06:47.509> 320<00:06:48.509> c

00:06:48.740 --> 00:06:48.750 
processing Texas Instruments dms 320 c

00:06:48.750 --> 00:06:52.279 
processing Texas Instruments dms 320 c
55<00:06:49.229> x<00:06:49.620> processes<00:06:50.490> for<00:06:50.910> one<00:06:51.150> example<00:06:51.569> feature

00:06:52.279 --> 00:06:52.289 
55 x processes for one example feature

00:06:52.289 --> 00:06:55.040 
55 x processes for one example feature
multiple<00:06:52.560> parallel<00:06:53.340> data<00:06:53.699> buses<00:06:54.090> to<00:06:54.750> write

00:06:55.040 --> 00:06:55.050 
multiple parallel data buses to write

00:06:55.050 --> 00:06:57.969 
multiple parallel data buses to write
three<00:06:55.590> read<00:06:55.800> and<00:06:56.009> one<00:06:56.400> instruction<00:06:57.060> bus

00:06:57.969 --> 00:06:57.979 
three read and one instruction bus

00:06:57.979 --> 00:06:59.930 
three read and one instruction bus
microcontrollers<00:06:58.979> are<00:06:59.099> characterized<00:06:59.759> by

00:06:59.930 --> 00:06:59.940 
microcontrollers are characterized by

00:06:59.940 --> 00:07:02.510 
microcontrollers are characterized by
having<00:07:00.300> small<00:07:00.720> amounts<00:07:01.229> of<00:07:01.349> program<00:07:01.860> flash

00:07:02.510 --> 00:07:02.520 
having small amounts of program flash

00:07:02.520 --> 00:07:06.409 
having small amounts of program flash
memory<00:07:02.970> and<00:07:03.180> data<00:07:03.830> srem<00:07:04.830> memory<00:07:05.520> with<00:07:05.880> no<00:07:06.090> cash

00:07:06.409 --> 00:07:06.419 
memory and data srem memory with no cash

00:07:06.419 --> 00:07:08.180 
memory and data srem memory with no cash
and<00:07:06.690> take<00:07:07.139> advantage<00:07:07.289> of<00:07:07.740> the<00:07:07.860> Harvard

00:07:08.180 --> 00:07:08.190 
and take advantage of the Harvard

00:07:08.190 --> 00:07:10.490 
and take advantage of the Harvard
architecture<00:07:08.400> to<00:07:09.360> speed<00:07:09.630> processing<00:07:10.349> by

00:07:10.490 --> 00:07:10.500 
architecture to speed processing by

00:07:10.500 --> 00:07:12.740 
architecture to speed processing by
concurrent<00:07:10.889> instruction<00:07:11.699> and<00:07:11.880> data<00:07:11.910> access

00:07:12.740 --> 00:07:12.750 
concurrent instruction and data access

00:07:12.750 --> 00:07:15.320 
concurrent instruction and data access
the<00:07:13.500> separate<00:07:13.919> storage<00:07:14.250> means<00:07:14.639> the<00:07:14.849> program

00:07:15.320 --> 00:07:15.330 
the separate storage means the program

00:07:15.330 --> 00:07:17.089 
the separate storage means the program
and<00:07:15.539> data<00:07:15.599> memories<00:07:16.320> may<00:07:16.560> feature<00:07:16.740> different

00:07:17.089 --> 00:07:17.099 
and data memories may feature different

00:07:17.099 --> 00:07:19.939 
and data memories may feature different
bit<00:07:17.550> widths<00:07:17.910> for<00:07:18.330> example<00:07:18.930> using<00:07:19.229> 16-bit

00:07:19.939 --> 00:07:19.949 
bit widths for example using 16-bit

00:07:19.949 --> 00:07:21.950 
bit widths for example using 16-bit
white<00:07:20.160> instructions<00:07:20.880> and<00:07:21.060> 8-bit<00:07:21.389> white<00:07:21.630> data

00:07:21.950 --> 00:07:21.960 
white instructions and 8-bit white data

00:07:21.960 --> 00:07:24.800 
white instructions and 8-bit white data
they<00:07:22.740> also<00:07:22.949> mean<00:07:23.370> that<00:07:23.610> instruction<00:07:24.419> prefetch

00:07:24.800 --> 00:07:24.810 
they also mean that instruction prefetch

00:07:24.810 --> 00:07:26.600 
they also mean that instruction prefetch
can<00:07:25.050> be<00:07:25.169> performed<00:07:25.530> in<00:07:25.770> parallel<00:07:26.280> with<00:07:26.430> other

00:07:26.600 --> 00:07:26.610 
can be performed in parallel with other

00:07:26.610 --> 00:07:29.960 
can be performed in parallel with other
activities<00:07:27.650> examples<00:07:28.650> include<00:07:28.740> the<00:07:29.340> AVR<00:07:29.759> by

00:07:29.960 --> 00:07:29.970 
activities examples include the AVR by

00:07:29.970 --> 00:07:31.969 
activities examples include the AVR by
atmel<00:07:30.389> corp<00:07:30.660> the<00:07:30.990> pic<00:07:31.199> by<00:07:31.349> microchip

00:07:31.969 --> 00:07:31.979 
atmel corp the pic by microchip

00:07:31.979 --> 00:07:33.950 
atmel corp the pic by microchip
technology<00:07:32.729> incorporated<00:07:33.060> in<00:07:33.690> the<00:07:33.720> arm

00:07:33.950 --> 00:07:33.960 
technology incorporated in the arm

00:07:33.960 --> 00:07:36.860 
technology incorporated in the arm
cortex-m<00:07:34.500> 3<00:07:34.979> processor<00:07:35.759> not<00:07:36.120> all<00:07:36.360> armed<00:07:36.570> ships

00:07:36.860 --> 00:07:36.870 
cortex-m 3 processor not all armed ships

00:07:36.870 --> 00:07:39.469 
cortex-m 3 processor not all armed ships
feature<00:07:37.169> a<00:07:37.349> Harvard<00:07:37.800> architecture<00:07:38.360> even<00:07:39.360> in

00:07:39.469 --> 00:07:39.479 
feature a Harvard architecture even in

00:07:39.479 --> 00:07:41.659 
feature a Harvard architecture even in
these<00:07:39.599> cases<00:07:39.990> it<00:07:40.500> is<00:07:40.560> common<00:07:41.130> to<00:07:41.159> comprise

00:07:41.659 --> 00:07:41.669 
these cases it is common to comprise

00:07:41.669 --> 00:07:43.939 
these cases it is common to comprise
special<00:07:42.150> instructions<00:07:42.870> in<00:07:43.199> order<00:07:43.620> to<00:07:43.770> access

00:07:43.939 --> 00:07:43.949 
special instructions in order to access

00:07:43.949 --> 00:07:46.460 
special instructions in order to access
program<00:07:44.729> memory<00:07:45.000> like<00:07:45.599> it<00:07:45.780> was<00:07:45.930> data<00:07:46.199> for

00:07:46.460 --> 00:07:46.470 
program memory like it was data for

00:07:46.470 --> 00:07:48.860 
program memory like it was data for
read-only<00:07:46.710> tables<00:07:47.490> or<00:07:47.729> for<00:07:48.120> a<00:07:48.150> programming

00:07:48.860 --> 00:07:48.870 
read-only tables or for a programming

00:07:48.870 --> 00:07:51.770 
read-only tables or for a programming
data<00:07:49.110> for<00:07:49.440> reading

