WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.810 

in<00:00:00.780> this<00:00:01.560> video<00:00:01.740> we<00:00:02.040> are<00:00:02.100> going<00:00:02.280> to<00:00:02.460> explain

00:00:02.810 --> 00:00:02.820 
in this video we are going to explain

00:00:02.820 --> 00:00:04.550 
in this video we are going to explain
the<00:00:03.030> difference<00:00:03.389> between<00:00:03.600> what<00:00:03.959> is<00:00:03.990> known<00:00:04.110> as

00:00:04.550 --> 00:00:04.560 
the difference between what is known as

00:00:04.560 --> 00:00:15.740 
the difference between what is known as
hardwired<00:00:07.880> control<00:00:08.880> unit<00:00:09.240> and<00:00:14.299> micro<00:00:15.299> program

00:00:15.740 --> 00:00:15.750 
hardwired control unit and micro program

00:00:15.750 --> 00:00:23.630 
hardwired control unit and micro program
control<00:00:19.189> unit<00:00:20.189> and<00:00:21.859> as<00:00:22.859> the<00:00:23.010> name<00:00:23.160> suggests

00:00:23.630 --> 00:00:23.640 
control unit and as the name suggests

00:00:23.640 --> 00:00:25.670 
control unit and as the name suggests
these<00:00:24.210> are<00:00:24.449> two<00:00:24.660> possible<00:00:25.050> strategies<00:00:25.529> to

00:00:25.670 --> 00:00:25.680 
these are two possible strategies to

00:00:25.680 --> 00:00:28.609 
these are two possible strategies to
implement<00:00:25.949> the<00:00:26.279> control<00:00:26.990> that<00:00:27.990> is<00:00:28.170> in<00:00:28.320> charge

00:00:28.609 --> 00:00:28.619 
implement the control that is in charge

00:00:28.619 --> 00:00:36.610 
implement the control that is in charge
of<00:00:28.769> generating<00:00:29.810> all<00:00:30.810> the<00:00:31.170> control<00:00:31.529> units

00:00:36.610 --> 00:00:36.620 

00:00:36.620 --> 00:00:41.299 

sorry<00:00:37.620> all<00:00:37.920> the<00:00:38.129> control<00:00:38.489> signals<00:00:39.000> that<00:00:40.309> are

00:00:41.299 --> 00:00:41.309 
sorry all the control signals that are

00:00:41.309 --> 00:00:45.310 
sorry all the control signals that are
needed<00:00:41.640> to<00:00:42.000> make<00:00:42.450> sure<00:00:42.660> that<00:00:42.930> the<00:00:43.050> data<00:00:43.290> path

00:00:45.310 --> 00:00:45.320 
needed to make sure that the data path

00:00:45.320 --> 00:00:50.720 
needed to make sure that the data path
performs<00:00:47.000> the<00:00:48.000> operations<00:00:48.690> that<00:00:48.780> is<00:00:49.730> required

00:00:50.720 --> 00:00:50.730 
performs the operations that is required

00:00:50.730 --> 00:00:53.060 
performs the operations that is required
and<00:00:50.969> with<00:00:51.510> the<00:00:51.600> data<00:00:51.719> path<00:00:52.020> includes<00:00:52.559> also<00:00:52.739> the

00:00:53.060 --> 00:00:53.070 
and with the data path includes also the

00:00:53.070 --> 00:01:00.560 
and with the data path includes also the
bus<00:00:53.250> and<00:00:53.719> the<00:00:54.719> registers<00:00:58.129> so<00:00:59.129> what<00:00:59.460> we<00:00:59.820> know<00:01:00.030> so

00:01:00.560 --> 00:01:00.570 
bus and the registers so what we know so

00:01:00.570 --> 00:01:02.330 
bus and the registers so what we know so
far<00:01:00.600> about<00:01:00.899> how<00:01:01.140> instructions<00:01:02.129> get<00:01:02.280> executed

00:01:02.330 --> 00:01:02.340 
far about how instructions get executed

00:01:02.340 --> 00:01:07.940 
far about how instructions get executed
if<00:01:03.090> I<00:01:03.270> have<00:01:03.449> a<00:01:03.480> certain<00:01:03.780> instruction<00:01:06.950> this

00:01:07.940 --> 00:01:07.950 
if I have a certain instruction this

00:01:07.950 --> 00:01:10.160 
if I have a certain instruction this
typically<00:01:08.460> translates<00:01:08.939> into<00:01:09.240> a<00:01:09.479> collection

00:01:10.160 --> 00:01:10.170 
typically translates into a collection

00:01:10.170 --> 00:01:13.670 
typically translates into a collection
of<00:01:10.290> signal<00:01:11.360> control<00:01:12.360> signals<00:01:12.810> we<00:01:13.290> can<00:01:13.470> draw

00:01:13.670 --> 00:01:13.680 
of signal control signals we can draw

00:01:13.680 --> 00:01:15.890 
of signal control signals we can draw
them<00:01:13.890> like<00:01:14.040> an<00:01:14.189> array<00:01:14.490> this<00:01:15.240> will<00:01:15.479> be<00:01:15.600> an<00:01:15.689> array

00:01:15.890 --> 00:01:15.900 
them like an array this will be an array

00:01:15.900 --> 00:01:17.899 
them like an array this will be an array
of<00:01:15.930> multiple<00:01:16.530> signals<00:01:16.979> and<00:01:17.250> some<00:01:17.580> of<00:01:17.700> them

00:01:17.899 --> 00:01:17.909 
of multiple signals and some of them

00:01:17.909 --> 00:01:20.450 
of multiple signals and some of them
need<00:01:18.240> to<00:01:18.299> be<00:01:18.450> active<00:01:18.990> at<00:01:19.229> certain<00:01:19.680> times<00:01:19.950> let's

00:01:20.450 --> 00:01:20.460 
need to be active at certain times let's

00:01:20.460 --> 00:01:23.179 
need to be active at certain times let's
say<00:01:20.640> at<00:01:20.759> this<00:01:21.299> time<00:01:21.360> we<00:01:21.720> have<00:01:21.840> these<00:01:21.990> three<00:01:22.259> in

00:01:23.179 --> 00:01:23.189 
say at this time we have these three in

00:01:23.189 --> 00:01:26.149 
say at this time we have these three in
the<00:01:23.430> next<00:01:23.580> step<00:01:24.090> we<00:01:24.960> have<00:01:24.990> the<00:01:25.140> same<00:01:25.500> array<00:01:25.860> in

00:01:26.149 --> 00:01:26.159 
the next step we have the same array in

00:01:26.159 --> 00:01:30.350 
the next step we have the same array in
this<00:01:26.880> case<00:01:27.180> this<00:01:27.540> one<00:01:27.869> this<00:01:28.680> one<00:01:29.009> this<00:01:29.850> one<00:01:29.909> and

00:01:30.350 --> 00:01:30.360 
this case this one this one this one and

00:01:30.360 --> 00:01:33.380 
this case this one this one this one and
this<00:01:30.960> one<00:01:31.020> are<00:01:31.200> one<00:01:31.530> so<00:01:32.460> basically<00:01:32.820> this<00:01:33.060> is<00:01:33.240> an

00:01:33.380 --> 00:01:33.390 
this one are one so basically this is an

00:01:33.390 --> 00:01:38.780 
this one are one so basically this is an
array<00:01:33.630> of<00:01:33.829> control<00:01:35.090> signals<00:01:37.009> and<00:01:38.009> we<00:01:38.610> have

00:01:38.780 --> 00:01:38.790 
array of control signals and we have

00:01:38.790 --> 00:01:41.810 
array of control signals and we have
several<00:01:39.119> of<00:01:39.390> these<00:01:39.829> the<00:01:40.829> steps<00:01:41.189> until<00:01:41.700> we

00:01:41.810 --> 00:01:41.820 
several of these the steps until we

00:01:41.820 --> 00:01:43.760 
several of these the steps until we
reach<00:01:42.030> the<00:01:42.060> last<00:01:42.420> step<00:01:42.869> of<00:01:42.899> the<00:01:43.170> instruction

00:01:43.760 --> 00:01:43.770 
reach the last step of the instruction

00:01:43.770 --> 00:01:47.450 
reach the last step of the instruction
and<00:01:43.950> we<00:01:44.700> have<00:01:44.880> maybe<00:01:45.149> one<00:01:45.810> here<00:01:46.350> one<00:01:46.829> here<00:01:47.159> and

00:01:47.450 --> 00:01:47.460 
and we have maybe one here one here and

00:01:47.460 --> 00:01:53.480 
and we have maybe one here one here and
one<00:01:47.700> here<00:01:48.329> and<00:01:48.509> a<00:01:49.259> 1<00:01:49.439> here<00:01:49.470> so<00:01:51.290> these<00:01:52.490> sequence

00:01:53.480 --> 00:01:53.490 
one here and a 1 here so these sequence

00:01:53.490 --> 00:01:56.149 
one here and a 1 here so these sequence
of<00:01:53.729> steps<00:01:54.329> take<00:01:55.170> into<00:01:55.590> execute<00:01:56.040> these

00:01:56.149 --> 00:01:56.159 
of steps take into execute these

00:01:56.159 --> 00:01:58.999 
of steps take into execute these
instructions<00:01:56.990> reflect<00:01:57.990> the<00:01:58.140> values<00:01:58.500> of<00:01:58.710> zeros

00:01:58.999 --> 00:01:59.009 
instructions reflect the values of zeros

00:01:59.009 --> 00:02:00.590 
instructions reflect the values of zeros
and<00:01:59.159> ones<00:01:59.340> that<00:01:59.579> have<00:01:59.759> to<00:01:59.790> be<00:01:59.939> assigned<00:02:00.420> to

00:02:00.590 --> 00:02:00.600 
and ones that have to be assigned to

00:02:00.600 --> 00:02:03.770 
and ones that have to be assigned to
these<00:02:01.170> control<00:02:01.590> signals<00:02:01.979> which<00:02:02.640> block<00:02:03.600> is<00:02:03.750> in

00:02:03.770 --> 00:02:03.780 
these control signals which block is in

00:02:03.780 --> 00:02:06.499 
these control signals which block is in
charge<00:02:04.170> of<00:02:04.320> doing<00:02:04.530> these<00:02:05.030> the<00:02:06.030> Block<00:02:06.329> in

00:02:06.499 --> 00:02:06.509 
charge of doing these the Block in

00:02:06.509 --> 00:02:08.419 
charge of doing these the Block in
charge<00:02:06.750> of<00:02:06.899> count<00:02:07.140> of<00:02:07.439> generating<00:02:08.280> these

00:02:08.419 --> 00:02:08.429 
charge of count of generating these

00:02:08.429 --> 00:02:12.770 
charge of count of generating these
signals<00:02:09.679> is<00:02:10.679> the<00:02:10.920> control<00:02:11.280> unit<00:02:11.580> so<00:02:12.540> at<00:02:12.660> each

00:02:12.770 --> 00:02:12.780 
signals is the control unit so at each

00:02:12.780 --> 00:02:14.450 
signals is the control unit so at each
time

00:02:14.450 --> 00:02:14.460 
time

00:02:14.460 --> 00:02:17.160 
time
execution<00:02:15.460> of<00:02:15.550> an<00:02:15.640> instruction<00:02:15.750> the<00:02:16.750> control

00:02:17.160 --> 00:02:17.170 
execution of an instruction the control

00:02:17.170 --> 00:02:19.350 
execution of an instruction the control
unit<00:02:17.530> has<00:02:17.680> to<00:02:17.860> generate<00:02:18.370> a<00:02:18.580> sequence<00:02:18.970> a

00:02:19.350 --> 00:02:19.360 
unit has to generate a sequence a

00:02:19.360 --> 00:02:21.390 
unit has to generate a sequence a
predefined<00:02:19.960> sequence<00:02:20.260> of<00:02:20.710> these<00:02:20.980> control

00:02:21.390 --> 00:02:21.400 
predefined sequence of these control

00:02:21.400 --> 00:02:32.440 
predefined sequence of these control
signals<00:02:22.770> so

00:02:32.440 --> 00:02:32.450 

00:02:32.450 --> 00:02:35.830 

another<00:02:33.170> way<00:02:33.260> of<00:02:33.380> looking<00:02:33.680> at<00:02:33.770> it<00:02:33.920> is<00:02:34.099> that<00:02:34.840> the

00:02:35.830 --> 00:02:35.840 
another way of looking at it is that the

00:02:35.840 --> 00:02:43.120 
another way of looking at it is that the
control<00:02:36.290> unit<00:02:39.550> the<00:02:40.550> control<00:02:40.940> unit<00:02:41.239> has<00:02:41.420> to<00:02:42.130> go

00:02:43.120 --> 00:02:43.130 
control unit the control unit has to go

00:02:43.130 --> 00:02:45.190 
control unit the control unit has to go
or<00:02:43.370> traverse<00:02:43.910> the<00:02:44.060> sequence<00:02:44.540> and<00:02:44.810> change

00:02:45.190 --> 00:02:45.200 
or traverse the sequence and change

00:02:45.200 --> 00:02:47.380 
or traverse the sequence and change
zeros<00:02:45.560> and<00:02:45.680> ones<00:02:45.890> and<00:02:46.340> generate<00:02:46.970> at<00:02:47.180> each

00:02:47.380 --> 00:02:47.390 
zeros and ones and generate at each

00:02:47.390 --> 00:02:50.380 
zeros and ones and generate at each
point<00:02:47.660> a<00:02:47.930> different<00:02:48.530> array<00:02:49.100> with<00:02:49.970> the<00:02:50.000> value

00:02:50.380 --> 00:02:50.390 
point a different array with the value

00:02:50.390 --> 00:02:52.270 
point a different array with the value
zeros<00:02:50.720> and<00:02:50.840> ones<00:02:50.989> now<00:02:51.830> there<00:02:51.980> are<00:02:52.100> two

00:02:52.270 --> 00:02:52.280 
zeros and ones now there are two

00:02:52.280 --> 00:02:53.920 
zeros and ones now there are two
possible<00:02:52.700> strategies<00:02:53.300> to<00:02:53.420> implement<00:02:53.870> this

00:02:53.920 --> 00:02:53.930 
possible strategies to implement this

00:02:53.930 --> 00:02:55.809 
possible strategies to implement this
functionality<00:02:54.350> within<00:02:54.739> a<00:02:54.890> problem<00:02:55.220> processor

00:02:55.809 --> 00:02:55.819 
functionality within a problem processor

00:02:55.819 --> 00:03:00.100 
functionality within a problem processor
number<00:02:56.450> one<00:02:56.810> is<00:02:57.910> with<00:02:58.910> a<00:02:58.940> finite<00:02:59.750> state

00:03:00.100 --> 00:03:00.110 
number one is with a finite state

00:03:00.110 --> 00:03:02.470 
number one is with a finite state
machine<00:03:00.739> a<00:03:01.010> construction<00:03:02.000> that<00:03:02.120> we<00:03:02.300> have<00:03:02.450> a

00:03:02.470 --> 00:03:02.480 
machine a construction that we have a

00:03:02.480 --> 00:03:06.580 
machine a construction that we have a
study<00:03:02.840> a<00:03:03.110> while<00:03:03.620> ago<00:03:03.910> this<00:03:04.910> construction<00:03:05.590> uses

00:03:06.580 --> 00:03:06.590 
study a while ago this construction uses

00:03:06.590 --> 00:03:10.570 
study a while ago this construction uses
a<00:03:07.239> block<00:03:08.239> of<00:03:08.390> combinational<00:03:09.019> logic<00:03:09.580> that

00:03:10.570 --> 00:03:10.580 
a block of combinational logic that

00:03:10.580 --> 00:03:12.640 
a block of combinational logic that
receives<00:03:11.030> input<00:03:11.299> mainly<00:03:12.260> from<00:03:12.590> the

00:03:12.640 --> 00:03:12.650 
receives input mainly from the

00:03:12.650 --> 00:03:15.610 
receives input mainly from the
instruction<00:03:13.340> register<00:03:13.370> and<00:03:14.060> also<00:03:15.049> from<00:03:15.350> the

00:03:15.610 --> 00:03:15.620 
instruction register and also from the

00:03:15.620 --> 00:03:19.449 
instruction register and also from the
status<00:03:16.310> of<00:03:16.549> the<00:03:16.940> calculations<00:03:18.100> this<00:03:19.100> logic

00:03:19.449 --> 00:03:19.459 
status of the calculations this logic

00:03:19.459 --> 00:03:23.199 
status of the calculations this logic
then<00:03:19.640> produces<00:03:20.360> an<00:03:20.600> array<00:03:21.140> of<00:03:21.319> signals<00:03:22.209> which

00:03:23.199 --> 00:03:23.209 
then produces an array of signals which

00:03:23.209 --> 00:03:28.479 
then produces an array of signals which
are<00:03:23.480> the<00:03:23.780> control<00:03:24.319> signals<00:03:25.900> and<00:03:27.250> this<00:03:28.250> finite

00:03:28.479 --> 00:03:28.489 
are the control signals and this finite

00:03:28.489 --> 00:03:31.470 
are the control signals and this finite
state<00:03:28.819> machine<00:03:29.120> of<00:03:29.239> course<00:03:29.510> has<00:03:30.019> some

00:03:31.470 --> 00:03:31.480 
state machine of course has some

00:03:31.480 --> 00:03:35.259 
state machine of course has some
register<00:03:32.480> here<00:03:32.810> to<00:03:33.049> store<00:03:33.440> the<00:03:33.830> state<00:03:34.269> in

00:03:35.259 --> 00:03:35.269 
register here to store the state in

00:03:35.269 --> 00:03:38.890 
register here to store the state in
which<00:03:35.540> this<00:03:36.049> machine<00:03:36.799> is<00:03:37.630> now<00:03:38.630> with<00:03:38.810> this

00:03:38.890 --> 00:03:38.900 
which this machine is now with this

00:03:38.900 --> 00:03:41.080 
which this machine is now with this
technique<00:03:39.290> over<00:03:39.530> here<00:03:39.890> what<00:03:40.370> we<00:03:40.489> can<00:03:40.640> see<00:03:40.700> is

00:03:41.080 --> 00:03:41.090 
technique over here what we can see is

00:03:41.090 --> 00:03:43.210 
technique over here what we can see is
that<00:03:41.120> the<00:03:41.690> control<00:03:42.109> signals<00:03:42.530> correspond<00:03:43.100> to

00:03:43.210 --> 00:03:43.220 
that the control signals correspond to

00:03:43.220 --> 00:03:44.860 
that the control signals correspond to
all<00:03:43.459> the<00:03:43.730> signals<00:03:44.120> that<00:03:44.180> are<00:03:44.299> required<00:03:44.690> for

00:03:44.860 --> 00:03:44.870 
all the signals that are required for

00:03:44.870 --> 00:03:46.810 
all the signals that are required for
executing<00:03:45.380> an<00:03:45.470> instruction<00:03:45.560> and<00:03:46.160> we<00:03:46.640> can

00:03:46.810 --> 00:03:46.820 
executing an instruction and we can

00:03:46.820 --> 00:03:48.819 
executing an instruction and we can
foresee<00:03:47.329> how<00:03:47.540> this<00:03:47.780> finite<00:03:48.200> state<00:03:48.320> machine

00:03:48.819 --> 00:03:48.829 
foresee how this finite state machine

00:03:48.829 --> 00:03:51.250 
foresee how this finite state machine
can<00:03:49.070> be<00:03:49.190> implemented<00:03:49.579> such<00:03:49.970> that<00:03:50.299> depending

00:03:51.250 --> 00:03:51.260 
can be implemented such that depending

00:03:51.260 --> 00:03:52.840 
can be implemented such that depending
on<00:03:51.380> the<00:03:51.500> value<00:03:51.950> that<00:03:52.100> is<00:03:52.220> present<00:03:52.670> on<00:03:52.700> the

00:03:52.840 --> 00:03:52.850 
on the value that is present on the

00:03:52.850 --> 00:03:55.000 
on the value that is present on the
instruction<00:03:53.329> register<00:03:53.540> this<00:03:54.410> machine<00:03:54.829> will

00:03:55.000 --> 00:03:55.010 
instruction register this machine will

00:03:55.010 --> 00:03:56.830 
instruction register this machine will
work<00:03:55.040> through<00:03:55.760> these<00:03:55.940> steps<00:03:56.299> and<00:03:56.540> produce

00:03:56.830 --> 00:03:56.840 
work through these steps and produce

00:03:56.840 --> 00:03:59.170 
work through these steps and produce
these<00:03:57.049> signals<00:03:57.440> or<00:03:57.850> depending<00:03:58.850> on<00:03:58.970> region

00:03:59.170 --> 00:03:59.180 
these signals or depending on region

00:03:59.180 --> 00:04:01.420 
these signals or depending on region
here<00:03:59.420> will<00:03:59.600> be<00:03:59.780> different<00:04:00.440> sequence<00:04:01.250> of

00:04:01.420 --> 00:04:01.430 
here will be different sequence of

00:04:01.430 --> 00:04:03.759 
here will be different sequence of
signals<00:04:01.880> but<00:04:02.480> they<00:04:02.630> will<00:04:02.810> implement<00:04:03.079> or<00:04:03.560> they

00:04:03.759 --> 00:04:03.769 
signals but they will implement or they

00:04:03.769 --> 00:04:06.009 
signals but they will implement or they
will<00:04:03.950> control<00:04:04.489> the<00:04:04.640> data<00:04:04.790> path<00:04:05.090> such<00:04:05.600> such

00:04:06.009 --> 00:04:06.019 
will control the data path such such

00:04:06.019 --> 00:04:08.920 
will control the data path such such
that<00:04:06.350> it<00:04:07.250> implements<00:04:07.790> or<00:04:07.970> it<00:04:08.090> executes<00:04:08.660> the

00:04:08.920 --> 00:04:08.930 
that it implements or it executes the

00:04:08.930 --> 00:04:12.250 
that it implements or it executes the
instruction<00:04:09.859> loaded<00:04:10.310> in<00:04:10.459> the<00:04:10.760> register<00:04:11.269> this

00:04:12.250 --> 00:04:12.260 
instruction loaded in the register this

00:04:12.260 --> 00:04:15.420 
instruction loaded in the register this
approach<00:04:12.650> here<00:04:12.980> is<00:04:13.010> what<00:04:13.459> is<00:04:13.750> widely<00:04:14.750> known<00:04:14.930> as

00:04:15.420 --> 00:04:15.430 
approach here is what is widely known as

00:04:15.430 --> 00:04:21.580 
approach here is what is widely known as
hard-wired<00:04:19.060> control<00:04:20.260> the<00:04:21.260> resource

00:04:21.580 --> 00:04:21.590 
hard-wired control the resource

00:04:21.590 --> 00:04:23.650 
hard-wired control the resource
hardwired<00:04:22.190> is<00:04:22.460> because<00:04:22.940> all<00:04:23.210> the

00:04:23.650 --> 00:04:23.660 
hardwired is because all the

00:04:23.660 --> 00:04:26.140 
hardwired is because all the
intelligence<00:04:24.320> to<00:04:25.100> generate<00:04:25.520> the<00:04:25.640> sequence<00:04:25.850> of

00:04:26.140 --> 00:04:26.150 
intelligence to generate the sequence of

00:04:26.150 --> 00:04:28.570 
intelligence to generate the sequence of
signals<00:04:26.570> is<00:04:26.720> contained<00:04:27.289> within<00:04:27.890> this<00:04:28.160> finite

00:04:28.570 --> 00:04:28.580 
signals is contained within this finite

00:04:28.580 --> 00:04:32.020 
signals is contained within this finite
state<00:04:28.850> machine<00:04:29.830> the<00:04:30.830> alternative<00:04:31.400> approach

00:04:32.020 --> 00:04:32.030 
state machine the alternative approach

00:04:32.030 --> 00:04:35.409 
state machine the alternative approach
number<00:04:32.450> to<00:04:33.100> what<00:04:34.100> is<00:04:34.220> known<00:04:34.490> as<00:04:34.760> a<00:04:34.820> micro

00:04:35.409 --> 00:04:35.419 
number to what is known as a micro

00:04:35.419 --> 00:04:40.090 
number to what is known as a micro
program<00:04:36.110> and<00:04:37.510> the<00:04:38.510> idea<00:04:38.840> is<00:04:39.229> very<00:04:39.470> simple<00:04:39.979> is

00:04:40.090 --> 00:04:40.100 
program and the idea is very simple is

00:04:40.100 --> 00:04:41.980 
program and the idea is very simple is
basically<00:04:40.430> applying<00:04:40.909> the<00:04:41.150> capacity<00:04:41.750> of<00:04:41.780> the

00:04:41.980 --> 00:04:41.990 
basically applying the capacity of the

00:04:41.990 --> 00:04:44.380 
basically applying the capacity of the
micro<00:04:42.289> processor<00:04:42.800> again<00:04:43.610> but<00:04:43.909> this<00:04:44.030> time<00:04:44.090> to

00:04:44.380 --> 00:04:44.390 
micro processor again but this time to

00:04:44.390 --> 00:04:45.650 
micro processor again but this time to
generate<00:04:44.900> this

00:04:45.650 --> 00:04:45.660 
generate this

00:04:45.660 --> 00:04:48.980 
generate this
sequence<00:04:45.960> of<00:04:46.700> instructions<00:04:47.700> so<00:04:47.880> it<00:04:48.600> is<00:04:48.840> the

00:04:48.980 --> 00:04:48.990 
sequence of instructions so it is the

00:04:48.990 --> 00:04:51.820 
sequence of instructions so it is the
following<00:04:49.290> we<00:04:50.130> will<00:04:50.160> have<00:04:50.550> the<00:04:50.760> notion<00:04:51.030> of<00:04:51.300> a

00:04:51.820 --> 00:04:51.830 
following we will have the notion of a

00:04:51.830 --> 00:04:58.490 
following we will have the notion of a
micro<00:04:53.690> instruction<00:04:54.690> a<00:04:56.930> micro<00:04:57.930> instruction

00:04:58.490 --> 00:04:58.500 
micro instruction a micro instruction

00:04:58.500 --> 00:05:01.850 
micro instruction a micro instruction
will<00:04:58.680> have<00:04:58.860> certain<00:04:59.280> fields<00:05:00.650> which<00:05:01.650> are

00:05:01.850 --> 00:05:01.860 
will have certain fields which are

00:05:01.860 --> 00:05:03.920 
will have certain fields which are
called<00:05:02.010> micro<00:05:02.400> operation<00:05:02.910> one<00:05:03.180> micro

00:05:03.920 --> 00:05:03.930 
called micro operation one micro

00:05:03.930 --> 00:05:07.940 
called micro operation one micro
operation<00:05:04.530> to<00:05:04.830> a<00:05:05.130> jump<00:05:06.030> if<00:05:06.270> needed<00:05:06.870> and<00:05:07.230> the

00:05:07.940 --> 00:05:07.950 
operation to a jump if needed and the

00:05:07.950 --> 00:05:09.680 
operation to a jump if needed and the
destination<00:05:08.400> of<00:05:08.670> it<00:05:08.820> now<00:05:09.120> this<00:05:09.330> micro

00:05:09.680 --> 00:05:09.690 
destination of it now this micro

00:05:09.690 --> 00:05:14.920 
destination of it now this micro
instruction<00:05:10.350> will<00:05:11.340> correspond<00:05:11.970> to<00:05:12.270> a<00:05:12.900> set<00:05:13.410> of

00:05:14.920 --> 00:05:14.930 
instruction will correspond to a set of

00:05:14.930 --> 00:05:18.200 
instruction will correspond to a set of
fixed<00:05:16.610> control<00:05:17.610> units

00:05:18.200 --> 00:05:18.210 
fixed control units

00:05:18.210 --> 00:05:23.150 
fixed control units
sorry<00:05:18.510> control<00:05:19.190> signals<00:05:21.530> in<00:05:22.530> other<00:05:22.710> words<00:05:22.920> is

00:05:23.150 --> 00:05:23.160 
sorry control signals in other words is

00:05:23.160 --> 00:05:26.780 
sorry control signals in other words is
as<00:05:23.520> if<00:05:24.050> one<00:05:25.050> of<00:05:25.170> these<00:05:25.320> vectors<00:05:25.590> that<00:05:26.040> contains

00:05:26.780 --> 00:05:26.790 
as if one of these vectors that contains

00:05:26.790 --> 00:05:28.580 
as if one of these vectors that contains
all<00:05:27.150> the<00:05:27.270> zeros<00:05:27.570> and<00:05:27.720> ones<00:05:27.870> required<00:05:28.440> to

00:05:28.580 --> 00:05:28.590 
all the zeros and ones required to

00:05:28.590 --> 00:05:30.830 
all the zeros and ones required to
control<00:05:28.920> the<00:05:29.040> data<00:05:29.190> path<00:05:29.460> is<00:05:29.670> then<00:05:30.030> encoded<00:05:30.480> as

00:05:30.830 --> 00:05:30.840 
control the data path is then encoded as

00:05:30.840 --> 00:05:34.250 
control the data path is then encoded as
one<00:05:31.650> much<00:05:32.130> more<00:05:32.460> compact<00:05:32.850> code<00:05:33.300> so<00:05:33.870> we<00:05:34.020> assign

00:05:34.250 --> 00:05:34.260 
one much more compact code so we assign

00:05:34.260 --> 00:05:38.420 
one much more compact code so we assign
win<00:05:34.650> one<00:05:35.010> code<00:05:35.310> per<00:05:35.760> set<00:05:36.660> of<00:05:36.810> signals<00:05:37.350> and<00:05:37.590> this

00:05:38.420 --> 00:05:38.430 
win one code per set of signals and this

00:05:38.430 --> 00:05:41.120 
win one code per set of signals and this
code<00:05:38.730> is<00:05:38.850> put<00:05:39.090> together<00:05:39.270> forming<00:05:40.260> a<00:05:40.470> micro

00:05:41.120 --> 00:05:41.130 
code is put together forming a micro

00:05:41.130 --> 00:05:44.270 
code is put together forming a micro
instruction<00:05:42.140> now<00:05:43.140> what<00:05:43.350> we<00:05:43.470> hear<00:05:43.770> is<00:05:43.920> a

00:05:44.270 --> 00:05:44.280 
instruction now what we hear is a

00:05:44.280 --> 00:05:48.380 
instruction now what we hear is a
sequence<00:05:44.850> of<00:05:45.090> micro<00:05:45.690> instructions<00:05:47.240> like<00:05:48.240> the

00:05:48.380 --> 00:05:48.390 
sequence of micro instructions like the

00:05:48.390 --> 00:05:50.450 
sequence of micro instructions like the
ones<00:05:48.570> shown<00:05:48.810> here<00:05:48.840> and<00:05:49.470> this<00:05:49.980> sequence<00:05:50.250> of

00:05:50.450 --> 00:05:50.460 
ones shown here and this sequence of

00:05:50.460 --> 00:05:53.270 
ones shown here and this sequence of
micro<00:05:50.820> instructions<00:05:51.330> is<00:05:51.540> known<00:05:52.350> as<00:05:52.620> a<00:05:52.920> micro

00:05:53.270 --> 00:05:53.280 
micro instructions is known as a micro

00:05:53.280 --> 00:05:58.010 
micro instructions is known as a micro
program<00:05:55.460> so<00:05:56.460> what<00:05:57.210> it<00:05:57.330> ends<00:05:57.480> up<00:05:57.720> happening

00:05:58.010 --> 00:05:58.020 
program so what it ends up happening

00:05:58.020 --> 00:06:00.530 
program so what it ends up happening
here<00:05:58.560> is<00:05:58.740> that<00:05:58.770> in<00:05:59.220> order<00:05:59.610> for<00:05:59.850> the<00:05:59.970> data<00:06:00.180> path

00:06:00.530 --> 00:06:00.540 
here is that in order for the data path

00:06:00.540 --> 00:06:02.510 
here is that in order for the data path
to<00:06:00.750> execute<00:06:01.380> a<00:06:01.410> given<00:06:01.680> instruction<00:06:02.310> this

00:06:02.510 --> 00:06:02.520 
to execute a given instruction this

00:06:02.520 --> 00:06:04.640 
to execute a given instruction this
given<00:06:02.820> instruction<00:06:03.300> will<00:06:03.419> execute<00:06:03.720> a<00:06:04.080> given

00:06:04.640 --> 00:06:04.650 
given instruction will execute a given

00:06:04.650 --> 00:06:08.210 
given instruction will execute a given
micro<00:06:05.040> program<00:06:05.460> and<00:06:05.990> what<00:06:06.990> we<00:06:07.140> have<00:06:07.320> here<00:06:07.710> is<00:06:07.860> a

00:06:08.210 --> 00:06:08.220 
micro program and what we have here is a

00:06:08.220 --> 00:06:15.970 
micro program and what we have here is a
circuit<00:06:08.790> that<00:06:09.030> reads<00:06:09.360> a<00:06:10.970> micro<00:06:11.970> instruction

00:06:15.970 --> 00:06:15.980 

00:06:15.980 --> 00:06:23.630 

generates<00:06:18.500> the<00:06:19.500> control<00:06:19.890> signals

00:06:23.630 --> 00:06:23.640 

00:06:23.640 --> 00:06:32.720 

and<00:06:24.640> then<00:06:26.250> execute<00:06:28.290> next<00:06:29.340> micro<00:06:30.660> instruction

00:06:32.720 --> 00:06:32.730 
and then execute next micro instruction

00:06:32.730 --> 00:06:38.250 
and then execute next micro instruction
or<00:06:33.780> jump<00:06:36.150> so<00:06:37.150> this<00:06:37.330> is<00:06:37.480> another<00:06:37.750> approach<00:06:38.020> to

00:06:38.250 --> 00:06:38.260 
or jump so this is another approach to

00:06:38.260 --> 00:06:40.260 
or jump so this is another approach to
generate<00:06:38.650> the<00:06:38.800> sequence<00:06:39.250> of<00:06:39.400> these<00:06:39.580> arrays<00:06:40.060> of

00:06:40.260 --> 00:06:40.270 
generate the sequence of these arrays of

00:06:40.270 --> 00:06:42.420 
generate the sequence of these arrays of
signals<00:06:40.660> rather<00:06:41.530> than<00:06:41.830> having<00:06:42.130> a<00:06:42.220> finite

00:06:42.420 --> 00:06:42.430 
signals rather than having a finite

00:06:42.430 --> 00:06:44.690 
signals rather than having a finite
state<00:06:42.610> machine<00:06:43.150> that<00:06:43.180> contains<00:06:43.960> these<00:06:44.140> steps

00:06:44.690 --> 00:06:44.700 
state machine that contains these steps

00:06:44.700 --> 00:06:46.980 
state machine that contains these steps
encoding<00:06:45.700> in<00:06:45.820> this<00:06:45.940> logic<00:06:46.360> what<00:06:46.510> we<00:06:46.660> have<00:06:46.810> is<00:06:46.960> a

00:06:46.980 --> 00:06:46.990 
encoding in this logic what we have is a

00:06:46.990 --> 00:06:48.690 
encoding in this logic what we have is a
program<00:06:47.350> which<00:06:47.800> is<00:06:47.950> called<00:06:48.010> a<00:06:48.190> micro<00:06:48.490> program

00:06:48.690 --> 00:06:48.700 
program which is called a micro program

00:06:48.700 --> 00:06:50.940 
program which is called a micro program
in<00:06:49.090> this<00:06:49.630> program<00:06:50.080> is<00:06:50.230> sitting<00:06:50.560> on<00:06:50.650> a<00:06:50.680> memory

00:06:50.940 --> 00:06:50.950 
in this program is sitting on a memory

00:06:50.950 --> 00:06:53.580 
in this program is sitting on a memory
and<00:06:51.340> the<00:06:52.120> micro<00:06:52.510> processor<00:06:53.020> turning<00:06:53.380> on<00:06:53.470> the

00:06:53.580 --> 00:06:53.590 
and the micro processor turning on the

00:06:53.590 --> 00:06:55.710 
and the micro processor turning on the
value<00:06:53.920> of<00:06:53.950> the<00:06:54.130> instruction<00:06:54.610> register<00:06:54.850> always

00:06:55.710 --> 00:06:55.720 
value of the instruction register always

00:06:55.720 --> 00:06:57.900 
value of the instruction register always
the<00:06:55.840> instruction<00:06:56.290> register<00:06:56.470> decides<00:06:57.160> to

00:06:57.900 --> 00:06:57.910 
the instruction register decides to

00:06:57.910 --> 00:07:00.660 
the instruction register decides to
execute<00:06:58.570> this<00:06:59.140> micro<00:06:59.560> program<00:06:59.980> in<00:07:00.130> this<00:07:00.310> micro

00:07:00.660 --> 00:07:00.670 
execute this micro program in this micro

00:07:00.670 --> 00:07:02.370 
execute this micro program in this micro
program<00:07:01.060> will<00:07:01.270> be<00:07:01.390> interpreted<00:07:02.170> and

00:07:02.370 --> 00:07:02.380 
program will be interpreted and

00:07:02.380 --> 00:07:05.010 
program will be interpreted and
translated<00:07:02.490> into<00:07:03.490> the<00:07:03.910> array<00:07:04.330> of<00:07:04.510> zeros<00:07:04.870> and

00:07:05.010 --> 00:07:05.020 
translated into the array of zeros and

00:07:05.020 --> 00:07:07.290 
translated into the array of zeros and
ones<00:07:05.230> that<00:07:05.530> are<00:07:05.770> the<00:07:05.920> appropriate<00:07:06.400> ones<00:07:06.640> the

00:07:07.290 --> 00:07:07.300 
ones that are the appropriate ones the

00:07:07.300 --> 00:07:08.820 
ones that are the appropriate ones the
appropriate<00:07:07.720> control<00:07:08.050> signals<00:07:08.470> for<00:07:08.680> this

00:07:08.820 --> 00:07:08.830 
appropriate control signals for this

00:07:08.830 --> 00:07:10.350 
appropriate control signals for this
data<00:07:09.070> path<00:07:09.280> to<00:07:09.550> execute<00:07:09.970> the<00:07:10.120> given

00:07:10.350 --> 00:07:10.360 
data path to execute the given

00:07:10.360 --> 00:07:13.170 
data path to execute the given
instruction<00:07:11.250> so<00:07:12.250> this<00:07:12.400> in<00:07:12.520> conclusion<00:07:13.000> are

00:07:13.170 --> 00:07:13.180 
instruction so this in conclusion are

00:07:13.180 --> 00:07:15.660 
instruction so this in conclusion are
the<00:07:13.420> two<00:07:13.600> approaches<00:07:14.200> for<00:07:14.460> designing<00:07:15.460> the

00:07:15.660 --> 00:07:15.670 
the two approaches for designing the

00:07:15.670 --> 00:07:18.000 
the two approaches for designing the
control<00:07:16.060> unit<00:07:16.360> of<00:07:16.480> a<00:07:16.630> micro<00:07:17.230> processor<00:07:17.380> we

00:07:18.000 --> 00:07:18.010 
control unit of a micro processor we

00:07:18.010 --> 00:07:19.800 
control unit of a micro processor we
either<00:07:18.190> have<00:07:18.490> it<00:07:18.520> hardwired<00:07:19.180> as<00:07:19.390> a<00:07:19.420> finite

00:07:19.800 --> 00:07:19.810 
either have it hardwired as a finite

00:07:19.810 --> 00:07:21.630 
either have it hardwired as a finite
state<00:07:19.990> machine<00:07:20.350> or<00:07:20.500> we<00:07:21.250> followed<00:07:21.520> a

00:07:21.630 --> 00:07:21.640 
state machine or we followed a

00:07:21.640 --> 00:07:23.880 
state machine or we followed a
microprogrammed<00:07:22.270> approach<00:07:22.600> in<00:07:23.200> which<00:07:23.500> all

00:07:23.880 --> 00:07:23.890 
microprogrammed approach in which all

00:07:23.890 --> 00:07:26.220 
microprogrammed approach in which all
these<00:07:24.370> arrays<00:07:24.760> are<00:07:24.970> encoded<00:07:25.540> into<00:07:25.660> zeros<00:07:26.080> and

00:07:26.220 --> 00:07:26.230 
these arrays are encoded into zeros and

00:07:26.230 --> 00:07:28.080 
these arrays are encoded into zeros and
ones<00:07:26.380> and<00:07:26.800> these<00:07:26.920> codes<00:07:27.280> are<00:07:27.520> generated<00:07:27.940> and

00:07:28.080 --> 00:07:28.090 
ones and these codes are generated and

00:07:28.090 --> 00:07:31.050 
ones and these codes are generated and
generate<00:07:28.750> the<00:07:28.870> sequence

