WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.149 

in<00:00:00.060> this<00:00:00.930> example<00:00:01.110> we<00:00:01.500> have<00:00:01.740> a<00:00:01.770> motorola

00:00:02.149 --> 00:00:02.159 
in this example we have a motorola

00:00:02.159 --> 00:00:04.849 
in this example we have a motorola
processor<00:00:02.879> in<00:00:03.030> a<00:00:03.090> BGA<00:00:03.449> package<00:00:04.020> and<00:00:04.230> a<00:00:04.500> custom

00:00:04.849 --> 00:00:04.859 
processor in a BGA package and a custom

00:00:04.859 --> 00:00:06.970 
processor in a BGA package and a custom
ASIC<00:00:05.190> and<00:00:05.400> a<00:00:05.490> quad<00:00:05.700> flat<00:00:05.940> pack<00:00:06.000> package

00:00:06.970 --> 00:00:06.980 
ASIC and a quad flat pack package

00:00:06.980 --> 00:00:10.160 
ASIC and a quad flat pack package
remember<00:00:07.980> to<00:00:08.370> run<00:00:08.550> universal<00:00:09.120> scan<00:00:09.420> all<00:00:09.630> you

00:00:10.160 --> 00:00:10.170 
remember to run universal scan all you

00:00:10.170 --> 00:00:12.379 
remember to run universal scan all you
need<00:00:10.410> is<00:00:10.440> the<00:00:10.800> bsd<00:00:11.280> l<00:00:11.429> files<00:00:11.759> from<00:00:12.000> the<00:00:12.150> vendor

00:00:12.379 --> 00:00:12.389 
need is the bsd l files from the vendor

00:00:12.389 --> 00:00:14.330 
need is the bsd l files from the vendor
websites<00:00:12.840> in<00:00:13.080> this<00:00:13.559> case<00:00:13.830> I<00:00:14.070> got<00:00:14.219> the

00:00:14.330 --> 00:00:14.340 
websites in this case I got the

00:00:14.340 --> 00:00:16.250 
websites in this case I got the
processor<00:00:14.910> BS<00:00:15.210> dl<00:00:15.509> from<00:00:15.719> the<00:00:15.870> motorola

00:00:16.250 --> 00:00:16.260 
processor BS dl from the motorola

00:00:16.260 --> 00:00:18.529 
processor BS dl from the motorola
website<00:00:16.740> and<00:00:16.980> the<00:00:17.340> BS<00:00:17.640> dl<00:00:17.940> for<00:00:18.119> the<00:00:18.180> custom

00:00:18.529 --> 00:00:18.539 
website and the BS dl for the custom

00:00:18.539 --> 00:00:21.500 
website and the BS dl for the custom
ASIC<00:00:18.840> from<00:00:19.230> the<00:00:19.320> ASIC<00:00:19.619> vendor<00:00:20.029> given<00:00:21.029> the<00:00:21.090> bsd

00:00:21.500 --> 00:00:21.510 
ASIC from the ASIC vendor given the bsd

00:00:21.510 --> 00:00:23.570 
ASIC from the ASIC vendor given the bsd
l<00:00:21.600> files<00:00:21.900> you<00:00:22.590> just<00:00:22.769> drop<00:00:22.980> the<00:00:23.100> parts<00:00:23.369> on<00:00:23.490> the

00:00:23.570 --> 00:00:23.580 
l files you just drop the parts on the

00:00:23.580 --> 00:00:27.620 
l files you just drop the parts on the
screen<00:00:23.850> at<00:00:24.090> a<00:00:24.199> port<00:00:25.199> hit<00:00:26.130> scan<00:00:26.490> and<00:00:26.789> instantly

00:00:27.620 --> 00:00:27.630 
screen at a port hit scan and instantly

00:00:27.630 --> 00:00:29.720 
screen at a port hit scan and instantly
you<00:00:28.019> see<00:00:28.230> what<00:00:28.349> every<00:00:28.710> pin<00:00:29.010> on<00:00:29.250> every<00:00:29.580> device

00:00:29.720 --> 00:00:29.730 
you see what every pin on every device

00:00:29.730 --> 00:00:31.880 
you see what every pin on every device
in<00:00:30.060> the<00:00:30.119> scan<00:00:30.390> chain<00:00:30.689> is<00:00:30.900> doing<00:00:31.230> in<00:00:31.410> real<00:00:31.650> time

00:00:31.880 --> 00:00:31.890 
in the scan chain is doing in real time

00:00:31.890 --> 00:00:34.549 
in the scan chain is doing in real time
on<00:00:32.219> your<00:00:32.489> display<00:00:33.170> down<00:00:34.170> here<00:00:34.440> we've

00:00:34.549 --> 00:00:34.559 
on your display down here we've

00:00:34.559 --> 00:00:36.290 
on your display down here we've
connected<00:00:34.800> some<00:00:35.100> seven<00:00:35.399> segment<00:00:35.760> displays<00:00:36.120> to

00:00:36.290 --> 00:00:36.300 
connected some seven segment displays to

00:00:36.300 --> 00:00:38.840 
connected some seven segment displays to
the<00:00:36.390> address<00:00:36.809> bus<00:00:37.050> into<00:00:37.770> the<00:00:37.890> data<00:00:38.100> bus<00:00:38.340> so<00:00:38.760> we

00:00:38.840 --> 00:00:38.850 
the address bus into the data bus so we

00:00:38.850 --> 00:00:40.400 
the address bus into the data bus so we
can<00:00:39.000> see<00:00:39.120> what's<00:00:39.300> going<00:00:39.360> on<00:00:39.690> in<00:00:39.870> this<00:00:40.079> design

00:00:40.400 --> 00:00:40.410 
can see what's going on in this design

00:00:40.410 --> 00:00:43.400 
can see what's going on in this design
in<00:00:40.680> this<00:00:41.670> case<00:00:41.940> I<00:00:42.180> see<00:00:42.329> that<00:00:42.480> my<00:00:42.510> processor<00:00:43.230> is

00:00:43.400 --> 00:00:43.410 
in this case I see that my processor is

00:00:43.410 --> 00:00:45.500 
in this case I see that my processor is
stuck<00:00:43.800> at<00:00:44.040> around<00:00:44.190> eight<00:00:44.579> hundred<00:00:44.969> hex<00:00:45.210> that

00:00:45.500 --> 00:00:45.510 
stuck at around eight hundred hex that

00:00:45.510 --> 00:00:47.660 
stuck at around eight hundred hex that
makes<00:00:46.289> sense<00:00:46.530> here<00:00:46.770> because<00:00:47.039> I<00:00:47.129> destroyed<00:00:47.550> the

00:00:47.660 --> 00:00:47.670 
makes sense here because I destroyed the

00:00:47.670 --> 00:00:49.040 
makes sense here because I destroyed the
problem<00:00:48.000> this<00:00:48.090> board<00:00:48.360> and<00:00:48.480> the<00:00:48.570> processor

00:00:49.040 --> 00:00:49.050 
problem this board and the processor

00:00:49.050 --> 00:00:51.080 
problem this board and the processor
can't<00:00:49.260> find<00:00:49.469> any<00:00:49.620> code<00:00:49.860> to<00:00:49.980> boot<00:00:50.129> off<00:00:50.280> of<00:00:50.520> but

00:00:51.080 --> 00:00:51.090 
can't find any code to boot off of but

00:00:51.090 --> 00:00:53.510 
can't find any code to boot off of but
the<00:00:51.360> point<00:00:51.629> is<00:00:51.840> I<00:00:52.079> can<00:00:52.320> see<00:00:52.530> that<00:00:52.710> and<00:00:52.949> I<00:00:53.190> did<00:00:53.399> it

00:00:53.510 --> 00:00:53.520 
the point is I can see that and I did it

00:00:53.520 --> 00:00:55.400 
the point is I can see that and I did it
quickly<00:00:53.789> and<00:00:53.940> simply<00:00:54.329> with<00:00:54.989> nothing<00:00:55.379> more

00:00:55.400 --> 00:00:55.410 
quickly and simply with nothing more

00:00:55.410 --> 00:00:58.729 
quickly and simply with nothing more
than<00:00:55.590> a<00:00:55.739> download<00:00:56.160> cable<00:00:56.520> and<00:00:56.699> a<00:00:56.760> laptop<00:00:57.210> I<00:00:57.739> can

00:00:58.729 --> 00:00:58.739 
than a download cable and a laptop I can

00:00:58.739 --> 00:01:00.470 
than a download cable and a laptop I can
also<00:00:58.890> see<00:00:59.190> at<00:00:59.280> a<00:00:59.340> glance<00:00:59.370> that<00:00:59.850> the<00:00:59.969> oscillator

00:01:00.470 --> 00:01:00.480 
also see at a glance that the oscillator

00:01:00.480 --> 00:01:02.270 
also see at a glance that the oscillator
is<00:01:00.750> definitely<00:01:01.260> driving<00:01:01.500> the<00:01:01.649> input<00:01:02.010> buffer

00:01:02.270 --> 00:01:02.280 
is definitely driving the input buffer

00:01:02.280 --> 00:01:04.310 
is definitely driving the input buffer
of<00:01:02.370> the<00:01:02.460> processor<00:01:03.030> and<00:01:03.239> that<00:01:03.660> the<00:01:03.780> crystal<00:01:04.170> is

00:01:04.310 --> 00:01:04.320 
of the processor and that the crystal is

00:01:04.320 --> 00:01:06.020 
of the processor and that the crystal is
driving<00:01:04.650> the<00:01:04.710> input<00:01:04.949> buffer<00:01:05.250> of<00:01:05.430> the<00:01:05.700> custom

00:01:06.020 --> 00:01:06.030 
driving the input buffer of the custom

00:01:06.030 --> 00:01:08.899 
driving the input buffer of the custom
ASIC<00:01:06.950> since<00:01:07.950> both<00:01:08.130> of<00:01:08.280> these<00:01:08.369> parts<00:01:08.729> are<00:01:08.850> in

00:01:08.899 --> 00:01:08.909 
ASIC since both of these parts are in

00:01:08.909 --> 00:01:11.210 
ASIC since both of these parts are in
sample<00:01:09.240> preload<00:01:09.570> mode<00:01:09.810> were<00:01:10.350> able<00:01:10.619> to<00:01:10.770> monitor

00:01:11.210 --> 00:01:11.220 
sample preload mode were able to monitor

00:01:11.220 --> 00:01:13.490 
sample preload mode were able to monitor
all<00:01:11.250> of<00:01:11.580> this<00:01:11.700> activity<00:01:11.850> without<00:01:12.659> affecting

00:01:13.490 --> 00:01:13.500 
all of this activity without affecting

00:01:13.500 --> 00:01:15.260 
all of this activity without affecting
the<00:01:13.590> operation<00:01:14.130> of<00:01:14.220> the<00:01:14.280> circuitry<00:01:14.700> it's

00:01:15.260 --> 00:01:15.270 
the operation of the circuitry it's

00:01:15.270 --> 00:01:17.570 
the operation of the circuitry it's
completely<00:01:15.960> unobtrusive<00:01:16.409> the<00:01:17.070> circuit<00:01:17.430> runs

00:01:17.570 --> 00:01:17.580 
completely unobtrusive the circuit runs

00:01:17.580 --> 00:01:19.850 
completely unobtrusive the circuit runs
at<00:01:17.729> full<00:01:17.909> speed<00:01:18.270> completely<00:01:19.170> unaware<00:01:19.680> that

00:01:19.850 --> 00:01:19.860 
at full speed completely unaware that

00:01:19.860 --> 00:01:22.460 
at full speed completely unaware that
we're<00:01:20.070> doing<00:01:20.340> any<00:01:20.520> of<00:01:20.610> this<00:01:21.229> suppose<00:01:22.229> for<00:01:22.259> a

00:01:22.460 --> 00:01:22.470 
we're doing any of this suppose for a

00:01:22.470 --> 00:01:24.200 
we're doing any of this suppose for a
moment<00:01:22.530> that<00:01:22.890> we<00:01:23.070> knew<00:01:23.310> that<00:01:23.340> the<00:01:23.610> processor

00:01:24.200 --> 00:01:24.210 
moment that we knew that the processor

00:01:24.210 --> 00:01:25.969 
moment that we knew that the processor
is<00:01:24.240> having<00:01:24.570> difficulty<00:01:24.990> communicating<00:01:25.380> with

00:01:25.969 --> 00:01:25.979 
is having difficulty communicating with

00:01:25.979 --> 00:01:28.160 
is having difficulty communicating with
the<00:01:26.100> ASIC<00:01:26.490> well<00:01:27.450> the<00:01:27.630> next<00:01:27.720> thing<00:01:27.869> we<00:01:28.049> would

00:01:28.160 --> 00:01:28.170 
the ASIC well the next thing we would

00:01:28.170 --> 00:01:30.050 
the ASIC well the next thing we would
want<00:01:28.380> to<00:01:28.470> know<00:01:28.650> is<00:01:28.950> are<00:01:29.310> all<00:01:29.520> the<00:01:29.640> data<00:01:29.880> and

00:01:30.050 --> 00:01:30.060 
want to know is are all the data and

00:01:30.060 --> 00:01:31.760 
want to know is are all the data and
address<00:01:30.720> lines<00:01:30.990> connected<00:01:31.530> correctly

00:01:31.760 --> 00:01:31.770 
address lines connected correctly

00:01:31.770 --> 00:01:34.910 
address lines connected correctly
between<00:01:32.579> the<00:01:32.729> processor<00:01:33.270> in<00:01:33.420> the<00:01:33.479> ASIC<00:01:33.920> how

00:01:34.910 --> 00:01:34.920 
between the processor in the ASIC how

00:01:34.920 --> 00:01:36.289 
between the processor in the ASIC how
would<00:01:35.040> you<00:01:35.130> check<00:01:35.340> that<00:01:35.400> continuity<00:01:35.909> today

00:01:36.289 --> 00:01:36.299 
would you check that continuity today

00:01:36.299 --> 00:01:38.870 
would you check that continuity today
without<00:01:36.479> any<00:01:36.840> fancy<00:01:37.320> expensive<00:01:37.530> tools<00:01:38.009> the

00:01:38.870 --> 00:01:38.880 
without any fancy expensive tools the

00:01:38.880 --> 00:01:40.640 
without any fancy expensive tools the
answer<00:01:39.150> is<00:01:39.180> you<00:01:39.360> can't<00:01:39.390> because<00:01:40.140> of<00:01:40.259> that<00:01:40.409> darn

00:01:40.640 --> 00:01:40.650 
answer is you can't because of that darn

00:01:40.650 --> 00:01:43.219 
answer is you can't because of that darn
BGA<00:01:41.130> of<00:01:41.909> course<00:01:42.180> with<00:01:42.299> universal<00:01:42.750> scan<00:01:42.990> it's<00:01:43.140> a

00:01:43.219 --> 00:01:43.229 
BGA of course with universal scan it's a

00:01:43.229 --> 00:01:45.380 
BGA of course with universal scan it's a
snap<00:01:43.500> we<00:01:44.040> just<00:01:44.280> connect<00:01:44.579> some<00:01:44.759> virtual<00:01:45.210> dip

00:01:45.380 --> 00:01:45.390 
snap we just connect some virtual dip

00:01:45.390 --> 00:01:47.300 
snap we just connect some virtual dip
switches<00:01:45.689> to<00:01:45.990> drive<00:01:46.200> the<00:01:46.350> output<00:01:46.799> buffers<00:01:47.130> of

00:01:47.300 --> 00:01:47.310 
switches to drive the output buffers of

00:01:47.310 --> 00:01:49.429 
switches to drive the output buffers of
the<00:01:47.430> ASIC<00:01:47.850> on<00:01:48.000> the<00:01:48.420> data<00:01:48.600> bus<00:01:48.810> for<00:01:49.020> example<00:01:49.350> in

00:01:49.429 --> 00:01:49.439 
the ASIC on the data bus for example in

00:01:49.439 --> 00:01:52.130 
the ASIC on the data bus for example in
this<00:01:49.500> case<00:01:49.700> we've<00:01:50.700> got<00:01:50.909> some<00:01:51.090> LEDs<00:01:51.600> to<00:01:52.049> the

00:01:52.130 --> 00:01:52.140 
this case we've got some LEDs to the

00:01:52.140 --> 00:01:54.020 
this case we've got some LEDs to the
input<00:01:52.290> buffers<00:01:52.799> over<00:01:53.159> here<00:01:53.310> at<00:01:53.369> the<00:01:53.460> processor

00:01:54.020 --> 00:01:54.030 
input buffers over here at the processor

00:01:54.030 --> 00:01:55.999 
input buffers over here at the processor
and<00:01:54.210> in<00:01:55.049> this<00:01:55.140> case<00:01:55.320> what<00:01:55.530> I'm<00:01:55.619> going<00:01:55.740> to<00:01:55.770> do<00:01:55.890> is

00:01:55.999 --> 00:01:56.009 
and in this case what I'm going to do is

00:01:56.009 --> 00:01:58.010 
and in this case what I'm going to do is
I'm<00:01:56.100> going<00:01:56.189> to<00:01:56.250> put<00:01:56.399> the<00:01:56.520> processor<00:01:57.270> in<00:01:57.450> X<00:01:57.689> test

00:01:58.010 --> 00:01:58.020 
I'm going to put the processor in X test

00:01:58.020 --> 00:01:59.569 
I'm going to put the processor in X test
and<00:01:58.320> I'm<00:01:58.710> going<00:01:58.860> to<00:01:58.890> tell<00:01:59.070> it<00:01:59.189> to<00:01:59.280> tri-state

00:01:59.569 --> 00:01:59.579 
and I'm going to tell it to tri-state

00:01:59.579 --> 00:02:02.749 
and I'm going to tell it to tri-state
all<00:02:00.030> of<00:02:00.360> its<00:02:00.509> lines<00:02:01.159> this<00:02:02.159> will<00:02:02.369> allow<00:02:02.460> us<00:02:02.579> to

00:02:02.749 --> 00:02:02.759 
all of its lines this will allow us to

00:02:02.759 --> 00:02:05.600 
all of its lines this will allow us to
drive<00:02:03.030> the<00:02:03.180> data<00:02:03.390> bus<00:02:03.630> from<00:02:04.200> the<00:02:04.350> ASIC<00:02:04.799> into

00:02:05.600 --> 00:02:05.610 
drive the data bus from the ASIC into

00:02:05.610 --> 00:02:07.010 
drive the data bus from the ASIC into
the<00:02:05.759> processor<00:02:06.360> without<00:02:06.630> any<00:02:06.780> bus

00:02:07.010 --> 00:02:07.020 
the processor without any bus

00:02:07.020 --> 00:02:08.469 
the processor without any bus
contentions

00:02:08.469 --> 00:02:08.479 
contentions

00:02:08.479 --> 00:02:11.050 
contentions
so<00:02:09.110> again<00:02:09.379> the<00:02:09.500> processor<00:02:10.039> is<00:02:10.069> now<00:02:10.280> in<00:02:10.429> X<00:02:10.640> tests

00:02:11.050 --> 00:02:11.060 
so again the processor is now in X tests

00:02:11.060 --> 00:02:13.449 
so again the processor is now in X tests
with<00:02:11.150> all<00:02:11.269> of<00:02:11.390> its<00:02:11.510> lines<00:02:11.720> try<00:02:12.019> stated<00:02:12.500> the

00:02:13.449 --> 00:02:13.459 
with all of its lines try stated the

00:02:13.459 --> 00:02:16.089 
with all of its lines try stated the
custom<00:02:13.819> ASIC<00:02:14.120> is<00:02:14.239> also<00:02:14.599> an<00:02:14.690> ex<00:02:14.840> test<00:02:15.140> I<00:02:15.409> then

00:02:16.089 --> 00:02:16.099 
custom ASIC is also an ex test I then

00:02:16.099 --> 00:02:18.250 
custom ASIC is also an ex test I then
use<00:02:16.250> these<00:02:16.459> switches<00:02:16.760> to<00:02:17.360> drive<00:02:17.659> the<00:02:17.870> output

00:02:18.250 --> 00:02:18.260 
use these switches to drive the output

00:02:18.260 --> 00:02:20.350 
use these switches to drive the output
buffers<00:02:18.620> from<00:02:18.830> the<00:02:18.950> ASIC<00:02:19.340> into<00:02:20.090> the<00:02:20.209> input

00:02:20.350 --> 00:02:20.360 
buffers from the ASIC into the input

00:02:20.360 --> 00:02:22.300 
buffers from the ASIC into the input
buffers<00:02:20.870> in<00:02:21.019> the<00:02:21.200> processor<00:02:21.799> which<00:02:22.159> are

00:02:22.300 --> 00:02:22.310 
buffers in the processor which are

00:02:22.310 --> 00:02:24.580 
buffers in the processor which are
monitoring<00:02:22.730> with<00:02:22.879> these<00:02:23.000> red<00:02:23.209> LEDs<00:02:23.720> so<00:02:24.379> just

00:02:24.580 --> 00:02:24.590 
monitoring with these red LEDs so just

00:02:24.590 --> 00:02:26.380 
monitoring with these red LEDs so just
by<00:02:24.680> flipping<00:02:24.830> these<00:02:25.160> switches<00:02:25.430> I<00:02:25.790> can<00:02:26.269> do<00:02:26.360> a

00:02:26.380 --> 00:02:26.390 
by flipping these switches I can do a

00:02:26.390 --> 00:02:29.170 
by flipping these switches I can do a
very<00:02:26.780> quick<00:02:27.340> continuity<00:02:28.340> test<00:02:28.580> across<00:02:28.879> the

00:02:29.170 --> 00:02:29.180 
very quick continuity test across the

00:02:29.180 --> 00:02:31.390 
very quick continuity test across the
entire<00:02:29.540> data<00:02:29.870> bus<00:02:30.140> between<00:02:30.799> these<00:02:31.220> two

00:02:31.390 --> 00:02:31.400 
entire data bus between these two

00:02:31.400 --> 00:02:37.449 
entire data bus between these two
devices<00:02:34.900> just<00:02:35.900> like<00:02:36.110> that<00:02:36.349> this<00:02:37.040> other<00:02:37.220> Bank

00:02:37.449 --> 00:02:37.459 
devices just like that this other Bank

00:02:37.459 --> 00:02:38.830 
devices just like that this other Bank
of<00:02:37.579> switches<00:02:37.940> controls<00:02:38.299> the<00:02:38.420> tri-state

00:02:38.830 --> 00:02:38.840 
of switches controls the tri-state

00:02:38.840 --> 00:02:41.289 
of switches controls the tri-state
enables<00:02:39.290> if<00:02:39.650> I<00:02:39.769> take<00:02:39.980> one<00:02:40.129> off<00:02:40.280> line<00:02:40.549> then<00:02:41.180> of

00:02:41.289 --> 00:02:41.299 
enables if I take one off line then of

00:02:41.299 --> 00:02:44.440 
enables if I take one off line then of
course<00:02:41.329> I<00:02:41.810> get<00:02:42.709> in<00:02:42.769> a<00:02:42.829> response<00:02:43.220> put<00:02:44.209> it<00:02:44.299> back

00:02:44.440 --> 00:02:44.450 
course I get in a response put it back

00:02:44.450 --> 00:02:48.490 
course I get in a response put it back
on<00:02:44.480> line<00:02:44.660> and<00:02:45.200> now<00:02:45.920> the<00:02:45.980> bit<00:02:46.220> works<00:02:46.400> fine<00:02:47.500> to

00:02:48.490 --> 00:02:48.500 
on line and now the bit works fine to

00:02:48.500 --> 00:02:49.930 
on line and now the bit works fine to
test<00:02:48.680> the<00:02:48.829> address<00:02:49.190> bus<00:02:49.400> which<00:02:49.640> goes<00:02:49.819> the

00:02:49.930 --> 00:02:49.940 
test the address bus which goes the

00:02:49.940 --> 00:02:52.000 
test the address bus which goes the
other<00:02:50.090> way<00:02:50.329> from<00:02:50.720> the<00:02:50.810> processor<00:02:51.319> to<00:02:51.470> the<00:02:51.620> ASIC

00:02:52.000 --> 00:02:52.010 
other way from the processor to the ASIC

00:02:52.010 --> 00:02:54.640 
other way from the processor to the ASIC
I<00:02:52.220> just<00:02:52.879> take<00:02:53.000> the<00:02:53.150> ASIC<00:02:53.510> put<00:02:54.170> him<00:02:54.290> back<00:02:54.470> in

00:02:54.640 --> 00:02:54.650 
I just take the ASIC put him back in

00:02:54.650 --> 00:02:57.160 
I just take the ASIC put him back in
sample<00:02:54.980> preload<00:02:55.310> mode<00:02:55.579> take<00:02:56.420> the<00:02:56.540> processor

00:02:57.160 --> 00:02:57.170 
sample preload mode take the processor

00:02:57.170 --> 00:02:59.860 
sample preload mode take the processor
put<00:02:58.010> him<00:02:58.190> in<00:02:58.340> X<00:02:58.519> test<00:02:58.819> except<00:02:59.269> allow<00:02:59.569> him<00:02:59.750> to

00:02:59.860 --> 00:02:59.870 
put him in X test except allow him to

00:02:59.870 --> 00:03:02.619 
put him in X test except allow him to
use<00:02:59.900> the<00:03:00.230> switch<00:03:00.440> values<00:03:00.890> and<00:03:01.180> now<00:03:02.180> I<00:03:02.209> simply

00:03:02.619 --> 00:03:02.629 
use the switch values and now I simply

00:03:02.629 --> 00:03:05.369 
use the switch values and now I simply
enable<00:03:03.140> the<00:03:03.440> tri-states<00:03:04.010> on<00:03:04.190> the<00:03:04.310> address<00:03:04.640> bus

00:03:05.369 --> 00:03:05.379 
enable the tri-states on the address bus

00:03:05.379 --> 00:03:08.410 
enable the tri-states on the address bus
which<00:03:06.379> are<00:03:06.560> these<00:03:06.650> red<00:03:06.890> switches<00:03:07.160> here<00:03:07.640> the

00:03:08.410 --> 00:03:08.420 
which are these red switches here the

00:03:08.420 --> 00:03:10.059 
which are these red switches here the
second<00:03:08.810> column<00:03:08.959> of<00:03:09.170> red<00:03:09.319> switches<00:03:09.590> drives<00:03:09.950> the

00:03:10.059 --> 00:03:10.069 
second column of red switches drives the

00:03:10.069 --> 00:03:13.000 
second column of red switches drives the
output<00:03:10.430> buffers<00:03:10.790> the<00:03:11.660> red<00:03:11.810> LEDs<00:03:12.230> monitor<00:03:12.859> the

00:03:13.000 --> 00:03:13.010 
output buffers the red LEDs monitor the

00:03:13.010 --> 00:03:14.620 
output buffers the red LEDs monitor the
input<00:03:13.310> buffers<00:03:13.579> of<00:03:13.730> the<00:03:13.790> processor<00:03:14.389> and<00:03:14.599> the

00:03:14.620 --> 00:03:14.630 
input buffers of the processor and the

00:03:14.630 --> 00:03:16.539 
input buffers of the processor and the
green<00:03:15.230> LEDs<00:03:15.620> are<00:03:15.829> at<00:03:15.919> the<00:03:16.010> other<00:03:16.160> end<00:03:16.370> of<00:03:16.459> the

00:03:16.539 --> 00:03:16.549 
green LEDs are at the other end of the

00:03:16.549 --> 00:03:18.729 
green LEDs are at the other end of the
net<00:03:16.730> over<00:03:17.269> at<00:03:17.329> the<00:03:17.419> custom<00:03:17.720> ASIC<00:03:18.019> so<00:03:18.500> now<00:03:18.590> if<00:03:18.680> I

00:03:18.729 --> 00:03:18.739 
net over at the custom ASIC so now if I

00:03:18.739 --> 00:03:21.129 
net over at the custom ASIC so now if I
simply<00:03:19.040> drive<00:03:19.430> that<00:03:19.790> data<00:03:20.239> line<00:03:20.569> or<00:03:20.870> in<00:03:20.930> this

00:03:21.129 --> 00:03:21.139 
simply drive that data line or in this

00:03:21.139 --> 00:03:23.559 
simply drive that data line or in this
case<00:03:21.200> address<00:03:21.769> line<00:03:21.799> I<00:03:22.280> can<00:03:23.209> see<00:03:23.389> that<00:03:23.510> I

00:03:23.559 --> 00:03:23.569 
case address line I can see that I

00:03:23.569 --> 00:03:25.089 
case address line I can see that I
definitely<00:03:23.930> have<00:03:24.139> continuity<00:03:24.470> between<00:03:24.829> the

00:03:25.089 --> 00:03:25.099 
definitely have continuity between the

00:03:25.099 --> 00:03:26.800 
definitely have continuity between the
red<00:03:25.280> and<00:03:25.310> the<00:03:25.519> green<00:03:25.700> LEDs<00:03:26.150> which<00:03:26.540> means<00:03:26.720> I

00:03:26.800 --> 00:03:26.810 
red and the green LEDs which means I

00:03:26.810 --> 00:03:28.740 
red and the green LEDs which means I
have<00:03:26.840> continuity<00:03:27.200> at<00:03:27.470> both<00:03:27.650> ends<00:03:27.950> of<00:03:28.040> the<00:03:28.069> net

00:03:28.740 --> 00:03:28.750 
have continuity at both ends of the net

00:03:28.750 --> 00:03:31.300 
have continuity at both ends of the net
to<00:03:29.750> get<00:03:29.900> the<00:03:29.989> processor<00:03:30.440> back<00:03:30.590> online<00:03:30.620> I

00:03:31.300 --> 00:03:31.310 
to get the processor back online I

00:03:31.310 --> 00:03:33.370 
to get the processor back online I
simply<00:03:31.639> right<00:03:31.819> click<00:03:32.150> click<00:03:33.079> on<00:03:33.200> sample

00:03:33.370 --> 00:03:33.380 
simply right click click on sample

00:03:33.380 --> 00:03:36.039 
simply right click click on sample
preload<00:03:33.859> hit<00:03:34.459> OK<00:03:34.819> and<00:03:34.849> boom<00:03:35.569> we're<00:03:35.690> right<00:03:35.870> back

00:03:36.039 --> 00:03:36.049 
preload hit OK and boom we're right back

00:03:36.049 --> 00:03:37.750 
preload hit OK and boom we're right back
where<00:03:36.109> we<00:03:36.349> were<00:03:36.440> when<00:03:37.069> we<00:03:37.099> dropped<00:03:37.400> into<00:03:37.609> X

00:03:37.750 --> 00:03:37.760 
where we were when we dropped into X

00:03:37.760 --> 00:03:40.750 
where we were when we dropped into X
test<00:03:38.950> that's<00:03:39.950> really<00:03:40.160> all<00:03:40.310> there<00:03:40.340> is<00:03:40.489> to<00:03:40.730> it

00:03:40.750 --> 00:03:40.760 
test that's really all there is to it

00:03:40.760 --> 00:03:42.460 
test that's really all there is to it
you<00:03:41.299> just<00:03:41.510> drop<00:03:41.720> the<00:03:41.840> two<00:03:41.989> parts<00:03:42.290> on<00:03:42.380> the

00:03:42.460 --> 00:03:42.470 
you just drop the two parts on the

00:03:42.470 --> 00:03:45.460 
you just drop the two parts on the
screen<00:03:42.739> at<00:03:42.950> a<00:03:42.980> port<00:03:43.730> hits<00:03:44.180> can<00:03:44.510> you<00:03:45.139> then<00:03:45.319> add

00:03:45.460 --> 00:03:45.470 
screen at a port hits can you then add

00:03:45.470 --> 00:03:47.020 
screen at a port hits can you then add
virtual<00:03:45.919> switches<00:03:46.160> and<00:03:46.400> LEDs<00:03:46.730> till<00:03:46.940> your

00:03:47.020 --> 00:03:47.030 
virtual switches and LEDs till your

00:03:47.030 --> 00:03:48.819 
virtual switches and LEDs till your
heart's<00:03:47.209> content<00:03:47.359> and<00:03:47.780> you<00:03:48.049> can<00:03:48.200> now<00:03:48.349> see<00:03:48.380> and

00:03:48.819 --> 00:03:48.829 
heart's content and you can now see and

00:03:48.829 --> 00:03:51.659 
heart's content and you can now see and
control<00:03:49.190> every<00:03:49.790> pin<00:03:50.060> under<00:03:50.630> the<00:03:50.750> BGA<00:03:51.109> and

00:03:51.659 --> 00:03:51.669 
control every pin under the BGA and

00:03:51.669 --> 00:03:54.520 
control every pin under the BGA and
remember<00:03:52.669> this<00:03:53.000> works<00:03:53.419> if<00:03:53.660> the<00:03:53.780> part<00:03:54.079> is<00:03:54.169> blank

00:03:54.520 --> 00:03:54.530 
remember this works if the part is blank

00:03:54.530 --> 00:03:56.319 
remember this works if the part is blank
or<00:03:54.739> programmed<00:03:55.220> so<00:03:55.609> now<00:03:55.730> you<00:03:55.790> can<00:03:56.000> do<00:03:56.090> all<00:03:56.120> of

00:03:56.319 --> 00:03:56.329 
or programmed so now you can do all of

00:03:56.329 --> 00:03:58.180 
or programmed so now you can do all of
this<00:03:56.569> testing<00:03:56.810> on<00:03:57.169> a<00:03:57.200> board<00:03:57.560> that<00:03:57.680> just<00:03:58.040> came

00:03:58.180 --> 00:03:58.190 
this testing on a board that just came

00:03:58.190 --> 00:03:59.949 
this testing on a board that just came
from<00:03:58.280> the<00:03:58.400> factory<00:03:58.819> with<00:03:59.060> nothing<00:03:59.540> but<00:03:59.660> blank

00:03:59.949 --> 00:03:59.959 
from the factory with nothing but blank

00:03:59.959 --> 00:04:01.869 
from the factory with nothing but blank
parts<00:04:00.349> on<00:04:00.500> it<00:04:00.530> you<00:04:01.010> no<00:04:01.190> longer<00:04:01.340> have<00:04:01.609> to<00:04:01.730> wait

00:04:01.869 --> 00:04:01.879 
parts on it you no longer have to wait

00:04:01.879 --> 00:04:03.430 
parts on it you no longer have to wait
for<00:04:01.910> firmware<00:04:02.359> to<00:04:02.569> be<00:04:02.660> complete<00:04:03.049> to<00:04:03.230> start

00:04:03.430 --> 00:04:03.440 
for firmware to be complete to start

00:04:03.440 --> 00:04:06.280 
for firmware to be complete to start
checking<00:04:03.799> out<00:04:03.889> the<00:04:04.040> BGA<00:04:04.400> hardware<00:04:05.139> since<00:04:06.139> we

00:04:06.280 --> 00:04:06.290 
checking out the BGA hardware since we

00:04:06.290 --> 00:04:07.839 
checking out the BGA hardware since we
have<00:04:06.319> complete<00:04:06.769> control<00:04:06.889> over<00:04:07.160> every<00:04:07.579> pin<00:04:07.730> on

00:04:07.839 --> 00:04:07.849 
have complete control over every pin on

00:04:07.849 --> 00:04:10.300 
have complete control over every pin on
the<00:04:07.940> processor<00:04:08.540> we<00:04:09.079> can<00:04:09.319> now<00:04:09.560> drive<00:04:09.980> the

00:04:10.300 --> 00:04:10.310 
the processor we can now drive the

00:04:10.310 --> 00:04:12.189 
the processor we can now drive the
address<00:04:10.699> into<00:04:10.910> the<00:04:11.030> prom<00:04:11.359> and<00:04:11.389> watch<00:04:11.840> the<00:04:11.989> data

00:04:12.189 --> 00:04:12.199 
address into the prom and watch the data

00:04:12.199 --> 00:04:15.819 
address into the prom and watch the data
bus<00:04:12.440> come<00:04:12.680> out<00:04:12.889> we<00:04:13.879> can<00:04:14.060> drive<00:04:14.389> d2a<00:04:15.199> we<00:04:15.650> can

00:04:15.819 --> 00:04:15.829 
bus come out we can drive d2a we can

00:04:15.829 --> 00:04:17.709 
bus come out we can drive d2a we can
monitor<00:04:15.980> Nate<00:04:16.400> addy<00:04:16.609> anything<00:04:17.090> the<00:04:17.180> processor

00:04:17.709 --> 00:04:17.719 
monitor Nate addy anything the processor

00:04:17.719 --> 00:04:20.020 
monitor Nate addy anything the processor
would<00:04:17.870> normally<00:04:18.260> do<00:04:18.440> we<00:04:18.979> can<00:04:19.130> now<00:04:19.250> do<00:04:19.310> manually

00:04:20.020 --> 00:04:20.030 
would normally do we can now do manually

00:04:20.030 --> 00:04:20.819 
would normally do we can now do manually
to<00:04:20.269> test<00:04:20.510> out

00:04:20.819 --> 00:04:20.829 
to test out

00:04:20.829 --> 00:04:22.529 
to test out
hardware<00:04:21.159> on<00:04:21.220> the<00:04:21.340> board<00:04:21.579> again<00:04:22.030> before<00:04:22.240> the

00:04:22.529 --> 00:04:22.539 
hardware on the board again before the

00:04:22.539 --> 00:04:24.899 
hardware on the board again before the
firmware<00:04:22.900> is<00:04:23.020> complete<00:04:23.439> it's<00:04:24.220> easy<00:04:24.580> with

00:04:24.899 --> 00:04:24.909 
firmware is complete it's easy with

00:04:24.909 --> 00:04:27.750 
firmware is complete it's easy with
universal<00:04:25.539> scan

