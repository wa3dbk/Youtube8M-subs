WEBVTT
Kind: captions
Language: en

00:00:00.600 --> 00:00:03.169 

another<00:00:01.470> key<00:00:01.800> feature<00:00:02.070> of<00:00:02.340> all<00:00:02.639> programming

00:00:03.169 --> 00:00:03.179 
another key feature of all programming

00:00:03.179 --> 00:00:05.150 
another key feature of all programming
languages<00:00:03.690> is<00:00:03.929> some<00:00:04.410> way<00:00:04.649> of<00:00:04.919> running

00:00:05.150 --> 00:00:05.160 
languages is some way of running

00:00:05.160 --> 00:00:07.849 
languages is some way of running
sections<00:00:05.759> of<00:00:05.879> code<00:00:06.089> repeatedly<00:00:06.810> by<00:00:07.319> looping

00:00:07.849 --> 00:00:07.859 
sections of code repeatedly by looping

00:00:07.859 --> 00:00:09.920 
sections of code repeatedly by looping
through<00:00:08.160> certain<00:00:08.610> lines<00:00:08.850> of<00:00:09.060> code<00:00:09.300> according

00:00:09.920 --> 00:00:09.930 
through certain lines of code according

00:00:09.930 --> 00:00:11.750 
through certain lines of code according
to<00:00:09.960> some<00:00:10.230> rule<00:00:10.470> governing<00:00:11.010> how<00:00:11.250> many<00:00:11.430> times

00:00:11.750 --> 00:00:11.760 
to some rule governing how many times

00:00:11.760 --> 00:00:13.850 
to some rule governing how many times
and<00:00:12.150> under<00:00:12.600> what<00:00:12.750> conditions<00:00:12.780> they<00:00:13.560> should<00:00:13.740> be

00:00:13.850 --> 00:00:13.860 
and under what conditions they should be

00:00:13.860 --> 00:00:17.660 
and under what conditions they should be
run<00:00:14.100> using<00:00:15.439> loops<00:00:16.439> programs<00:00:17.100> can<00:00:17.310> perform

00:00:17.660 --> 00:00:17.670 
run using loops programs can perform

00:00:17.670 --> 00:00:20.330 
run using loops programs can perform
repetitive<00:00:18.240> work<00:00:18.480> very<00:00:18.930> quickly<00:00:19.110> and<00:00:19.590> loops

00:00:20.330 --> 00:00:20.340 
repetitive work very quickly and loops

00:00:20.340 --> 00:00:22.250 
repetitive work very quickly and loops
form<00:00:20.700> a<00:00:20.760> very<00:00:20.970> important<00:00:21.480> part<00:00:21.750> of<00:00:21.930> many

00:00:22.250 --> 00:00:22.260 
form a very important part of many

00:00:22.260 --> 00:00:25.910 
form a very important part of many
programming<00:00:22.860> tasks<00:00:23.490> in<00:00:24.390> this<00:00:25.140> video<00:00:25.530> we'll

00:00:25.910 --> 00:00:25.920 
programming tasks in this video we'll

00:00:25.920 --> 00:00:28.130 
programming tasks in this video we'll
look<00:00:26.070> at<00:00:26.250> two<00:00:26.430> types<00:00:26.460> of<00:00:26.970> loop<00:00:27.180> while<00:00:27.750> loops

00:00:28.130 --> 00:00:28.140 
look at two types of loop while loops

00:00:28.140 --> 00:00:32.749 
look at two types of loop while loops
and<00:00:28.440> for<00:00:28.860> loops<00:00:30.590> make<00:00:31.590> a<00:00:31.619> new<00:00:31.830> text<00:00:32.219> file<00:00:32.430> and

00:00:32.749 --> 00:00:32.759 
and for loops make a new text file and

00:00:32.759 --> 00:00:36.439 
and for loops make a new text file and
save<00:00:33.149> it<00:00:33.359> as<00:00:33.510> loops<00:00:34.170> PHP<00:00:35.069> again<00:00:35.760> in<00:00:35.999> the<00:00:36.179> PHP

00:00:36.439 --> 00:00:36.449 
save it as loops PHP again in the PHP

00:00:36.449 --> 00:00:42.529 
save it as loops PHP again in the PHP
demos<00:00:37.109> folder<00:00:38.479> inside<00:00:39.479> PHP<00:00:40.140> tags<00:00:40.440> type<00:00:41.539> dollar

00:00:42.529 --> 00:00:42.539 
demos folder inside PHP tags type dollar

00:00:42.539 --> 00:00:45.709 
demos folder inside PHP tags type dollar
count<00:00:42.929> equals<00:00:43.559> one<00:00:43.859> we've<00:00:44.729> just<00:00:45.059> assigned<00:00:45.510> the

00:00:45.709 --> 00:00:45.719 
count equals one we've just assigned the

00:00:45.719 --> 00:00:48.020 
count equals one we've just assigned the
value<00:00:46.050> of<00:00:46.229> one<00:00:46.440> to<00:00:46.889> a<00:00:46.920> variable<00:00:47.399> called<00:00:47.579> dollar

00:00:48.020 --> 00:00:48.030 
value of one to a variable called dollar

00:00:48.030 --> 00:00:49.450 
value of one to a variable called dollar
count

00:00:49.450 --> 00:00:49.460 
count

00:00:49.460 --> 00:00:52.959 
count
while<00:00:50.329> and<00:00:51.050> then<00:00:51.290> inside<00:00:51.590> parentheses<00:00:52.309> dollar

00:00:52.959 --> 00:00:52.969 
while and then inside parentheses dollar

00:00:52.969 --> 00:00:57.369 
while and then inside parentheses dollar
count<00:00:53.390> less<00:00:54.110> than<00:00:54.440> or<00:00:54.649> equal<00:00:55.070> to<00:00:55.280> ten<00:00:55.550> in<00:00:56.379> the

00:00:57.369 --> 00:00:57.379 
count less than or equal to ten in the

00:00:57.379 --> 00:01:00.700 
count less than or equal to ten in the
parentheses<00:00:58.180> open<00:00:59.180> curly<00:00:59.960> braces<00:01:00.170> which<00:01:00.559> will

00:01:00.700 --> 00:01:00.710 
parentheses open curly braces which will

00:01:00.710 --> 00:01:09.070 
parentheses open curly braces which will
auto<00:01:00.920> close<00:01:03.580> echo<00:01:04.840> dollar<00:01:05.840> count<00:01:07.030> and<00:01:08.030> then<00:01:08.960> it

00:01:09.070 --> 00:01:09.080 
auto close echo dollar count and then it

00:01:09.080 --> 00:01:10.420 
auto close echo dollar count and then it
concatenated<00:01:09.860> aughts

00:01:10.420 --> 00:01:10.430 
concatenated aughts

00:01:10.430 --> 00:01:13.060 
concatenated aughts
and<00:01:10.550> then<00:01:10.670> inside<00:01:11.119> double<00:01:11.690> quotes<00:01:11.960> an<00:01:12.320> HTML

00:01:13.060 --> 00:01:13.070 
and then inside double quotes an HTML

00:01:13.070 --> 00:01:15.820 
and then inside double quotes an HTML
line<00:01:13.460> break<00:01:13.790> tag<00:01:13.820> and<00:01:14.390> the<00:01:14.990> semicolon<00:01:15.470> at<00:01:15.800> the

00:01:15.820 --> 00:01:15.830 
line break tag and the semicolon at the

00:01:15.830 --> 00:01:21.070 
line break tag and the semicolon at the
end<00:01:17.229> and<00:01:18.490> on<00:01:19.490> the<00:01:19.729> line<00:01:19.909> after<00:01:20.300> that<00:01:20.330> dollar

00:01:21.070 --> 00:01:21.080 
end and on the line after that dollar

00:01:21.080 --> 00:01:25.749 
end and on the line after that dollar
count<00:01:21.440> equals<00:01:22.100> dollar<00:01:22.399> count<00:01:22.700> plus<00:01:23.119> one<00:01:24.759> what

00:01:25.749 --> 00:01:25.759 
count equals dollar count plus one what

00:01:25.759 --> 00:01:32.320 
count equals dollar count plus one what
do<00:01:25.910> you<00:01:26.000> think<00:01:26.240> this<00:01:26.390> does<00:01:30.580> it<00:01:31.580> prints<00:01:32.030> out<00:01:32.119> the

00:01:32.320 --> 00:01:32.330 
do you think this does it prints out the

00:01:32.330 --> 00:01:34.450 
do you think this does it prints out the
numbers<00:01:32.690> from<00:01:32.840> one<00:01:33.080> to<00:01:33.110> ten<00:01:33.289> with<00:01:33.860> line<00:01:34.130> breaks

00:01:34.450 --> 00:01:34.460 
numbers from one to ten with line breaks

00:01:34.460 --> 00:01:37.210 
numbers from one to ten with line breaks
in<00:01:34.670> between<00:01:35.320> going<00:01:36.320> through<00:01:36.649> it<00:01:36.770> line<00:01:36.979> by<00:01:37.009> line

00:01:37.210 --> 00:01:37.220 
in between going through it line by line

00:01:37.220 --> 00:01:39.669 
in between going through it line by line
first<00:01:38.000> we<00:01:38.270> assign<00:01:38.570> the<00:01:38.720> value<00:01:38.990> of<00:01:39.110> one<00:01:39.320> to<00:01:39.590> the

00:01:39.669 --> 00:01:39.679 
first we assign the value of one to the

00:01:39.679 --> 00:01:42.190 
first we assign the value of one to the
variable<00:01:40.130> dollar<00:01:40.399> count<00:01:40.729> then<00:01:41.630> we<00:01:41.810> start<00:01:42.140> the

00:01:42.190 --> 00:01:42.200 
variable dollar count then we start the

00:01:42.200 --> 00:01:44.590 
variable dollar count then we start the
loop<00:01:42.440> to<00:01:43.039> run<00:01:43.250> while<00:01:43.789> the<00:01:44.030> variable<00:01:44.479> dollar

00:01:44.590 --> 00:01:44.600 
loop to run while the variable dollar

00:01:44.600 --> 00:01:47.649 
loop to run while the variable dollar
count<00:01:44.960> is<00:01:45.200> less<00:01:45.560> than<00:01:45.800> or<00:01:45.979> equal<00:01:46.070> to<00:01:46.429> ten<00:01:46.759> so

00:01:47.649 --> 00:01:47.659 
count is less than or equal to ten so

00:01:47.659 --> 00:01:49.450 
count is less than or equal to ten so
the<00:01:47.780> code<00:01:47.990> inside<00:01:48.500> the<00:01:48.649> braces<00:01:48.890> will<00:01:49.250> run

00:01:49.450 --> 00:01:49.460 
the code inside the braces will run

00:01:49.460 --> 00:01:51.730 
the code inside the braces will run
while<00:01:49.940> dollar<00:01:50.210> count<00:01:50.539> is<00:01:50.990> less<00:01:51.259> than<00:01:51.500> equal<00:01:51.710> to

00:01:51.730 --> 00:01:51.740 
while dollar count is less than equal to

00:01:51.740 --> 00:01:54.249 
while dollar count is less than equal to
ten<00:01:52.069> and<00:01:52.250> it<00:01:52.850> will<00:01:53.000> not<00:01:53.179> run<00:01:53.420> once<00:01:53.899> he<00:01:54.049> gets

00:01:54.249 --> 00:01:54.259 
ten and it will not run once he gets

00:01:54.259 --> 00:01:59.200 
ten and it will not run once he gets
above<00:01:54.560> that<00:01:56.680> inside<00:01:57.680> the<00:01:57.829> curly<00:01:58.130> braces<00:01:58.369> first

00:01:59.200 --> 00:01:59.210 
above that inside the curly braces first

00:01:59.210 --> 00:02:01.450 
above that inside the curly braces first
of<00:01:59.390> all<00:01:59.570> we<00:02:00.020> echo<00:02:00.500> out<00:02:00.530> the<00:02:00.829> value<00:02:00.860> of<00:02:01.220> count

00:02:01.450 --> 00:02:01.460 
of all we echo out the value of count

00:02:01.460 --> 00:02:07.179 
of all we echo out the value of count
with<00:02:02.030> that<00:02:02.210> line<00:02:02.450> break<00:02:04.630> then<00:02:05.630> we<00:02:06.110> add<00:02:06.290> 1<00:02:06.649> to

00:02:07.179 --> 00:02:07.189 
with that line break then we add 1 to

00:02:07.189 --> 00:02:09.370 
with that line break then we add 1 to
the<00:02:07.280> value<00:02:07.310> of<00:02:07.700> dollar<00:02:07.909> count<00:02:08.269> using<00:02:08.869> dollar

00:02:09.370 --> 00:02:09.380 
the value of dollar count using dollar

00:02:09.380 --> 00:02:13.600 
the value of dollar count using dollar
count<00:02:09.649> equals<00:02:10.340> itself<00:02:10.880> plus<00:02:11.209> one<00:02:12.459> so<00:02:13.459> the

00:02:13.600 --> 00:02:13.610 
count equals itself plus one so the

00:02:13.610 --> 00:02:15.190 
count equals itself plus one so the
first<00:02:13.850> time<00:02:14.090> through<00:02:14.360> dollar<00:02:14.570> count<00:02:14.810> is<00:02:14.989> one

00:02:15.190 --> 00:02:15.200 
first time through dollar count is one

00:02:15.200 --> 00:02:17.530 
first time through dollar count is one
because<00:02:15.560> it's<00:02:15.739> set<00:02:15.920> here<00:02:16.160> and<00:02:16.730> one<00:02:17.060> is<00:02:17.209> printed

00:02:17.530 --> 00:02:17.540 
because it's set here and one is printed

00:02:17.540 --> 00:02:20.680 
because it's set here and one is printed
out<00:02:17.799> followed<00:02:18.799> by<00:02:18.829> a<00:02:18.950> line<00:02:19.190> break<00:02:19.600> using<00:02:20.600> the

00:02:20.680 --> 00:02:20.690 
out followed by a line break using the

00:02:20.690 --> 00:02:23.650 
out followed by a line break using the
concatenate<00:02:21.040> includes<00:02:22.040> about<00:02:22.390> dollar<00:02:23.390> count

00:02:23.650 --> 00:02:23.660 
concatenate includes about dollar count

00:02:23.660 --> 00:02:26.530 
concatenate includes about dollar count
has<00:02:23.840> one<00:02:24.079> added<00:02:24.500> to<00:02:24.680> it<00:02:24.799> and<00:02:24.950> becomes<00:02:25.280> two<00:02:25.610> the

00:02:26.530 --> 00:02:26.540 
has one added to it and becomes two the

00:02:26.540 --> 00:02:28.210 
has one added to it and becomes two the
while<00:02:26.720> condition<00:02:26.870> is<00:02:27.320> still<00:02:27.530> true<00:02:27.799> so<00:02:27.980> it<00:02:28.100> runs

00:02:28.210 --> 00:02:28.220 
while condition is still true so it runs

00:02:28.220 --> 00:02:30.850 
while condition is still true so it runs
again<00:02:28.610> prints<00:02:28.970> out<00:02:29.180> two<00:02:29.450> as<00:02:29.690> one<00:02:30.260> to<00:02:30.440> the<00:02:30.530> value

00:02:30.850 --> 00:02:30.860 
again prints out two as one to the value

00:02:30.860 --> 00:02:33.490 
again prints out two as one to the value
of<00:02:30.920> dollar<00:02:31.070> count<00:02:31.400> again<00:02:31.670> and<00:02:31.880> so<00:02:32.060> on<00:02:32.500> this

00:02:33.490 --> 00:02:33.500 
of dollar count again and so on this

00:02:33.500 --> 00:02:35.110 
of dollar count again and so on this
continues<00:02:34.130> until<00:02:34.340> the<00:02:34.640> value<00:02:34.880> of<00:02:34.970> dollar

00:02:35.110 --> 00:02:35.120 
continues until the value of dollar

00:02:35.120 --> 00:02:38.259 
continues until the value of dollar
count<00:02:35.420> is<00:02:35.570> ten<00:02:35.870> the<00:02:36.109> loop<00:02:36.890> runs<00:02:37.400> one<00:02:37.670> last<00:02:37.910> time

00:02:38.259 --> 00:02:38.269 
count is ten the loop runs one last time

00:02:38.269 --> 00:02:40.569 
count is ten the loop runs one last time
and<00:02:38.480> that's<00:02:38.600> one<00:02:38.930> to<00:02:39.140> make<00:02:39.290> dollar<00:02:39.500> count<00:02:39.799> 11

00:02:40.569 --> 00:02:40.579 
and that's one to make dollar count 11

00:02:40.579 --> 00:02:42.160 
and that's one to make dollar count 11
at<00:02:40.850> which<00:02:41.030> point<00:02:41.329> the<00:02:41.420> condition<00:02:41.870> is<00:02:42.019> no

00:02:42.160 --> 00:02:42.170 
at which point the condition is no

00:02:42.170 --> 00:02:45.819 
at which point the condition is no
longer<00:02:42.200> true<00:02:42.500> so<00:02:43.100> the<00:02:43.280> loop<00:02:43.459> stops<00:02:44.829> it's

00:02:45.819 --> 00:02:45.829 
longer true so the loop stops it's

00:02:45.829 --> 00:02:47.530 
longer true so the loop stops it's
common<00:02:46.310> to<00:02:46.459> change<00:02:46.730> the<00:02:46.910> incrementing

00:02:47.530 --> 00:02:47.540 
common to change the incrementing

00:02:47.540 --> 00:02:49.780 
common to change the incrementing
function<00:02:48.019> dollar<00:02:48.380> count<00:02:48.739> equals<00:02:49.250> count<00:02:49.280> plus

00:02:49.780 --> 00:02:49.790 
function dollar count equals count plus

00:02:49.790 --> 00:02:52.750 
function dollar count equals count plus
one<00:02:50.299> to<00:02:50.720> a<00:02:50.750> shorthand<00:02:51.320> version<00:02:51.459> dollar<00:02:52.459> count

00:02:52.750 --> 00:02:52.760 
one to a shorthand version dollar count

00:02:52.760 --> 00:02:54.759 
one to a shorthand version dollar count
plus<00:02:53.060> plus<00:02:53.090> which<00:02:53.959> does<00:02:54.170> exactly<00:02:54.440> the<00:02:54.709> same

00:02:54.759 --> 00:02:54.769 
plus plus which does exactly the same

00:02:54.769 --> 00:02:58.990 
plus plus which does exactly the same
thing<00:02:55.930> that's<00:02:56.930> the<00:02:57.290> while<00:02:57.500> loop<00:02:57.799> the<00:02:58.430> for<00:02:58.699> loop

00:02:58.990 --> 00:02:59.000 
thing that's the while loop the for loop

00:02:59.000 --> 00:03:00.910 
thing that's the while loop the for loop
is<00:02:59.209> a<00:02:59.239> refinement<00:02:59.690> of<00:02:59.930> the<00:02:59.989> while<00:03:00.230> loop

00:03:00.910 --> 00:03:00.920 
is a refinement of the while loop

00:03:00.920 --> 00:03:03.580 
is a refinement of the while loop
it<00:03:01.370> removes<00:03:01.880> the<00:03:02.090> need<00:03:02.240> for<00:03:02.480> the<00:03:03.050> count<00:03:03.290> number

00:03:03.580 --> 00:03:03.590 
it removes the need for the count number

00:03:03.590 --> 00:03:05.860 
it removes the need for the count number
to<00:03:03.709> be<00:03:03.830> incremented<00:03:04.040> manually<00:03:04.819> each<00:03:04.940> time<00:03:05.270> but

00:03:05.860 --> 00:03:05.870 
to be incremented manually each time but

00:03:05.870 --> 00:03:07.240 
to be incremented manually each time but
the<00:03:05.959> code<00:03:06.140> in<00:03:06.290> the<00:03:06.380> condition<00:03:06.800> is<00:03:06.920> a<00:03:06.950> bit<00:03:07.099> more

00:03:07.240 --> 00:03:07.250 
the code in the condition is a bit more

00:03:07.250 --> 00:03:12.339 
the code in the condition is a bit more
involved<00:03:08.230> type<00:03:09.230> in<00:03:09.470> for<00:03:10.720> parentheses<00:03:11.750> dollar

00:03:12.339 --> 00:03:12.349 
involved type in for parentheses dollar

00:03:12.349 --> 00:03:15.729 
involved type in for parentheses dollar
count<00:03:12.620> equals<00:03:13.040> one<00:03:13.569> semicolon<00:03:14.569> dollar<00:03:15.410> count

00:03:15.729 --> 00:03:15.739 
count equals one semicolon dollar count

00:03:15.739 --> 00:03:18.120 
count equals one semicolon dollar count
less<00:03:16.069> than<00:03:16.310> or<00:03:16.430> equal<00:03:16.459> to<00:03:16.849> ten<00:03:17.120> semicolon

00:03:18.120 --> 00:03:18.130 
less than or equal to ten semicolon

00:03:18.130 --> 00:03:22.540 
less than or equal to ten semicolon
dollar<00:03:19.130> count<00:03:19.459> plus<00:03:19.970> plus<00:03:20.860> then<00:03:21.860> inside<00:03:22.400> the

00:03:22.540 --> 00:03:22.550 
dollar count plus plus then inside the

00:03:22.550 --> 00:03:23.790 
dollar count plus plus then inside the
curly<00:03:22.760> braces

00:03:23.790 --> 00:03:23.800 
curly braces

00:03:23.800 --> 00:03:27.850 
curly braces
HECO<00:03:24.800> dollar<00:03:25.370> count<00:03:26.319> concatenated<00:03:27.319> dot<00:03:27.590> and

00:03:27.850 --> 00:03:27.860 
HECO dollar count concatenated dot and

00:03:27.860 --> 00:03:31.360 
HECO dollar count concatenated dot and
then<00:03:28.550> HTML<00:03:29.269> line<00:03:29.660> break<00:03:29.959> tag<00:03:29.989> inside<00:03:30.980> double

00:03:31.360 --> 00:03:31.370 
then HTML line break tag inside double

00:03:31.370 --> 00:03:35.110 
then HTML line break tag inside double
quotes<00:03:32.620> this<00:03:33.620> does<00:03:33.920> exactly<00:03:34.370> the<00:03:34.670> same<00:03:34.850> thing

00:03:35.110 --> 00:03:35.120 
quotes this does exactly the same thing

00:03:35.120 --> 00:03:37.449 
quotes this does exactly the same thing
as<00:03:35.239> the<00:03:35.360> while<00:03:35.540> loop<00:03:35.840> that<00:03:36.650> it<00:03:36.920> sets<00:03:37.280> the

00:03:37.449 --> 00:03:37.459 
as the while loop that it sets the

00:03:37.459 --> 00:03:39.160 
as the while loop that it sets the
initial<00:03:37.910> value<00:03:38.180> of<00:03:38.239> dollar<00:03:38.420> count<00:03:38.780> the

00:03:39.160 --> 00:03:39.170 
initial value of dollar count the

00:03:39.170 --> 00:03:41.320 
initial value of dollar count the
maximum<00:03:39.799> value<00:03:40.069> of<00:03:40.130> dollar<00:03:40.340> count<00:03:40.640> and<00:03:40.910> the

00:03:41.320 --> 00:03:41.330 
maximum value of dollar count and the

00:03:41.330 --> 00:03:43.360 
maximum value of dollar count and the
amount<00:03:41.630> to<00:03:41.780> increment<00:03:42.140> it<00:03:42.440> by<00:03:42.620> each<00:03:42.860> time<00:03:43.220> the

00:03:43.360 --> 00:03:43.370 
amount to increment it by each time the

00:03:43.370 --> 00:03:46.930 
amount to increment it by each time the
loop<00:03:43.519> runs<00:03:43.850> or<00:03:44.299> in<00:03:44.930> the<00:03:45.049> condition<00:03:45.940> notice

00:03:46.930 --> 00:03:46.940 
loop runs or in the condition notice

00:03:46.940 --> 00:03:48.400 
loop runs or in the condition notice
that<00:03:47.090> the<00:03:47.209> three<00:03:47.420> parts<00:03:47.780> of<00:03:47.840> the<00:03:47.930> condition

00:03:48.400 --> 00:03:48.410 
that the three parts of the condition

00:03:48.410 --> 00:03:50.620 
that the three parts of the condition
the<00:03:48.620> initial<00:03:48.769> value<00:03:49.340> the<00:03:49.640> final<00:03:50.030> value<00:03:50.390> and

00:03:50.620 --> 00:03:50.630 
the initial value the final value and

00:03:50.630 --> 00:03:53.140 
the initial value the final value and
the<00:03:50.750> increment<00:03:51.200> value<00:03:51.590> must<00:03:52.340> occur<00:03:52.760> in<00:03:52.970> this

00:03:53.140 --> 00:03:53.150 
the increment value must occur in this

00:03:53.150 --> 00:03:55.210 
the increment value must occur in this
order<00:03:53.540> and<00:03:53.660> must<00:03:54.319> be<00:03:54.410> separated<00:03:54.950> by

00:03:55.210 --> 00:03:55.220 
order and must be separated by

00:03:55.220 --> 00:03:58.720 
order and must be separated by
semicolons<00:03:56.530> we<00:03:57.530> will<00:03:57.709> use<00:03:57.890> both<00:03:58.130> for<00:03:58.489> and

00:03:58.720 --> 00:03:58.730 
semicolons we will use both for and

00:03:58.730 --> 00:04:00.640 
semicolons we will use both for and
while<00:03:59.030> loops<00:03:59.330> in<00:03:59.660> our<00:03:59.780> project<00:04:00.200> to<00:04:00.290> display

00:04:00.640 --> 00:04:00.650 
while loops in our project to display

00:04:00.650 --> 00:04:02.710 
while loops in our project to display
data

00:04:02.710 --> 00:04:02.720 
data

00:04:02.720 --> 00:04:05.180 
data
your<00:04:03.720> assignment<00:04:04.320> this<00:04:04.410> time<00:04:04.710> is<00:04:04.920> a<00:04:04.950> bit

00:04:05.180 --> 00:04:05.190 
your assignment this time is a bit

00:04:05.190 --> 00:04:07.760 
your assignment this time is a bit
trickier<00:04:05.670> to<00:04:06.450> print<00:04:06.750> out<00:04:06.990> a<00:04:07.290> block<00:04:07.590> of

00:04:07.760 --> 00:04:07.770 
trickier to print out a block of

00:04:07.770 --> 00:04:11.840 
trickier to print out a block of
asterisks<00:04:08.640> like<00:04:08.910> this<00:04:09.890> twenty<00:04:10.890> columns<00:04:11.370> wide

00:04:11.840 --> 00:04:11.850 
asterisks like this twenty columns wide

00:04:11.850 --> 00:04:14.960 
asterisks like this twenty columns wide
and<00:04:12.270> ten<00:04:12.660> rows<00:04:12.990> high<00:04:13.380> using<00:04:14.100> loops<00:04:14.670> are<00:04:14.940> the

00:04:14.960 --> 00:04:14.970 
and ten rows high using loops are the

00:04:14.970 --> 00:04:16.940 
and ten rows high using loops are the
four<00:04:15.270> loops<00:04:15.510> or<00:04:15.750> while<00:04:15.930> loops<00:04:16.290> whichever<00:04:16.799> you

00:04:16.940 --> 00:04:16.950 
four loops or while loops whichever you

00:04:16.950 --> 00:04:19.280 
four loops or while loops whichever you
prefer<00:04:17.360> this<00:04:18.360> is<00:04:18.570> going<00:04:18.750> to<00:04:18.810> take<00:04:18.989> a<00:04:19.019> little

00:04:19.280 --> 00:04:19.290 
prefer this is going to take a little

00:04:19.290 --> 00:04:20.840 
prefer this is going to take a little
bit<00:04:19.440> more<00:04:19.500> programming<00:04:20.130> thought<00:04:20.519> than<00:04:20.730> your

00:04:20.840 --> 00:04:20.850 
bit more programming thought than your

00:04:20.850 --> 00:04:22.970 
bit more programming thought than your
previous<00:04:21.269> assignments<00:04:21.989> so<00:04:22.440> we'll<00:04:22.620> see<00:04:22.800> how

00:04:22.970 --> 00:04:22.980 
previous assignments so we'll see how

00:04:22.980 --> 00:04:26.030 
previous assignments so we'll see how
you<00:04:23.040> do<00:04:23.400> and<00:04:23.720> the<00:04:24.720> answer<00:04:24.750> as<00:04:25.080> always<00:04:25.560> is<00:04:25.770> in

00:04:26.030 --> 00:04:26.040 
you do and the answer as always is in

00:04:26.040 --> 00:04:28.430 
you do and the answer as always is in
the<00:04:26.160> working<00:04:26.340> files<00:04:26.960> entitled<00:04:27.960> block<00:04:28.260> of

00:04:28.430 --> 00:04:28.440 
the working files entitled block of

00:04:28.440 --> 00:04:32.060 
the working files entitled block of
asterisks<00:04:29.190> PHP

