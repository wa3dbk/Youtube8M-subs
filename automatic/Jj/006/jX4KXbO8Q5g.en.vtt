WEBVTT
Kind: captions
Language: en

00:00:10.280 --> 00:00:13.310 

so<00:00:11.280> in<00:00:11.400> this<00:00:11.550> video<00:00:11.910> I<00:00:12.150> would<00:00:12.210> like<00:00:12.450> to<00:00:12.630> talk<00:00:13.049> a

00:00:13.310 --> 00:00:13.320 
so in this video I would like to talk a

00:00:13.320 --> 00:00:15.829 
so in this video I would like to talk a
little<00:00:13.679> bit<00:00:13.920> about<00:00:14.219> my<00:00:14.519> flickering<00:00:15.150> LED<00:00:15.360> light

00:00:15.829 --> 00:00:15.839 
little bit about my flickering LED light

00:00:15.839 --> 00:00:18.050 
little bit about my flickering LED light
that<00:00:16.199> I<00:00:16.230> whipped<00:00:16.980> together<00:00:17.100> quick<00:00:17.699> and<00:00:17.880> dirty

00:00:18.050 --> 00:00:18.060 
that I whipped together quick and dirty

00:00:18.060 --> 00:00:21.500 
that I whipped together quick and dirty
for<00:00:18.510> Halloween<00:00:19.250> it<00:00:20.250> basically<00:00:20.550> consists<00:00:21.390> only

00:00:21.500 --> 00:00:21.510 
for Halloween it basically consists only

00:00:21.510 --> 00:00:25.070 
for Halloween it basically consists only
of<00:00:21.660> four<00:00:22.020> parts<00:00:22.730> batteries<00:00:23.730> for<00:00:24.660> triple-a

00:00:25.070 --> 00:00:25.080 
of four parts batteries for triple-a

00:00:25.080 --> 00:00:28.339 
of four parts batteries for triple-a
batteries<00:00:25.590> I<00:00:25.910> select<00:00:26.910> those<00:00:27.119> that<00:00:27.660> aren't

00:00:28.339 --> 00:00:28.349 
batteries I select those that aren't

00:00:28.349 --> 00:00:30.349 
batteries I select those that aren't
usable<00:00:28.859> for<00:00:29.010> other<00:00:29.130> purposes<00:00:29.400> anymore

00:00:30.349 --> 00:00:30.359 
usable for other purposes anymore

00:00:30.359 --> 00:00:33.500 
usable for other purposes anymore
because<00:00:31.320> they're<00:00:31.710> too<00:00:31.920> weak<00:00:31.949> and<00:00:32.340> I<00:00:32.460> tend<00:00:33.420> to

00:00:33.500 --> 00:00:33.510 
because they're too weak and I tend to

00:00:33.510 --> 00:00:36.530 
because they're too weak and I tend to
keep<00:00:33.750> those<00:00:34.050> for<00:00:34.920> purposes<00:00:35.460> like<00:00:35.640> this<00:00:35.910> which

00:00:36.530 --> 00:00:36.540 
keep those for purposes like this which

00:00:36.540 --> 00:00:40.940 
keep those for purposes like this which
is<00:00:36.840> very<00:00:37.170> low<00:00:37.350> power<00:00:38.270> it's<00:00:39.270> an<00:00:39.600> 80<00:00:39.930> tiny<00:00:40.379> 13

00:00:40.940 --> 00:00:40.950 
is very low power it's an 80 tiny 13

00:00:40.950 --> 00:00:43.430 
is very low power it's an 80 tiny 13
microcontroller<00:00:41.820> with<00:00:42.660> a<00:00:42.690> very<00:00:43.050> minimal

00:00:43.430 --> 00:00:43.440 
microcontroller with a very minimal

00:00:43.440 --> 00:00:47.779 
microcontroller with a very minimal
program<00:00:43.920> and<00:00:44.420> a<00:00:45.420> eight<00:00:45.870> millimeter<00:00:46.550> LED<00:00:47.550> that

00:00:47.779 --> 00:00:47.789 
program and a eight millimeter LED that

00:00:47.789 --> 00:00:50.660 
program and a eight millimeter LED that
is<00:00:47.910> ultra<00:00:48.270> bright<00:00:48.480> red<00:00:48.840> and<00:00:49.079> a<00:00:49.289> 680<00:00:50.129> ohms

00:00:50.660 --> 00:00:50.670 
is ultra bright red and a 680 ohms

00:00:50.670 --> 00:00:53.560 
is ultra bright red and a 680 ohms
resistor<00:00:51.449> so<00:00:51.629> that's<00:00:52.410> pretty<00:00:52.680> much<00:00:52.829> it<00:00:52.890> and

00:00:53.560 --> 00:00:53.570 
resistor so that's pretty much it and

00:00:53.570 --> 00:00:56.410 
resistor so that's pretty much it and
I'm<00:00:54.570> going<00:00:54.870> to<00:00:54.899> talk<00:00:55.199> a<00:00:55.230> little<00:00:55.410> bit<00:00:55.620> about<00:00:55.949> the

00:00:56.410 --> 00:00:56.420 
I'm going to talk a little bit about the

00:00:56.420 --> 00:00:59.540 
I'm going to talk a little bit about the
linear<00:00:57.420> congruential<00:00:57.690> generator<00:00:58.190> that<00:00:59.190> I<00:00:59.250> use

00:00:59.540 --> 00:00:59.550 
linear congruential generator that I use

00:00:59.550 --> 00:01:01.549 
linear congruential generator that I use
for<00:00:59.579> the<00:01:00.090> pseudo-random<00:01:00.559> flickering

00:01:01.549 --> 00:01:01.559 
for the pseudo-random flickering

00:01:01.559 --> 00:01:05.210 
for the pseudo-random flickering
function<00:01:03.049> so<00:01:04.049> the<00:01:04.379> principle<00:01:04.769> of<00:01:04.949> operation

00:01:05.210 --> 00:01:05.220 
function so the principle of operation

00:01:05.220 --> 00:01:08.240 
function so the principle of operation
is<00:01:05.760> that<00:01:06.090> we<00:01:06.360> have<00:01:06.600> an<00:01:06.750> 8-bit<00:01:07.409> pseudo-random

00:01:08.240 --> 00:01:08.250 
is that we have an 8-bit pseudo-random

00:01:08.250 --> 00:01:09.859 
is that we have an 8-bit pseudo-random
generator<00:01:08.790> a<00:01:08.939> linear<00:01:09.570> congruential

00:01:09.859 --> 00:01:09.869 
generator a linear congruential

00:01:09.869 --> 00:01:12.910 
generator a linear congruential
generator<00:01:10.640> inside<00:01:11.640> the<00:01:11.700> microcontroller<00:01:12.570> and

00:01:12.910 --> 00:01:12.920 
generator inside the microcontroller and

00:01:12.920 --> 00:01:16.399 
generator inside the microcontroller and
it<00:01:13.920> continues<00:01:14.610> to<00:01:14.970> generate<00:01:15.200> random<00:01:16.200> numbers

00:01:16.399 --> 00:01:16.409 
it continues to generate random numbers

00:01:16.409 --> 00:01:18.620 
it continues to generate random numbers
and<00:01:17.070> if<00:01:17.189> the<00:01:17.340> random<00:01:17.790> number<00:01:17.939> which<00:01:18.450> is

00:01:18.620 --> 00:01:18.630 
and if the random number which is

00:01:18.630 --> 00:01:23.120 
and if the random number which is
between<00:01:18.960> 0<00:01:19.409> and<00:01:19.710> 255<00:01:20.159> so<00:01:20.850> 8-bit<00:01:21.500> is<00:01:22.500> below<00:01:23.100> a

00:01:23.120 --> 00:01:23.130 
between 0 and 255 so 8-bit is below a

00:01:23.130 --> 00:01:25.999 
between 0 and 255 so 8-bit is below a
certain<00:01:23.580> threshold<00:01:23.759> it<00:01:24.600> turns<00:01:25.200> off<00:01:25.409> the<00:01:25.680> LED

00:01:25.999 --> 00:01:26.009 
certain threshold it turns off the LED

00:01:26.009 --> 00:01:28.969 
certain threshold it turns off the LED
for<00:01:26.490> I<00:01:26.520> think<00:01:26.850> 100<00:01:27.360> milliseconds<00:01:27.720> and<00:01:28.140> it's

00:01:28.969 --> 00:01:28.979 
for I think 100 milliseconds and it's

00:01:28.979 --> 00:01:31.219 
for I think 100 milliseconds and it's
above<00:01:29.310> it<00:01:29.579> turns<00:01:29.880> it<00:01:30.000> on<00:01:30.119> for<00:01:30.840> 100

00:01:31.219 --> 00:01:31.229 
above it turns it on for 100

00:01:31.229 --> 00:01:33.050 
above it turns it on for 100
milliseconds<00:01:31.860> and<00:01:32.250> this<00:01:32.310> goes<00:01:32.610> on<00:01:32.790> and<00:01:33.000> on

00:01:33.050 --> 00:01:33.060 
milliseconds and this goes on and on

00:01:33.060 --> 00:01:36.020 
milliseconds and this goes on and on
forever<00:01:33.270> and<00:01:34.130> since<00:01:35.130> I<00:01:35.340> use<00:01:35.579> a<00:01:35.610> linear

00:01:36.020 --> 00:01:36.030 
forever and since I use a linear

00:01:36.030 --> 00:01:38.569 
forever and since I use a linear
congruential<00:01:36.329> generator<00:01:36.979> with<00:01:37.979> a<00:01:38.009> maximum

00:01:38.569 --> 00:01:38.579 
congruential generator with a maximum

00:01:38.579 --> 00:01:41.210 
congruential generator with a maximum
period<00:01:38.970> which<00:01:39.329> means<00:01:39.570> it<00:01:39.750> generates<00:01:40.140> all<00:01:40.380> 256

00:01:41.210 --> 00:01:41.220 
period which means it generates all 256

00:01:41.220 --> 00:01:45.109 
period which means it generates all 256
combinations<00:01:42.180> after<00:01:42.570> each<00:01:42.659> other<00:01:42.899> I<00:01:43.880> can<00:01:44.880> vary

00:01:45.109 --> 00:01:45.119 
combinations after each other I can vary

00:01:45.119 --> 00:01:48.380 
combinations after each other I can vary
the<00:01:45.240> amount<00:01:45.659> of<00:01:45.990> flickering<00:01:46.350> by<00:01:47.210> changing<00:01:48.210> the

00:01:48.380 --> 00:01:48.390 
the amount of flickering by changing the

00:01:48.390 --> 00:01:51.289 
the amount of flickering by changing the
threshold<00:01:49.130> to<00:01:50.130> explain<00:01:50.490> the<00:01:50.640> program<00:01:50.850> better

00:01:51.289 --> 00:01:51.299 
threshold to explain the program better

00:01:51.299 --> 00:01:53.060 
threshold to explain the program better
I<00:01:51.479> think<00:01:51.659> it's<00:01:51.960> best<00:01:52.170> if<00:01:52.320> we<00:01:52.380> jump<00:01:52.680> right<00:01:52.890> in

00:01:53.060 --> 00:01:53.070 
I think it's best if we jump right in

00:01:53.070 --> 00:01:55.730 
I think it's best if we jump right in
you<00:01:53.610> see<00:01:53.909> that<00:01:54.090> it's<00:01:54.360> really<00:01:54.780> simple<00:01:55.079> and<00:01:55.409> it

00:01:55.730 --> 00:01:55.740 
you see that it's really simple and it

00:01:55.740 --> 00:01:58.160 
you see that it's really simple and it
pretty<00:01:56.009> much<00:01:56.100> does<00:01:56.430> only<00:01:56.759> one<00:01:56.939> thing<00:01:57.240> it<00:01:57.750> goes

00:01:58.160 --> 00:01:58.170 
pretty much does only one thing it goes

00:01:58.170 --> 00:02:01.280 
pretty much does only one thing it goes
into<00:01:58.500> an<00:01:58.920> infinite<00:01:59.280> loop<00:01:59.460> here<00:01:59.939> and<00:02:00.290> generates

00:02:01.280 --> 00:02:01.290 
into an infinite loop here and generates

00:02:01.290 --> 00:02:03.310 
into an infinite loop here and generates
pseudo-random<00:02:01.950> numbers<00:02:02.460> all<00:02:02.640> the<00:02:02.759> time<00:02:03.030> and

00:02:03.310 --> 00:02:03.320 
pseudo-random numbers all the time and

00:02:03.320 --> 00:02:06.050 
pseudo-random numbers all the time and
then<00:02:04.320> it<00:02:04.500> checks<00:02:04.740> if<00:02:05.070> this<00:02:05.280> pseudo<00:02:05.759> random

00:02:06.050 --> 00:02:06.060 
then it checks if this pseudo random

00:02:06.060 --> 00:02:09.229 
then it checks if this pseudo random
number<00:02:06.090> that<00:02:06.540> it's<00:02:06.689> has<00:02:07.020> generated<00:02:07.500> is<00:02:08.239> above

00:02:09.229 --> 00:02:09.239 
number that it's has generated is above

00:02:09.239 --> 00:02:12.589 
number that it's has generated is above
or<00:02:09.450> below<00:02:09.599> the<00:02:09.959> threshold<00:02:10.229> of<00:02:10.770> 50<00:02:11.550> and<00:02:11.670> if<00:02:12.420> it's

00:02:12.589 --> 00:02:12.599 
or below the threshold of 50 and if it's

00:02:12.599 --> 00:02:13.580 
or below the threshold of 50 and if it's
above<00:02:12.989> 50

00:02:13.580 --> 00:02:13.590 
above 50

00:02:13.590 --> 00:02:17.300 
above 50
which<00:02:14.220> will<00:02:14.459> be<00:02:14.610> true<00:02:15.599> about<00:02:15.930> four<00:02:16.650> fifth<00:02:17.040> of

00:02:17.300 --> 00:02:17.310 
which will be true about four fifth of

00:02:17.310 --> 00:02:20.360 
which will be true about four fifth of
the<00:02:17.580> time<00:02:17.849> then<00:02:18.840> it<00:02:19.379> will<00:02:19.620> turn<00:02:19.800> the<00:02:20.010> light<00:02:20.160> on

00:02:20.360 --> 00:02:20.370 
the time then it will turn the light on

00:02:20.370 --> 00:02:22.430 
the time then it will turn the light on
otherwise<00:02:21.120> it<00:02:21.390> will<00:02:21.510> turn<00:02:21.720> it<00:02:21.840> off<00:02:21.989> and<00:02:22.019> then

00:02:22.430 --> 00:02:22.440 
otherwise it will turn it off and then

00:02:22.440 --> 00:02:25.460 
otherwise it will turn it off and then
I'll<00:02:22.560> just<00:02:22.590> sleep<00:02:23.220> for<00:02:23.459> 50<00:02:23.790> milliseconds<00:02:24.470> now

00:02:25.460 --> 00:02:25.470 
I'll just sleep for 50 milliseconds now

00:02:25.470 --> 00:02:26.900 
I'll just sleep for 50 milliseconds now
the<00:02:25.530> interesting<00:02:25.769> thing<00:02:26.280> is<00:02:26.310> the<00:02:26.700> linear

00:02:26.900 --> 00:02:26.910 
the interesting thing is the linear

00:02:26.910 --> 00:02:29.509 
the interesting thing is the linear
congruential<00:02:27.450> generator<00:02:27.870> up<00:02:28.590> here<00:02:28.860> you'll

00:02:29.509 --> 00:02:29.519 
congruential generator up here you'll

00:02:29.519 --> 00:02:32.150 
congruential generator up here you'll
see<00:02:29.610> that<00:02:29.940> that<00:02:30.239> is<00:02:30.450> also<00:02:30.690> extremely<00:02:31.470> simple

00:02:32.150 --> 00:02:32.160 
see that that is also extremely simple

00:02:32.160 --> 00:02:35.360 
see that that is also extremely simple
it<00:02:32.430> has<00:02:33.299> an<00:02:33.599> influence<00:02:33.959> state<00:02:34.319> of<00:02:34.530> 8-bit<00:02:35.129> and

00:02:35.360 --> 00:02:35.370 
it has an influence state of 8-bit and

00:02:35.370 --> 00:02:38.600 
it has an influence state of 8-bit and
the<00:02:36.180> only<00:02:36.330> thing<00:02:36.450> that<00:02:36.840> it<00:02:36.959> does<00:02:36.989> is<00:02:37.549> that<00:02:38.549> it

00:02:38.600 --> 00:02:38.610 
the only thing that it does is that it

00:02:38.610 --> 00:02:40.729 
the only thing that it does is that it
multiplies<00:02:39.269> the<00:02:39.299> internal<00:02:39.900> state<00:02:40.140> by<00:02:40.349> five

00:02:40.729 --> 00:02:40.739 
multiplies the internal state by five

00:02:40.739 --> 00:02:45.800 
multiplies the internal state by five
and<00:02:41.160> then<00:02:41.459> adds<00:02:42.019> 129<00:02:43.489> these<00:02:44.489> two<00:02:44.849> these<00:02:45.750> two

00:02:45.800 --> 00:02:45.810 
and then adds 129 these two these two

00:02:45.810 --> 00:02:48.500 
and then adds 129 these two these two
numbers<00:02:46.110> five<00:02:46.620> and<00:02:46.650> 129<00:02:47.459> are<00:02:47.910> called<00:02:48.150> the

00:02:48.500 --> 00:02:48.510 
numbers five and 129 are called the

00:02:48.510 --> 00:02:52.309 
numbers five and 129 are called the
coefficients<00:02:49.319> of<00:02:49.500> the<00:02:49.709> LCG<00:02:50.510> there<00:02:51.510> is<00:02:51.870> always

00:02:52.309 --> 00:02:52.319 
coefficients of the LCG there is always

00:02:52.319 --> 00:02:54.800 
coefficients of the LCG there is always
a<00:02:52.799> multiplier<00:02:53.430> which<00:02:53.819> is<00:02:53.970> five<00:02:54.239> in<00:02:54.420> my<00:02:54.569> case

00:02:54.800 --> 00:02:54.810 
a multiplier which is five in my case

00:02:54.810 --> 00:02:57.319 
a multiplier which is five in my case
and<00:02:55.170> there's<00:02:55.680> always<00:02:56.069> an<00:02:56.340> increment<00:02:56.730> which<00:02:57.150> is

00:02:57.319 --> 00:02:57.329 
and there's always an increment which is

00:02:57.329 --> 00:03:01.369 
and there's always an increment which is
129<00:02:57.870> in<00:02:58.140> my<00:02:58.260> case<00:02:58.500> and<00:02:59.120> there's<00:03:00.120> also<00:03:00.390> a<00:03:00.629> modulo

00:03:01.369 --> 00:03:01.379 
129 in my case and there's also a modulo

00:03:01.379 --> 00:03:03.770 
129 in my case and there's also a modulo
operation<00:03:01.920> which<00:03:02.489> is<00:03:02.700> the<00:03:03.209> remainder<00:03:03.750> of

00:03:03.770 --> 00:03:03.780 
operation which is the remainder of

00:03:03.780 --> 00:03:06.830 
operation which is the remainder of
integer<00:03:04.560> division<00:03:04.890> this<00:03:05.819> is<00:03:06.000> implicit<00:03:06.390> here

00:03:06.830 --> 00:03:06.840 
integer division this is implicit here

00:03:06.840 --> 00:03:10.160 
integer division this is implicit here
you<00:03:07.349> will<00:03:07.470> notice<00:03:07.590> that<00:03:08.400> the<00:03:09.170> multiplication

00:03:10.160 --> 00:03:10.170 
you will notice that the multiplication

00:03:10.170 --> 00:03:13.520 
you will notice that the multiplication
is<00:03:10.500> extended<00:03:11.340> to<00:03:11.489> a<00:03:11.519> 16-bit<00:03:12.239> integer<00:03:12.810> or<00:03:13.049> int

00:03:13.520 --> 00:03:13.530 
is extended to a 16-bit integer or int

00:03:13.530 --> 00:03:17.030 
is extended to a 16-bit integer or int
as<00:03:14.400> by<00:03:14.790> the<00:03:14.849> sea<00:03:15.120> standard<00:03:15.569> but<00:03:16.260> the<00:03:16.620> result

00:03:17.030 --> 00:03:17.040 
as by the sea standard but the result

00:03:17.040 --> 00:03:19.069 
as by the sea standard but the result
will<00:03:17.220> be<00:03:17.250> stored<00:03:17.639> back<00:03:18.000> in<00:03:18.180> that<00:03:18.329> state<00:03:18.720> which

00:03:19.069 --> 00:03:19.079 
will be stored back in that state which

00:03:19.079 --> 00:03:21.979 
will be stored back in that state which
is<00:03:19.319> only<00:03:19.560> an<00:03:19.769> 8-bit<00:03:20.400> integer<00:03:20.579> so<00:03:21.480> therefore

00:03:21.979 --> 00:03:21.989 
is only an 8-bit integer so therefore

00:03:21.989 --> 00:03:24.020 
is only an 8-bit integer so therefore
will<00:03:22.200> have<00:03:22.380> truncation<00:03:23.130> and<00:03:23.310> will<00:03:23.489> only<00:03:23.519> have

00:03:24.020 --> 00:03:24.030 
will have truncation and will only have

00:03:24.030 --> 00:03:26.449 
will have truncation and will only have
the<00:03:24.359> least<00:03:24.959> significant<00:03:25.590> eight<00:03:25.769> bits<00:03:26.100> stored

00:03:26.449 --> 00:03:26.459 
the least significant eight bits stored

00:03:26.459 --> 00:03:28.699 
the least significant eight bits stored
in<00:03:26.700> the<00:03:26.850> state<00:03:27.120> of<00:03:27.150> arrival<00:03:27.569> note<00:03:28.260> that<00:03:28.500> not

00:03:28.699 --> 00:03:28.709 
in the state of arrival note that not

00:03:28.709 --> 00:03:32.629 
in the state of arrival note that not
all<00:03:28.769> coefficients<00:03:29.579> a<00:03:30.389> and<00:03:30.540> C<00:03:31.500> will<00:03:31.920> generate<00:03:32.310> a

00:03:32.629 --> 00:03:32.639 
all coefficients a and C will generate a

00:03:32.639 --> 00:03:37.370 
all coefficients a and C will generate a
periodicity<00:03:33.630> of<00:03:34.280> 256<00:03:35.280> in<00:03:35.819> fact<00:03:36.599> most<00:03:37.019> of<00:03:37.200> those

00:03:37.370 --> 00:03:37.380 
periodicity of 256 in fact most of those

00:03:37.380 --> 00:03:41.509 
periodicity of 256 in fact most of those
won't<00:03:37.889> and<00:03:38.389> to<00:03:39.389> get<00:03:39.780> one<00:03:40.049> that<00:03:40.349> does<00:03:40.680> either

00:03:41.509 --> 00:03:41.519 
won't and to get one that does either

00:03:41.519 --> 00:03:44.300 
won't and to get one that does either
you'll<00:03:41.970> have<00:03:42.150> to<00:03:42.299> do<00:03:42.870> a<00:03:42.900> bit<00:03:43.109> of<00:03:43.139> math<00:03:43.530> or<00:03:43.889> you

00:03:44.300 --> 00:03:44.310 
you'll have to do a bit of math or you

00:03:44.310 --> 00:03:46.309 
you'll have to do a bit of math or you
look<00:03:44.519> up<00:03:44.669> some<00:03:44.910> constants<00:03:45.450> or<00:03:45.569> you<00:03:45.900> do<00:03:46.049> it<00:03:46.139> like

00:03:46.309 --> 00:03:46.319 
look up some constants or you do it like

00:03:46.319 --> 00:03:48.589 
look up some constants or you do it like
I<00:03:46.500> did<00:03:46.560> and<00:03:46.950> just<00:03:46.980> brute<00:03:47.700> force<00:03:47.970> constants

00:03:48.589 --> 00:03:48.599 
I did and just brute force constants

00:03:48.599 --> 00:03:50.900 
I did and just brute force constants
there<00:03:49.260> are<00:03:49.410> multiple<00:03:49.799> combinations<00:03:50.069> of<00:03:50.700> these

00:03:50.900 --> 00:03:50.910 
there are multiple combinations of these

00:03:50.910 --> 00:03:52.879 
there are multiple combinations of these
coefficients<00:03:51.299> that<00:03:51.989> generate<00:03:52.380> the<00:03:52.620> full

00:03:52.879 --> 00:03:52.889 
coefficients that generate the full

00:03:52.889 --> 00:03:57.319 
coefficients that generate the full
periodicity<00:03:53.370> of<00:03:53.669> the<00:03:53.910> LCG<00:03:54.810> but<00:03:55.709> I<00:03:56.340> chose<00:03:57.000> this

00:03:57.319 --> 00:03:57.329 
periodicity of the LCG but I chose this

00:03:57.329 --> 00:04:00.229 
periodicity of the LCG but I chose this
one<00:03:57.690> specifically<00:03:58.349> because<00:03:59.239> multiplication

00:04:00.229 --> 00:04:00.239 
one specifically because multiplication

00:04:00.239 --> 00:04:04.690 
one specifically because multiplication
by<00:04:00.690> five<00:04:01.109> is<00:04:01.590> very<00:04:02.180> efficiently<00:04:03.180> doable<00:04:03.810> in

00:04:04.690 --> 00:04:04.700 
by five is very efficiently doable in

00:04:04.700 --> 00:04:07.789 
by five is very efficiently doable in
assembly<00:04:05.700> on<00:04:05.849> a<00:04:05.880> microcontroller<00:04:06.480> because<00:04:07.169> it

00:04:07.789 --> 00:04:07.799 
assembly on a microcontroller because it

00:04:07.799 --> 00:04:10.699 
assembly on a microcontroller because it
will<00:04:08.280> by<00:04:08.819> the<00:04:08.880> compiler<00:04:09.299> be<00:04:09.569> replaced<00:04:09.959> by<00:04:10.440> a

00:04:10.699 --> 00:04:10.709 
will by the compiler be replaced by a

00:04:10.709 --> 00:04:12.920 
will by the compiler be replaced by a
multiplication<00:04:11.489> by<00:04:11.970> four<00:04:12.450> which<00:04:12.900> is

00:04:12.920 --> 00:04:12.930 
multiplication by four which is

00:04:12.930 --> 00:04:15.379 
multiplication by four which is
basically<00:04:13.440> just<00:04:13.560> a<00:04:13.919> shift<00:04:14.160> left<00:04:14.370> by<00:04:14.970> two<00:04:15.030> bits

00:04:15.379 --> 00:04:15.389 
basically just a shift left by two bits

00:04:15.389 --> 00:04:19.039 
basically just a shift left by two bits
and<00:04:15.660> a<00:04:16.560> simple<00:04:16.829> addition<00:04:17.570> so<00:04:18.570> if<00:04:18.690> we<00:04:18.900> do<00:04:19.019> a

00:04:19.039 --> 00:04:19.049 
and a simple addition so if we do a

00:04:19.049 --> 00:04:21.890 
and a simple addition so if we do a
multiplication<00:04:19.470> by<00:04:20.010> five<00:04:20.489> we<00:04:21.359> won't<00:04:21.630> have<00:04:21.840> to

00:04:21.890 --> 00:04:21.900 
multiplication by five we won't have to

00:04:21.900 --> 00:04:24.110 
multiplication by five we won't have to
worry<00:04:22.229> that<00:04:22.650> all<00:04:23.039> the

00:04:24.110 --> 00:04:24.120 
worry that all the

00:04:24.120 --> 00:04:26.360 
worry that all the
multiplication<00:04:25.080> lips<00:04:25.500> will<00:04:25.770> be<00:04:25.919> pulled<00:04:26.160> in

00:04:26.360 --> 00:04:26.370 
multiplication lips will be pulled in

00:04:26.370 --> 00:04:29.390 
multiplication lips will be pulled in
because<00:04:26.760> this<00:04:27.300> 80<00:04:27.600> tiny<00:04:27.930> 13<00:04:28.410> does<00:04:28.680> not<00:04:28.949> have<00:04:29.130> a

00:04:29.390 --> 00:04:29.400 
because this 80 tiny 13 does not have a

00:04:29.400 --> 00:04:32.479 
because this 80 tiny 13 does not have a
hardware<00:04:29.970> multiplier

