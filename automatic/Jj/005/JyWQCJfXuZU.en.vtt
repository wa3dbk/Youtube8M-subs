WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
 Evans] Well we can write all codes that must be repeated loop through the menu items] 

00:00:03.000 --> 00:00:05.000
 Using only 

00:00:05.000 --> 00:00:09.000
 We can do anything we want. It will be a bit more complicated than we want 

00:00:09.000 --> 00:00:12.000
 , Python provides a simpler way to loop through elements from the list 

00:00:12.000 --> 00:00:14.000
 . This is called a repeat for annular 

00:00:14.000 --> 00:00:17.000
 The repetition structure for annular is similar to this 

00:00:17.000 --> 00:00:20.000
 , We have the keyword "for" followed by the name &amp; lt; name&gt; 

00:00:20.000 --> 00:00:24.000
 , And this is a new name for the variable we can provide 

00:00:24.000 --> 00:00:27.000
 , Followed by the keyword "in" followed by the &amp; lt; list&gt; menu 

00:00:27.000 --> 00:00:32.000
 . This is any expression that is evaluated to a list followed by a colon 

00:00:32.000 --> 00:00:36.000
 Well this is very similar to what we have seen in the cyclic redundancy structure 

00:00:36.000 --> 00:00:40.000
 . "And" if "with block inside" for 

00:00:40.000 --> 00:00:44.000
 What it means for a loop like this is for each item in the list 

00:00:44.000 --> 00:00:48.000
 . We will assign this item to &amp; lt; name&gt; and evaluate &amp; lt; block&gt; 

00:00:48.000 --> 00:00:52.000
 We will do it for review of the list 

00:00:52.000 --> 00:00:56.000
 Well using "for", we can define the procedure print &lt;u&gt; all &lt;/ u&gt; elements 

00:00:56.000 --> 00:00:59.000
 Using much less code than we need to use 

00:00:59.000 --> 00:01:05.000
 We have the term "for" where we will give the name e as a variable name 

00:01:05.000 --> 00:01:07.000
 The menu p 

00:01:07.000 --> 00:01:11.000
 . What we want to do for each element is just to print this element 

00:01:11.000 --> 00:01:14.000
 , To tell what happens when you use a repeat for annular 

00:01:14.000 --> 00:01:18.000
 Call print &lt;u&gt; all &lt;/ u&gt; elements, and scroll through the list we have defined and saved 

00:01:18.000 --> 00:01:20.000
 . In the mylist variable 

00:01:20.000 --> 00:01:22.000
 This list contains three elements 

00:01:22.000 --> 00:01:26.000
 [The first two elements are numbers 1 and 2, and the third element is a list [3, 4] 

00:01:26.000 --> 00:01:30.000
 . So when we created mylist, you created an existing object that looks like this 

00:01:30.000 --> 00:01:32.000
 , Has three elements 

00:01:32.000 --> 00:01:35.000
 [Elements in the first and existing elements [3, 4] in the third element 

00:01:35.000 --> 00:01:42.000
 When we pass this to print &lt;u&gt; all &lt;/ u&gt; elements, the variable p will indicate this object 

00:01:42.000 --> 00:01:45.000
 When we perform cyclic redundancy, what happens is the allocation 

00:01:45.000 --> 00:01:48.000
 For the first element of the list, select the variable e 

00:01:48.000 --> 00:01:52.000
 So at the beginning, e will point to this value 

00:01:52.000 --> 00:01:55.000
 , We execute the loop repetition text as a value e 

00:01:55.000 --> 00:01:58.000
 1. Write the value 1. Then continue 

00:01:58.000 --> 00:02:02.000
 The next time through loop repeat, e will refer to the second element in list P 

00:02:02.000 --> 00:02:06.000
 We can evaluate the loop repetition text, and write the value that is 2 

00:02:06.000 --> 00:02:08.000
 . Then we follow the loop repetition 

00:02:08.000 --> 00:02:13.000
 [Next time, you will refer to the third item in list P, which is [3, 4] 

00:02:13.000 --> 00:02:15.000
 The list will be [3, 4] 

00:02:15.000 --> 00:02:19.000
 . At this stage we will review all the elements of p and end the repeat for annular 

00:02:19.000 --> 00:02:21.000
 Implementation will continue here 

00:02:21.000 --> 00:02:23.000
 , In this case there is no statement there 

00:02:23.000 --> 00:02:26.000
 So we have implemented the procedure and come back 

