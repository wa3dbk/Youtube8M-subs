WEBVTT
Kind: captions
Language: en

00:00:05.090 --> 00:00:10.380
 Hello JAVA script developer 

00:00:08.580 --> 00:00:12.690
 now you will learn how to work 

00:00:10.380 --> 00:00:14.430
 with the main structures of the 

00:00:12.690 --> 00:00:17.070
 java script language 

00:00:14.430 --> 00:00:20.190
 Let's study in the next classes the 

00:00:17.070 --> 00:00:21.150
 statements of these major 

00:00:20.190 --> 00:00:24.170
 language 

00:00:21.150 --> 00:00:28.710
 we have control structures 

00:00:24.170 --> 00:00:33.030
 conditional structures 

00:00:28.710 --> 00:00:35.520
 loops or repetitions and structures of 

00:00:33.030 --> 00:00:38.609
 exceptions 

00:00:35.520 --> 00:00:39.780
 then we have as examples the structures 

00:00:38.609 --> 00:00:44.519
 of control 

00:00:39.780 --> 00:00:47.070
 go function and return 

00:00:44.519 --> 00:00:52.620
 we have conditional structures that 

00:00:47.070 --> 00:00:56.069
 aim to assess a condition and perform 

00:00:52.620 --> 00:00:56.969
 an operation depending on the result of the 

00:00:56.069 --> 00:00:59.429
 evaluation 

00:00:56.969 --> 00:01:03.569
 we have the conditional and 

00:00:59.429 --> 00:01:05.880
 faithful suite and other structures or 

00:01:03.569 --> 00:01:08.939
 statements that support these structures 

00:01:05.880 --> 00:01:11.969
 such as cases break and fire 

00:01:08.939 --> 00:01:14.520
 we have the loops structures that 

00:01:11.969 --> 00:01:17.189
 repeat a number of times 

00:01:14.520 --> 00:01:19.020
 determined action and within those 

00:01:17.189 --> 00:01:22.680
 structures we have the forum 

00:01:19.020 --> 00:01:25.649
 we have the haiyô of io and we also have 

00:01:22.680 --> 00:01:28.229
 structures to work in 

00:01:25.649 --> 00:01:32.789
 situations in which some kind of 

00:01:28.229 --> 00:01:37.469
 error our script then the structures of 

00:01:32.789 --> 00:01:41.009
 Exceptions are trouw o trike at 

00:01:37.469 --> 00:01:42.299
 the file then these structures that we 

00:01:41.009 --> 00:01:44.310
 We will be working on these next ones. 

00:01:42.299 --> 00:01:47.759
 classes and in this class 

00:01:44.310 --> 00:01:50.640
 we are already going to start with is the pre 

00:01:47.759 --> 00:01:53.549
 learning about these three structures 

00:01:50.640 --> 00:01:58.740
 initials here of language control 

00:01:53.549 --> 00:02:01.499
 for this I created a new html file and 

00:01:58.740 --> 00:02:03.119
 a new javascrip file that will 

00:02:01.499 --> 00:02:06.619
 it will be in these files that we go 

00:02:03.119 --> 00:02:09.420
 working with these structures 

00:02:06.619 --> 00:02:12.470
 So how have you seen the 

00:02:09.420 --> 00:02:12.470
 go keyword 

00:02:12.660 --> 00:02:20.739
 it is intended to create né to declare 

00:02:18.190 --> 00:02:23.620
 explicitly one or more variables 

00:02:20.739 --> 00:02:27.840
 then there could be a variable there is a 

00:02:23.620 --> 00:02:31.420
 variable of a variable c 

00:02:27.840 --> 00:02:33.550
 in case if I declare the variables without 

00:02:31.420 --> 00:02:36.099
 assign a value 

00:02:33.550 --> 00:02:38.680
 these variables will be in vain to be 

00:02:36.099 --> 00:02:41.440
 initialized here with undefined value 

00:02:38.680 --> 00:02:44.500
 o one the fire so i could declare 

00:02:41.440 --> 00:02:45.519
 variable variables such as nodes 

00:02:44.500 --> 00:02:48.510
 we are doing here 

00:02:45.519 --> 00:02:48.510
 thus 

00:02:50.290 --> 00:02:58.150
 assigning a value to them or declaring the 

00:02:53.590 --> 00:03:04.030
 only one variable as we have already seen in 

00:02:58.150 --> 00:03:11.739
 other scripts the function statement is 

00:03:04.030 --> 00:03:15.819
 used to create a function then 

00:03:11.739 --> 00:03:18.760
 we can create a split function where 

00:03:15.819 --> 00:03:21.190
 I would make two parameters here then 

00:03:18.760 --> 00:03:22.720
 within a function I can pass or 

00:03:21.190 --> 00:03:24.430
 not parameters 

00:03:22.720 --> 00:03:26.560
 if I am not passing parameters or 

00:03:24.430 --> 00:03:28.450
 simply open and close parentheses and 

00:03:26.560 --> 00:03:32.109
 if I want to pass some parameter I 

00:03:28.450 --> 00:03:33.760
 I can spend here separated by live 

00:03:32.109 --> 00:03:39.730
 so I'm putting two pauses here 

00:03:33.760 --> 00:03:40.930
 x and y to be used within the 

00:03:39.730 --> 00:03:50.700
 Function 

00:03:40.930 --> 00:03:54.910
 my function is then split and 7 x / y 

00:03:50.700 --> 00:04:03.220
 and here we could see the result 

00:03:54.910 --> 00:04:06.609
 if I want to call a function I call 

00:04:03.220 --> 00:04:09.609
 this function by function name and 

00:04:06.609 --> 00:04:11.940
 passing within the relatives the values 

00:04:09.609 --> 00:04:14.200
 that I want to pass on to those 

00:04:11.940 --> 00:04:15.090
 for each of the parameters of the 

00:04:14.200 --> 00:04:19.660
 Function 

00:04:15.090 --> 00:04:24.099
 so you 're updating the page here 

00:04:19.660 --> 00:04:26.020
 I declared my job and ordered 

00:04:24.099 --> 00:04:31.060
 perform that past function 

00:04:26.020 --> 00:04:33.970
 the parameters and attacked and the statement 

00:04:31.060 --> 00:04:36.280
 return it if you give china that to return the 

00:04:33.970 --> 00:04:38.949
 value resulting from a function 

00:04:36.280 --> 00:04:41.770
 for example here my role is already 

00:04:38.949 --> 00:04:44.590
 is issuing an alert message but 

00:04:41.770 --> 00:04:48.310
 Imagine if I wanted to return 

00:04:44.590 --> 00:04:50.530
 the result of this operation to be 

00:04:48.310 --> 00:04:52.479
 assigned to a variable for example né 

00:04:50.530 --> 00:05:04.930
 so here I could put a 

00:04:52.479 --> 00:05:07.780
 variable a / y if I wanted to 

00:05:04.930 --> 00:05:10.349
 alert the result of this operation, which 

00:05:07.780 --> 00:05:10.349
 will happen 

00:05:10.470 --> 00:05:16.240
 indefinite because because in fact this 

00:05:13.509 --> 00:05:19.750
 function is returning nothing it executes 

00:05:16.240 --> 00:05:23.590
 an operation inside it but it has no 

00:05:19.750 --> 00:05:25.330
 no return is she is not returning 

00:05:23.590 --> 00:05:28.750
 no result 

00:05:25.330 --> 00:05:33.699
 for who called this operation then 

00:05:28.750 --> 00:05:38.050
 we could use the keyword 

00:05:33.699 --> 00:05:40.270
 and return to return the result 

00:05:38.050 --> 00:05:42.310
 of this operation, the keyword becomes 

00:05:40.270 --> 00:05:45.219
 can be used anywhere 

00:05:42.310 --> 00:05:46.479
 here in our general function it comes in the 

00:05:45.219 --> 00:05:48.520
 end of function 

00:05:46.479 --> 00:05:50.800
 nevertheless from the moment I finished 

00:05:48.520 --> 00:05:53.169
 to carry out all operations 

00:05:50.800 --> 00:05:54.490
 is within that function but I could 

00:05:53.169 --> 00:05:57.789
 use anywhere else let's go 

00:05:54.490 --> 00:06:00.610
 see the final result now of this 

00:05:57.789 --> 00:06:04.330
 execution now that I've put the 

00:06:00.610 --> 00:06:07.930
 return keyword when I execute 

00:06:04.330 --> 00:06:10.180
 This function is in my 

00:06:07.930 --> 00:06:12.849
 my from my other alert function 

00:06:10.180 --> 00:06:15.610
 my my alert function now 

00:06:12.849 --> 00:06:19.690
 it displays the value 3 that in 

00:06:15.610 --> 00:06:21.940
 truth is the return of the result of that 

00:06:19.690 --> 00:06:22.750
 operation that was performed within the 

00:06:21.940 --> 00:06:26.199
 Function 

00:06:22.750 --> 00:06:29.080
 so that's how I do to bring to 

00:06:26.199 --> 00:06:31.020
 out of function a result that was is 

00:06:29.080 --> 00:06:34.149
 acquired therein 

00:06:31.020 --> 00:06:37.690
 in the next classes we will continue 

00:06:34.149 --> 00:06:39.040
 studying other ways of declaring 

00:06:37.690 --> 00:06:42.070
 the structures 

00:06:39.040 --> 00:06:44.580
 from java script language until next time 

00:06:42.070 --> 00:06:44.580
 personal class 

