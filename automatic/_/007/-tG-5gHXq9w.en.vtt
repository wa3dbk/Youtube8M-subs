WEBVTT
Kind: captions
Language: en

00:00:00.560 --> 00:00:04.640 

hi<00:00:01.560> everyone<00:00:01.829> -<00:00:02.340> my<00:00:02.899> acid<00:00:03.899> level<00:00:04.259> language

00:00:04.640 --> 00:00:04.650 
hi everyone - my acid level language

00:00:04.650 --> 00:00:07.099 
hi everyone - my acid level language
tutorial<00:00:05.339> now<00:00:05.940> in<00:00:06.089> my<00:00:06.240> previous<00:00:06.629> movies<00:00:06.990> I

00:00:07.099 --> 00:00:07.109 
tutorial now in my previous movies I

00:00:07.109 --> 00:00:08.390 
tutorial now in my previous movies I
have<00:00:07.230> told<00:00:07.440> you<00:00:07.560> would<00:00:07.799> be<00:00:08.010> working<00:00:08.370> with

00:00:08.390 --> 00:00:08.400 
have told you would be working with

00:00:08.400 --> 00:00:10.910 
have told you would be working with
three<00:00:08.820> things<00:00:09.030> actually<00:00:09.300> in<00:00:10.200> assembly

00:00:10.910 --> 00:00:10.920 
three things actually in assembly

00:00:10.920 --> 00:00:12.400 
three things actually in assembly
language<00:00:10.950> programming<00:00:11.670> these<00:00:12.000> are

00:00:12.400 --> 00:00:12.410 
language programming these are

00:00:12.410 --> 00:00:17.300 
language programming these are
instruction<00:00:13.410> and<00:00:13.759> the<00:00:14.759> data<00:00:15.000> and<00:00:16.100> stowed<00:00:17.100> them

00:00:17.300 --> 00:00:17.310 
instruction and the data and stowed them

00:00:17.310 --> 00:00:19.880 
instruction and the data and stowed them
in<00:00:17.460> some<00:00:17.670> places<00:00:17.940> these<00:00:18.390> are<00:00:18.570> registers<00:00:19.080> now

00:00:19.880 --> 00:00:19.890 
in some places these are registers now

00:00:19.890 --> 00:00:23.330 
in some places these are registers now
registers<00:00:20.640> are<00:00:20.880> the<00:00:21.210> very<00:00:22.170> fast<00:00:22.949> memory

00:00:23.330 --> 00:00:23.340 
registers are the very fast memory

00:00:23.340 --> 00:00:26.720 
registers are the very fast memory
access<00:00:23.880> units<00:00:24.240> to<00:00:24.480> work<00:00:24.920> working<00:00:25.920> with<00:00:26.130> our

00:00:26.720 --> 00:00:26.730 
access units to work working with our

00:00:26.730 --> 00:00:30.109 
access units to work working with our
data<00:00:27.269> now<00:00:27.859> inside<00:00:28.859> this<00:00:29.189> the<00:00:29.490> data<00:00:29.699> will<00:00:30.090> be

00:00:30.109 --> 00:00:30.119 
data now inside this the data will be

00:00:30.119 --> 00:00:34.160 
data now inside this the data will be
general<00:00:30.900> resizing<00:00:31.529> binary<00:00:32.399> form<00:00:32.759> and<00:00:33.140> we<00:00:34.140> have

00:00:34.160 --> 00:00:34.170 
general resizing binary form and we have

00:00:34.170 --> 00:00:38.270 
general resizing binary form and we have
only<00:00:34.680> this<00:00:35.040> thing<00:00:35.309> to<00:00:36.090> store<00:00:36.510> our<00:00:36.540> contains<00:00:37.280> so

00:00:38.270 --> 00:00:38.280 
only this thing to store our contains so

00:00:38.280 --> 00:00:41.600 
only this thing to store our contains so
and<00:00:38.610> they<00:00:39.329> have<00:00:39.600> a<00:00:39.629> size<00:00:40.200> so<00:00:41.100> we'll<00:00:41.340> be<00:00:41.460> working

00:00:41.600 --> 00:00:41.610 
and they have a size so we'll be working

00:00:41.610 --> 00:00:43.910 
and they have a size so we'll be working
with<00:00:42.000> them<00:00:42.239> so<00:00:42.570> you<00:00:42.600> will<00:00:42.960> you<00:00:43.350> have<00:00:43.620> to<00:00:43.739> have<00:00:43.860> a

00:00:43.910 --> 00:00:43.920 
with them so you will you have to have a

00:00:43.920 --> 00:00:48.529 
with them so you will you have to have a
nice<00:00:44.899> no<00:00:45.899> idea<00:00:46.890> of<00:00:47.070> how<00:00:47.309> they<00:00:47.550> are<00:00:47.610> now<00:00:48.270> let's

00:00:48.529 --> 00:00:48.539 
nice no idea of how they are now let's

00:00:48.539 --> 00:00:49.819 
nice no idea of how they are now let's
take<00:00:48.750> them<00:00:48.930> one<00:00:49.200> by<00:00:49.230> one

00:00:49.819 --> 00:00:49.829 
take them one by one

00:00:49.829 --> 00:00:53.959 
take them one by one
X<00:00:50.010> is<00:00:50.610> for<00:00:51.420> the<00:00:51.690> accumulator<00:00:52.350> register<00:00:52.500> B<00:00:53.489> X<00:00:53.699> is

00:00:53.959 --> 00:00:53.969 
X is for the accumulator register B X is

00:00:53.969 --> 00:00:56.630 
X is for the accumulator register B X is
for<00:00:54.180> the<00:00:54.329> base<00:00:54.510> register<00:00:55.129> CX<00:00:56.129> is<00:00:56.280> for<00:00:56.520> the

00:00:56.630 --> 00:00:56.640 
for the base register CX is for the

00:00:56.640 --> 00:00:59.479 
for the base register CX is for the
counting<00:00:57.000> register<00:00:57.449> and<00:00:57.719> D<00:00:58.079> is<00:00:58.199> for<00:00:58.230> the<00:00:58.770> data

00:00:59.479 --> 00:00:59.489 
counting register and D is for the data

00:00:59.489 --> 00:01:01.970 
counting register and D is for the data
register<00:00:59.840> then<00:01:00.840> we<00:01:01.079> have<00:01:01.260> instruction

00:01:01.970 --> 00:01:01.980 
register then we have instruction

00:01:01.980 --> 00:01:04.549 
register then we have instruction
pointer<00:01:02.190> register<00:01:02.719> then<00:01:03.719> we<00:01:03.930> have<00:01:04.140> stack

00:01:04.549 --> 00:01:04.559 
pointer register then we have stack

00:01:04.559 --> 00:01:08.240 
pointer register then we have stack
pointer<00:01:05.159> base<00:01:05.700> pointer<00:01:06.860> source<00:01:07.860> index

00:01:08.240 --> 00:01:08.250 
pointer base pointer source index

00:01:08.250 --> 00:01:12.320 
pointer base pointer source index
destination<00:01:09.000> index<00:01:09.150> and<00:01:09.630> so<00:01:10.439> many<00:01:11.330> registers

00:01:12.320 --> 00:01:12.330 
destination index and so many registers

00:01:12.330 --> 00:01:15.020 
destination index and so many registers
you<00:01:12.450> will<00:01:12.600> get<00:01:12.810> now<00:01:13.619> the<00:01:13.680> size<00:01:14.100> of<00:01:14.430> the

00:01:15.020 --> 00:01:15.030 
you will get now the size of the

00:01:15.030 --> 00:01:19.429 
you will get now the size of the
register<00:01:15.860> in<00:01:16.860> a<00:01:16.979> 32-bit<00:01:17.460> processor<00:01:17.520> of<00:01:18.240> the<00:01:18.439> ax

00:01:19.429 --> 00:01:19.439 
register in a 32-bit processor of the ax

00:01:19.439 --> 00:01:23.539 
register in a 32-bit processor of the ax
this<00:01:20.360> whole<00:01:21.360> yellow<00:01:21.570> part<00:01:21.900> is<00:01:22.170> 32<00:01:23.070> bit<00:01:23.280> and

00:01:23.539 --> 00:01:23.549 
this whole yellow part is 32 bit and

00:01:23.549 --> 00:01:28.670 
this whole yellow part is 32 bit and
that<00:01:24.450> 32<00:01:25.049> bit<00:01:25.229> is<00:01:25.409> further<00:01:25.939> divided<00:01:26.939> into<00:01:27.680> two

00:01:28.670 --> 00:01:28.680 
that 32 bit is further divided into two

00:01:28.680 --> 00:01:30.679 
that 32 bit is further divided into two
parts<00:01:29.009> one<00:01:29.159> is<00:01:29.220> the<00:01:29.430> high<00:01:29.640> part<00:01:29.909> one<00:01:30.509> is<00:01:30.659> a

00:01:30.679 --> 00:01:30.689 
parts one is the high part one is a

00:01:30.689 --> 00:01:33.260 
parts one is the high part one is a
lower<00:01:30.930> part<00:01:31.200> lower<00:01:31.979> part<00:01:32.340> starts<00:01:32.729> with<00:01:32.880> 0<00:01:33.119> to

00:01:33.260 --> 00:01:33.270 
lower part lower part starts with 0 to

00:01:33.270 --> 00:01:36.100 
lower part lower part starts with 0 to
15<00:01:33.630> bit<00:01:33.840> and<00:01:34.049> the<00:01:34.619> higher<00:01:34.860> part<00:01:35.159> starts<00:01:35.579> with

00:01:36.100 --> 00:01:36.110 
15 bit and the higher part starts with

00:01:36.110 --> 00:01:40.219 
15 bit and the higher part starts with
16<00:01:37.110> to<00:01:37.229> 31<00:01:37.590> bit<00:01:37.920> and<00:01:38.159> this<00:01:39.090> thing<00:01:39.450> continues

00:01:40.219 --> 00:01:40.229 
16 to 31 bit and this thing continues

00:01:40.229 --> 00:01:44.450 
16 to 31 bit and this thing continues
for<00:01:40.439> all<00:01:40.650> the<00:01:41.899> registers<00:01:42.899> out<00:01:43.110> here<00:01:43.380> and<00:01:43.590> there

00:01:44.450 --> 00:01:44.460 
for all the registers out here and there

00:01:44.460 --> 00:01:48.410 
for all the registers out here and there
is<00:01:44.610> certainly<00:01:45.030> a<00:01:45.420> special<00:01:46.759> register<00:01:47.759> is<00:01:48.119> there

00:01:48.410 --> 00:01:48.420 
is certainly a special register is there

00:01:48.420 --> 00:01:52.819 
is certainly a special register is there
that<00:01:48.780> is<00:01:48.930> a<00:01:48.960> 16<00:01:49.350> bit<00:01:49.500> then<00:01:50.130> some<00:01:51.020> some<00:01:52.020> cases<00:01:52.350> so

00:01:52.819 --> 00:01:52.829 
that is a 16 bit then some some cases so

00:01:52.829 --> 00:01:55.899 
that is a 16 bit then some some cases so
much<00:01:53.040> we<00:01:53.250> also<00:01:53.369> have<00:01:53.579> 32-bit<00:01:54.030> status<00:01:54.990> flag<00:01:55.259> so

00:01:55.899 --> 00:01:55.909 
much we also have 32-bit status flag so

00:01:55.909 --> 00:01:58.880 
much we also have 32-bit status flag so
they<00:01:56.909> they<00:01:57.479> don't<00:01:57.719> work<00:01:58.229> at<00:01:58.409> a<00:01:58.439> single

00:01:58.880 --> 00:01:58.890 
they they don't work at a single

00:01:58.890 --> 00:02:01.880 
they they don't work at a single
register<00:01:59.570> we<00:02:00.570> would<00:02:00.719> be<00:02:00.899> just<00:02:01.079> only<00:02:01.290> concerned

00:02:01.880 --> 00:02:01.890 
register we would be just only concerned

00:02:01.890 --> 00:02:05.209 
register we would be just only concerned
with<00:02:01.950> one<00:02:02.340> single<00:02:03.119> bit<00:02:03.270> of<00:02:03.329> it<00:02:03.710> say<00:02:04.710> overflow

00:02:05.209 --> 00:02:05.219 
with one single bit of it say overflow

00:02:05.219 --> 00:02:09.290 
with one single bit of it say overflow
Direction<00:02:06.180> interrupt<00:02:06.899> trade<00:02:07.530> sign<00:02:07.890> say<00:02:08.670> let's

00:02:09.290 --> 00:02:09.300 
Direction interrupt trade sign say let's

00:02:09.300 --> 00:02:11.960 
Direction interrupt trade sign say let's
give<00:02:09.479> you<00:02:09.539> example<00:02:10.080> says<00:02:10.319> zero<00:02:10.709> so<00:02:11.520> in<00:02:11.819> that

00:02:11.960 --> 00:02:11.970 
give you example says zero so in that

00:02:11.970 --> 00:02:13.760 
give you example says zero so in that
register<00:02:12.450> if<00:02:12.629> this<00:02:13.050> bit

00:02:13.760 --> 00:02:13.770 
register if this bit

00:02:13.770 --> 00:02:16.370 
register if this bit
set<00:02:14.310> so<00:02:14.790> we<00:02:15.060> consider<00:02:15.510> our<00:02:15.780> previous

00:02:16.370 --> 00:02:16.380 
set so we consider our previous

00:02:16.380 --> 00:02:20.960 
set so we consider our previous
operation<00:02:17.040> has<00:02:17.630> produced<00:02:18.630> a<00:02:18.870> zero<00:02:19.380> if<00:02:20.250> this<00:02:20.730> is

00:02:20.960 --> 00:02:20.970 
operation has produced a zero if this is

00:02:20.970 --> 00:02:22.640 
operation has produced a zero if this is
two<00:02:21.180> one

00:02:22.640 --> 00:02:22.650 
two one

00:02:22.650 --> 00:02:25.550 
two one
so<00:02:23.520> this<00:02:23.730> means<00:02:23.940> our<00:02:24.240> previous<00:02:25.020> operation

00:02:25.550 --> 00:02:25.560 
so this means our previous operation

00:02:25.560 --> 00:02:27.230 
so this means our previous operation
will<00:02:25.710> produce<00:02:25.890> two<00:02:26.160> zero<00:02:26.370> if<00:02:26.580> it's<00:02:26.850> clear

00:02:27.230 --> 00:02:27.240 
will produce two zero if it's clear

00:02:27.240 --> 00:02:30.380 
will produce two zero if it's clear
means<00:02:27.540> it<00:02:27.720> is<00:02:27.840> zero<00:02:28.140> so<00:02:28.890> it<00:02:29.610> has<00:02:29.970> produced<00:02:30.300> a

00:02:30.380 --> 00:02:30.390 
means it is zero so it has produced a

00:02:30.390 --> 00:02:32.720 
means it is zero so it has produced a
nonzero<00:02:30.780> result<00:02:30.930> and<00:02:31.320> this<00:02:32.190> thing<00:02:32.490> will<00:02:32.640> be

00:02:32.720 --> 00:02:32.730 
nonzero result and this thing will be

00:02:32.730 --> 00:02:35.630 
nonzero result and this thing will be
very<00:02:32.970> much<00:02:33.150> useful<00:02:33.560> so<00:02:34.560> get<00:02:34.890> used<00:02:35.160> with<00:02:35.430> these

00:02:35.630 --> 00:02:35.640 
very much useful so get used with these

00:02:35.640 --> 00:02:38.240 
very much useful so get used with these
things<00:02:35.880> and<00:02:36.150> as<00:02:36.960> long<00:02:37.530> as<00:02:37.560> we<00:02:37.830> will<00:02:37.980> start

00:02:38.240 --> 00:02:38.250 
things and as long as we will start

00:02:38.250 --> 00:02:40.280 
things and as long as we will start
coding<00:02:38.610> from<00:02:38.760> the<00:02:38.880> next<00:02:39.060> video<00:02:39.300> you<00:02:39.960> will<00:02:39.990> have

00:02:40.280 --> 00:02:40.290 
coding from the next video you will have

00:02:40.290 --> 00:02:42.580 
coding from the next video you will have
a<00:02:40.350> nice<00:02:40.590> idea<00:02:41.010> how<00:02:41.400> to<00:02:41.460> do<00:02:41.670> it<00:02:41.700> what<00:02:42.000> to<00:02:42.120> do<00:02:42.210> it

00:02:42.580 --> 00:02:42.590 
a nice idea how to do it what to do it

00:02:42.590 --> 00:02:45.170 
a nice idea how to do it what to do it
with<00:02:43.590> these<00:02:43.770> things<00:02:43.980> but<00:02:44.610> these<00:02:44.850> are<00:02:44.910> the

00:02:45.170 --> 00:02:45.180 
with these things but these are the

00:02:45.180 --> 00:02:46.940 
with these things but these are the
basic<00:02:45.540> things<00:02:45.870> you<00:02:46.020> will<00:02:46.290> be<00:02:46.380> working

00:02:46.940 --> 00:02:46.950 
basic things you will be working

00:02:46.950 --> 00:02:49.220 
basic things you will be working
so<00:02:47.400> remember<00:02:47.790> instructions<00:02:48.720> that<00:02:48.930> you<00:02:49.080> have

00:02:49.220 --> 00:02:49.230 
so remember instructions that you have

00:02:49.230 --> 00:02:52.600 
so remember instructions that you have
to<00:02:49.320> remember<00:02:49.500> something<00:02:49.710> I<00:02:50.250> add<00:02:50.480> so<00:02:51.480> mod<00:02:51.960> and

00:02:52.600 --> 00:02:52.610 
to remember something I add so mod and

00:02:52.610 --> 00:02:56.090 
to remember something I add so mod and
data<00:02:53.610> yeah<00:02:54.390> these<00:02:54.930> are<00:02:55.140> maybe<00:02:55.350> hexadecimal

00:02:56.090 --> 00:02:56.100 
data yeah these are maybe hexadecimal

00:02:56.100 --> 00:03:00.140 
data yeah these are maybe hexadecimal
maybe<00:02:57.110> our<00:02:58.110> decimal<00:02:58.950> system<00:02:59.130> and<00:02:59.520> the

00:03:00.140 --> 00:03:00.150 
maybe our decimal system and the

00:03:00.150 --> 00:03:02.540 
maybe our decimal system and the
register<00:03:00.660> where<00:03:00.960> you<00:03:01.260> store<00:03:01.560> them<00:03:01.770> and<00:03:01.980> you

00:03:02.540 --> 00:03:02.550 
register where you store them and you

00:03:02.550 --> 00:03:06.740 
register where you store them and you
operate<00:03:03.120> on<00:03:03.300> them<00:03:04.260> now<00:03:05.070> this<00:03:05.880> register<00:03:06.390> are<00:03:06.570> a

00:03:06.740 --> 00:03:06.750 
operate on them now this register are a

00:03:06.750 --> 00:03:10.310 
operate on them now this register are a
shield<00:03:07.200> because<00:03:07.460> the<00:03:08.460> CPU<00:03:08.850> cannot<00:03:09.600> work<00:03:09.990> with

00:03:10.310 --> 00:03:10.320 
shield because the CPU cannot work with

00:03:10.320 --> 00:03:11.390 
shield because the CPU cannot work with
memory<00:03:10.650> location

00:03:11.390 --> 00:03:11.400 
memory location

00:03:11.400 --> 00:03:13.700 
memory location
so<00:03:11.910> the<00:03:12.060> CPU<00:03:12.270> cannot<00:03:12.870> work<00:03:13.140> with<00:03:13.350> the<00:03:13.440> data

00:03:13.700 --> 00:03:13.710 
so the CPU cannot work with the data

00:03:13.710 --> 00:03:16.310 
so the CPU cannot work with the data
within<00:03:14.610> the<00:03:14.820> RAM<00:03:15.060> so<00:03:15.630> if<00:03:15.900> they<00:03:16.170> have<00:03:16.290> to

00:03:16.310 --> 00:03:16.320 
within the RAM so if they have to

00:03:16.320 --> 00:03:19.040 
within the RAM so if they have to
process<00:03:16.680> data<00:03:17.130> the<00:03:18.030> data<00:03:18.060> have<00:03:18.570> to<00:03:18.600> be<00:03:18.750> bring

00:03:19.040 --> 00:03:19.050 
process data the data have to be bring

00:03:19.050 --> 00:03:22.040 
process data the data have to be bring
into<00:03:19.680> the<00:03:19.800> register<00:03:20.310> then<00:03:21.030> it<00:03:21.209> processed<00:03:21.780> and

00:03:22.040 --> 00:03:22.050 
into the register then it processed and

00:03:22.050 --> 00:03:24.710 
into the register then it processed and
after<00:03:22.800> Pro<00:03:23.040> within<00:03:23.459> the<00:03:23.550> registers<00:03:24.030> and<00:03:24.270> after

00:03:24.710 --> 00:03:24.720 
after Pro within the registers and after

00:03:24.720 --> 00:03:27.410 
after Pro within the registers and after
the<00:03:24.810> processing<00:03:25.260> the<00:03:25.890> data<00:03:26.070> goes<00:03:26.430> back<00:03:26.459> into

00:03:27.410 --> 00:03:27.420 
the processing the data goes back into

00:03:27.420 --> 00:03:30.740 
the processing the data goes back into
the<00:03:27.750> memory<00:03:28.350> in<00:03:28.740> the<00:03:29.010> RAM<00:03:29.220> itself<00:03:29.700> and<00:03:29.940> when

00:03:30.740 --> 00:03:30.750 
the memory in the RAM itself and when

00:03:30.750 --> 00:03:32.720 
the memory in the RAM itself and when
you<00:03:31.110> want<00:03:31.320> to<00:03:31.410> transfer<00:03:31.860> the<00:03:31.980> contents<00:03:32.160> of<00:03:32.610> the

00:03:32.720 --> 00:03:32.730 
you want to transfer the contents of the

00:03:32.730 --> 00:03:36.410 
you want to transfer the contents of the
RAM<00:03:33.290> to<00:03:34.290> the<00:03:34.410> hard<00:03:34.709> disk<00:03:34.920> then<00:03:35.610> the<00:03:35.790> CPU<00:03:35.970> takes

00:03:36.410 --> 00:03:36.420 
RAM to the hard disk then the CPU takes

00:03:36.420 --> 00:03:38.990 
RAM to the hard disk then the CPU takes
the<00:03:36.690> data<00:03:36.840> so<00:03:37.830> there<00:03:38.070> is<00:03:38.190> some<00:03:38.340> register<00:03:38.790> and

00:03:38.990 --> 00:03:39.000 
the data so there is some register and

00:03:39.000 --> 00:03:41.420 
the data so there is some register and
from<00:03:39.360> this<00:03:39.540> register<00:03:40.020> it<00:03:40.410> sends<00:03:40.920> back<00:03:41.100> to<00:03:41.340> the

00:03:41.420 --> 00:03:41.430 
from this register it sends back to the

00:03:41.430 --> 00:03:41.990 
from this register it sends back to the
hard<00:03:41.730> drive

00:03:41.990 --> 00:03:42.000 
hard drive

00:03:42.000 --> 00:03:45.580 
hard drive
and<00:03:42.270> on<00:03:42.840> so<00:03:43.770> this<00:03:44.280> square<00:03:44.640> it<00:03:44.850> is<00:03:45.000> for<00:03:45.450> our

00:03:45.580 --> 00:03:45.590 
and on so this square it is for our

00:03:45.590 --> 00:03:49.580 
and on so this square it is for our
theoretical<00:03:47.150> you<00:03:48.150> know<00:03:48.470> foundation<00:03:49.470> of

00:03:49.580 --> 00:03:49.590 
theoretical you know foundation of

00:03:49.590 --> 00:03:52.220 
theoretical you know foundation of
assembly<00:03:50.130> language<00:03:50.340> so<00:03:51.209> from<00:03:51.480> now<00:03:51.690> on<00:03:51.900> we<00:03:52.050> can

00:03:52.220 --> 00:03:52.230 
assembly language so from now on we can

00:03:52.230 --> 00:03:54.430 
assembly language so from now on we can
get<00:03:52.380> starting<00:03:52.860> but<00:03:53.520> let's<00:03:53.880> take<00:03:54.090> a<00:03:54.240> nice

00:03:54.430 --> 00:03:54.440 
get starting but let's take a nice

00:03:54.440 --> 00:03:57.790 
get starting but let's take a nice
review<00:03:55.440> of<00:03:55.470> what<00:03:56.070> we<00:03:56.280> have<00:03:56.400> really<00:03:56.730> done

00:03:57.790 --> 00:03:57.800 
review of what we have really done

00:03:57.800 --> 00:04:01.310 
review of what we have really done
throughout<00:03:58.800> our<00:03:59.100> previous<00:03:59.730> videos<00:04:00.060> so<00:04:00.320> what

00:04:01.310 --> 00:04:01.320 
throughout our previous videos so what

00:04:01.320 --> 00:04:02.870 
throughout our previous videos so what
is<00:04:01.470> estimable<00:04:01.890> language<00:04:02.400> is<00:04:02.580> a<00:04:02.610> low-level

00:04:02.870 --> 00:04:02.880 
is estimable language is a low-level

00:04:02.880 --> 00:04:05.740 
is estimable language is a low-level
language<00:04:03.480> and<00:04:03.750> blablabla<00:04:04.050> you<00:04:04.920> can<00:04:05.070> get<00:04:05.310> and

00:04:05.740 --> 00:04:05.750 
language and blablabla you can get and

00:04:05.750 --> 00:04:09.620 
language and blablabla you can get and
then<00:04:06.750> what<00:04:07.620> computer<00:04:08.160> understands<00:04:08.670> 1<00:04:09.180> and<00:04:09.360> 0

00:04:09.620 --> 00:04:09.630 
then what computer understands 1 and 0

00:04:09.630 --> 00:04:12.290 
then what computer understands 1 and 0
and<00:04:09.840> what<00:04:10.170> we<00:04:10.290> understand<00:04:10.800> is<00:04:11.280> add<00:04:11.640> and<00:04:12.000> sub

00:04:12.290 --> 00:04:12.300 
and what we understand is add and sub

00:04:12.300 --> 00:04:15.800 
and what we understand is add and sub
and<00:04:12.540> next<00:04:13.530> what<00:04:13.709> to<00:04:14.070> use<00:04:14.280> you<00:04:14.820> know<00:04:14.910> I'm<00:04:15.239> using

00:04:15.800 --> 00:04:15.810 
and next what to use you know I'm using

00:04:15.810 --> 00:04:18.440 
and next what to use you know I'm using
a<00:04:15.989> Linux<00:04:16.200> you<00:04:16.470> can<00:04:16.620> use<00:04:16.799> Windows<00:04:17.130> water<00:04:18.030> relate

00:04:18.440 --> 00:04:18.450 
a Linux you can use Windows water relate

00:04:18.450 --> 00:04:21.890 
a Linux you can use Windows water relate
to<00:04:18.720> but<00:04:19.230> use<00:04:19.530> n<00:04:19.770> and<00:04:20.280> some<00:04:20.520> the<00:04:21.419> national

00:04:21.890 --> 00:04:21.900 
to but use n and some the national

00:04:21.900 --> 00:04:24.830 
to but use n and some the national
language<00:04:22.350> is<00:04:22.530> the<00:04:22.860> only<00:04:23.160> thing<00:04:23.370> that<00:04:24.000> talks

00:04:24.830 --> 00:04:24.840 
language is the only thing that talks

00:04:24.840 --> 00:04:26.940 
language is the only thing that talks
data<00:04:25.110> to<00:04:25.290> the<00:04:25.410> hardware

00:04:26.940 --> 00:04:26.950 
data to the hardware

00:04:26.950 --> 00:04:28.170 
data to the hardware
and<00:04:27.040> the<00:04:27.310> language<00:04:27.640> is<00:04:27.760> not<00:04:27.790> portable

00:04:28.170 --> 00:04:28.180 
and the language is not portable

00:04:28.180 --> 00:04:32.070 
and the language is not portable
remember<00:04:28.840> so<00:04:29.670> this<00:04:30.670> is<00:04:30.760> it<00:04:30.910> and<00:04:31.030> this<00:04:31.840> is<00:04:32.050> how

00:04:32.070 --> 00:04:32.080 
remember so this is it and this is how

00:04:32.080 --> 00:04:34.440 
remember so this is it and this is how
the<00:04:32.290> system<00:04:32.560> is<00:04:32.740> organized<00:04:33.280> you<00:04:33.700> can<00:04:34.000> see

00:04:34.440 --> 00:04:34.450 
the system is organized you can see

00:04:34.450 --> 00:04:38.550 
the system is organized you can see
and<00:04:35.220> finally<00:04:36.220> our<00:04:36.340> crazy<00:04:36.990> registers

00:04:38.550 --> 00:04:38.560 
and finally our crazy registers

00:04:38.560 --> 00:04:41.160 
and finally our crazy registers
thank<00:04:38.980> you<00:04:39.100> for<00:04:39.220> watching<00:04:39.400> those<00:04:39.760> videos<00:04:40.170> next

00:04:41.160 --> 00:04:41.170 
thank you for watching those videos next

00:04:41.170 --> 00:04:43.530 
thank you for watching those videos next
from<00:04:41.800> next<00:04:42.040> movie<00:04:42.340> I'll<00:04:42.640> be<00:04:42.940> going<00:04:43.210> for<00:04:43.360> the

00:04:43.530 --> 00:04:43.540 
from next movie I'll be going for the

00:04:43.540 --> 00:04:48.360 
from next movie I'll be going for the
coding<00:04:44.200> and<00:04:45.210> thanks<00:04:46.210> for<00:04:46.300> watching

