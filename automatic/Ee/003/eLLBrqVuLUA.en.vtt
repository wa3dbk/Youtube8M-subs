WEBVTT
Kind: captions
Language: en

00:00:00.440 --> 00:00:04.310
 hello friends welcome to the room 

00:00:02.570 --> 00:00:06.670
 programming episode of a game of 

00:00:04.310 --> 00:00:09.079
 2d role in java in this episode 

00:00:06.670 --> 00:00:12.139
 we will implement the main core of 

00:00:09.079 --> 00:00:14.389
 our game the main loop is 

00:00:12.139 --> 00:00:16.520
 simply a while loop in which 

00:00:14.389 --> 00:00:18.980
 will repeat indefinitely two 

00:00:16.520 --> 00:00:21.740
 one methods will be responsible for updating 

00:00:18.980 --> 00:00:23.720
 the state of the game the other will handle 

00:00:21.740 --> 00:00:26.000
 to go drawing the graphics that we see 

00:00:23.720 --> 00:00:28.970
 on screen first 

00:00:26.000 --> 00:00:30.590
 we will need a volley that does not control and 

00:00:28.970 --> 00:00:34.789
 tell us if the game is running 

00:00:30.590 --> 00:00:40.749
 or we will not create driver here 

00:00:34.789 --> 00:00:40.749
 static william in operation 

00:00:42.340 --> 00:00:47.350
 that we will start as a fake 

00:00:44.200 --> 00:00:50.140
 defect and now to start our 

00:00:47.350 --> 00:00:53.170
 game we will do it from the start method 

00:00:50.140 --> 00:00:56.850
 and we will put it before creating the new 3 

00:00:53.170 --> 00:00:56.850
 now it was explained why 

00:00:59.010 --> 00:01:04.739
 and in stopping in the same way what 

00:01:02.250 --> 00:01:07.430
 we will force to stop again 

00:01:04.739 --> 00:01:07.430
 our game 

00:01:10.920 --> 00:01:16.409
 finally within the second offers the 

00:01:14.310 --> 00:01:18.509
 run method that you remember is the one 

00:01:16.409 --> 00:01:20.759
 execute all the actions of the second 

00:01:18.509 --> 00:01:22.439
 three that we created let's delete this line and 

00:01:20.759 --> 00:01:24.630
 that we use it only to prove that 

00:01:22.439 --> 00:01:26.990
 it worked and we'll put our loop 

00:01:24.630 --> 00:01:26.990
 while 

00:01:32.630 --> 00:01:39.530
 well now we are ready what 

00:01:36.770 --> 00:01:42.049
 is in this loop will run one and 

00:01:39.530 --> 00:01:43.650
 again while the operation is 

00:01:42.049 --> 00:01:45.570
 true 

00:01:43.650 --> 00:01:47.880
 at the time where we have the 

00:01:45.570 --> 00:01:50.510
 running game will become 

00:01:47.880 --> 00:01:52.890
 false and this loop will stop running 

00:01:50.510 --> 00:01:54.930
 before going on later I have to 

00:01:52.890 --> 00:01:57.210
 explain them a couple of things about the 

00:01:54.930 --> 00:02:00.030
 I work with multiple 3 

00:01:57.210 --> 00:02:03.390
 if you notice this variable that we have 

00:02:00.030 --> 00:02:05.159
 we are using it in our 23 and 

00:02:03.390 --> 00:02:06.990
 this is dangerous it can cause that 

00:02:05.159 --> 00:02:09.720
 our program has a hang and it 

00:02:06.990 --> 00:02:14.600
 close unexpectedly that's why we should 

00:02:09.720 --> 00:02:14.600
 place the volatile reserved word 

00:02:15.050 --> 00:02:20.360
 volatile means that this variable does not 

00:02:17.930 --> 00:02:23.740
 may be used simultaneously by 

00:02:20.360 --> 00:02:26.930
 the 23 imagine what would happen if while 

00:02:23.740 --> 00:02:29.390
 this loop is using the operation 

00:02:26.930 --> 00:02:31.820
 to go running one of these 

00:02:29.390 --> 00:02:33.980
 methods that is used from the method 

00:02:31.820 --> 00:02:37.040
 main as initial 

00:02:33.980 --> 00:02:38.810
 I decided to change this variable in this 

00:02:37.040 --> 00:02:40.670
 case would be stopped if the change 

00:02:38.810 --> 00:02:42.349
 true to false 

00:02:40.670 --> 00:02:44.959
 while the loop is trying to read 

00:02:42.349 --> 00:02:47.030
 the variable then we would have a 

00:02:44.959 --> 00:02:50.430
 corrupted variable and our program 

00:02:47.030 --> 00:02:52.890
 it would be closed by a serious error 

00:02:50.430 --> 00:02:55.980
 so that this does not happen we have already placed 

00:02:52.890 --> 00:02:59.219
 volatile in this way while a train 

00:02:55.980 --> 00:03:02.099
 is reading or writing this variable 

00:02:59.219 --> 00:03:03.930
 the other will not touch it until it is 

00:03:02.099 --> 00:03:06.540
 insured is to say until it has 

00:03:03.930 --> 00:03:08.819
 finished writing or reading the second 

00:03:06.540 --> 00:03:11.010
 what we have to do is put in the 

00:03:08.819 --> 00:03:14.359
 two methods that are going to manipulate it the 

00:03:11.010 --> 00:03:14.359
 word sincro 

00:03:15.400 --> 00:03:21.519
 this word does a little bit the same as 

00:03:19.030 --> 00:03:23.769
 volatile with the boolean variable it 

00:03:21.519 --> 00:03:26.260
 ensures that these two methods do not 

00:03:23.769 --> 00:03:28.050
 can modify simultaneously 

00:03:26.260 --> 00:03:30.590
 this variable 

00:03:28.050 --> 00:03:33.150
 because it would also cause a serious error 

00:03:30.590 --> 00:03:35.040
 it is unlikely that these two methods 

00:03:33.150 --> 00:03:36.750
 can be executed at the same time but in itself 

00:03:35.040 --> 00:03:38.240
 perhaps we will make sure 

00:03:36.750 --> 00:03:41.870
 keyword 

00:03:38.240 --> 00:03:44.090
 While at this point we're ready go 

00:03:41.870 --> 00:03:47.190
 to add a little more code here 

00:03:44.090 --> 00:03:49.890
 down on stop let's complete it 

00:03:47.190 --> 00:03:54.770
 let's stop our 3 

00:03:49.890 --> 00:03:54.770
 let's just write three points 

00:03:55.120 --> 00:03:59.860
 you will see that soon inscription we 

00:03:57.159 --> 00:04:02.350
 notes that this is an error because 

00:03:59.860 --> 00:04:04.660
 because it is an operation with 

00:04:02.350 --> 00:04:06.730
 a train is risky and can cause a 

00:04:04.660 --> 00:04:10.010
 error in the program that's why we should 

00:04:06.730 --> 00:04:11.569
 surround it with a try captcha block 

00:04:10.010 --> 00:04:13.569
 as you see eclipse does it in a way 

00:04:11.569 --> 00:04:15.769
 automatic when we apply in the option 

00:04:13.569 --> 00:04:17.459
 can you delete this comment of take 

00:04:15.769 --> 00:04:20.220
 tico 

00:04:17.459 --> 00:04:23.160
 the try call simply means that 

00:04:20.220 --> 00:04:25.740
 when in the back is 

00:04:23.160 --> 00:04:29.069
 will try to execute this action and if this 

00:04:25.740 --> 00:04:32.729
 would fail would marry so to speak 

00:04:29.069 --> 00:04:35.430
 error with this exception that is like in 

00:04:32.729 --> 00:04:37.680
 java is called the errors and the program 

00:04:35.430 --> 00:04:40.080
 it would not hang, that is, nothing would happen 

00:04:37.680 --> 00:04:43.050
 at least for the user 

00:04:40.080 --> 00:04:45.930
 and this helps us print on the 

00:04:43.050 --> 00:04:47.400
 console information regarding the error 

00:04:45.930 --> 00:04:49.620
 to be able to find out what happened 

00:04:47.400 --> 00:04:51.360
 although the user will not see it because 

00:04:49.620 --> 00:04:53.159
 have access to the console while playing 

00:04:51.360 --> 00:04:55.160
 the game is only for us for the 

00:04:53.159 --> 00:04:58.640
 developers 

00:04:55.160 --> 00:05:00.950
 well and because I guess you'll know that 

00:04:58.640 --> 00:05:03.620
 there are more operations and one that is used 

00:05:00.950 --> 00:05:07.400
 commonly and wrongly stress 

00:05:03.620 --> 00:05:10.820
 stop this is very unwise already 

00:05:07.400 --> 00:05:12.590
 that closes the thread abruptly what 

00:05:10.820 --> 00:05:15.260
 what can you do if you were using 

00:05:12.590 --> 00:05:18.080
 a variable like in this case this 

00:05:15.260 --> 00:05:20.450
 loop to this variable gets corrupted since 

00:05:18.080 --> 00:05:22.070
 it suddenly cut to the execution and 

00:05:20.450 --> 00:05:23.729
 therefore the entire program will 

00:05:22.070 --> 00:05:26.550
 I would stop 

00:05:23.729 --> 00:05:29.339
 to avoid it we use joint unlike 

00:05:26.550 --> 00:05:31.830
 stop and today does not stop immediately in 

00:05:29.339 --> 00:05:33.629
 train is waiting for the train has just 

00:05:31.830 --> 00:05:36.849
 execute what he was doing and 

00:05:33.629 --> 00:05:38.849
 then yes it stops him 

00:05:36.849 --> 00:05:42.759
 this is possible because if you look 

00:05:38.849 --> 00:05:44.259
 first we put the bule an in false 

00:05:42.759 --> 00:05:47.259
 this way the only thing he was doing 

00:05:44.259 --> 00:05:48.789
 our 3 that was to turn this loop already 

00:05:47.259 --> 00:05:51.189
 will stop doing it because the condition 

00:05:48.789 --> 00:05:55.179
 will cease to be fulfilled and then what 

00:05:51.189 --> 00:05:58.959
 close also I will tell you what to do 

00:05:55.179 --> 00:06:01.899
 the variable when starting before creating the 

00:05:58.959 --> 00:06:04.809
 new train because because if you put it 

00:06:01.899 --> 00:06:07.539
 behind behind start will create this 

00:06:04.809 --> 00:06:10.240
 new train and it will start running run and 

00:06:07.539 --> 00:06:11.559
 may not give time to the 

00:06:10.240 --> 00:06:13.929
 virtual machine to fix in 

00:06:11.559 --> 00:06:17.159
 working on true immediately and 

00:06:13.929 --> 00:06:19.089
 so when this method starts while 

00:06:17.159 --> 00:06:21.939
 will check if in operation it is 

00:06:19.089 --> 00:06:25.089
 true and if you do not have time to do 

00:06:21.939 --> 00:06:26.639
 this will be false so this instruction 

00:06:25.089 --> 00:06:28.740
 it will happen 

00:06:26.639 --> 00:06:31.110
 in three it will close again because no 

00:06:28.740 --> 00:06:34.620
 have nothing to do then put it 

00:06:31.110 --> 00:06:37.139
 always in front of the creation of 3 

00:06:34.620 --> 00:06:39.720
 and guys this is all for this episode 

00:06:37.139 --> 00:06:41.520
 in the next episode we will create a 

00:06:39.720 --> 00:06:44.090
 timer that helps us control 

00:06:41.520 --> 00:06:46.199
 how many times per second we will perform 

00:06:44.090 --> 00:06:49.169
 updates and redrawn from the 

00:06:46.199 --> 00:06:50.880
 screen if you like the episode give it to 

00:06:49.169 --> 00:06:52.440
 I like it and if you are interested in the series 

00:06:50.880 --> 00:06:57.470
 subscribe to get updates 

00:06:52.440 --> 00:06:57.470
 immediate greetings and until next time 

