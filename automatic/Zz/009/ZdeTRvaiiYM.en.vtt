WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.969 

introducing<00:00:00.780> the<00:00:00.810> new<00:00:00.930> Python<00:00:01.650> from

00:00:01.969 --> 00:00:01.979 
introducing the new Python from

00:00:01.979 --> 00:00:04.670 
introducing the new Python from
Brunswick<00:00:02.250> hi<00:00:03.060> I'm<00:00:03.419> Billy<00:00:03.810> Oh<00:00:03.929> consumer

00:00:04.670 --> 00:00:04.680 
Brunswick hi I'm Billy Oh consumer

00:00:04.680 --> 00:00:06.710 
Brunswick hi I'm Billy Oh consumer
products<00:00:05.190> product<00:00:05.580> manager<00:00:06.029> for<00:00:06.299> Brunswick

00:00:06.710 --> 00:00:06.720 
products product manager for Brunswick

00:00:06.720 --> 00:00:09.410 
products product manager for Brunswick
bullying<00:00:07.109> the<00:00:08.069> Python<00:00:08.550> is<00:00:08.730> the<00:00:08.910> first<00:00:09.150> ball

00:00:09.410 --> 00:00:09.420 
bullying the Python is the first ball

00:00:09.420 --> 00:00:11.480 
bullying the Python is the first ball
with<00:00:09.690> end<00:00:09.929> motion<00:00:10.139> cover<00:00:10.590> stock<00:00:10.920> and<00:00:11.250> the

00:00:11.480 --> 00:00:11.490 
with end motion cover stock and the

00:00:11.490 --> 00:00:14.209 
with end motion cover stock and the
ultra<00:00:11.969> low<00:00:12.179> inferno<00:00:12.690> core<00:00:13.049> shape<00:00:13.320> available

00:00:14.209 --> 00:00:14.219 
ultra low inferno core shape available

00:00:14.219 --> 00:00:16.330 
ultra low inferno core shape available
at<00:00:14.370> the<00:00:14.519> advanced<00:00:15.000> performance<00:00:15.150> price<00:00:15.809> point

00:00:16.330 --> 00:00:16.340 
at the advanced performance price point

00:00:16.340 --> 00:00:19.070 
at the advanced performance price point
the<00:00:17.340> advanced<00:00:17.699> performance<00:00:18.359> series<00:00:18.570> uses

00:00:19.070 --> 00:00:19.080 
the advanced performance series uses

00:00:19.080 --> 00:00:21.260 
the advanced performance series uses
proven<00:00:19.320> cores<00:00:19.800> and<00:00:20.100> strong<00:00:20.400> reactive<00:00:21.029> cover

00:00:21.260 --> 00:00:21.270 
proven cores and strong reactive cover

00:00:21.270 --> 00:00:23.150 
proven cores and strong reactive cover
stocks<00:00:21.689> to<00:00:21.960> create<00:00:22.260> balls<00:00:22.560> that<00:00:22.859> deliver

00:00:23.150 --> 00:00:23.160 
stocks to create balls that deliver

00:00:23.160 --> 00:00:25.570 
stocks to create balls that deliver
extraordinary<00:00:24.060> value<00:00:24.630> to<00:00:24.869> the<00:00:25.019> bowler<00:00:25.230> a

00:00:25.570 --> 00:00:25.580 
extraordinary value to the bowler a

00:00:25.580 --> 00:00:28.519 
extraordinary value to the bowler a
Python<00:00:26.580> joins<00:00:26.939> the<00:00:27.180> rattler<00:00:27.570> and<00:00:27.599> Copperhead

00:00:28.519 --> 00:00:28.529 
Python joins the rattler and Copperhead

00:00:28.529 --> 00:00:30.859 
Python joins the rattler and Copperhead
to<00:00:28.740> provide<00:00:29.099> exceptional<00:00:29.630> versatility<00:00:30.630> in

00:00:30.859 --> 00:00:30.869 
to provide exceptional versatility in

00:00:30.869 --> 00:00:34.010 
to provide exceptional versatility in
the<00:00:31.140> line<00:00:31.460> the<00:00:32.460> Python<00:00:32.969> uses<00:00:33.420> an<00:00:33.570> updated

00:00:34.010 --> 00:00:34.020 
the line the Python uses an updated

00:00:34.020 --> 00:00:35.630 
the line the Python uses an updated
version<00:00:34.200> of<00:00:34.500> the<00:00:34.649> inferno<00:00:35.070> core<00:00:35.399> shape

00:00:35.630 --> 00:00:35.640 
version of the inferno core shape

00:00:35.640 --> 00:00:38.450 
version of the inferno core shape
providing<00:00:36.450> an<00:00:36.570> ultra-low<00:00:37.140> RG<00:00:37.590> core<00:00:37.860> that<00:00:38.219> when

00:00:38.450 --> 00:00:38.460 
providing an ultra-low RG core that when

00:00:38.460 --> 00:00:40.750 
providing an ultra-low RG core that when
combined<00:00:38.969> with<00:00:39.270> the<00:00:39.480> end<00:00:39.629> motion<00:00:39.870> cover<00:00:40.290> stock

00:00:40.750 --> 00:00:40.760 
combined with the end motion cover stock

00:00:40.760 --> 00:00:43.160 
combined with the end motion cover stock
produces<00:00:41.760> a<00:00:41.790> ball<00:00:42.059> reaction<00:00:42.570> that<00:00:42.719> is<00:00:42.899> very

00:00:43.160 --> 00:00:43.170 
produces a ball reaction that is very

00:00:43.170 --> 00:00:45.889 
produces a ball reaction that is very
powerful<00:00:43.620> and<00:00:43.980> very<00:00:44.460> predictable<00:00:45.210> at<00:00:45.660> the

00:00:45.889 --> 00:00:45.899 
powerful and very predictable at the

00:00:45.899 --> 00:00:47.920 
powerful and very predictable at the
advanced<00:00:46.320> performance<00:00:46.590> price<00:00:47.250> point<00:00:47.579> a

00:00:47.920 --> 00:00:47.930 
advanced performance price point a

00:00:47.930 --> 00:00:51.049 
advanced performance price point a
pearlized<00:00:48.930> version<00:00:49.500> of<00:00:49.710> nmotion<00:00:50.250> cover<00:00:50.700> stock

00:00:51.049 --> 00:00:51.059 
pearlized version of nmotion cover stock

00:00:51.059 --> 00:00:53.510 
pearlized version of nmotion cover stock
is<00:00:51.300> used<00:00:51.570> on<00:00:51.719> the<00:00:51.780> Python<00:00:52.350> and<00:00:52.590> motion

00:00:53.510 --> 00:00:53.520 
is used on the Python and motion

00:00:53.520 --> 00:00:55.459 
is used on the Python and motion
combines<00:00:53.969> the<00:00:54.210> best<00:00:54.390> elements<00:00:54.989> from<00:00:55.199> our

00:00:55.459 --> 00:00:55.469 
combines the best elements from our

00:00:55.469 --> 00:00:58.099 
combines the best elements from our
power<00:00:55.680> coil<00:00:56.210> activator<00:00:57.210> and<00:00:57.329> end<00:00:57.870> control

00:00:58.099 --> 00:00:58.109 
power coil activator and end control

00:00:58.109 --> 00:01:02.000 
power coil activator and end control
cover<00:00:58.649> stock<00:00:59.010> systems<00:01:00.500> predictable<00:01:01.500> power<00:01:01.739> is

00:01:02.000 --> 00:01:02.010 
cover stock systems predictable power is

00:01:02.010 --> 00:01:04.670 
cover stock systems predictable power is
the<00:01:02.190> best<00:01:02.460> way<00:01:02.670> to<00:01:02.699> describe<00:01:03.210> the<00:01:03.510> Python<00:01:03.989> with

00:01:04.670 --> 00:01:04.680 
the best way to describe the Python with

00:01:04.680 --> 00:01:06.859 
the best way to describe the Python with
a<00:01:04.710> more<00:01:05.040> direct<00:01:05.250> line<00:01:05.729> of<00:01:05.760> attack<00:01:06.270> on<00:01:06.540> the<00:01:06.659> lane

00:01:06.859 --> 00:01:06.869 
a more direct line of attack on the lane

00:01:06.869 --> 00:01:09.800 
a more direct line of attack on the lane
Avast<00:01:07.860> revving<00:01:08.310> core<00:01:08.640> and<00:01:08.939> constricting

00:01:09.800 --> 00:01:09.810 
Avast revving core and constricting

00:01:09.810 --> 00:01:12.649 
Avast revving core and constricting
power<00:01:10.080> on<00:01:10.350> the<00:01:10.500> pins<00:01:10.799> the<00:01:11.130> Python<00:01:12.030> provides<00:01:12.299> a

00:01:12.649 --> 00:01:12.659 
power on the pins the Python provides a

00:01:12.659 --> 00:01:14.690 
power on the pins the Python provides a
secure<00:01:12.900> ball<00:01:13.470> reaction<00:01:14.070> at<00:01:14.220> the<00:01:14.340> advanced

00:01:14.690 --> 00:01:14.700 
secure ball reaction at the advanced

00:01:14.700 --> 00:01:17.510 
secure ball reaction at the advanced
performance<00:01:15.000> price<00:01:15.720> point<00:01:16.049> the<00:01:16.740> Python<00:01:17.250> is<00:01:17.490> a

00:01:17.510 --> 00:01:17.520 
performance price point the Python is a

00:01:17.520 --> 00:01:20.090 
performance price point the Python is a
great<00:01:17.909> ball<00:01:18.180> on<00:01:18.420> fresh<00:01:18.780> conditions<00:01:19.380> and<00:01:19.590> an

00:01:20.090 --> 00:01:20.100 
great ball on fresh conditions and an

00:01:20.100 --> 00:01:21.590 
great ball on fresh conditions and an
even<00:01:20.430> better<00:01:20.700> ball<00:01:21.030> when<00:01:21.270> the<00:01:21.390> lank

00:01:21.590 --> 00:01:21.600 
even better ball when the lank

00:01:21.600 --> 00:01:25.969 
even better ball when the lank
conditions<00:01:22.170> become<00:01:22.560> unpredictable<00:01:24.799> here<00:01:25.799> we

00:01:25.969 --> 00:01:25.979 
conditions become unpredictable here we

00:01:25.979 --> 00:01:27.980 
conditions become unpredictable here we
see<00:01:26.189> the<00:01:26.310> rattler<00:01:26.729> from<00:01:27.000> the<00:01:27.150> same<00:01:27.420> alignment

00:01:27.980 --> 00:01:27.990 
see the rattler from the same alignment

00:01:27.990 --> 00:01:32.149 
see the rattler from the same alignment
as<00:01:28.140> the<00:01:28.350> Python<00:01:30.020> moving<00:01:31.020> three<00:01:31.439> and<00:01:31.619> one<00:01:31.860> to

00:01:32.149 --> 00:01:32.159 
as the Python moving three and one to

00:01:32.159 --> 00:01:33.920 
as the Python moving three and one to
the<00:01:32.280> inside<00:01:32.700> the<00:01:33.000> rattler<00:01:33.390> is<00:01:33.570> cleaner

00:01:33.920 --> 00:01:33.930 
the inside the rattler is cleaner

00:01:33.930 --> 00:01:35.719 
the inside the rattler is cleaner
through<00:01:34.259> the<00:01:34.380> front<00:01:34.680> with<00:01:35.250> a<00:01:35.280> quicker

00:01:35.719 --> 00:01:35.729 
through the front with a quicker

00:01:35.729 --> 00:01:38.569 
through the front with a quicker
response<00:01:36.060> off<00:01:36.600> the<00:01:36.810> dry<00:01:37.110> for<00:01:37.799> a<00:01:37.829> more<00:01:38.189> angular

00:01:38.569 --> 00:01:38.579 
response off the dry for a more angular

00:01:38.579 --> 00:01:41.569 
response off the dry for a more angular
back-end<00:01:39.270> than<00:01:39.479> the<00:01:39.600> Python<00:01:40.070> here<00:01:41.070> we<00:01:41.220> see<00:01:41.460> the

00:01:41.569 --> 00:01:41.579 
back-end than the Python here we see the

00:01:41.579 --> 00:01:43.399 
back-end than the Python here we see the
Copperhead<00:01:42.150> from<00:01:42.390> the<00:01:42.509> same<00:01:42.780> alignment<00:01:43.079> as

00:01:43.399 --> 00:01:43.409 
Copperhead from the same alignment as

00:01:43.409 --> 00:01:45.860 
Copperhead from the same alignment as
the<00:01:43.590> rattler

00:01:45.860 --> 00:01:45.870 
the rattler

00:01:45.870 --> 00:01:48.410 
the rattler
moving<00:01:46.800> two<00:01:47.070> and<00:01:47.250> one<00:01:47.430> to<00:01:47.670> the<00:01:47.700> inside<00:01:48.180> the

00:01:48.410 --> 00:01:48.420 
moving two and one to the inside the

00:01:48.420 --> 00:01:50.090 
moving two and one to the inside the
Copperhead<00:01:48.960> is<00:01:49.080> more<00:01:49.380> aggressive<00:01:49.890> in<00:01:49.980> the

00:01:50.090 --> 00:01:50.100 
Copperhead is more aggressive in the

00:01:50.100 --> 00:01:52.550 
Copperhead is more aggressive in the
front<00:01:50.400> and<00:01:50.610> mid<00:01:50.910> lane<00:01:51.180> with<00:01:51.480> a<00:01:51.510> strong<00:01:51.990> arcing

00:01:52.550 --> 00:01:52.560 
front and mid lane with a strong arcing

00:01:52.560 --> 00:01:58.160 
front and mid lane with a strong arcing
back<00:01:52.740> end<00:01:55.220> the<00:01:56.220> Python<00:01:56.700> extends<00:01:57.420> the<00:01:57.630> advanced

00:01:58.160 --> 00:01:58.170 
back end the Python extends the advanced

00:01:58.170 --> 00:01:59.840 
back end the Python extends the advanced
performance<00:01:58.710> series<00:01:58.950> by<00:01:59.280> adding<00:01:59.670> a

00:01:59.840 --> 00:01:59.850 
performance series by adding a

00:01:59.850 --> 00:02:01.940 
performance series by adding a
predictable<00:02:00.510> power<00:02:00.780> option<00:02:01.380> to<00:02:01.590> the<00:02:01.680> price

00:02:01.940 --> 00:02:01.950 
predictable power option to the price

00:02:01.950 --> 00:02:04.550 
predictable power option to the price
point<00:02:02.310> to<00:02:02.550> provide<00:02:02.910> even<00:02:03.150> more<00:02:03.330> selections<00:02:04.290> to

00:02:04.550 --> 00:02:04.560 
point to provide even more selections to

00:02:04.560 --> 00:02:06.860 
point to provide even more selections to
match<00:02:04.830> up<00:02:05.070> to<00:02:05.100> lane<00:02:05.490> conditions<00:02:05.760> and<00:02:06.330> bowler

00:02:06.860 --> 00:02:06.870 
match up to lane conditions and bowler

00:02:06.870 --> 00:02:10.910 
match up to lane conditions and bowler
styles<00:02:07.790> for<00:02:08.790> medium<00:02:09.180> conditions<00:02:09.780> for<00:02:10.530> bowlers

00:02:10.910 --> 00:02:10.920 
styles for medium conditions for bowlers

00:02:10.920 --> 00:02:13.160 
styles for medium conditions for bowlers
that<00:02:10.950> prefer<00:02:11.640> a<00:02:11.670> predictable<00:02:12.480> Powerball

00:02:13.160 --> 00:02:13.170 
that prefer a predictable Powerball

00:02:13.170 --> 00:02:15.590 
that prefer a predictable Powerball
reaction<00:02:13.830> the<00:02:14.340> Python<00:02:14.850> will<00:02:15.090> be<00:02:15.180> a<00:02:15.210> great

00:02:15.590 --> 00:02:15.600 
reaction the Python will be a great

00:02:15.600 --> 00:02:19.310 
reaction the Python will be a great
addition<00:02:16.140> to<00:02:16.170> your<00:02:16.290> arsenal<00:02:17.480> get<00:02:18.480> a<00:02:18.510> Python<00:02:19.110> to

00:02:19.310 --> 00:02:19.320 
addition to your arsenal get a Python to

00:02:19.320 --> 00:02:20.930 
addition to your arsenal get a Python to
help<00:02:19.500> squeeze<00:02:19.950> the<00:02:20.280> life<00:02:20.520> out<00:02:20.730> of<00:02:20.790> your

00:02:20.930 --> 00:02:20.940 
help squeeze the life out of your

00:02:20.940 --> 00:02:23.210 
help squeeze the life out of your
opponent<00:02:21.510> thank<00:02:22.260> you<00:02:22.470> for<00:02:22.770> considering

00:02:23.210 --> 00:02:23.220 
opponent thank you for considering

00:02:23.220 --> 00:02:25.940 
opponent thank you for considering
Brunswick

