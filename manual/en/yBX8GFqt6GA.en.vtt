WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.440
It perhaps isn't clear from the JPEG video

00:00:02.440 --> 00:00:04.380
when JPEG isn't a good idea.

00:00:04.380 --> 00:00:07.860
I mean, a lot of people say "oh, you should never use JPEG for scientific images" or something like that

00:00:07.860 --> 00:00:11.380
because it's totally lossy compression, you're going to lose those equality.

00:00:11.380 --> 00:00:13.100
And that is true

00:00:13.100 --> 00:00:17.460
but it's also not in a sense that you're applying its lossy compression over very very small image blocks.

00:00:17.460 --> 00:00:20.900
So you won't get coherence between one block and the next

00:00:20.900 --> 00:00:24.740
but it'll look pretty good and for most imaging that's okay.

00:00:24.740 --> 00:00:28.040
Obviously lots of people swear by shooting in raw, and you know, good luck to them.

00:00:30.640 --> 00:00:36.140
JPEG uses up a lot less space, and so for most practical purposes a JPEG image is fine.

00:00:36.140 --> 00:00:39.960
One time where JPEG images are not fine is text.

00:00:39.960 --> 00:00:45.260
Most people will have spotted JPEG artefacts, that is, speckly bits of image around text

00:00:45.260 --> 00:00:50.020
and maybe not quite understood why that's there apart from it's just a side effect of JPEG compression.

00:00:50.020 --> 00:00:53.180
Well specifically, it's a side effect of JPEG compression on text

00:00:53.180 --> 00:00:55.960
because text violates our assumptions that

00:00:55.960 --> 00:00:59.160
high frequency information doesn't contribute a lot to the image.

00:00:59.160 --> 00:01:02.980
So this is a small 8x8 image that I've come up with to illustrate its purpose.

00:01:02.980 --> 00:01:07.740
So this is, in a sense, text. This is the Computerphile C with its little triangular brackets.

00:01:07.740 --> 00:01:11.100
It's 8x8, so it's not the highest resolution, but it serves our purpose quite well.

00:01:11.100 --> 00:01:16.920
One thing that this image has that our last image of the flower didn't have is sharp changes in intensity.

00:01:16.920 --> 00:01:20.080
So this C has a sharp step down into the background

00:01:20.080 --> 00:01:22.560
and that is not something that JPEG handles very well at all.

00:01:22.580 --> 00:01:25.940
If we look at the encoded luminosity block of this

00:01:25.940 --> 00:01:27.240
we get this.

00:01:27.240 --> 00:01:32.380
So this is our C represented as just 0 to 255 luminosity values.

00:01:32.380 --> 00:01:34.280
So these are our background ones of about 48.

00:01:34.280 --> 00:01:35.520
This is our C here

00:01:35.520 --> 00:01:36.800
and our brackets here

00:01:36.800 --> 00:01:41.560
Each of these represents the greyscale intensity of that corresponding pixel in our 8x8 image.

00:01:41.560 --> 00:01:45.540
Now if we were encoding this in JPEG, what we would then do is we would shift all these

00:01:45.540 --> 00:01:48.440
and we would calculate our DCT coefficients.

00:01:48.440 --> 00:01:53.140
And then we would get rid of the high frequency ones and we would encode them.

00:01:53.140 --> 00:01:58.760
And in doing so, we massively compress the image at what we assume to be a pretty reasonable quality.

00:01:58.760 --> 00:02:01.020
But that isn't true in this case.

00:02:01.020 --> 00:02:04.040
If we look at the DCT coefficients

00:02:04.040 --> 00:02:07.880
you can see that our assumption that the big ones are always in the top left

00:02:07.880 --> 00:02:10.240
so that the low frequency contributes more to the image

00:02:10.240 --> 00:02:11.600
is hugely violated.

00:02:11.600 --> 00:02:15.460
This particular coefficient, for example, only contributes 0.8.

00:02:15.460 --> 00:02:18.520
That was, I think, a value of 200 or something in our last video.

00:02:18.520 --> 00:02:24.660
Down here we have big, big coefficients.  30, 67.5, 53, -53.

00:02:24.660 --> 00:02:27.420
All in these really high frequency cosine waves.

00:02:27.420 --> 00:02:31.360
So if we look at our logo coefficients next to our DCT

00:02:31.360 --> 00:02:35.540
We can see that what we've essentially got is a loss of this one here, so that's this one.

00:02:35.560 --> 00:02:39.280
So this C has a lot of this particularly contributable one

00:02:39.280 --> 00:02:42.600
which you can kind of see because there is a kind of C shape in it.

00:02:42.600 --> 00:02:47.320
And so, it's hard perhaps to grasp the exact contribution that this will have

00:02:47.320 --> 00:02:50.480
because these coefficients are essentially arbitrary numbers

00:02:50.480 --> 00:02:55.800
But the point is that this image is the addition of lots of these high frequency sections

00:02:55.800 --> 00:02:58.100
and a lot less of these low frequency ones.

00:02:58.100 --> 00:03:04.120
So when we do our standard quantization, we're going to divide all of these numbers by huge amounts

00:03:04.120 --> 00:03:06.000
and set most of them to 0

00:03:06.000 --> 00:03:10.720
and that's going to be a big problem, because when we then recreate the image on the other side

00:03:10.720 --> 00:03:15.560
we're going to find that what was vital in creating this image is now gone and we're not going to get it back.

00:03:15.560 --> 00:03:19.820
And in fact that's exactly what you do see. So if we show the actual output here

00:03:19.820 --> 00:03:22.060
we can see that our C is kind of visible

00:03:22.070 --> 00:03:25.480
but is being completely dwarfed by all this random noise that's been added

00:03:25.480 --> 00:03:28.989
to the edge of our text. And this is exactly what happens in normal

00:03:28.989 --> 00:03:32.680
compression of text using JPEGs.  Essentially we assume

00:03:32.680 --> 00:03:36.440
just like in normal nature photographs
that we can get rid of the high frequency information

00:03:36.450 --> 00:03:40.209
and we couldn't do that.  That was a bad
idea. And so we've got all this stuff that

00:03:40.209 --> 00:03:40.941
we shouldn't have.

00:03:40.950 --> 00:03:44.110
If we look at the block when compared to the

00:03:44.110 --> 00:03:48.590
original we can see that this value is 48.  It's now 66.

00:03:48.590 --> 00:03:52.980
So a lot of these values have changed by
quite a large amount.  In our last video

00:03:52.980 --> 00:03:57.020
I think the standard error between
the old and the new were something like 3.

00:03:57.030 --> 00:04:00.989
On average they changed about 3, up or
down.  This is about 11.

00:04:00.989 --> 00:04:04.909
It's over triple the amount of sort of average error that we're getting in our pixels.

00:04:04.910 --> 00:04:08.190
And because it's text, we can see that very clearly in the output image.

00:04:08.190 --> 00:04:12.120
So, the solution to this, really, is not to use JPEG when you've got a huge amount of text

00:04:12.130 --> 00:04:16.500
bearing in mind that I shrank that C down to fit into one 8x8 block.

00:04:16.500 --> 00:04:20.240
In actual fact you would have, if you had like, a sign

00:04:20.250 --> 00:04:23.440
you would find that a letter took up a huge amount of the image

00:04:23.440 --> 00:04:27.560
and so maybe you are only compressing one small edge of it and it won't look so bad.

00:04:27.560 --> 00:04:31.479
But certainly, if you're compressing your
JPEG with text in it at 50 percent

00:04:31.480 --> 00:04:35.050
or lower quality you're going to start
to see JPEG artifacts where

00:04:35.050 --> 00:04:38.740
because these higher frequencies have been removed, you get kind of speckles

00:04:38.740 --> 00:04:43.750
where they would have dulled that down.  You might have seen it actually, if you load up a poorly

00:04:43.750 --> 00:04:45.250
compressed text document

00:04:45.250 --> 00:04:48.430
that when you zoom in it doesn't scale well and
that's why

00:04:48.440 --> 00:04:51.860
e-readers won't use something like this, they'll try and render the text sort of

00:04:51.860 --> 00:04:55.750
from source, as it were, and that way they don't have any of these problems.

00:04:55.750 --> 00:04:58.789
The interesting thing is that once this damage is done

00:04:58.789 --> 00:05:05.680
it doesn't make it worse to keep re-encoding it, because the coefficients for this are now

00:05:05.680 --> 00:05:10.130
all 0, because we set them to 0.  If we re-encoded this as a JPEG, it's not

00:05:10.130 --> 00:05:12.900
going to get progressively worse unless
we change the quality settings.

00:05:12.900 --> 00:05:16.000
It's actually just going to stay this bad.  So essentially, this is a

00:05:16.000 --> 00:05:23.820
bad JPEGable version of this, which you should stick to if you want to keep using JPEG.  But otherwise, avoid it.

00:05:26.100 --> 00:05:32.540
...absolutely useless in almost any other domain.  If you put a chess AI in a Google self-driving car

00:05:32.540 --> 00:05:36.640
not only can it not drive the car, it doesn't have the concept, it doesn't know what a car is...

