WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.500
For this question I'm going to explain
how we take an input string,

00:00:05.500 --> 00:00:10.310
which in this case is 
dot dot dot x dot dot dot dot,

00:00:10.310 --> 00:00:13.320
and we change it according to some rules.

00:00:13.320 --> 00:00:14.990
Now the rules are:

00:00:14.990 --> 00:00:18.370
look at three characters in the string

00:00:18.370 --> 00:00:20.370
and change the middle one

00:00:20.370 --> 00:00:22.950
according to the rules that we have here.

00:00:22.950 --> 00:00:25.970
Don't worry about the numbers for
the moment, I'll come to those later.

00:00:25.970 --> 00:00:29.140
So for this particular three,

00:00:29.140 --> 00:00:31.140
we have dot dot x.

00:00:31.140 --> 00:00:34.450
Now dot dot x says change
the middle element

00:00:34.450 --> 00:00:36.450
so that it's an x.

00:00:36.450 --> 00:00:38.840
So on the next string, the new string,

00:00:38.840 --> 00:00:40.840
that position is going to be an x.

00:00:40.840 --> 00:00:42.840
The position before it

00:00:42.840 --> 00:00:44.840
dot dot dot

00:00:44.840 --> 00:00:47.610
well dot dot dot becomes a dot

00:00:47.610 --> 00:00:49.120
in the middle.

00:00:49.120 --> 00:00:50.760
Now at the ends

00:00:50.760 --> 00:00:53.210
we want to link around

00:00:53.210 --> 00:00:55.960
so this dot here

00:00:55.960 --> 00:00:57.600
has to its left a dot

00:00:57.600 --> 00:00:59.110
and to its right a dot,

00:00:59.110 --> 00:01:01.110
so we have dot dot dot again

00:01:01.110 --> 00:01:03.600
and dot dot dot says change the middle

00:01:03.600 --> 00:01:05.330
to a dot.

00:01:05.330 --> 00:01:07.030
Now moving along,

00:01:07.030 --> 00:01:11.100
the next one we have to
fill in is dot x dot.

00:01:11.100 --> 00:01:14.170
Dot x dot says change the middle to an x.

00:01:14.170 --> 00:01:18.270
x dot dot,

00:01:18.270 --> 00:01:20.270
change the middle to an x

00:01:20.270 --> 00:01:21.940
dot dot dot again,

00:01:21.940 --> 00:01:23.740
middle is a dot

00:01:23.740 --> 00:01:26.390
dot dot dot, middle is a dot

00:01:26.390 --> 00:01:28.650
dot dot and then

00:01:28.650 --> 00:01:31.270
the first one is the last one here

00:01:31.270 --> 00:01:34.180
so dot dot dot again is a dot.

00:01:34.180 --> 00:01:37.790
Now that completes
one change of the string

00:01:37.790 --> 00:01:39.790
and we're going to repeat that again.

00:01:39.790 --> 00:01:42.600
So, That's the first generation.

00:01:42.600 --> 00:01:44.600
This is the second generation.

00:01:44.600 --> 00:01:48.230
Now normally when you do this, you'd
start at the beginning of the string

00:01:48.230 --> 00:01:51.310
but just to explain it, it was easier
to show you one in the middle.

00:01:51.310 --> 00:01:54.360
So this time we'll do it
from the beginning of the string.

00:01:54.360 --> 00:01:57.010
So looking at the line above,

00:01:57.010 --> 00:02:00.520
we see that the first
element in the string

00:02:00.520 --> 00:02:03.270
has a dot to its left,

00:02:03.270 --> 00:02:05.950
and a dot to its right,
so it's dot dot dot,

00:02:05.950 --> 00:02:07.650
so that's a dot.

00:02:07.650 --> 00:02:09.650
Now we have dot dot x,

00:02:09.650 --> 00:02:12.890
and dot dot x, that's number two here,

00:02:12.890 --> 00:02:14.890
gives me an x.

00:02:14.890 --> 00:02:17.350
dot x x is an x,

00:02:17.350 --> 00:02:20.070
x x x is a dot.

00:02:20.070 --> 00:02:24.030
x x dot, is a dot.

00:02:24.030 --> 00:02:28.200
x dot dot is an x.

00:02:28.200 --> 00:02:31.200
dot dot dot, is a dot.

00:02:31.200 --> 00:02:34.770
And dot dot dot is also a dot.

00:02:34.770 --> 00:02:37.050
And we can continue like that.

00:02:37.050 --> 00:02:41.020
And so after five generations,

00:02:41.020 --> 00:02:45.210
we have the string
dot dot dot x x dot x x.

00:02:45.210 --> 00:02:47.890
And you see we have quite 
an interesting pattern building up.

00:02:47.890 --> 00:02:51.920
Now, we can do this for lots of different

00:02:51.920 --> 00:02:54.300
choices of these dots and x's

00:02:54.300 --> 00:02:56.300
in blue, on the second line.

00:02:56.300 --> 00:02:59.830
In fact, we can do it
in 256 different ways.

00:02:59.830 --> 00:03:03.540
And in order to decide what

00:03:03.540 --> 00:03:06.140
pattern we're going to use, what rules rather,

00:03:06.140 --> 00:03:08.550
we can give this rule a number.

00:03:08.550 --> 00:03:11.880
Now, wherever I've got an x on the bottom row,

00:03:11.880 --> 00:03:13.620
I'm going to add up those numbers,

00:03:13.620 --> 00:03:18.190
so 2 + 4 + 8 + 16,

00:03:18.190 --> 00:03:20.190
and that gives me 30.

00:03:20.190 --> 00:03:24.710
So this here uses pattern 30.

00:03:24.710 --> 00:03:28.360
Now instead of pattern 30, we could
choose a different pattern.

00:03:28.360 --> 00:03:31.740
Let's say we choose pattern 69.

00:03:31.740 --> 00:03:35.040
Now 69, is equal to,

00:03:35.040 --> 00:03:37.690
now we have to look at these
numbers above and

00:03:37.690 --> 00:03:40.380
work out how to make 69

00:03:40.380 --> 00:03:42.260
out of those numbers.

00:03:42.260 --> 00:03:46.280
Well, 128 doesn't go into 69,
so we don't need any of those.

00:03:46.280 --> 00:03:49.370
64 does so we want a 64.

00:03:49.370 --> 00:03:51.510
We don't want any 32's.

00:03:51.510 --> 00:03:54.200
We don't want any 16's, nor 8.

00:03:54.200 --> 00:03:56.020
But we do need 4,

00:03:56.020 --> 00:03:58.540
don't need 2, and we do need 1.

00:03:58.540 --> 00:04:02.650
So 64 + 4 + 1, 69.

00:04:02.650 --> 00:04:05.140
So that means, that we want 1.

00:04:05.140 --> 00:04:07.910
That means were going
to replace dot dot dot,

00:04:07.910 --> 00:04:09.910
the middle element by an x.

00:04:09.910 --> 00:04:12.710
No 2's. We do have a 4.

00:04:12.710 --> 00:04:14.710
We don't have an eight.

00:04:14.710 --> 00:04:16.709
We don't have 16.

00:04:16.709 --> 00:04:18.709
We don't have 32.

00:04:18.709 --> 00:04:20.709
We do have 64,

00:04:20.709 --> 00:04:23.390
and we don't have 128.

00:04:23.390 --> 00:04:27.870
So, we could start off
with the same input as before,

00:04:27.870 --> 00:04:32.410
which was, dot dot dot x dot dot dot dot.

00:04:32.410 --> 00:04:36.110
So when we have a dot at the beginning,

00:04:36.110 --> 00:04:38.230
its neighbor on the left is a dot,

00:04:38.230 --> 00:04:39.810
and its neighbor on the right is a dot,

00:04:39.810 --> 00:04:43.730
we have dot dot dot,
and that's replaced with an x.

00:04:43.730 --> 00:04:46.440
dot dot dot again, is an x.

00:04:46.440 --> 00:04:48.610
dot dot x, is a dot.

00:04:48.610 --> 00:04:50.510
Remember, we are looking down here.

00:04:50.510 --> 00:04:54.760
dot x dot, That's number 4, is an x.

00:04:54.760 --> 00:04:58.220
x dot dot is a dot.

00:04:58.220 --> 00:05:02.140
dot dot dot is an x.

00:05:02.140 --> 00:05:06.350
and dot dot dot is an x, as well.

00:05:06.350 --> 00:05:08.350
So that's line 1.

00:05:08.350 --> 00:05:13.350
Continuing with the same thing,
I'll fill in a few more lines,

00:05:13.350 --> 00:05:15.350
so that we can see
what happens with the pattern.

00:05:15.350 --> 00:05:17.700
And now I come to line 6,

00:05:17.700 --> 00:05:22.800
I see that I am getting exactly
the same as I had in line 5,

00:05:22.800 --> 00:05:26.640
which means that line 7
will also be exactly the same.

00:05:26.640 --> 00:05:30.850
Now, some of the values give you
these patterns that just becomes stable,

00:05:30.850 --> 00:05:34.660
others are just chaotic and so there's
lots of different things going on

00:05:34.660 --> 00:05:36.660
that can be quite interesting to look at.

00:05:36.660 --> 00:05:40.270
Now to come to the actual code.

00:05:40.270 --> 00:05:46.820
What I'm asking you to do is to take as input, a string,

00:05:46.820 --> 00:05:51.350
which is a string of dots and x's,

00:05:51.350 --> 00:05:57.900
a pattern number, which is between 0 and 255,

00:05:57.900 --> 00:06:05.520
and you're going to have to use that
to work out where the dots and x's go.

00:06:05.520 --> 00:06:09.280
You will be supplied
with this information here,

00:06:09.280 --> 00:06:13.680
in other words, the numbers
that correspond with the x x dot.

00:06:13.680 --> 00:06:15.680
which is the pattern that you look up.

00:06:15.680 --> 00:06:21.140
And finally, a number of generations,
and that's a positive integer.

00:06:21.140 --> 00:06:23.550
1,2,3,4 and so on.

00:06:23.550 --> 00:06:27.330
And your output should be the generation,

00:06:27.330 --> 00:06:31.010
or the string at that generation n.

00:06:31.010 --> 00:06:37.340
So, for instance, if the
input string was, as we have here,

00:06:37.340 --> 00:06:40.510
the pattern was 69

00:06:40.510 --> 00:06:42.840
and the generation was five,

00:06:42.840 --> 00:06:51.622
you would return '.x.x.x.x'

