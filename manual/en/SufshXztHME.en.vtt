WEBVTT
Kind: captions
Language: en

00:00:01.090 --> 00:00:04.570
Modern mobile devices are
amazing tools for gaming.

00:00:04.570 --> 00:00:06.200
They give you this
great experience,

00:00:06.200 --> 00:00:08.390
right on the screen,
with tons of sensors

00:00:08.390 --> 00:00:12.710
to capture touch and gestures to
enhance your gaming experience.

00:00:12.710 --> 00:00:14.600
With all this
technology, wouldn't it

00:00:14.600 --> 00:00:16.770
be great if you could
experience the fun

00:00:16.770 --> 00:00:19.780
of playing a game in the
same room as your friends?

00:00:19.780 --> 00:00:21.260
My name is Nathan Camarillo.

00:00:21.260 --> 00:00:23.800
And with Google Cast games,
you can recapture that magic

00:00:23.800 --> 00:00:25.740
of sitting down in
your house, and playing

00:00:25.740 --> 00:00:29.380
a great game with your friends,
all on your own devices.

00:00:29.380 --> 00:00:31.490
So what is a Google Cast Game?

00:00:31.490 --> 00:00:34.290
A Google Cast Game enables
multiscreen game play

00:00:34.290 --> 00:00:36.962
between mobile devices
and television.

00:00:36.962 --> 00:00:38.420
When you combine
the biggest screen

00:00:38.420 --> 00:00:40.086
in the house with an
amazing controller,

00:00:40.086 --> 00:00:41.590
great things can happen.

00:00:41.590 --> 00:00:43.590
But making a great
game with Google Cast

00:00:43.590 --> 00:00:46.190
is more than just linking
your devices together.

00:00:46.190 --> 00:00:48.140
So I'm here with a
few handy design tips

00:00:48.140 --> 00:00:51.990
to help you make your game
night even more successful.

00:00:51.990 --> 00:00:53.840
One of the most critical
points in making

00:00:53.840 --> 00:00:58.300
a Cast Game is simply, how does
someone find and join a game?

00:00:58.300 --> 00:01:00.660
The way to accomplish
this is to make sure

00:01:00.660 --> 00:01:03.620
that your game can find
nearby Cast devices,

00:01:03.620 --> 00:01:05.790
and automatically present
the user with the option

00:01:05.790 --> 00:01:08.450
to Cast as part of
the game set up flow.

00:01:08.450 --> 00:01:10.570
Thankfully for
you, the developer,

00:01:10.570 --> 00:01:12.110
this is easy to enable.

00:01:12.110 --> 00:01:15.590
Just set up the game
with the Google Cast SDK.

00:01:15.590 --> 00:01:18.290
One thing I want you to remember
when you're making your game

00:01:18.290 --> 00:01:21.310
is that you need to decide
where you can play your game.

00:01:21.310 --> 00:01:24.210
If you're making a game that can
be played on the mobile device,

00:01:24.210 --> 00:01:28.410
away from the television, we
call this a Cast enabled game.

00:01:28.410 --> 00:01:31.470
It's the kind of game you can
play on the go, away from home,

00:01:31.470 --> 00:01:34.980
but then connect when there's
a Cast device available.

00:01:34.980 --> 00:01:37.800
If the game can only be played
as part of the Google Cast

00:01:37.800 --> 00:01:41.230
experience, we call this
a Cast required game.

00:01:41.230 --> 00:01:43.310
No matter which Cast
technology solution

00:01:43.310 --> 00:01:46.320
you choose for your game, these
are two universal concepts

00:01:46.320 --> 00:01:48.570
that apply to all games.

00:01:48.570 --> 00:01:51.790
Now let's look at a
spectrum of game controls.

00:01:51.790 --> 00:01:53.940
Abstract controls
interacts with action

00:01:53.940 --> 00:01:56.270
on the screen via
some other mechanism,

00:01:56.270 --> 00:01:58.470
such as motion,
or touch anywhere.

00:01:58.470 --> 00:02:00.560
Think of a sports game,
or a driving game.

00:02:00.560 --> 00:02:03.220
I can swing a racket
or a baseball bat,

00:02:03.220 --> 00:02:05.490
or use the device
like a steering wheel.

00:02:05.490 --> 00:02:07.400
The power of this
type of control

00:02:07.400 --> 00:02:10.860
is that everyone intuitively
knows how to do these actions,

00:02:10.860 --> 00:02:14.220
and being active in the
game is often very fun.

00:02:14.220 --> 00:02:16.774
Abstract controls also
cover simple games,

00:02:16.774 --> 00:02:19.315
where you tap anywhere on the
screen to make a character move

00:02:19.315 --> 00:02:20.250
or jump.

00:02:20.250 --> 00:02:22.350
While the interaction
is very, very simple,

00:02:22.350 --> 00:02:25.720
this, too is very easy for
people to learn quickly.

00:02:25.720 --> 00:02:27.251
Direct controls
occur when you touch

00:02:27.251 --> 00:02:28.750
the thing you want
to interact with,

00:02:28.750 --> 00:02:30.485
like a button or a slider.

00:02:30.485 --> 00:02:31.860
This would happen
in a game where

00:02:31.860 --> 00:02:33.420
you were answering
quiz questions,

00:02:33.420 --> 00:02:36.430
or casting spells by tapping
on bottles of potion.

00:02:36.430 --> 00:02:39.241
Your focus needs to
temporarily be on the device,

00:02:39.241 --> 00:02:41.490
but this is a great way to
utilize private information

00:02:41.490 --> 00:02:43.450
in your game design.

00:02:43.450 --> 00:02:45.660
Virtual controls are
somewhere in between.

00:02:45.660 --> 00:02:47.090
You touch something
on the device

00:02:47.090 --> 00:02:49.430
to control something
else on the screen.

00:02:49.430 --> 00:02:52.410
This would be like a game
pad with virtual buttons.

00:02:52.410 --> 00:02:54.790
In this case, the player
needs to understand

00:02:54.790 --> 00:02:56.860
how the device
screen is being used,

00:02:56.860 --> 00:02:59.230
and if there are specific
gestures, or touch regions,

00:02:59.230 --> 00:03:01.720
or different actions
that need to be used.

00:03:01.720 --> 00:03:04.270
Once you've decided on
the game's input method,

00:03:04.270 --> 00:03:07.450
consider the key
characteristics of the game.

00:03:07.450 --> 00:03:08.710
What is the pace?

00:03:08.710 --> 00:03:11.460
Is there public versus private
information, like poker?

00:03:11.460 --> 00:03:12.690
Is there multi-player?

00:03:12.690 --> 00:03:15.070
Being aware of how these
characteristics will affect

00:03:15.070 --> 00:03:17.890
game play will help you make
decisions around the input

00:03:17.890 --> 00:03:19.710
mechanics and how to
display information

00:03:19.710 --> 00:03:22.560
on both the mobile device
and the television.

00:03:22.560 --> 00:03:25.190
For visual design, remember
not to fatigue the player

00:03:25.190 --> 00:03:27.674
by making them constantly
look up and down.

00:03:27.674 --> 00:03:29.090
Design the
television's experience

00:03:29.090 --> 00:03:30.820
to be viewed from
across the room.

00:03:30.820 --> 00:03:33.480
And remember that
mobile design needs

00:03:33.480 --> 00:03:36.984
to be great at a distance
less than arm's length.

00:03:36.984 --> 00:03:38.900
It's important to
understand this relationship

00:03:38.900 --> 00:03:42.130
between devices, as well as
what to emphasize differently

00:03:42.130 --> 00:03:43.810
on each.

00:03:43.810 --> 00:03:45.310
How are your devices
and the Google

00:03:45.310 --> 00:03:48.060
Cast endpoint going to
connect to each other?

00:03:48.060 --> 00:03:50.050
We have two solutions
for you, but each one

00:03:50.050 --> 00:03:51.650
has different implications.

00:03:51.650 --> 00:03:54.550
First, let's talk about
how Cast applications work.

00:03:54.550 --> 00:03:58.060
The first model is what we
call a Receiver Cast game.

00:03:58.060 --> 00:04:00.880
An app running on the sender,
which is your mobile device,

00:04:00.880 --> 00:04:02.300
connects to receiver
device, which

00:04:02.300 --> 00:04:04.270
is any Cast device,
like a Chromecast,

00:04:04.270 --> 00:04:07.660
and passes along the ID
of an application to load.

00:04:07.660 --> 00:04:09.280
The receiver loads
that application,

00:04:09.280 --> 00:04:12.400
written in HMTL5 and
JavaScript from the cloud.

00:04:12.400 --> 00:04:14.990
In this model, we recommend
using the Game Manager

00:04:14.990 --> 00:04:19.480
APIs for Google Cast, which is
part of the Google Cast SDK.

00:04:19.480 --> 00:04:21.800
Game Manager APIs make
it faster and easier

00:04:21.800 --> 00:04:24.410
for game developers like
yourself to Cast enable

00:04:24.410 --> 00:04:26.140
their apps across
all the devices

00:04:26.140 --> 00:04:29.160
we support-- Android,
iOS, Chrome browsers--

00:04:29.160 --> 00:04:32.030
and get those devices connected
to a Chromecast or an Android

00:04:32.030 --> 00:04:33.430
TV.

00:04:33.430 --> 00:04:35.040
We want you to do
what you do best,

00:04:35.040 --> 00:04:36.500
and that's make great games.

00:04:36.500 --> 00:04:40.214
So we provided this code to help
you get your Cast Game started.

00:04:40.214 --> 00:04:41.630
Now, you might be
asking yourself,

00:04:41.630 --> 00:04:43.830
we have this giant
TV, a Chromecast,

00:04:43.830 --> 00:04:45.830
and we have this amazing
computer in our pocket.

00:04:45.830 --> 00:04:47.620
Couldn't we do a
little bit more?

00:04:47.620 --> 00:04:48.870
Of course we can.

00:04:48.870 --> 00:04:52.342
That's why we created the Remote
Display APIs for Google Cast.

00:04:52.342 --> 00:04:54.090
There's millions
of mobile devices

00:04:54.090 --> 00:04:56.930
with powerful GPUs and
sensors ready to send

00:04:56.930 --> 00:05:00.640
amazing, interactive content to
the largest screen in the home.

00:05:00.640 --> 00:05:02.640
With the Remote Display
APIs for Google Cast,

00:05:02.640 --> 00:05:04.220
this is now possible.

00:05:04.220 --> 00:05:06.440
Remote Display for
Android and iOS

00:05:06.440 --> 00:05:08.700
allows app developers
to take full advantage

00:05:08.700 --> 00:05:10.820
of the multiscreen
Google Cast model.

00:05:10.820 --> 00:05:12.650
Integrating Remote
Display means you

00:05:12.650 --> 00:05:15.280
can harness all those
increasingly powerful CPUs

00:05:15.280 --> 00:05:18.031
and GPUs in your phone and
build dual display games, where

00:05:18.031 --> 00:05:20.030
you use the phone to
render both a local display

00:05:20.030 --> 00:05:21.217
and a virtual one.

00:05:21.217 --> 00:05:23.050
And we handle displaying
the virtual display

00:05:23.050 --> 00:05:25.940
on the large screen
via our Cast protocol.

00:05:25.940 --> 00:05:28.450
If you think about it,
this makes total sense.

00:05:28.450 --> 00:05:30.150
Why not harness the
power of something

00:05:30.150 --> 00:05:32.457
in your hand to send a
great image to the TV?

00:05:32.457 --> 00:05:34.540
This allows you to create
games using cutting edge

00:05:34.540 --> 00:05:37.580
3D graphics with AAA
effects and HD textures,

00:05:37.580 --> 00:05:40.240
and send that amazing
world to the television.

00:05:40.240 --> 00:05:43.840
We have many great games like
"Just Dance Now," "Big Web

00:05:43.840 --> 00:05:45.670
Quiz," and "SCRABBLE
Blitz," as well

00:05:45.670 --> 00:05:47.730
as some sample apps
available, which

00:05:47.730 --> 00:05:51.180
utilize the methods we just
covered to make great games.

00:05:51.180 --> 00:05:53.480
Just like these games,
your real creative genius

00:05:53.480 --> 00:05:57.170
shows itself when you combine
great social multi-player

00:05:57.170 --> 00:05:59.710
with the power of mobile
devices and the big screen.

00:05:59.710 --> 00:06:03.102
When you do it all right, you
create an entirely new living

00:06:03.102 --> 00:06:04.560
room experience,
and players really

00:06:04.560 --> 00:06:05.654
get involved in the game.

00:06:05.654 --> 00:06:07.820
We've seen this happen with
several great Cast games

00:06:07.820 --> 00:06:10.240
already, and we want
yours to be next.

00:06:10.240 --> 00:06:13.710
Visit developers.google.com/cast
to learn more.

00:06:13.710 --> 00:06:17.270
We provide you with the SDK,
sender SDKs for Android, iOS,

00:06:17.270 --> 00:06:20.180
and Chrome, sample apps
that help you get started,

00:06:20.180 --> 00:06:22.910
game debugger apps and a
debug UI for the receiver,

00:06:22.910 --> 00:06:25.870
UX guidelines for Cast
games, and all the SDK

00:06:25.870 --> 00:06:27.730
documentation and reference.

00:06:27.730 --> 00:06:29.790
There are so many
unexplored games just

00:06:29.790 --> 00:06:32.800
waiting to be created to inspire
and excite millions of gamers.

00:06:32.800 --> 00:06:34.060
Go make something awesome.

00:06:34.060 --> 00:06:37.410
[MUSIC PLAYING]

