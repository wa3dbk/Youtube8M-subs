WEBVTT
Kind: captions
Language: en

00:00:00.483 --> 00:00:08.700
[MUSIC PLAYING]

00:00:08.700 --> 00:00:09.880
CHET HAASE: Hi, I'm Chet Haase,
an engineer on the

00:00:09.880 --> 00:00:11.860
Android team at Google.

00:00:11.860 --> 00:00:15.306
Recently, at Google I/O 2013,
we gave a talk called "A

00:00:15.306 --> 00:00:18.080
Moving Experience," which was
about various animation

00:00:18.080 --> 00:00:22.450
techniques and capabilities
of the Android platform.

00:00:22.450 --> 00:00:24.970
And a lot of these techniques
centered around some of the

00:00:24.970 --> 00:00:28.450
principles of animation
that early cartoon

00:00:28.450 --> 00:00:29.670
animators came up with.

00:00:29.670 --> 00:00:32.540
And I wanted to talk about a
couple of those briefly today.

00:00:32.540 --> 00:00:36.680
One is anticipation, and the
other is overshooting or

00:00:36.680 --> 00:00:37.970
follow-through.

00:00:37.970 --> 00:00:40.320
And these techniques, along
with a host of other

00:00:40.320 --> 00:00:42.980
techniques, are used
to help the users--

00:00:42.980 --> 00:00:45.760
in their case, the viewers
of these cartoons--

00:00:45.760 --> 00:00:48.090
very quickly understand what
was going on on the screen.

00:00:48.090 --> 00:00:51.120
They had very few frames to work
with, sometimes 24 frames

00:00:51.120 --> 00:00:54.840
a second, or actually more like
12 frames a second, maybe

00:00:54.840 --> 00:00:57.170
even six or eight
frames a second.

00:00:57.170 --> 00:00:59.230
So there wasn't a lot of time,
in any particular second, to

00:00:59.230 --> 00:01:00.500
understand the action.

00:01:00.500 --> 00:01:03.440
I mean, the actions would
happen really quickly.

00:01:03.440 --> 00:01:06.690
And they needed the users to be
locked on to the action in

00:01:06.690 --> 00:01:08.000
the cartoon constantly.

00:01:08.000 --> 00:01:10.030
Because if they missed
it, it was gone.

00:01:10.030 --> 00:01:12.420
And they didn't have
time to rewind and

00:01:12.420 --> 00:01:13.360
see what had happened.

00:01:13.360 --> 00:01:17.370
So instead, they gave as many
indications and aides to the

00:01:17.370 --> 00:01:19.710
user as possible, to the viewer
as possible, so that

00:01:19.710 --> 00:01:22.260
they could really clue into
what was going on.

00:01:22.260 --> 00:01:24.980
Well, we have the same problems,
to some extent, in

00:01:24.980 --> 00:01:27.660
user interfaces, where you
really need the users to

00:01:27.660 --> 00:01:29.420
understand what's going on
in your application.

00:01:29.420 --> 00:01:32.880
If many confusing things are
happening, if you're replacing

00:01:32.880 --> 00:01:36.140
entire screens with entire other
screens, if the workflow

00:01:36.140 --> 00:01:38.410
is really complicated as you go
from activity to activity

00:01:38.410 --> 00:01:41.960
or screen to screen or view to
view, then how is the user

00:01:41.960 --> 00:01:44.180
supposed to not get lost
in your application?

00:01:44.180 --> 00:01:47.535
What you really want them to do
is be completely locked in

00:01:47.535 --> 00:01:50.620
to the flow that you imagine for
your application, so that

00:01:50.620 --> 00:01:53.220
they understand that flow as
well as you did when you wrote

00:01:53.220 --> 00:01:55.090
that incredibly complex UI.

00:01:55.090 --> 00:01:57.310
Well, if you can use some of the
techniques that they came

00:01:57.310 --> 00:02:00.230
up with cartoons, then maybe
you can help the users

00:02:00.230 --> 00:02:03.330
understand the interaction that
they're having with your

00:02:03.330 --> 00:02:06.120
application, as well, and help
them understand and be more

00:02:06.120 --> 00:02:08.270
productive with your application
at the same time.

00:02:08.270 --> 00:02:10.840
So it's sometimes a little bit
of a stretch between these

00:02:10.840 --> 00:02:14.430
cartoony effects and maybe the
effects that you're looking

00:02:14.430 --> 00:02:15.810
for in your application.

00:02:15.810 --> 00:02:18.930
But it is possible to connect
these dots and say, given this

00:02:18.930 --> 00:02:21.170
technique, what they were
going for, how could we

00:02:21.170 --> 00:02:24.110
actually apply that technique if
maybe not make it quite as

00:02:24.110 --> 00:02:26.060
cartoony in the business
context.

00:02:26.060 --> 00:02:28.200
Anyway, let's see
the actual demo.

00:02:28.200 --> 00:02:30.750
So we have a demo here
called LiveButton.

00:02:30.750 --> 00:02:34.830
If you click the button,
the button interacts.

00:02:34.830 --> 00:02:35.990
So there's a couple
of different

00:02:35.990 --> 00:02:37.710
interesting elements to this.

00:02:37.710 --> 00:02:40.010
One is the anticipation, where
when you click on the button,

00:02:40.010 --> 00:02:41.560
it gets smaller.

00:02:41.560 --> 00:02:44.620
And when you release the button,
it doesn't just return

00:02:44.620 --> 00:02:46.580
to its previous state,
but it overshoots

00:02:46.580 --> 00:02:47.670
that and swings back.

00:02:47.670 --> 00:02:50.500
So this is the anticipation
as it presses in.

00:02:50.500 --> 00:02:53.770
And then it's the overshoot as
it actually comes back, not

00:02:53.770 --> 00:02:56.340
just to its original position,
[? but actually ?] past it.

00:02:56.340 --> 00:02:58.700
There are some interesting
aspects to this.

00:02:58.700 --> 00:03:01.110
One is that it makes
the object feel

00:03:01.110 --> 00:03:02.780
more organic and natural.

00:03:02.780 --> 00:03:05.450
And it also makes them more
engaging, in general.

00:03:05.450 --> 00:03:08.560
I saw techniques specifically
like this on a game

00:03:08.560 --> 00:03:09.820
console, years ago.

00:03:09.820 --> 00:03:12.510
And whether the buttons were
pressed in when you clicked on

00:03:12.510 --> 00:03:14.660
them or actually popped out
when you clicked on them,

00:03:14.660 --> 00:03:16.280
actually that interaction
didn't matter.

00:03:16.280 --> 00:03:18.600
What I noticed was that the
buttons themselves were much

00:03:18.600 --> 00:03:19.520
more engaging.

00:03:19.520 --> 00:03:22.460
And this was really important in
the game context, where you

00:03:22.460 --> 00:03:24.870
really want the whole experience
to be more fun and

00:03:24.870 --> 00:03:26.250
engaging to begin with.

00:03:26.250 --> 00:03:28.150
And it helps the user feel
like they're really

00:03:28.150 --> 00:03:30.850
interacting with the machine and
the game, instead of just

00:03:30.850 --> 00:03:33.170
clicking buttons in
a user interface.

00:03:33.170 --> 00:03:36.100
So the way to get these effects
is very simple.

00:03:36.100 --> 00:03:38.520
We'll see some more complex
applications of these

00:03:38.520 --> 00:03:39.920
techniques in the other demos.

00:03:39.920 --> 00:03:43.470
But in this particular
application, it's very simple.

00:03:43.470 --> 00:03:45.770
I'm not actually handling
click events here.

00:03:45.770 --> 00:03:49.460
All I'm doing is tracking up
and down events, and then

00:03:49.460 --> 00:03:51.120
making the button look
differently.

00:03:51.120 --> 00:03:52.100
I'm letting the [? superclass ?]

00:03:52.100 --> 00:03:55.680
actually track the clicks and
the motion events, because I

00:03:55.680 --> 00:03:56.410
don't care about that.

00:03:56.410 --> 00:03:58.870
All I care about is make the
button smaller and make the

00:03:58.870 --> 00:04:01.320
button larger to overshoot.

00:04:01.320 --> 00:04:04.030
So we make it smaller by
grabbing a View Property

00:04:04.030 --> 00:04:05.180
Animator on the button.

00:04:05.180 --> 00:04:07.440
So we say,
clickMeButton.animate.

00:04:07.440 --> 00:04:12.030
We set the interpolator to this
decelerator, which is a

00:04:12.030 --> 00:04:14.570
decelerate interpolator
that we defined above.

00:04:14.570 --> 00:04:16.720
This means that we're going to
start fast when they click on

00:04:16.720 --> 00:04:18.510
it, and then slow down
toward the end.

00:04:18.510 --> 00:04:19.649
And it's important
to start fast.

00:04:19.649 --> 00:04:21.730
Because you don't want them to
hit the button and then get

00:04:21.730 --> 00:04:24.760
this sluggish feeling as it
accelerates into an animation.

00:04:24.760 --> 00:04:28.240
Instead, you want it to start
really quickly and possibly

00:04:28.240 --> 00:04:29.810
slow down at the end.

00:04:29.810 --> 00:04:33.240
But the main element you want is
actually two-- you want it

00:04:33.240 --> 00:04:35.400
to start really quickly, and you
want it to be a very short

00:04:35.400 --> 00:04:36.810
duration, as well.

00:04:36.810 --> 00:04:39.220
So we use a decelerator here.

00:04:39.220 --> 00:04:42.140
And notice that I actually
changed the duration of the

00:04:42.140 --> 00:04:45.140
View Property Animator to 200
instead of this default 300.

00:04:45.140 --> 00:04:47.340
Because I wanted the animation
to be very quick.

00:04:47.340 --> 00:04:48.620
So we set the decelerator.

00:04:48.620 --> 00:04:50.120
And then we simply scale
the button .

00:04:50.120 --> 00:04:51.820
So we're going to animate that
scale, make the button

00:04:51.820 --> 00:04:53.690
smaller, as the user
presses on it.

00:04:53.690 --> 00:04:55.720
And then when they release,
we're just going to do the

00:04:55.720 --> 00:04:56.740
same thing in reverse.

00:04:56.740 --> 00:04:59.560
We're going to set scaleX
and scaleY, animate

00:04:59.560 --> 00:05:01.160
those back to one.

00:05:01.160 --> 00:05:03.740
Except instead of just animating
them back to where

00:05:03.740 --> 00:05:05.510
they started, we're going
to use this overshoot

00:05:05.510 --> 00:05:07.380
interpolator that we
defined above.

00:05:07.380 --> 00:05:10.520
So it will actually animate past
one and then back to give

00:05:10.520 --> 00:05:13.590
that organic feeling of actually
bouncing back out and

00:05:13.590 --> 00:05:15.980
then finally settling into
its final position.

00:05:15.980 --> 00:05:19.070
Anticipation and overshoot
or follow-through--

00:05:19.070 --> 00:05:22.240
very important elements of
cartoon animation, applicable

00:05:22.240 --> 00:05:24.800
to some cases of user
interfaces, if you want the

00:05:24.800 --> 00:05:28.220
interface to be more indicative
to the user of

00:05:28.220 --> 00:05:30.610
actually what's happening in
the flow, or simply more

00:05:30.610 --> 00:05:33.230
engaging and playful
and organic.

00:05:33.230 --> 00:05:34.480
Thanks.

