WEBVTT
Kind: captions
Language: en

00:00:00.700 --> 00:00:02.700
ANKUR KOTWAL: The
Camera2 API in Android L

00:00:02.700 --> 00:00:05.390
gives you immense
control of the camera.

00:00:05.390 --> 00:00:07.720
I'm Ankur Kotwal, a
developer advocate at Google,

00:00:07.720 --> 00:00:12.110
and I'd like to show you
how amazing these APIs are.

00:00:12.110 --> 00:00:16.079
But first, let's look at
the Kit Kat camera API.

00:00:16.079 --> 00:00:19.570
It really was designed for the
straightforward point and shoot

00:00:19.570 --> 00:00:22.080
camera apps, and
because of this,

00:00:22.080 --> 00:00:25.300
there are limited ways to
access streaming image data.

00:00:25.300 --> 00:00:30.260
The API also doesn't support any
manual capture control methods.

00:00:30.260 --> 00:00:32.450
In order to overcome
these limitations

00:00:32.450 --> 00:00:34.690
and give developers
the capability

00:00:34.690 --> 00:00:37.200
to build awesome
camera apps, we've

00:00:37.200 --> 00:00:39.890
introduced a completely
new set of APIs

00:00:39.890 --> 00:00:42.250
under the
Android.hardware.Camera2

00:00:42.250 --> 00:00:43.160
package.

00:00:43.160 --> 00:00:44.850
Let's take a look.

00:00:44.850 --> 00:00:48.020
These new APIs are
designed as a pipeline,

00:00:48.020 --> 00:00:50.440
instead of a one way stream.

00:00:50.440 --> 00:00:53.680
It is now possible to
preconfigure output surfaces

00:00:53.680 --> 00:00:56.510
and attach them to the camera.

00:00:56.510 --> 00:00:58.410
Each surface can
be a destination

00:00:58.410 --> 00:01:02.180
for a stream of image buffers,
and you can pass a request

00:01:02.180 --> 00:01:04.890
through the capture session.

00:01:04.890 --> 00:01:08.550
Each request will be converted
into one result object,

00:01:08.550 --> 00:01:12.870
and the destination surface will
be filled with image buffers.

00:01:12.870 --> 00:01:16.720
It is possible to pass multiple
requests simultaneously,

00:01:16.720 --> 00:01:20.800
and these requests will be
processed asynchronously.

00:01:20.800 --> 00:01:23.330
Let's look at what it takes
to build a simple camera

00:01:23.330 --> 00:01:26.600
app using these new APIs.

00:01:26.600 --> 00:01:29.940
First, you need to
detect camera hardware.

00:01:29.940 --> 00:01:33.240
You can do so by enumerating the
existing cameras on a device,

00:01:33.240 --> 00:01:36.190
and get the detailed
information off the camera

00:01:36.190 --> 00:01:38.920
by using the
CameraManager service.

00:01:38.920 --> 00:01:42.670
You can then use a camera by
calling the open camera method

00:01:42.670 --> 00:01:45.910
with an ID and a callback list.

00:01:45.910 --> 00:01:48.320
When a device is ready,
the onOpened method

00:01:48.320 --> 00:01:51.490
is invoked with a
camera device instance.

00:01:51.490 --> 00:01:56.410
This instant is a representation
of a single camera.

00:01:56.410 --> 00:01:58.470
Before submitting
requests, you need

00:01:58.470 --> 00:02:01.340
to define a set of
buffer output targets

00:02:01.340 --> 00:02:04.140
and connect them to
the camera device.

00:02:04.140 --> 00:02:07.750
This is done by initiating
the camera capture session.

00:02:07.750 --> 00:02:12.590
For example, you can use
TextureView for previewing,

00:02:12.590 --> 00:02:15.900
MediaRecorder for
recording a video,

00:02:15.900 --> 00:02:21.755
or the RenderScriptAllocation
for YUV processing.

00:02:24.440 --> 00:02:27.710
When you create a surface,
the size of the surface

00:02:27.710 --> 00:02:29.270
is important.

00:02:29.270 --> 00:02:33.110
The camera device only supports
a certain type of size,

00:02:33.110 --> 00:02:38.090
and therefore you must set the
valid size for each surface.

00:02:38.090 --> 00:02:41.540
First, we get the available
stream configurations

00:02:41.540 --> 00:02:45.180
that the camera supports by
the scalar stream configuration

00:02:45.180 --> 00:02:46.070
map.

00:02:46.070 --> 00:02:48.140
The size should be
one of the results

00:02:48.140 --> 00:02:50.440
from the getOutputSizes method.

00:02:50.440 --> 00:02:52.910
For this example, we're just
going to grab the first one,

00:02:52.910 --> 00:02:54.730
but in a real
world scenario, you

00:02:54.730 --> 00:02:56.210
may want to look
through this array

00:02:56.210 --> 00:02:58.890
and pick the appropriate size.

00:02:58.890 --> 00:03:02.420
After creating the
necessary surface,

00:03:02.420 --> 00:03:06.440
you can call the
createCaptureSession method.

00:03:06.440 --> 00:03:10.190
Be patient, as creating
a session can require

00:03:10.190 --> 00:03:12.630
several hundred milliseconds.

00:03:12.630 --> 00:03:16.400
Once the session is ready, you
can deal with the requests.

00:03:16.400 --> 00:03:19.630
Based on your needs, you
can create a request builder

00:03:19.630 --> 00:03:22.620
by using one of the
pre-defined templates.

00:03:22.620 --> 00:03:25.080
Then you can build
the capture request

00:03:25.080 --> 00:03:29.270
by calling the build
method in the build up.

00:03:29.270 --> 00:03:34.810
Here, TEMPLATE_PREVIEW is
used for the preview request,

00:03:34.810 --> 00:03:39.025
and TEMPLATE_STILL_CAPTURE
is used for the JPEG capture

00:03:39.025 --> 00:03:40.490
request.

00:03:40.490 --> 00:03:44.620
So now, you have both a
session and a request,

00:03:44.620 --> 00:03:48.950
and there are two options
to submit requests.

00:03:48.950 --> 00:03:54.820
Capture is to capture one image
using a given capture request.

00:03:54.820 --> 00:03:58.520
On the other hand,
setRepeatingRequest

00:03:58.520 --> 00:04:01.970
is for capturing
images continuously

00:04:01.970 --> 00:04:06.600
by using a given request again
and again until you explicitly

00:04:06.600 --> 00:04:07.960
stop it.

00:04:07.960 --> 00:04:11.180
Both capture and
setRepeatingRequests

00:04:11.180 --> 00:04:16.339
have overloads that take a
list of capture requests.

00:04:16.339 --> 00:04:21.690
CaptureBurst for capture,
and setRepeatingBurst

00:04:21.690 --> 00:04:24.810
for set repeating requests.

00:04:24.810 --> 00:04:27.920
However, before submitting
the capture request,

00:04:27.920 --> 00:04:29.630
you might need to
adjust the camera

00:04:29.630 --> 00:04:32.390
settings as per your needs.

00:04:32.390 --> 00:04:35.920
It is possible to modify any
properties of the builder

00:04:35.920 --> 00:04:38.500
before building a request.

00:04:38.500 --> 00:04:44.920
These can be things like
white balance mode, effects,

00:04:44.920 --> 00:04:48.380
and even flash settings.

00:04:48.380 --> 00:04:50.350
There are some
really great effects

00:04:50.350 --> 00:04:54.620
that you can apply, like
negatives, and sepia,

00:04:54.620 --> 00:04:58.390
and solarize, and more.

00:04:58.390 --> 00:05:01.992
You can interact with exposure
and focus settings precisely

00:05:01.992 --> 00:05:04.450
using CONTROL_AF_TRIGGER and
CONTROL_AE_PRECAPTURE_TRIGGER.

00:05:07.040 --> 00:05:08.350
Be careful though.

00:05:08.350 --> 00:05:11.090
If you forget to
set focus properly,

00:05:11.090 --> 00:05:16.050
you can end up with an image
that's a little bit blurry.

00:05:16.050 --> 00:05:18.240
Whenever you submit
requests, you

00:05:18.240 --> 00:05:20.960
can pass a capture
listener callback

00:05:20.960 --> 00:05:23.920
to keep track of
capture progress.

00:05:23.920 --> 00:05:27.970
For example, you can
use onCaptureStarted

00:05:27.970 --> 00:05:31.370
for playing a shutter sound
or for playing a capture

00:05:31.370 --> 00:05:32.660
animation.

00:05:32.660 --> 00:05:35.480
And after a capture
request is processed,

00:05:35.480 --> 00:05:39.980
onCaptureCompleted will be
called with a total capture

00:05:39.980 --> 00:05:42.890
request result instance.

00:05:42.890 --> 00:05:45.110
At this moment,
TotalCaptureResult

00:05:45.110 --> 00:05:48.710
contains the final configuration
of the capture process,

00:05:48.710 --> 00:05:50.840
and the destination
surfaces will soon

00:05:50.840 --> 00:05:53.930
be sent the final captured data.

00:05:53.930 --> 00:05:57.680
You can access the output
image through the surface,

00:05:57.680 --> 00:06:01.140
and then it's up to you
on how to use that image.

00:06:01.140 --> 00:06:03.740
In a basic camera app, you
could get the bytes buffer

00:06:03.740 --> 00:06:05.290
of the image from
the image reader,

00:06:05.290 --> 00:06:07.900
and stored it on to the SD card.

00:06:07.900 --> 00:06:10.790
So this is the new Camera2 API.

00:06:10.790 --> 00:06:14.210
It is designed as a very
flexible and unified pipeline

00:06:14.210 --> 00:06:16.280
for all camera related
tasks, and it also

00:06:16.280 --> 00:06:18.160
increases the ability
of applications

00:06:18.160 --> 00:06:20.420
to control the camera subsystem.

00:06:20.420 --> 00:06:23.230
You can discover more
details about the Camera2 API

00:06:23.230 --> 00:06:27.120
and useful samples at
developer.Android.com

00:06:27.120 --> 00:06:29.520
Be sure to check out
the Android Developer

00:06:29.520 --> 00:06:32.310
Preview for more new APIs.

00:06:32.310 --> 00:06:34.120
Thank you.

