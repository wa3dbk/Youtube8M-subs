WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
[Evans] So we could write all the code we need to loop through elements of a list

00:00:03.000 --> 00:00:05.000
just using while.

00:00:05.000 --> 00:00:09.000
We'd be able to do anything we want. It would just be a little more complicated than we want.

00:00:09.000 --> 00:00:12.000
Python provides a simpler way to loop through elements of the list,

00:00:12.000 --> 00:00:14.000
and that's called a for-loop.

00:00:14.000 --> 00:00:17.000
The structure of a for-loop is like this.

00:00:17.000 --> 00:00:20.000
We have the keyword for followed by a name,

00:00:20.000 --> 00:00:24.000
and this is a new name for a variable that we can introduce,

00:00:24.000 --> 00:00:27.000
then the keyword in followed by a list,

00:00:27.000 --> 00:00:32.000
and this is any expression which evaluates to a list followed by a colon.

00:00:32.000 --> 00:00:36.000
So this is quite similar to what we've seen for the structure of a while loop

00:00:36.000 --> 00:00:40.000
and an if statement with a block inside the for.

00:00:40.000 --> 00:00:44.000
What a for-loop like this means is that for each element in the list

00:00:44.000 --> 00:00:48.000
we're going to assign that element to the name and evaluate the block.

00:00:48.000 --> 00:00:52.000
And we'll do that in order going through the list.

00:00:52.000 --> 00:00:56.000
So using for, we can define the procedure print<u>all</u>elements

00:00:56.000 --> 00:00:59.000
using much less code than we needed using while.

00:00:59.000 --> 00:01:05.000
We have a for statement where we'll introduce the name e as the variable name.

00:01:05.000 --> 00:01:07.000
We're going through the list p.

00:01:07.000 --> 00:01:11.000
For each element what we want to do is just print that element.

00:01:11.000 --> 00:01:14.000
So let's step through what happens when we use the for-loop

00:01:14.000 --> 00:01:18.000
calling print<u>all</u>elements, passing in the list we've defined and stored

00:01:18.000 --> 00:01:20.000
in the variable mylist.

00:01:20.000 --> 00:01:22.000
This is a list with 3 elements.

00:01:22.000 --> 00:01:26.000
The first 2 are numbers, 1 and 2, and the third is the list 3, 4.

00:01:26.000 --> 00:01:30.000
So when we created mylist, that created a list object that looks like this.

00:01:30.000 --> 00:01:32.000
It has the 3 elements,

00:01:32.000 --> 00:01:35.000
numbers in the first 2 and the list 3, 4 in the third one.

00:01:35.000 --> 00:01:42.000
When we pass that to print<u>all</u>elements, the variable p will refer to that object.

00:01:42.000 --> 00:01:45.000
When we execute the loop, what happens is the variable e

00:01:45.000 --> 00:01:48.000
is assigned to the first element of p.

00:01:48.000 --> 00:01:52.000
So initially, e will refer to this value.

00:01:52.000 --> 00:01:55.000
We execute the body of the loop with that as the value of e,

00:01:55.000 --> 00:01:58.000
so that will print out the value 1. Then we continue.

00:01:58.000 --> 00:02:02.000
The next time through the loop, e will refer to the second element of p.

00:02:02.000 --> 00:02:06.000
We evaluate the body of the loop, printing out that value, which is 2.

00:02:06.000 --> 00:02:08.000
Then we continue in the loop.

00:02:08.000 --> 00:02:13.000
The next time, e will refer to the third element of p, which is the list 3, 4.

00:02:13.000 --> 00:02:15.000
This will print out the list 3, 4.

00:02:15.000 --> 00:02:19.000
At this point we've gone through all the elements of p and the for-loop is done.

00:02:19.000 --> 00:02:21.000
Execution would continue here.

00:02:21.000 --> 00:02:23.000
In this case there's no statement there,

00:02:23.000 --> 00:02:26.000
so we're done executing the procedure and we return.

