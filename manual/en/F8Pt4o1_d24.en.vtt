WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
[Break Time!] So now you have finished the hard quiz about factorial.

00:00:03.000 --> 00:00:06.000
You might think you deserve a breakÃ¢Â€Â”and you almost do, but

00:00:06.000 --> 00:00:10.000
we have one more thing to learn about "while" loops,

00:00:10.000 --> 00:00:12.000
and that's the "break" statement.

00:00:12.000 --> 00:00:17.000
"Break" gives us a way to stop the loop even while the test condition

00:00:17.000 --> 00:00:18.000
is true.

00:00:18.000 --> 00:00:21.000
Here's the typical structure of a loop with a "break," so we have

00:00:21.000 --> 00:00:25.000
the "while"Ã¢Â€Â”as we did beforeÃ¢Â€Â”and we have the test expression and we

00:00:25.000 --> 00:00:27.000
had a colon.

00:00:27.000 --> 00:00:30.000
Our general "while" structure is we had a block here.

00:00:30.000 --> 00:00:34.000
Now we want to look inside this block a little bit to see the kinds of

00:00:34.000 --> 00:00:35.000
things that could be here.

00:00:35.000 --> 00:00:38.000
This is just an example of what might be in the blockÃ¢Â€Â”we have

00:00:38.000 --> 00:00:41.000
some code, we have some Python statements, and then we

00:00:41.000 --> 00:00:42.000
have an "if" statement.

00:00:42.000 --> 00:00:45.000
That's going to have another test expressionÃ¢Â€Â”we'll call that

00:00:45.000 --> 00:00:46.000
the "break test."

00:00:46.000 --> 00:00:49.000
That's a text expression that's checking whether it's time to take a break.

00:00:49.000 --> 00:00:55.000
When the "break test" is true, what we have is "break" whichÃ¢Â€Â”by itselfÃ¢Â€Â”

00:00:55.000 --> 00:00:57.000
is all we need.

00:00:57.000 --> 00:01:00.000
What "break" means is stop executing the "while" loopÃ¢Â€Â”jump out of

00:01:00.000 --> 00:01:03.000
the "while" loop and continue with the code after that.

00:01:03.000 --> 00:01:07.000
Whatever we had here, this is more code that was in the "while" block.

00:01:07.000 --> 00:01:12.000
That will get skipped and we'll jump to this point which is the code

00:01:12.000 --> 00:01:13.000
after the while.

00:01:13.000 --> 00:01:17.000
So what happens when we execute a loop with a "break," it executes like

00:01:17.000 --> 00:01:19.000
a normal loop.

00:01:19.000 --> 00:01:21.000
If the test expression is true, we go to the code.

00:01:21.000 --> 00:01:25.000
If the "break test" is false, we don't execute the break.

00:01:25.000 --> 00:01:28.000
We would continue with the "more" code.

00:01:28.000 --> 00:01:32.000
We would go back to the loop test and check the test expression again.

00:01:32.000 --> 00:01:35.000
If it's true, we go run this "code."

00:01:35.000 --> 00:01:38.000
If the "break" is true, then we execute the "break."

00:01:38.000 --> 00:01:41.000
What "break" does is jump out of the loop, so we don't execute

00:01:41.000 --> 00:01:44.000
the "more" code, we don't execute the test expression again.

00:01:44.000 --> 00:01:49.000
If the "break" happens, what happens is we jump to the code after the "while."

00:01:49.000 --> 00:01:52.000
This gives us a way to break out of the middle of the loop.

00:01:52.000 --> 00:01:54.000
Here's an example of how we might use that.

00:01:54.000 --> 00:01:58.000
Before, we defined the procedure "print_numbers" without using break.

00:01:58.000 --> 00:02:00.000
We defined it like this.

00:02:00.000 --> 00:02:01.000
This is the code we had before.

00:02:01.000 --> 00:02:04.000
We could rewrite that using "break."

00:02:04.000 --> 00:02:07.000
Now, instead of having the "while test" stop the loop, we'll make the

00:02:07.000 --> 00:02:08.000
"while test" true.

00:02:08.000 --> 00:02:13.000
True will never become falseÃ¢Â€Â”that means, if we didn't have a break, the

00:02:13.000 --> 00:02:16.000
loop would keep going forever, but we're going to add a "break."

00:02:16.000 --> 00:02:20.000
We're going to have an "if test" that says the stopping condition now is

00:02:20.000 --> 00:02:23.000
we're going to stop once "i" is greater than "n."

00:02:23.000 --> 00:02:25.000
The way to stop is to use "break."

00:02:25.000 --> 00:02:28.000
If "i" is not greater than "n", then we're going to keep going.

00:02:28.000 --> 00:02:33.000
We'll do the same thing we did beforeÃ¢Â€Â”we'll print "i" and we'll add one to "i".

00:02:33.000 --> 00:02:37.000
This loop has exactly the same meaning as the one we had before.

00:02:37.000 --> 00:02:40.000
The previous one's better in every way.

00:02:40.000 --> 00:02:42.000
This is more complex.

00:02:42.000 --> 00:02:43.000
There's more code.

00:02:43.000 --> 00:02:45.000
This illustrates how we can use break.

00:02:45.000 --> 00:02:47.000
We wouldn't want to do it this wayÃ¢Â€Â”this is much worse than

00:02:47.000 --> 00:02:48.000
what we had before.

00:02:48.000 --> 00:02:50.000
We want to keep our code simple and easy to understand.

00:02:50.000 --> 00:02:53.000
We'll see once we get to the code for extracting all the links on the

00:02:53.000 --> 00:02:56.000
page that there are cases where it's easier to write the code using

00:02:56.000 --> 00:02:58.000
"break" than it is without that.

00:02:58.000 --> 00:03:01.000
Now we are going to have a quiz to see that you understand "while" loops,

00:03:01.000 --> 00:03:02.000
as well as "break."

00:03:02.000 --> 00:03:05.000
This is going to be a pretty tough quiz that you have to think

00:03:05.000 --> 00:03:09.000
carefully about how "while" loops are defined and what "break" means.

00:03:09.000 --> 00:03:13.000
The question is which of the following are always equivalent to "while,"

00:03:13.000 --> 00:03:19.000
any test expression "T", and a blockÃ¢Â€Â”which is any statement "S."

00:03:19.000 --> 00:03:23.000
"T" and "S" could be anything, and your question is to understand

00:03:23.000 --> 00:03:25.000
which of these are equivalent to that.

00:03:25.000 --> 00:03:27.000
Here are the four choices.

00:03:27.000 --> 00:03:30.000
The first one is a "while" loop with a nested "if."

00:03:30.000 --> 00:03:33.000
The second one is a "while" loop with the statement and a "break."

00:03:33.000 --> 00:03:36.000
The third choice is a "while" loop with a nested "if."

00:03:36.000 --> 00:03:40.000
The fourth choice is a "while" loop with a nested "if", an "else," and a "break."

00:03:40.000 --> 00:03:44.000
Your goal is to check all the ones that are equivalent to the

00:03:44.000 --> 00:03:48.000
"while T", "S"Ã¢Â€Â”where "T" and "S" can be any

00:03:48.000 --> 00:03:50.000
test expression in any statement.

